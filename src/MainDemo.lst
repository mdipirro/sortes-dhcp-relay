gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 12-12-2017  02:14:58
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:57 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _message
                                           	global _AN0String
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _DisplayIPValue
                                           	global _AppConfig
                                           	global _LowISR
                                           	global _HighISR
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _uitoa
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _StackInit
                                           	extern _StackTask
                                           	extern _TickInit
                                           	extern _TickGetDiv256
                                           	extern _TickUpdate
                                           	extern _strlcpy
                                           	extern _LCDTaskInit
                                           	extern _LCDTask
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _main_t_1_1	db	0x00, 0x00, 0x00, 0x00
                                           _main_dwLastIP_1_1	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           
                                           udata_MainDemo_0	udata
                                           _AN0String	res	8
                                           
                                           udata_MainDemo_1	udata
                                           _message	res	3
                                           
                                           udata_MainDemo_2	udata
                                           _AppConfig	res	51
                                           
                                           udata_MainDemo_3	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           udata_MainDemo_4	udata
                                           _DisplayIPValue_IPDigit_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x2_LowISR	code	0X000018
                                           ivec_0x2_LowISR:
000018   efc8     goto	0x7790              	GOTO	_LowISR
00001a   f03b
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x1_HighISR	code	0X000008
                                           ivec_0x1_HighISR:
000008   efae     goto	0x795c              	GOTO	_HighISR
00000a   f03c
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_MainDemo__main	code
                                           _main:
                                           ;	.line	112; MainDemo.c	InitializeBoard();
005126   ec00     call	0x7e00, 0           	CALL	_InitializeBoard
005128   f03f
                                           ;	.line	115; MainDemo.c	TickInit();
00512a   ec74     call	0x80e8, 0           	CALL	_TickInit
00512c   f040
                                           ;	.line	118; MainDemo.c	InitAppConfig();
00512e   ecf2     call	0x5de4, 0           	CALL	_InitAppConfig
005130   f02e
                                           ;	.line	122; MainDemo.c	StackInit();
005132   ecad     call	0x715a, 0           	CALL	_StackInit
005134   f038
                                           ;	.line	129; MainDemo.c	LCDTaskInit();
005136   ec28     call	0x7850, 0           	CALL	_LCDTaskInit
005138   f03c
                                           ;	.line	133; MainDemo.c	LCDInit();
00513a   ecc1     call	0x7f82, 0           	CALL	_LCDInit
00513c   f03f
                                           ;	.line	134; MainDemo.c	DelayMs(100);
00513e   0e10     movlw	0x10               	MOVLW	0x10
005140   6e00     movwf	0, 0               	MOVWF	r0x00
005142   0e98     movlw	0x98               	MOVLW	0x98
005144   6e01     movwf	0x1, 0             	MOVWF	r0x01
005146   0e02     movlw	0x2                	MOVLW	0x02
005148   6e02     movwf	0x2, 0             	MOVWF	r0x02
00514a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00115_DS_:
00514c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00514e   f004
005150   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
005152   f005
005154   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
005156   f006
005158   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00515a   f007
00515c   0eff     movlw	0xff               	MOVLW	0xff
00515e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005160   0eff     movlw	0xff               	MOVLW	0xff
005162   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005164   0eff     movlw	0xff               	MOVLW	0xff
005166   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005168   0eff     movlw	0xff               	MOVLW	0xff
00516a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00516c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00516e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
005170   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
005172   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
005174   e1eb     bnz	0x514c               	BNZ	_00115_DS_
                                           ;	.line	135; MainDemo.c	DisplayString (0,"Olimex"); //first arg is start position on 32 pos LCD
005176   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
005178   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00517a   0e77     movlw	0x77               	MOVLW	HIGH(__str_0)
00517c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00517e   0eea     movlw	0xea               	MOVLW	LOW(__str_0)
005180   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005182   0e00     movlw	0                  	MOVLW	0x00
005184   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005186   ec2a     call	0x6654, 0           	CALL	_DisplayString
005188   f033
00518a   0e04     movlw	0x4                	MOVLW	0x04
00518c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00129_DS_:
                                           ;	.line	155; MainDemo.c	nt =  TickGetDiv256();
00518e   ecbf     call	0x7d7e, 0           	CALL	_TickGetDiv256
005190   f03e
005192   6e00     movwf	0, 0               	MOVWF	r0x00
005194   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
005196   f001
005198   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00519a   f002
00519c   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00519e   f003
0051a0   0108     movlb	0x8                	BANKSEL	_main_t_1_1
                                           ;	.line	156; MainDemo.c	if((nt - t) >= (DWORD)(TICK_SECOND/1024ul))
0051a2   5175     movf	0x75, 0, 0x1        	MOVF	_main_t_1_1, W, B
0051a4   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
0051a6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0051a8   0108     movlb	0x8                	BANKSEL	(_main_t_1_1 + 1)
0051aa   5176     movf	0x76, 0, 0x1        	MOVF	(_main_t_1_1 + 1), W, B
0051ac   5801     subwfb	0x1, 0, 0         	SUBWFB	r0x01, W
0051ae   6e05     movwf	0x5, 0             	MOVWF	r0x05
0051b0   0108     movlb	0x8                	BANKSEL	(_main_t_1_1 + 2)
0051b2   5177     movf	0x77, 0, 0x1        	MOVF	(_main_t_1_1 + 2), W, B
0051b4   5802     subwfb	0x2, 0, 0         	SUBWFB	r0x02, W
0051b6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0051b8   0108     movlb	0x8                	BANKSEL	(_main_t_1_1 + 3)
0051ba   5178     movf	0x78, 0, 0x1        	MOVF	(_main_t_1_1 + 3), W, B
0051bc   5803     subwfb	0x3, 0, 0         	SUBWFB	r0x03, W
0051be   6e07     movwf	0x7, 0             	MOVWF	r0x07
0051c0   0e00     movlw	0                  	MOVLW	0x00
0051c2   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
0051c4   e108     bnz	0x51d6               	BNZ	_00139_DS_
0051c6   0e00     movlw	0                  	MOVLW	0x00
0051c8   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
0051ca   e105     bnz	0x51d6               	BNZ	_00139_DS_
0051cc   0e00     movlw	0                  	MOVLW	0x00
0051ce   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
0051d0   e102     bnz	0x51d6               	BNZ	_00139_DS_
0051d2   0e27     movlw	0x27               	MOVLW	0x27
0051d4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00139_DS_:
0051d6   e315     bnc	0x5202               	BNC	_00125_DS_
                                           ;	.line	158; MainDemo.c	t = nt;
0051d8   c000     movff	0, 0x875           	MOVFF	r0x00, _main_t_1_1
0051da   f875
0051dc   c001     movff	0x1, 0x876         	MOVFF	r0x01, (_main_t_1_1 + 1)
0051de   f876
0051e0   c002     movff	0x2, 0x877         	MOVFF	r0x02, (_main_t_1_1 + 2)
0051e2   f877
0051e4   c003     movff	0x3, 0x878         	MOVFF	r0x03, (_main_t_1_1 + 3)
0051e6   f878
                                           ;	.line	159; MainDemo.c	LED0_IO ^= 1;
0051e8   6a00     clrf	0, 0                	CLRF	r0x00
0051ea   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
0051ec   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0051ee   0e01     movlw	0x1                	MOVLW	0x01
0051f0   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
0051f2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0051f4   0b01     andlw	0x1                	ANDLW	0x01
0051f6   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0051f8   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
0051fa   0bfe     andlw	0xfe               	ANDLW	0xfe
0051fc   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
0051fe   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
005200   0004     clrwdt                   	clrwdt 
                                           _00125_DS_:
                                           ;	.line	166; MainDemo.c	StackTask();
005202   ece5     call	0x1bca, 0           	CALL	_StackTask
005204   f00d
                                           ;	.line	173; MainDemo.c	LCDTask();
005206   ec9c     call	0x4d38, 0           	CALL	_LCDTask
005208   f026
                                           ;	.line	181; MainDemo.c	if(dwLastIP != AppConfig.MyIPAddr.Val)
00520a   ce00     movff	0xe00, 0           	MOVFF	_AppConfig, r0x00
00520c   f000
00520e   ce01     movff	0xe01, 0x1         	MOVFF	(_AppConfig + 1), r0x01
005210   f001
005212   ce02     movff	0xe02, 0x2         	MOVFF	(_AppConfig + 2), r0x02
005214   f002
005216   ce03     movff	0xe03, 0x3         	MOVFF	(_AppConfig + 3), r0x03
005218   f003
00521a   0108     movlb	0x8                	BANKSEL	_main_dwLastIP_1_1
00521c   5179     movf	0x79, 0, 0x1        	MOVF	_main_dwLastIP_1_1, W, B
00521e   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
005220   e10d     bnz	0x523c               	BNZ	_00142_DS_
005222   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 1)
005224   517a     movf	0x7a, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 1), W, B
005226   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
005228   e109     bnz	0x523c               	BNZ	_00142_DS_
00522a   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 2)
00522c   517b     movf	0x7b, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 2), W, B
00522e   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
005230   e105     bnz	0x523c               	BNZ	_00142_DS_
005232   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 3)
005234   517c     movf	0x7c, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 3), W, B
005236   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
005238   e101     bnz	0x523c               	BNZ	_00142_DS_
00523a   d7a9     bra	0x518e               	BRA	_00129_DS_
                                           _00142_DS_:
                                           ;	.line	183; MainDemo.c	dwLastIP = AppConfig.MyIPAddr.Val;
00523c   c000     movff	0, 0x879           	MOVFF	r0x00, _main_dwLastIP_1_1
00523e   f879
005240   c001     movff	0x1, 0x87a         	MOVFF	r0x01, (_main_dwLastIP_1_1 + 1)
005242   f87a
005244   c002     movff	0x2, 0x87b         	MOVFF	r0x02, (_main_dwLastIP_1_1 + 2)
005246   f87b
005248   c003     movff	0x3, 0x87c         	MOVFF	r0x03, (_main_dwLastIP_1_1 + 3)
00524a   f87c
00524c   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 3)
                                           ;	.line	185; MainDemo.c	DisplayIPValue(dwLastIP); // must be a WORD: sdcc does not
00524e   517c     movf	0x7c, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 3), W, B
005250   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005252   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 2)
005254   517b     movf	0x7b, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 2), W, B
005256   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005258   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 1)
00525a   517a     movf	0x7a, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 1), W, B
00525c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00525e   0108     movlb	0x8                	BANKSEL	_main_dwLastIP_1_1
005260   5179     movf	0x79, 0, 0x1        	MOVF	_main_dwLastIP_1_1, W, B
005262   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005264   ec91     call	0x4522, 0           	CALL	_DisplayIPValue
005266   f022
005268   0e04     movlw	0x4                	MOVLW	0x04
00526a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00526c   d790     bra	0x518e               	BRA	_00129_DS_
00526e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitAppConfig	code
                                           _InitAppConfig:
                                           ;	.line	353; MainDemo.c	static void InitAppConfig(void)
005de4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005de6   ffe5
005de8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005dea   ffd9
005dec   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005dee   ffe5
005df0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005df2   ffe5
005df4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005df6   ffe5
005df8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005dfa   ffe5
005dfc   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	355; MainDemo.c	AppConfig.Flags.bIsDHCPEnabled = TRUE;
005dfe   8d2c     bsf	0x2c, 0x6, 0x1       	BSF	(_AppConfig + 44), 6, B
005e00   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	356; MainDemo.c	AppConfig.Flags.bInConfigMode = TRUE;
005e02   8f2c     bsf	0x2c, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
005e04   010e     movlb	0xe                	BANKSEL	(_AppConfig + 45)
                                           ;	.line	360; MainDemo.c	AppConfig.MyMACAddr.v[0] = 0;
005e06   6b2d     clrf	0x2d, 0x1           	CLRF	(_AppConfig + 45), B
                                           ;	.line	361; MainDemo.c	AppConfig.MyMACAddr.v[1] = 0x04;
005e08   0e04     movlw	0x4                	MOVLW	0x04
005e0a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 46)
005e0c   6f2e     movwf	0x2e, 0x1          	MOVWF	(_AppConfig + 46), B
                                           ;	.line	362; MainDemo.c	AppConfig.MyMACAddr.v[2] = 0xA3;
005e0e   0ea3     movlw	0xa3               	MOVLW	0xa3
005e10   010e     movlb	0xe                	BANKSEL	(_AppConfig + 47)
005e12   6f2f     movwf	0x2f, 0x1          	MOVWF	(_AppConfig + 47), B
                                           ;	.line	363; MainDemo.c	AppConfig.MyMACAddr.v[3] = 0x01;
005e14   0e01     movlw	0x1                	MOVLW	0x01
005e16   010e     movlb	0xe                	BANKSEL	(_AppConfig + 48)
005e18   6f30     movwf	0x30, 0x1          	MOVWF	(_AppConfig + 48), B
                                           ;	.line	364; MainDemo.c	AppConfig.MyMACAddr.v[4] = 0x02;
005e1a   0e02     movlw	0x2                	MOVLW	0x02
005e1c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 49)
005e1e   6f31     movwf	0x31, 0x1          	MOVWF	(_AppConfig + 49), B
                                           ;	.line	365; MainDemo.c	AppConfig.MyMACAddr.v[5] = 0x03;
005e20   0e03     movlw	0x3                	MOVLW	0x03
005e22   010e     movlb	0xe                	BANKSEL	(_AppConfig + 50)
005e24   6f32     movwf	0x32, 0x1          	MOVWF	(_AppConfig + 50), B
                                           ;	.line	368; MainDemo.c	AppConfig.MyIPAddr.Val = MY_DEFAULT_IP_ADDR_BYTE1 | 
005e26   0ec0     movlw	0xc0               	MOVLW	0xc0
005e28   010e     movlb	0xe                	BANKSEL	_AppConfig
005e2a   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
005e2c   0ea8     movlw	0xa8               	MOVLW	0xa8
005e2e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
005e30   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
005e32   0e61     movlw	0x61               	MOVLW	0x61
005e34   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
005e36   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
005e38   0e3c     movlw	0x3c               	MOVLW	0x3c
005e3a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
005e3c   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
                                           ;	.line	371; MainDemo.c	AppConfig.DefaultIPAddr.Val = AppConfig.MyIPAddr.Val;
005e3e   ce00     movff	0xe00, 0           	MOVFF	_AppConfig, r0x00
005e40   f000
005e42   ce01     movff	0xe01, 0x1         	MOVFF	(_AppConfig + 1), r0x01
005e44   f001
005e46   ce02     movff	0xe02, 0x2         	MOVFF	(_AppConfig + 2), r0x02
005e48   f002
005e4a   ce03     movff	0xe03, 0x3         	MOVFF	(_AppConfig + 3), r0x03
005e4c   f003
005e4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005e50   010e     movlb	0xe                	BANKSEL	(_AppConfig + 20)
005e52   6f14     movwf	0x14, 0x1          	MOVWF	(_AppConfig + 20), B
005e54   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005e56   010e     movlb	0xe                	BANKSEL	(_AppConfig + 21)
005e58   6f15     movwf	0x15, 0x1          	MOVWF	(_AppConfig + 21), B
005e5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005e5c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 22)
005e5e   6f16     movwf	0x16, 0x1          	MOVWF	(_AppConfig + 22), B
005e60   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005e62   010e     movlb	0xe                	BANKSEL	(_AppConfig + 23)
005e64   6f17     movwf	0x17, 0x1          	MOVWF	(_AppConfig + 23), B
005e66   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	372; MainDemo.c	AppConfig.MyMask.Val = MY_DEFAULT_MASK_BYTE1 | 
005e68   6904     setf	0x4, 0x1            	SETF	(_AppConfig + 4), B
005e6a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
005e6c   6905     setf	0x5, 0x1            	SETF	(_AppConfig + 5), B
005e6e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
005e70   6906     setf	0x6, 0x1            	SETF	(_AppConfig + 6), B
005e72   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
005e74   6b07     clrf	0x7, 0x1            	CLRF	(_AppConfig + 7), B
                                           ;	.line	375; MainDemo.c	AppConfig.DefaultMask.Val = AppConfig.MyMask.Val;
005e76   ce04     movff	0xe04, 0           	MOVFF	(_AppConfig + 4), r0x00
005e78   f000
005e7a   ce05     movff	0xe05, 0x1         	MOVFF	(_AppConfig + 5), r0x01
005e7c   f001
005e7e   ce06     movff	0xe06, 0x2         	MOVFF	(_AppConfig + 6), r0x02
005e80   f002
005e82   ce07     movff	0xe07, 0x3         	MOVFF	(_AppConfig + 7), r0x03
005e84   f003
005e86   5000     movf	0, 0, 0             	MOVF	r0x00, W
005e88   010e     movlb	0xe                	BANKSEL	(_AppConfig + 24)
005e8a   6f18     movwf	0x18, 0x1          	MOVWF	(_AppConfig + 24), B
005e8c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005e8e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 25)
005e90   6f19     movwf	0x19, 0x1          	MOVWF	(_AppConfig + 25), B
005e92   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005e94   010e     movlb	0xe                	BANKSEL	(_AppConfig + 26)
005e96   6f1a     movwf	0x1a, 0x1          	MOVWF	(_AppConfig + 26), B
005e98   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005e9a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 27)
005e9c   6f1b     movwf	0x1b, 0x1          	MOVWF	(_AppConfig + 27), B
                                           ;	.line	376; MainDemo.c	AppConfig.MyGateway.Val = MY_DEFAULT_GATE_BYTE1 | 
005e9e   0ec0     movlw	0xc0               	MOVLW	0xc0
005ea0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 8)
005ea2   6f08     movwf	0x8, 0x1           	MOVWF	(_AppConfig + 8), B
005ea4   0ea8     movlw	0xa8               	MOVLW	0xa8
005ea6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 9)
005ea8   6f09     movwf	0x9, 0x1           	MOVWF	(_AppConfig + 9), B
005eaa   0e61     movlw	0x61               	MOVLW	0x61
005eac   010e     movlb	0xe                	BANKSEL	(_AppConfig + 10)
005eae   6f0a     movwf	0xa, 0x1           	MOVWF	(_AppConfig + 10), B
005eb0   0e01     movlw	0x1                	MOVLW	0x01
005eb2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 11)
005eb4   6f0b     movwf	0xb, 0x1           	MOVWF	(_AppConfig + 11), B
                                           ;	.line	379; MainDemo.c	AppConfig.PrimaryDNSServer.Val = MY_DEFAULT_PRIMARY_DNS_BYTE1 | 
005eb6   0ec0     movlw	0xc0               	MOVLW	0xc0
005eb8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 12)
005eba   6f0c     movwf	0xc, 0x1           	MOVWF	(_AppConfig + 12), B
005ebc   0ea8     movlw	0xa8               	MOVLW	0xa8
005ebe   010e     movlb	0xe                	BANKSEL	(_AppConfig + 13)
005ec0   6f0d     movwf	0xd, 0x1           	MOVWF	(_AppConfig + 13), B
005ec2   0e61     movlw	0x61               	MOVLW	0x61
005ec4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 14)
005ec6   6f0e     movwf	0xe, 0x1           	MOVWF	(_AppConfig + 14), B
005ec8   0e01     movlw	0x1                	MOVLW	0x01
005eca   010e     movlb	0xe                	BANKSEL	(_AppConfig + 15)
005ecc   6f0f     movwf	0xf, 0x1           	MOVWF	(_AppConfig + 15), B
005ece   010e     movlb	0xe                	BANKSEL	(_AppConfig + 16)
                                           ;	.line	383; MainDemo.c	AppConfig.SecondaryDNSServer.Val = MY_DEFAULT_SECONDARY_DNS_BYTE1 | 
005ed0   6b10     clrf	0x10, 0x1           	CLRF	(_AppConfig + 16), B
005ed2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 17)
005ed4   6b11     clrf	0x11, 0x1           	CLRF	(_AppConfig + 17), B
005ed6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 18)
005ed8   6b12     clrf	0x12, 0x1           	CLRF	(_AppConfig + 18), B
005eda   010e     movlb	0xe                	BANKSEL	(_AppConfig + 19)
005edc   6b13     clrf	0x13, 0x1           	CLRF	(_AppConfig + 19), B
005ede   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005ee0   f003
005ee2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005ee4   f002
005ee6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005ee8   f001
005eea   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005eec   f000
005eee   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005ef0   ffd9
005ef2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitializeBoard	code
                                           _InitializeBoard:
                                           ;	.line	299; MainDemo.c	static void InitializeBoard(void)
007e00   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007e02   ffe5
007e04   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007e06   ffd9
                                           ;	.line	302; MainDemo.c	LED0_TRIS = 0;  //LED0
007e08   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	303; MainDemo.c	LED1_TRIS = 0;  //LED1
007e0a   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	304; MainDemo.c	LED2_TRIS = 0;  //LED2
007e0c   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	305; MainDemo.c	LED3_TRIS = 0;  //LED_LCD1
007e0e   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	306; MainDemo.c	LED4_TRIS = 0;  //LED_LCD2
007e10   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	307; MainDemo.c	LED5_TRIS = 0;  //LED5=RELAY1
007e12   9e98     bcf	0x98, 0x7, 0         	BCF	_TRISGbits, 7
                                           ;	.line	308; MainDemo.c	LED6_TRIS = 0;  //LED7=RELAY2
007e14   9c98     bcf	0x98, 0x6, 0         	BCF	_TRISGbits, 6
                                           ;	.line	313; MainDemo.c	LED_PUT(0x00);  //turn off LED0 - LED2
007e16   0ef8     movlw	0xf8               	MOVLW	0xf8
007e18   1691     andwf	0x91, 0x1, 0       	ANDWF	_LATJ, F
                                           ;	.line	314; MainDemo.c	RELAY_PUT(0x00); //turn relays off to save power
007e1a   0e3f     movlw	0x3f               	MOVLW	0x3f
007e1c   168f     andwf	0x8f, 0x1, 0       	ANDWF	_LATG, F
                                           ;	.line	318; MainDemo.c	OSCTUNE = 0x00;
007e1e   6a9b     clrf	0x9b, 0             	CLRF	_OSCTUNE
                                           ;	.line	325; MainDemo.c	if(OSCCONbits.IDLEN) //IDLEN = 0x80; 0x02 selects the primary clock
007e20   aed3     btfss	0xd3, 0x7, 0       	BTFSS	_OSCCONbits, 7
007e22   d003     bra	0x7e2a               	BRA	_00212_DS_
                                           ;	.line	326; MainDemo.c	OSCCON = 0x82;
007e24   0e82     movlw	0x82               	MOVLW	0x82
007e26   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
007e28   d002     bra	0x7e2e               	BRA	_00213_DS_
                                           _00212_DS_:
                                           ;	.line	328; MainDemo.c	OSCCON = 0x02;
007e2a   0e02     movlw	0x2                	MOVLW	0x02
007e2c   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
                                           _00213_DS_:
                                           ;	.line	331; MainDemo.c	RCONbits.IPEN = 1;		// Enable interrupt priorities
007e2e   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	332; MainDemo.c	INTCONbits.GIEH = 1;
007e30   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	333; MainDemo.c	INTCONbits.GIEL = 1;
007e32   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
007e34   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007e36   ffd9
007e38   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayIPValue	code
                                           _DisplayIPValue:
                                           ;	.line	241; MainDemo.c	void DisplayIPValue(DWORD IPdw) // 32 bits
004522   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004524   ffe5
004526   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004528   ffd9
00452a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00452c   ffe5
00452e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004530   ffe5
004532   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004534   ffe5
004536   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004538   ffe5
00453a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00453c   ffe5
00453e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004540   ffe5
004542   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004544   ffe5
004546   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004548   ffe5
00454a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00454c   ffe5
00454e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004550   ffe5
004552   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004554   ffe5
004556   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
004558   ffe5
00455a   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00455c   ffe5
00455e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
004560   ffe5
004562   0e02     movlw	0x2                	MOVLW	0x02
004564   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004566   f000
004568   0e03     movlw	0x3                	MOVLW	0x03
00456a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00456c   f001
00456e   0e04     movlw	0x4                	MOVLW	0x04
004570   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004572   f002
004574   0e05     movlw	0x5                	MOVLW	0x05
004576   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004578   f003
                                           ;	.line	249; MainDemo.c	BYTE LCDPos=16;  //write on second line of LCD
00457a   0e10     movlw	0x10               	MOVLW	0x10
00457c   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	254; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
00457e   6a05     clrf	0x5, 0              	CLRF	r0x05
004580   6a06     clrf	0x6, 0              	CLRF	r0x06
004582   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00177_DS_:
004584   0e04     movlw	0x4                	MOVLW	0x04
004586   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
004588   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00458a   d081     bra	0x468e               	BRA	_00180_DS_
                                           ;	.line	257; MainDemo.c	IP_field =(WORD)(IPdw>>(i*8))&0xff;      //ML
00458c   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
00458e   f008
004590   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
004592   f009
004594   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
004596   f00a
004598   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
00459a   f00b
00459c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00459e   e011     bz	0x45c2                	BZ	_00198_DS_
0045a0   e609     bn	0x45b4                	BN	_00201_DS_
0045a2   6ce8     negf	0xe8, 0             	NEGF	WREG
0045a4   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00199_DS_:
0045a6   320b     rrcf	0xb, 0x1, 0         	RRCF	r0x0b, F
0045a8   320a     rrcf	0xa, 0x1, 0         	RRCF	r0x0a, F
0045aa   3209     rrcf	0x9, 0x1, 0         	RRCF	r0x09, F
0045ac   3208     rrcf	0x8, 0x1, 0         	RRCF	r0x08, F
0045ae   0f01     addlw	0x1                	ADDLW	0x01
0045b0   e3fa     bnc	0x45a6               	BNC	_00199_DS_
0045b2   d007     bra	0x45c2               	BRA	_00198_DS_
                                           _00201_DS_:
0045b4   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00200_DS_:
0045b6   3608     rlcf	0x8, 0x1, 0         	RLCF	r0x08, F
0045b8   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
0045ba   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
0045bc   360b     rlcf	0xb, 0x1, 0         	RLCF	r0x0b, F
0045be   0f01     addlw	0x1                	ADDLW	0x01
0045c0   e3fa     bnc	0x45b6               	BNC	_00200_DS_
                                           _00198_DS_:
0045c2   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	258; MainDemo.c	uitoa(IP_field, IPDigit, radix);      //ML
0045c4   0e0a     movlw	0xa                	MOVLW	0x0a
0045c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045c8   0e0a     movlw	0xa                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
0045ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045cc   0e1c     movlw	0x1c               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
0045ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045d0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0045d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045d4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0045d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045d8   ecf4     call	0x75e8, 0           	CALL	_uitoa
0045da   f03a
0045dc   0e05     movlw	0x5                	MOVLW	0x05
0045de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	263; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
0045e0   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0045e2   f008
0045e4   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00183_DS_:
0045e6   0e0a     movlw	0xa                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
0045e8   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0045ea   0e1c     movlw	0x1c               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
0045ec   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0045ee   0e80     movlw	0x80               	MOVLW	0x80
0045f0   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0045f2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0045f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045f6   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0045f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045fa   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0045fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045fe   ec39     call	0x7472, 0           	CALL	_strlen
004600   f03a
004602   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
004604   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
004606   f00b
004608   0e03     movlw	0x3                	MOVLW	0x03
00460a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00460c   c009     movff	0x9, 0xc           	MOVFF	r0x09, r0x0c
00460e   f00c
004610   6a0d     clrf	0xd, 0              	CLRF	r0x0d
004612   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
004614   0f80     addlw	0x80               	ADDLW	0x80
004616   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
004618   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00461a   0f80     addlw	0x80               	ADDLW	0x80
00461c   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
00461e   e102     bnz	0x4624               	BNZ	_00203_DS_
004620   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
004622   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
                                           _00203_DS_:
004624   e21c     bc	0x465e                	BC	_00195_DS_
                                           ;	.line	265; MainDemo.c	LCDText[LCDPos++] = IPDigit[j];
004626   c008     movff	0x8, 0xa           	MOVFF	r0x08, r0x0a
004628   f00a
00462a   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
00462c   6a0b     clrf	0xb, 0              	CLRF	r0x0b
00462e   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
004630   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
004632   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004634   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
004636   0e1c     movlw	0x1c               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
004638   2409     addwf	0x9, 0, 0          	ADDWF	r0x09, W
00463a   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00463c   6a0d     clrf	0xd, 0              	CLRF	r0x0d
00463e   0e0a     movlw	0xa                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
004640   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
004642   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
004644   ffe9
004646   c00d     movff	0xd, 0xfea         	MOVFF	r0x0d, FSR0H
004648   ffea
00464a   cfef     movff	0xfef, 0xc         	MOVFF	INDF0, r0x0c
00464c   f00c
00464e   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
004650   ffe9
004652   c00b     movff	0xb, 0xfea         	MOVFF	r0x0b, FSR0H
004654   ffea
004656   c00c     movff	0xc, 0xfef         	MOVFF	r0x0c, INDF0
004658   ffef
                                           ;	.line	263; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
00465a   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
00465c   d7c4     bra	0x45e6               	BRA	_00183_DS_
                                           _00195_DS_:
00465e   c008     movff	0x8, 0x4           	MOVFF	r0x08, r0x04
004660   f004
                                           ;	.line	267; MainDemo.c	if(i == sizeof(IP_ADDR)-1)
004662   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004664   0a03     xorlw	0x3                	XORLW	0x03
004666   e013     bz	0x468e                	BZ	_00180_DS_
                                           ;	.line	269; MainDemo.c	LCDText[LCDPos++] = '.';
004668   2808     incf	0x8, 0, 0           	INCF	r0x08, W
00466a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00466c   6a09     clrf	0x9, 0              	CLRF	r0x09
00466e   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
004670   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
004672   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004674   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
004676   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
004678   ffe9
00467a   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
00467c   ffea
00467e   0e2e     movlw	0x2e               	MOVLW	0x2e
004680   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	254; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
004682   0e08     movlw	0x8                	MOVLW	0x08
004684   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
004686   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004688   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
00468a   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00468c   d77b     bra	0x4584               	BRA	_00177_DS_
                                           _00180_DS_:
                                           ;	.line	272; MainDemo.c	if(LCDPos < 32u)
00468e   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
004690   f000
004692   6a01     clrf	0x1, 0              	CLRF	r0x01
004694   0e00     movlw	0                  	MOVLW	0x00
004696   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004698   e102     bnz	0x469e               	BNZ	_00206_DS_
00469a   0e20     movlw	0x20               	MOVLW	0x20
00469c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00206_DS_:
00469e   e20b     bc	0x46b6                	BC	_00182_DS_
                                           ;	.line	273; MainDemo.c	LCDText[LCDPos] = 0;
0046a0   6a00     clrf	0, 0                	CLRF	r0x00
0046a2   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
0046a4   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0046a6   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0046a8   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
0046aa   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0046ac   ffe9
0046ae   c000     movff	0, 0xfea           	MOVFF	r0x00, FSR0H
0046b0   ffea
0046b2   0e00     movlw	0                  	MOVLW	0x00
0046b4   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00182_DS_:
                                           ;	.line	274; MainDemo.c	LCDUpdate();
0046b6   ecf1     call	0x7be2, 0           	CALL	_LCDUpdate
0046b8   f03d
0046ba   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0046bc   f00d
0046be   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0046c0   f00c
0046c2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0046c4   f00b
0046c6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0046c8   f00a
0046ca   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0046cc   f009
0046ce   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0046d0   f008
0046d2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0046d4   f007
0046d6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0046d8   f006
0046da   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0046dc   f005
0046de   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0046e0   f004
0046e2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0046e4   f003
0046e6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0046e8   f002
0046ea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0046ec   f001
0046ee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0046f0   f000
0046f2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0046f4   ffd9
0046f6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayString	code
                                           _DisplayString:
                                           ;	.line	226; MainDemo.c	void DisplayString(BYTE pos, char* text)
006654   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006656   ffe5
006658   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00665a   ffd9
00665c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00665e   ffe5
006660   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006662   ffe5
006664   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006666   ffe5
006668   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00666a   ffe5
00666c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00666e   ffe5
006670   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006672   ffe5
006674   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006676   ffe5
006678   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00667a   ffe5
00667c   0e02     movlw	0x2                	MOVLW	0x02
00667e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006680   f000
006682   0e03     movlw	0x3                	MOVLW	0x03
006684   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006686   f001
006688   0e04     movlw	0x4                	MOVLW	0x04
00668a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00668c   f002
00668e   0e05     movlw	0x5                	MOVLW	0x05
006690   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006692   f003
                                           ;	.line	228; MainDemo.c	BYTE l= strlen(text)+1;
006694   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006696   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006698   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00669a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00669c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00669e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066a0   ec39     call	0x7472, 0           	CALL	_strlen
0066a2   f03a
0066a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0066a6   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0066a8   f005
0066aa   0e03     movlw	0x3                	MOVLW	0x03
0066ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0066ae   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	229; MainDemo.c	BYTE max= 32-pos;
0066b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0066b2   0820     sublw	0x20               	SUBLW	0x20
0066b4   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	230; MainDemo.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0066b6   6a06     clrf	0x6, 0              	CLRF	r0x06
0066b8   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
0066ba   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0066bc   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0066be   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0066c0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0066c2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0066c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0066c6   6e00     movwf	0, 0               	MOVWF	r0x00
0066c8   0e80     movlw	0x80               	MOVLW	0x80
0066ca   6e07     movwf	0x7, 0             	MOVWF	r0x07
0066cc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0066ce   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0066d0   e302     bnc	0x66d6               	BNC	_00168_DS_
0066d2   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
0066d4   f004
                                           _00168_DS_:
0066d6   6a05     clrf	0x5, 0              	CLRF	r0x05
0066d8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0066da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066dc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0066de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066e0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0066e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066e4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0066e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066e8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0066ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066ec   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0066ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066f0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0066f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0066f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0066f8   ecb9     call	0x3b72, 0           	CALL	_strlcpy
0066fa   f01d
0066fc   0e08     movlw	0x8                	MOVLW	0x08
0066fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	231; MainDemo.c	LCDUpdate();
006700   ecf1     call	0x7be2, 0           	CALL	_LCDUpdate
006702   f03d
006704   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006706   f007
006708   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00670a   f006
00670c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00670e   f005
006710   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006712   f004
006714   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006716   f003
006718   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00671a   f002
00671c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00671e   f001
006720   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006722   f000
006724   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006726   ffd9
006728   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	204; MainDemo.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
00574c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00574e   ffe5
005750   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005752   ffd9
005754   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005756   ffe5
005758   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00575a   ffe5
00575c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00575e   ffe5
005760   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005762   ffe5
005764   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005766   ffe5
005768   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00576a   ffe5
00576c   0e02     movlw	0x2                	MOVLW	0x02
00576e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005770   f000
005772   0e03     movlw	0x3                	MOVLW	0x03
005774   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005776   f001
005778   0e04     movlw	0x4                	MOVLW	0x04
00577a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00577c   f002
                                           ;	.line	212; MainDemo.c	ultoa(w, WDigit, radix);      
00577e   6a03     clrf	0x3, 0              	CLRF	r0x03
005780   6a04     clrf	0x4, 0              	CLRF	r0x04
005782   0e0a     movlw	0xa                	MOVLW	0x0a
005784   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005786   0e0a     movlw	0xa                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
005788   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00578a   0e10     movlw	0x10               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
00578c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00578e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005790   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005792   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005794   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005796   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005798   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00579a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00579c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00579e   ec7c     call	0x46f8, 0           	CALL	_ultoa
0057a0   f023
0057a2   0e07     movlw	0x7                	MOVLW	0x07
0057a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	213; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
0057a6   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00149_DS_:
0057a8   0e0a     movlw	0xa                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0057aa   6e03     movwf	0x3, 0             	MOVWF	r0x03
0057ac   0e10     movlw	0x10               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0057ae   6e02     movwf	0x2, 0             	MOVWF	r0x02
0057b0   0e80     movlw	0x80               	MOVLW	0x80
0057b2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0057b4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0057b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057b8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0057ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0057be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057c0   ec39     call	0x7472, 0           	CALL	_strlen
0057c2   f03a
0057c4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0057c6   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0057c8   f003
0057ca   0e03     movlw	0x3                	MOVLW	0x03
0057cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0057ce   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
0057d0   f004
0057d2   6a05     clrf	0x5, 0              	CLRF	r0x05
0057d4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0057d6   0f80     addlw	0x80               	ADDLW	0x80
0057d8   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
0057da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0057dc   0f80     addlw	0x80               	ADDLW	0x80
0057de   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
0057e0   e102     bnz	0x57e6               	BNZ	_00159_DS_
0057e2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0057e4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00159_DS_:
0057e6   e21c     bc	0x5820                	BC	_00152_DS_
                                           ;	.line	215; MainDemo.c	LCDText[LCDPos++] = WDigit[j];
0057e8   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0057ea   f002
0057ec   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0057ee   6a03     clrf	0x3, 0              	CLRF	r0x03
0057f0   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
0057f2   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
0057f4   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0057f6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0057f8   0e10     movlw	0x10               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0057fa   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0057fc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0057fe   6a05     clrf	0x5, 0              	CLRF	r0x05
005800   0e0a     movlw	0xa                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
005802   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
005804   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
005806   ffe9
005808   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
00580a   ffea
00580c   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
00580e   f004
005810   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
005812   ffe9
005814   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
005816   ffea
005818   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
00581a   ffef
                                           ;	.line	213; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
00581c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00581e   d7c4     bra	0x57a8               	BRA	_00149_DS_
                                           _00152_DS_:
                                           ;	.line	217; MainDemo.c	if(LCDPos < 32u)
005820   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005822   f001
005824   6a02     clrf	0x2, 0              	CLRF	r0x02
005826   0e00     movlw	0                  	MOVLW	0x00
005828   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00582a   e102     bnz	0x5830               	BNZ	_00160_DS_
00582c   0e20     movlw	0x20               	MOVLW	0x20
00582e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00160_DS_:
005830   e20b     bc	0x5848                	BC	_00148_DS_
                                           ;	.line	218; MainDemo.c	LCDText[LCDPos] = 0;
005832   6a01     clrf	0x1, 0              	CLRF	r0x01
005834   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
005836   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005838   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
00583a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00583c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00583e   ffe9
005840   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
005842   ffea
005844   0e00     movlw	0                  	MOVLW	0x00
005846   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00148_DS_:
                                           ;	.line	219; MainDemo.c	LCDUpdate();
005848   ecf1     call	0x7be2, 0           	CALL	_LCDUpdate
00584a   f03d
00584c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00584e   f005
005850   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005852   f004
005854   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005856   f003
005858   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00585a   f002
00585c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00585e   f001
005860   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005862   f000
005864   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005866   ffd9
005868   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__HighISR	code
                                           _HighISR:
                                           ;	.line	74; MainDemo.c	void HighISR(void) __interrupt(1) //ML for sdcc        
00795c   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00795e   ffe5
007960   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
007962   ffe5
007964   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
007966   ffe5
007968   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00796a   ffe5
00796c   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00796e   ffe5
007970   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
007972   ffe5
007974   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
007976   ffe5
007978   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00797a   ffe5
00797c   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00797e   ffe5
007980   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007982   ffe5
007984   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007986   ffd9
                                           ;	.line	81; MainDemo.c	}
007988   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00798a   ffd9
00798c   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
00798e   fffb
007990   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
007992   fffa
007994   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
007996   ffea
007998   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00799a   ffe9
00799c   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
00799e   fff4
0079a0   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0079a2   fff3
0079a4   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0079a6   ffe0
0079a8   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0079aa   ffd8
0079ac   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0079ae   ffe8
0079b0   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__LowISR	code
                                           _LowISR:
                                           ;	.line	54; MainDemo.c	void LowISR(void) __interrupt (2) //ML for sdcc
007790   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
007792   ffe5
007794   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
007796   ffe5
007798   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00779a   ffe5
00779c   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00779e   ffe5
0077a0   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
0077a2   ffe5
0077a4   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
0077a6   ffe5
0077a8   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
0077aa   ffe5
0077ac   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
0077ae   ffe5
0077b0   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
0077b2   ffe5
0077b4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0077b6   ffe5
0077b8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0077ba   ffd9
                                           ;	.line	60; MainDemo.c	TickUpdate();
0077bc   ec97     call	0x7f2e, 0           	CALL	_TickUpdate
0077be   f03f
0077c0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0077c2   ffd9
0077c4   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0077c6   fffb
0077c8   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0077ca   fffa
0077cc   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0077ce   ffea
0077d0   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0077d2   ffe9
0077d4   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0077d6   fff4
0077d8   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0077da   fff3
0077dc   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0077de   ffe0
0077e0   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0077e2   ffd8
0077e4   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0077e6   ffe8
0077e8   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0077ea   6c4f     negf	0x4f, 0             	DB	0x4f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x00
0077ec   6d69     negf	0x69, 0x1           
0077ee   7865     btg	0x65, 0x4, 0         
0077f0   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1812 (0x0714) bytes ( 1.38%)
                                           ;           	  906 (0x038a) words
                                           ; udata size:	   72 (0x0048) bytes ( 1.88%)
                                           ; access size:	   14 (0x000e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:57 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:57 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ARPInit
                                           	global _ARPProcess
                                           	global _ARPResolve
                                           	global _ARPIsResolved
                                           	global _SwapARPPacket
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrput1
                                           	extern __gptrput4
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _swaps
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACPutHeader
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _ARPProcess_smARP_1_1	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_ARP_0	udata
                                           _Cache	res	10
                                           
                                           udata_ARP_1	udata
                                           _ARPProcess_Target_1_1	res	10
                                           
                                           udata_ARP_2	udata
                                           _ARPProcess_packet_1_1	res	28
                                           
                                           udata_ARP_3	udata
                                           _ARPResolve_packet_1_1	res	28
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ARP__SwapARPPacket	code
                                           _SwapARPPacket:
                                           ;	.line	412; TCPIP_Stack/ARP.c	void SwapARPPacket(ARP_PACKET* p)
0053b0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0053b2   ffe5
0053b4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0053b6   ffd9
0053b8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0053ba   ffe5
0053bc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0053be   ffe5
0053c0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0053c2   ffe5
0053c4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0053c6   ffe5
0053c8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0053ca   ffe5
0053cc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0053ce   ffe5
0053d0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0053d2   ffe5
0053d4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0053d6   ffe5
0053d8   0e02     movlw	0x2                	MOVLW	0x02
0053da   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0053dc   f000
0053de   0e03     movlw	0x3                	MOVLW	0x03
0053e0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0053e2   f001
0053e4   0e04     movlw	0x4                	MOVLW	0x04
0053e6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0053e8   f002
                                           ;	.line	414; TCPIP_Stack/ARP.c	p->HardwareType     = swaps(p->HardwareType);
0053ea   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0053ec   ffe9
0053ee   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0053f0   fff3
0053f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0053f4   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
0053f6   f03f
0053f8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0053fa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0053fc   f004
0053fe   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005400   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005402   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005406   ec03     call	0x7a06, 0           	CALL	_swaps
005408   f03d
00540a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00540c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00540e   f004
005410   0e02     movlw	0x2                	MOVLW	0x02
005412   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005414   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005416   ffe5
005418   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00541a   fff4
00541c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00541e   ffe9
005420   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005422   fff3
005424   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005426   ec9b     call	0x8136, 0           	CALL	__gptrput2
005428   f040
                                           ;	.line	415; TCPIP_Stack/ARP.c	p->Protocol         = swaps(p->Protocol);
00542a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00542c   0f02     addlw	0x2                	ADDLW	0x02
00542e   6e03     movwf	0x3, 0             	MOVWF	r0x03
005430   0e00     movlw	0                  	MOVLW	0x00
005432   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005434   6e04     movwf	0x4, 0             	MOVWF	r0x04
005436   0e00     movlw	0                  	MOVLW	0x00
005438   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00543a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00543c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00543e   ffe9
005440   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005442   fff3
005444   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005446   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
005448   f03f
00544a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00544c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00544e   f007
005450   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005452   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005454   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005456   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005458   ec03     call	0x7a06, 0           	CALL	_swaps
00545a   f03d
00545c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00545e   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
005460   f007
005462   0e02     movlw	0x2                	MOVLW	0x02
005464   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005466   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005468   ffe5
00546a   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
00546c   fff4
00546e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005470   ffe9
005472   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005474   fff3
005476   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005478   ec9b     call	0x8136, 0           	CALL	__gptrput2
00547a   f040
                                           ;	.line	416; TCPIP_Stack/ARP.c	p->Operation        = swaps(p->Operation);
00547c   0e06     movlw	0x6                	MOVLW	0x06
00547e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005480   0e00     movlw	0                  	MOVLW	0x00
005482   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005484   0e00     movlw	0                  	MOVLW	0x00
005486   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005488   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00548a   ffe9
00548c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00548e   fff3
005490   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005492   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
005494   f03f
005496   6e03     movwf	0x3, 0             	MOVWF	r0x03
005498   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00549a   f004
00549c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00549e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0054a0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0054a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0054a4   ec03     call	0x7a06, 0           	CALL	_swaps
0054a6   f03d
0054a8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0054aa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0054ac   f004
0054ae   0e02     movlw	0x2                	MOVLW	0x02
0054b0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0054b2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0054b4   ffe5
0054b6   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0054b8   fff4
0054ba   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0054bc   ffe9
0054be   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0054c0   fff3
0054c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0054c4   ec9b     call	0x8136, 0           	CALL	__gptrput2
0054c6   f040
0054c8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0054ca   f007
0054cc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0054ce   f006
0054d0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0054d2   f005
0054d4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0054d6   f004
0054d8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0054da   f003
0054dc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0054de   f002
0054e0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0054e2   f001
0054e4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0054e6   f000
0054e8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0054ea   ffd9
0054ec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPIsResolved	code
                                           _ARPIsResolved:
                                           ;	.line	377; TCPIP_Stack/ARP.c	BOOL ARPIsResolved(IP_ADDR* IPAddr, MAC_ADDR* MACAddr)
004bd4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004bd6   ffe5
004bd8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004bda   ffd9
004bdc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004bde   ffe5
004be0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004be2   ffe5
004be4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004be6   ffe5
004be8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004bea   ffe5
004bec   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004bee   ffe5
004bf0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004bf2   ffe5
004bf4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004bf6   ffe5
004bf8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004bfa   ffe5
004bfc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004bfe   ffe5
004c00   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004c02   ffe5
004c04   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004c06   ffe5
004c08   0e02     movlw	0x2                	MOVLW	0x02
004c0a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004c0c   f000
004c0e   0e03     movlw	0x3                	MOVLW	0x03
004c10   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004c12   f001
004c14   0e04     movlw	0x4                	MOVLW	0x04
004c16   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004c18   f002
004c1a   0e05     movlw	0x5                	MOVLW	0x05
004c1c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004c1e   f003
004c20   0e06     movlw	0x6                	MOVLW	0x06
004c22   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
004c24   f004
004c26   0e07     movlw	0x7                	MOVLW	0x07
004c28   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
004c2a   f005
                                           ;	.line	379; TCPIP_Stack/ARP.c	if((Cache.IPAddr.Val == IPAddr->Val) || 
004c2c   ce75     movff	0xe75, 0x6         	MOVFF	_Cache, r0x06
004c2e   f006
004c30   ce76     movff	0xe76, 0x7         	MOVFF	(_Cache + 1), r0x07
004c32   f007
004c34   ce77     movff	0xe77, 0x8         	MOVFF	(_Cache + 2), r0x08
004c36   f008
004c38   ce78     movff	0xe78, 0x9         	MOVFF	(_Cache + 3), r0x09
004c3a   f009
004c3c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004c3e   ffe9
004c40   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004c42   fff3
004c44   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004c46   ece0     call	0x7dc0, 0           	CALL	__gptrget4
004c48   f03e
004c4a   6e00     movwf	0, 0               	MOVWF	r0x00
004c4c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
004c4e   f001
004c50   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
004c52   f002
004c54   cfe9     movff	0xfe9, 0xa         	MOVFF	FSR0L, r0x0a
004c56   f00a
004c58   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004c5a   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
004c5c   e109     bnz	0x4c70               	BNZ	_00180_DS_
004c5e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004c60   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
004c62   e106     bnz	0x4c70               	BNZ	_00180_DS_
004c64   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004c66   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
004c68   e103     bnz	0x4c70               	BNZ	_00180_DS_
004c6a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004c6c   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
004c6e   e02e     bz	0x4ccc                	BZ	_00171_DS_
                                           _00180_DS_:
                                           ;	.line	380; TCPIP_Stack/ARP.c	((Cache.IPAddr.Val == AppConfig.MyGateway.Val) && 
004c70   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004c72   010e     movlb	0xe                	BANKSEL	(_AppConfig + 8)
004c74   1908     xorwf	0x8, 0, 0x1        	XORWF	(_AppConfig + 8), W, B
004c76   e10c     bnz	0x4c90               	BNZ	_00181_DS_
004c78   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004c7a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 9)
004c7c   1909     xorwf	0x9, 0, 0x1        	XORWF	(_AppConfig + 9), W, B
004c7e   e108     bnz	0x4c90               	BNZ	_00181_DS_
004c80   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004c82   010e     movlb	0xe                	BANKSEL	(_AppConfig + 10)
004c84   190a     xorwf	0xa, 0, 0x1        	XORWF	(_AppConfig + 10), W, B
004c86   e104     bnz	0x4c90               	BNZ	_00181_DS_
004c88   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004c8a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 11)
004c8c   190b     xorwf	0xb, 0, 0x1        	XORWF	(_AppConfig + 11), W, B
004c8e   e001     bz	0x4c92                	BZ	_00182_DS_
                                           _00181_DS_:
004c90   d039     bra	0x4d04               	BRA	_00172_DS_
                                           _00182_DS_:
004c92   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	381; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val)))
004c94   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
004c96   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
004c98   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
004c9a   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
004c9c   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
004c9e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
004ca0   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
004ca2   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
004ca4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
004ca6   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
004ca8   1a0a     xorwf	0xa, 0x1, 0        	XORWF	r0x0a, F
004caa   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
004cac   5104     movf	0x4, 0, 0x1         	MOVF	(_AppConfig + 4), W, B
004cae   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
004cb0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
004cb2   5105     movf	0x5, 0, 0x1         	MOVF	(_AppConfig + 5), W, B
004cb4   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
004cb6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
004cb8   5106     movf	0x6, 0, 0x1         	MOVF	(_AppConfig + 6), W, B
004cba   1602     andwf	0x2, 0x1, 0        	ANDWF	r0x02, F
004cbc   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
004cbe   5107     movf	0x7, 0, 0x1         	MOVF	(_AppConfig + 7), W, B
004cc0   160a     andwf	0xa, 0x1, 0        	ANDWF	r0x0a, F
004cc2   5000     movf	0, 0, 0             	MOVF	r0x00, W
004cc4   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
004cc6   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
004cc8   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
004cca   e01c     bz	0x4d04                	BZ	_00172_DS_
                                           _00171_DS_:
                                           ;	.line	384; TCPIP_Stack/ARP.c	memcpy((void*)MACAddr, (void*)&Cache.MACAddr, sizeof(Cache.MACAddr));
004ccc   0e0e     movlw	0xe                	MOVLW	HIGH(_Cache + 4)
004cce   6e01     movwf	0x1, 0             	MOVWF	r0x01
004cd0   0e79     movlw	0x79               	MOVLW	LOW(_Cache + 4)
004cd2   6e00     movwf	0, 0               	MOVWF	r0x00
004cd4   0e80     movlw	0x80               	MOVLW	0x80
004cd6   6e02     movwf	0x2, 0             	MOVWF	r0x02
004cd8   0e00     movlw	0                  	MOVLW	0x00
004cda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cdc   0e06     movlw	0x6                	MOVLW	0x06
004cde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ce0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004ce2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ce4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ce8   5000     movf	0, 0, 0             	MOVF	r0x00, W
004cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004cee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cf0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cf4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004cf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cf8   ec7a     call	0x5ef4, 0           	CALL	_memcpy
004cfa   f02f
004cfc   0e08     movlw	0x8                	MOVLW	0x08
004cfe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	388; TCPIP_Stack/ARP.c	return TRUE;
004d00   0e01     movlw	0x1                	MOVLW	0x01
004d02   d001     bra	0x4d06               	BRA	_00175_DS_
                                           _00172_DS_:
                                           ;	.line	390; TCPIP_Stack/ARP.c	return FALSE;
004d04   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00175_DS_:
004d06   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
004d08   f00a
004d0a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004d0c   f009
004d0e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004d10   f008
004d12   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004d14   f007
004d16   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004d18   f006
004d1a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004d1c   f005
004d1e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004d20   f004
004d22   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004d24   f003
004d26   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004d28   f002
004d2a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004d2c   f001
004d2e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004d30   f000
004d32   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004d34   ffd9
004d36   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPResolve	code
                                           _ARPResolve:
                                           ;	.line	324; TCPIP_Stack/ARP.c	void ARPResolve(IP_ADDR* IPAddr)
0054ee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0054f0   ffe5
0054f2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0054f4   ffd9
0054f6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0054f8   ffe5
0054fa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0054fc   ffe5
0054fe   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005500   ffe5
005502   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005504   ffe5
005506   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005508   ffe5
00550a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00550c   ffe5
00550e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005510   ffe5
005512   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005514   ffe5
005516   0e02     movlw	0x2                	MOVLW	0x02
005518   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00551a   f000
00551c   0e03     movlw	0x3                	MOVLW	0x03
00551e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005520   f001
005522   0e04     movlw	0x4                	MOVLW	0x04
005524   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005526   f002
                                           ;	.line	328; TCPIP_Stack/ARP.c	packet.Operation            = ARP_OPERATION_REQ;
005528   0e01     movlw	0x1                	MOVLW	0x01
00552a   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 6)
00552c   6f43     movwf	0x43, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 6), B
00552e   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 7)
005530   6b44     clrf	0x44, 0x1           	CLRF	(_ARPResolve_packet_1_1 + 7), B
005532   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 18)
                                           ;	.line	329; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[0]   = 0xff;
005534   694f     setf	0x4f, 0x1           	SETF	(_ARPResolve_packet_1_1 + 18), B
005536   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 19)
                                           ;	.line	330; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[1]   = 0xff;
005538   6950     setf	0x50, 0x1           	SETF	(_ARPResolve_packet_1_1 + 19), B
00553a   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 20)
                                           ;	.line	331; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[2]   = 0xff;
00553c   6951     setf	0x51, 0x1           	SETF	(_ARPResolve_packet_1_1 + 20), B
00553e   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 21)
                                           ;	.line	332; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[3]   = 0xff;
005540   6952     setf	0x52, 0x1           	SETF	(_ARPResolve_packet_1_1 + 21), B
005542   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 22)
                                           ;	.line	333; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[4]   = 0xff;
005544   6953     setf	0x53, 0x1           	SETF	(_ARPResolve_packet_1_1 + 22), B
005546   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 23)
                                           ;	.line	334; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[5]   = 0xff;
005548   6954     setf	0x54, 0x1           	SETF	(_ARPResolve_packet_1_1 + 23), B
                                           ;	.line	340; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val) 
00554a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00554c   ffe9
00554e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005550   fff3
005552   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005554   ece0     call	0x7dc0, 0           	CALL	__gptrget4
005556   f03e
005558   6e00     movwf	0, 0               	MOVWF	r0x00
00555a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00555c   f001
00555e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
005560   f002
005562   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
005564   f003
005566   5000     movf	0, 0, 0             	MOVF	r0x00, W
005568   010e     movlb	0xe                	BANKSEL	_AppConfig
00556a   1900     xorwf	0, 0, 0x1          	XORWF	_AppConfig, W, B
00556c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00556e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005570   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
005572   1901     xorwf	0x1, 0, 0x1        	XORWF	(_AppConfig + 1), W, B
005574   6e05     movwf	0x5, 0             	MOVWF	r0x05
005576   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005578   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
00557a   1902     xorwf	0x2, 0, 0x1        	XORWF	(_AppConfig + 2), W, B
00557c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00557e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005580   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
005582   1903     xorwf	0x3, 0, 0x1        	XORWF	(_AppConfig + 3), W, B
005584   6e07     movwf	0x7, 0             	MOVWF	r0x07
005586   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
005588   5104     movf	0x4, 0, 0x1         	MOVF	(_AppConfig + 4), W, B
00558a   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
00558c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
00558e   5105     movf	0x5, 0, 0x1         	MOVF	(_AppConfig + 5), W, B
005590   1605     andwf	0x5, 0x1, 0        	ANDWF	r0x05, F
005592   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
005594   5106     movf	0x6, 0, 0x1         	MOVF	(_AppConfig + 6), W, B
005596   1606     andwf	0x6, 0x1, 0        	ANDWF	r0x06, F
005598   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
00559a   5107     movf	0x7, 0, 0x1         	MOVF	(_AppConfig + 7), W, B
00559c   1607     andwf	0x7, 0x1, 0        	ANDWF	r0x07, F
00559e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0055a0   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0055a2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0055a4   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0055a6   e009     bz	0x55ba                	BZ	_00165_DS_
                                           ;	.line	341; TCPIP_Stack/ARP.c	? AppConfig.MyGateway.Val 
0055a8   ce08     movff	0xe08, 0x4         	MOVFF	(_AppConfig + 8), r0x04
0055aa   f004
0055ac   ce09     movff	0xe09, 0x5         	MOVFF	(_AppConfig + 9), r0x05
0055ae   f005
0055b0   ce0a     movff	0xe0a, 0x6         	MOVFF	(_AppConfig + 10), r0x06
0055b2   f006
0055b4   ce0b     movff	0xe0b, 0x7         	MOVFF	(_AppConfig + 11), r0x07
0055b6   f007
0055b8   d008     bra	0x55ca               	BRA	_00166_DS_
                                           _00165_DS_:
                                           ;	.line	342; TCPIP_Stack/ARP.c	: (*IPAddr).Val;
0055ba   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0055bc   f004
0055be   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0055c0   f005
0055c2   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0055c4   f006
0055c6   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0055c8   f007
                                           _00166_DS_:
0055ca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0055cc   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 24)
0055ce   6f55     movwf	0x55, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 24), B
0055d0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0055d2   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 25)
0055d4   6f56     movwf	0x56, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 25), B
0055d6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0055d8   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 26)
0055da   6f57     movwf	0x57, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 26), B
0055dc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0055de   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 27)
0055e0   6f58     movwf	0x58, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 27), B
                                           ;	.line	343; TCPIP_Stack/ARP.c	ARPPut(&packet);
0055e2   0e08     movlw	0x8                	MOVLW	HIGH(_ARPResolve_packet_1_1)
0055e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0055e6   0e3d     movlw	0x3d               	MOVLW	LOW(_ARPResolve_packet_1_1)
0055e8   6e00     movwf	0, 0               	MOVWF	r0x00
0055ea   0e80     movlw	0x80               	MOVLW	0x80
0055ec   6e02     movwf	0x2, 0             	MOVWF	r0x02
0055ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0055f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0055f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055f6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0055f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055fa   ecb9     call	0x3d72, 0           	CALL	_ARPPut
0055fc   f01e
0055fe   0e03     movlw	0x3                	MOVLW	0x03
005600   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005602   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005604   f007
005606   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005608   f006
00560a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00560c   f005
00560e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005610   f004
005612   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005614   f003
005616   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005618   f002
00561a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00561c   f001
00561e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005620   f000
005622   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005624   ffd9
005626   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPProcess	code
                                           _ARPProcess:
                                           ;	.line	204; TCPIP_Stack/ARP.c	BOOL ARPProcess(void)
002df2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002df4   ffe5
002df6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002df8   ffd9
002dfa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002dfc   ffe5
002dfe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002e00   ffe5
002e02   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002e04   ffe5
002e06   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002e08   ffe5
002e0a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002e0c   ffe5
002e0e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002e10   ffe5
002e12   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002e14   ffe5
002e16   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002e18   ffe5
002e1a   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	214; TCPIP_Stack/ARP.c	switch(smARP)
002e1c   517d     movf	0x7d, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
002e1e   e006     bz	0x2e2c                	BZ	_00118_DS_
                                           _00144_DS_:
002e20   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
002e22   517d     movf	0x7d, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
002e24   0a01     xorlw	0x1                	XORLW	0x01
002e26   e101     bnz	0x2e2a               	BNZ	_00146_DS_
002e28   d0c4     bra	0x2fb2               	BRA	_00129_DS_
                                           _00146_DS_:
002e2a   d10f     bra	0x304a               	BRA	_00132_DS_
                                           _00118_DS_:
                                           ;	.line	218; TCPIP_Stack/ARP.c	MACGetArray((BYTE*)&packet, sizeof(packet));
002e2c   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1)
002e2e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e30   0e21     movlw	0x21               	MOVLW	LOW(_ARPProcess_packet_1_1)
002e32   6e00     movwf	0, 0               	MOVWF	r0x00
002e34   0e80     movlw	0x80               	MOVLW	0x80
002e36   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e38   0e00     movlw	0                  	MOVLW	0x00
002e3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e3c   0e1c     movlw	0x1c               	MOVLW	0x1c
002e3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e40   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e44   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e48   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e4c   ecda     call	0x63b4, 0           	CALL	_MACGetArray
002e4e   f031
002e50   0e05     movlw	0x5                	MOVLW	0x05
002e52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	219; TCPIP_Stack/ARP.c	MACDiscardRx();
002e54   ec8c     call	0x6f18, 0           	CALL	_MACDiscardRx
002e56   f037
                                           ;	.line	220; TCPIP_Stack/ARP.c	SwapARPPacket(&packet);
002e58   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1)
002e5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e5c   0e21     movlw	0x21               	MOVLW	LOW(_ARPProcess_packet_1_1)
002e5e   6e00     movwf	0, 0               	MOVWF	r0x00
002e60   0e80     movlw	0x80               	MOVLW	0x80
002e62   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e70   ecd8     call	0x53b0, 0           	CALL	_SwapARPPacket
002e72   f029
002e74   0e03     movlw	0x3                	MOVLW	0x03
002e76   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002e78   0108     movlb	0x8                	BANKSEL	_ARPProcess_packet_1_1
                                           ;	.line	223; TCPIP_Stack/ARP.c	if ( packet.HardwareType != HW_ETHERNET     ||
002e7a   5121     movf	0x21, 0, 0x1        	MOVF	_ARPProcess_packet_1_1, W, B
002e7c   0a01     xorlw	0x1                	XORLW	0x01
002e7e   e103     bnz	0x2e86               	BNZ	_00147_DS_
002e80   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 1)
002e82   5122     movf	0x22, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 1), W, B
002e84   e001     bz	0x2e88                	BZ	_00148_DS_
                                           _00147_DS_:
002e86   d008     bra	0x2e98               	BRA	_00119_DS_
                                           _00148_DS_:
002e88   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 4)
                                           ;	.line	224; TCPIP_Stack/ARP.c	packet.MACAddrLen != sizeof(MAC_ADDR)  ||
002e8a   5125     movf	0x25, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 4), W, B
002e8c   0a06     xorlw	0x6                	XORLW	0x06
002e8e   e104     bnz	0x2e98               	BNZ	_00119_DS_
                                           _00150_DS_:
002e90   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 5)
                                           ;	.line	225; TCPIP_Stack/ARP.c	packet.ProtocolLen != sizeof(IP_ADDR) )
002e92   5126     movf	0x26, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 5), W, B
002e94   0a04     xorlw	0x4                	XORLW	0x04
002e96   e002     bz	0x2e9c                	BZ	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	227; TCPIP_Stack/ARP.c	return TRUE;
002e98   0e01     movlw	0x1                	MOVLW	0x01
002e9a   d0d8     bra	0x304c               	BRA	_00133_DS_
                                           _00120_DS_:
                                           ;	.line	232; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_RESP)
002e9c   c827     movff	0x827, 0           	MOVFF	(_ARPProcess_packet_1_1 + 6), r0x00
002e9e   f000
002ea0   c828     movff	0x828, 0x1         	MOVFF	(_ARPProcess_packet_1_1 + 7), r0x01
002ea2   f001
002ea4   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ea6   0a02     xorlw	0x2                	XORLW	0x02
002ea8   e102     bnz	0x2eae               	BNZ	_00153_DS_
002eaa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002eac   e001     bz	0x2eb0                	BZ	_00154_DS_
                                           _00153_DS_:
002eae   d032     bra	0x2f14               	BRA	_00124_DS_
                                           _00154_DS_:
                                           ;	.line	238; TCPIP_Stack/ARP.c	memcpy((void*)&Cache.MACAddr, (void*)&packet.SenderMACAddr, 
002eb0   0e0e     movlw	0xe                	MOVLW	HIGH(_Cache + 4)
002eb2   6e03     movwf	0x3, 0             	MOVWF	r0x03
002eb4   0e79     movlw	0x79               	MOVLW	LOW(_Cache + 4)
002eb6   6e02     movwf	0x2, 0             	MOVWF	r0x02
002eb8   0e80     movlw	0x80               	MOVLW	0x80
002eba   6e04     movwf	0x4, 0             	MOVWF	r0x04
002ebc   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
002ebe   6e06     movwf	0x6, 0             	MOVWF	r0x06
002ec0   0e29     movlw	0x29               	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
002ec2   6e05     movwf	0x5, 0             	MOVWF	r0x05
002ec4   0e80     movlw	0x80               	MOVLW	0x80
002ec6   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	239; TCPIP_Stack/ARP.c	sizeof(packet.SenderMACAddr));  
002ec8   0e00     movlw	0                  	MOVLW	0x00
002eca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ecc   0e06     movlw	0x6                	MOVLW	0x06
002ece   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002ed2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002ed6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002eda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002edc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ede   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ee2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ee6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee8   ec7a     call	0x5ef4, 0           	CALL	_memcpy
002eea   f02f
002eec   0e08     movlw	0x8                	MOVLW	0x08
002eee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002ef0   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	243; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = packet.SenderIPAddr.Val;
002ef2   512f     movf	0x2f, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
002ef4   010e     movlb	0xe                	BANKSEL	_Cache
002ef6   6f75     movwf	0x75, 0x1          	MOVWF	_Cache, B
002ef8   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
002efa   5130     movf	0x30, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
002efc   010e     movlb	0xe                	BANKSEL	(_Cache + 1)
002efe   6f76     movwf	0x76, 0x1          	MOVWF	(_Cache + 1), B
002f00   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
002f02   5131     movf	0x31, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
002f04   010e     movlb	0xe                	BANKSEL	(_Cache + 2)
002f06   6f77     movwf	0x77, 0x1          	MOVWF	(_Cache + 2), B
002f08   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
002f0a   5132     movf	0x32, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
002f0c   010e     movlb	0xe                	BANKSEL	(_Cache + 3)
002f0e   6f78     movwf	0x78, 0x1          	MOVWF	(_Cache + 3), B
                                           ;	.line	244; TCPIP_Stack/ARP.c	return TRUE;
002f10   0e01     movlw	0x1                	MOVLW	0x01
002f12   d09c     bra	0x304c               	BRA	_00133_DS_
                                           _00124_DS_:
                                           ;	.line	249; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_REQ)
002f14   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f16   0a01     xorlw	0x1                	XORLW	0x01
002f18   e102     bnz	0x2f1e               	BNZ	_00155_DS_
002f1a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f1c   e001     bz	0x2f20                	BZ	_00156_DS_
                                           _00155_DS_:
002f1e   d049     bra	0x2fb2               	BRA	_00129_DS_
                                           _00156_DS_:
002f20   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
                                           ;	.line	251; TCPIP_Stack/ARP.c	if(packet.TargetIPAddr.Val != AppConfig.MyIPAddr.Val)
002f22   5139     movf	0x39, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 24), W, B
002f24   010e     movlb	0xe                	BANKSEL	_AppConfig
002f26   1900     xorwf	0, 0, 0x1          	XORWF	_AppConfig, W, B
002f28   e10f     bnz	0x2f48               	BNZ	_00158_DS_
002f2a   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
002f2c   513a     movf	0x3a, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 25), W, B
002f2e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
002f30   1901     xorwf	0x1, 0, 0x1        	XORWF	(_AppConfig + 1), W, B
002f32   e10a     bnz	0x2f48               	BNZ	_00158_DS_
002f34   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
002f36   513b     movf	0x3b, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 26), W, B
002f38   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
002f3a   1902     xorwf	0x2, 0, 0x1        	XORWF	(_AppConfig + 2), W, B
002f3c   e105     bnz	0x2f48               	BNZ	_00158_DS_
002f3e   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
002f40   513c     movf	0x3c, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 27), W, B
002f42   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
002f44   1903     xorwf	0x3, 0, 0x1        	XORWF	(_AppConfig + 3), W, B
002f46   e002     bz	0x2f4c                	BZ	_00126_DS_
                                           _00158_DS_:
                                           ;	.line	253; TCPIP_Stack/ARP.c	return TRUE;
002f48   0e01     movlw	0x1                	MOVLW	0x01
002f4a   d080     bra	0x304c               	BRA	_00133_DS_
                                           _00126_DS_:
002f4c   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	262; TCPIP_Stack/ARP.c	Target.IPAddr.Val = packet.SenderIPAddr.Val;
002f4e   512f     movf	0x2f, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
002f50   0108     movlb	0x8                	BANKSEL	_ARPProcess_Target_1_1
002f52   6fe2     movwf	0xe2, 0x1          	MOVWF	_ARPProcess_Target_1_1, B
002f54   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
002f56   5130     movf	0x30, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
002f58   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
002f5a   6fe3     movwf	0xe3, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 1), B
002f5c   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
002f5e   5131     movf	0x31, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
002f60   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
002f62   6fe4     movwf	0xe4, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 2), B
002f64   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
002f66   5132     movf	0x32, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
002f68   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
002f6a   6fe5     movwf	0xe5, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 3), B
                                           ;	.line	264; TCPIP_Stack/ARP.c	memcpy((void*)&Target.MACAddr, 
002f6c   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
002f6e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002f70   0ee6     movlw	0xe6               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
002f72   6e00     movwf	0, 0               	MOVWF	r0x00
002f74   0e80     movlw	0x80               	MOVLW	0x80
002f76   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	265; TCPIP_Stack/ARP.c	(void*)&packet.SenderMACAddr, sizeof(packet.SenderMACAddr));
002f78   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
002f7a   6e04     movwf	0x4, 0             	MOVWF	r0x04
002f7c   0e29     movlw	0x29               	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
002f7e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002f80   0e80     movlw	0x80               	MOVLW	0x80
002f82   6e05     movwf	0x5, 0             	MOVWF	r0x05
002f84   0e00     movlw	0                  	MOVLW	0x00
002f86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f88   0e06     movlw	0x6                	MOVLW	0x06
002f8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f8c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002f8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002f92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002f96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f9c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fa0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002fa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fa4   ec7a     call	0x5ef4, 0           	CALL	_memcpy
002fa6   f02f
002fa8   0e08     movlw	0x8                	MOVLW	0x08
002faa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	269; TCPIP_Stack/ARP.c	smARP = SM_ARP_REPLY;
002fac   0e01     movlw	0x1                	MOVLW	0x01
002fae   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
002fb0   6f7d     movwf	0x7d, 0x1          	MOVWF	_ARPProcess_smARP_1_1, B
                                           _00129_DS_:
                                           ;	.line	274; TCPIP_Stack/ARP.c	packet.Operation  = ARP_OPERATION_RESP;
002fb2   0e02     movlw	0x2                	MOVLW	0x02
002fb4   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 6)
002fb6   6f27     movwf	0x27, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 6), B
002fb8   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 7)
002fba   6b28     clrf	0x28, 0x1           	CLRF	(_ARPProcess_packet_1_1 + 7), B
                                           ;	.line	276; TCPIP_Stack/ARP.c	memcpy(&packet.TargetMACAddr, (void*)&Target.MACAddr, 
002fbc   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 18)
002fbe   6e01     movwf	0x1, 0             	MOVWF	r0x01
002fc0   0e33     movlw	0x33               	MOVLW	LOW(_ARPProcess_packet_1_1 + 18)
002fc2   6e00     movwf	0, 0               	MOVWF	r0x00
002fc4   0e80     movlw	0x80               	MOVLW	0x80
002fc6   6e02     movwf	0x2, 0             	MOVWF	r0x02
002fc8   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
002fca   6e04     movwf	0x4, 0             	MOVWF	r0x04
002fcc   0ee6     movlw	0xe6               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
002fce   6e03     movwf	0x3, 0             	MOVWF	r0x03
002fd0   0e80     movlw	0x80               	MOVLW	0x80
002fd2   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	277; TCPIP_Stack/ARP.c	sizeof(Target.MACAddr));
002fd4   0e00     movlw	0                  	MOVLW	0x00
002fd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fd8   0e06     movlw	0x6                	MOVLW	0x06
002fda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fdc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002fe2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff4   ec7a     call	0x5ef4, 0           	CALL	_memcpy
002ff6   f02f
002ff8   0e08     movlw	0x8                	MOVLW	0x08
002ffa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002ffc   0108     movlb	0x8                	BANKSEL	_ARPProcess_Target_1_1
                                           ;	.line	281; TCPIP_Stack/ARP.c	packet.TargetIPAddr.Val	= Target.IPAddr.Val;
002ffe   51e2     movf	0xe2, 0, 0x1        	MOVF	_ARPProcess_Target_1_1, W, B
003000   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
003002   6f39     movwf	0x39, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 24), B
003004   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
003006   51e3     movf	0xe3, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 1), W, B
003008   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
00300a   6f3a     movwf	0x3a, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 25), B
00300c   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
00300e   51e4     movf	0xe4, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 2), W, B
003010   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
003012   6f3b     movwf	0x3b, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 26), B
003014   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
003016   51e5     movf	0xe5, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 3), W, B
003018   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
00301a   6f3c     movwf	0x3c, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 27), B
                                           ;	.line	284; TCPIP_Stack/ARP.c	if(!ARPPut(&packet))
00301c   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1)
00301e   6e01     movwf	0x1, 0             	MOVWF	r0x01
003020   0e21     movlw	0x21               	MOVLW	LOW(_ARPProcess_packet_1_1)
003022   6e00     movwf	0, 0               	MOVWF	r0x00
003024   0e80     movlw	0x80               	MOVLW	0x80
003026   6e02     movwf	0x2, 0             	MOVWF	r0x02
003028   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00302a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00302c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00302e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003030   5000     movf	0, 0, 0             	MOVF	r0x00, W
003032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003034   ecb9     call	0x3d72, 0           	CALL	_ARPPut
003036   f01e
003038   6e00     movwf	0, 0               	MOVWF	r0x00
00303a   0e03     movlw	0x3                	MOVLW	0x03
00303c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00303e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003040   e102     bnz	0x3046               	BNZ	_00131_DS_
                                           ;	.line	286; TCPIP_Stack/ARP.c	return FALSE;
003042   6ae8     clrf	0xe8, 0             	CLRF	WREG
003044   d003     bra	0x304c               	BRA	_00133_DS_
                                           _00131_DS_:
003046   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	290; TCPIP_Stack/ARP.c	smARP = SM_ARP_IDLE;
003048   6b7d     clrf	0x7d, 0x1           	CLRF	_ARPProcess_smARP_1_1, B
                                           _00132_DS_:
                                           ;	.line	294; TCPIP_Stack/ARP.c	return TRUE;
00304a   0e01     movlw	0x1                	MOVLW	0x01
                                           _00133_DS_:
00304c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00304e   f007
003050   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003052   f006
003054   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003056   f005
003058   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00305a   f004
00305c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00305e   f003
003060   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003062   f002
003064   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003066   f001
003068   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00306a   f000
00306c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00306e   ffd9
003070   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPInit	code
                                           _ARPInit:
                                           ;	.line	165; TCPIP_Stack/ARP.c	void ARPInit(void)
007e74   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007e76   ffe5
007e78   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007e7a   ffd9
007e7c   010e     movlb	0xe                	BANKSEL	(_Cache + 4)
                                           ;	.line	167; TCPIP_Stack/ARP.c	Cache.MACAddr.v[0] = 0xff;
007e7e   6979     setf	0x79, 0x1           	SETF	(_Cache + 4), B
007e80   010e     movlb	0xe                	BANKSEL	(_Cache + 5)
                                           ;	.line	168; TCPIP_Stack/ARP.c	Cache.MACAddr.v[1] = 0xff;
007e82   697a     setf	0x7a, 0x1           	SETF	(_Cache + 5), B
007e84   010e     movlb	0xe                	BANKSEL	(_Cache + 6)
                                           ;	.line	169; TCPIP_Stack/ARP.c	Cache.MACAddr.v[2] = 0xff;
007e86   697b     setf	0x7b, 0x1           	SETF	(_Cache + 6), B
007e88   010e     movlb	0xe                	BANKSEL	(_Cache + 7)
                                           ;	.line	170; TCPIP_Stack/ARP.c	Cache.MACAddr.v[3] = 0xff;
007e8a   697c     setf	0x7c, 0x1           	SETF	(_Cache + 7), B
007e8c   010e     movlb	0xe                	BANKSEL	(_Cache + 8)
                                           ;	.line	171; TCPIP_Stack/ARP.c	Cache.MACAddr.v[4] = 0xff;
007e8e   697d     setf	0x7d, 0x1           	SETF	(_Cache + 8), B
007e90   010e     movlb	0xe                	BANKSEL	(_Cache + 9)
                                           ;	.line	172; TCPIP_Stack/ARP.c	Cache.MACAddr.v[5] = 0xff;
007e92   697e     setf	0x7e, 0x1           	SETF	(_Cache + 9), B
007e94   010e     movlb	0xe                	BANKSEL	_Cache
                                           ;	.line	174; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = 0x0;
007e96   6b75     clrf	0x75, 0x1           	CLRF	_Cache, B
007e98   010e     movlb	0xe                	BANKSEL	(_Cache + 1)
007e9a   6b76     clrf	0x76, 0x1           	CLRF	(_Cache + 1), B
007e9c   010e     movlb	0xe                	BANKSEL	(_Cache + 2)
007e9e   6b77     clrf	0x77, 0x1           	CLRF	(_Cache + 2), B
007ea0   010e     movlb	0xe                	BANKSEL	(_Cache + 3)
007ea2   6b78     clrf	0x78, 0x1           	CLRF	(_Cache + 3), B
007ea4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007ea6   ffd9
007ea8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPPut	code
                                           _ARPPut:
                                           ;	.line	111; TCPIP_Stack/ARP.c	static BOOL ARPPut(ARP_PACKET* packet)
003d72   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003d74   ffe5
003d76   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003d78   ffd9
003d7a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003d7c   ffe5
003d7e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003d80   ffe5
003d82   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003d84   ffe5
003d86   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003d88   ffe5
003d8a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003d8c   ffe5
003d8e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003d90   ffe5
003d92   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003d94   ffe5
003d96   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003d98   ffe5
003d9a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003d9c   ffe5
003d9e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003da0   ffe5
003da2   0e02     movlw	0x2                	MOVLW	0x02
003da4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003da6   f000
003da8   0e03     movlw	0x3                	MOVLW	0x03
003daa   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003dac   f001
003dae   0e04     movlw	0x4                	MOVLW	0x04
003db0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003db2   f002
                                           _00105_DS_:
                                           ;	.line	113; TCPIP_Stack/ARP.c	while(!MACIsTxReady());
003db4   ecb8     call	0x7570, 0           	CALL	_MACIsTxReady
003db6   f03a
003db8   6e03     movwf	0x3, 0             	MOVWF	r0x03
003dba   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003dbc   e0fb     bz	0x3db4                	BZ	_00105_DS_
                                           ;	.line	114; TCPIP_Stack/ARP.c	MACSetWritePtr(BASE_TX_ADDR);
003dbe   0e1a     movlw	0x1a               	MOVLW	0x1a
003dc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dc2   0e0b     movlw	0xb                	MOVLW	0x0b
003dc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dc6   ec75     call	0x72ea, 0           	CALL	_MACSetWritePtr
003dc8   f039
003dca   0e02     movlw	0x2                	MOVLW	0x02
003dcc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	117; TCPIP_Stack/ARP.c	packet->HardwareType  = HW_ETHERNET;
003dce   0e01     movlw	0x1                	MOVLW	0x01
003dd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dd2   0e00     movlw	0                  	MOVLW	0x00
003dd4   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003dd6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003dd8   ffe9
003dda   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003ddc   fff3
003dde   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003de0   ec9b     call	0x8136, 0           	CALL	__gptrput2
003de2   f040
                                           ;	.line	118; TCPIP_Stack/ARP.c	packet->Protocol      = ARP_IP;
003de4   5000     movf	0, 0, 0             	MOVF	r0x00, W
003de6   0f02     addlw	0x2                	ADDLW	0x02
003de8   6e03     movwf	0x3, 0             	MOVWF	r0x03
003dea   0e00     movlw	0                  	MOVLW	0x00
003dec   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003dee   6e04     movwf	0x4, 0             	MOVWF	r0x04
003df0   0e00     movlw	0                  	MOVLW	0x00
003df2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003df4   6e05     movwf	0x5, 0             	MOVWF	r0x05
003df6   0e00     movlw	0                  	MOVLW	0x00
003df8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003dfa   0e08     movlw	0x8                	MOVLW	0x08
003dfc   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003dfe   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003e00   ffe9
003e02   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003e04   fff3
003e06   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e08   ec9b     call	0x8136, 0           	CALL	__gptrput2
003e0a   f040
                                           ;	.line	119; TCPIP_Stack/ARP.c	packet->MACAddrLen    = sizeof(MAC_ADDR);
003e0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e0e   0f04     addlw	0x4                	ADDLW	0x04
003e10   6e03     movwf	0x3, 0             	MOVWF	r0x03
003e12   0e00     movlw	0                  	MOVLW	0x00
003e14   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003e16   6e04     movwf	0x4, 0             	MOVWF	r0x04
003e18   0e00     movlw	0                  	MOVLW	0x00
003e1a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003e1c   6e05     movwf	0x5, 0             	MOVWF	r0x05
003e1e   0e06     movlw	0x6                	MOVLW	0x06
003e20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e22   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003e24   ffe9
003e26   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003e28   fff3
003e2a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e2c   ecbb     call	0x8176, 0           	CALL	__gptrput1
003e2e   f040
                                           ;	.line	120; TCPIP_Stack/ARP.c	packet->ProtocolLen   = sizeof(IP_ADDR);
003e30   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e32   0f05     addlw	0x5                	ADDLW	0x05
003e34   6e03     movwf	0x3, 0             	MOVWF	r0x03
003e36   0e00     movlw	0                  	MOVLW	0x00
003e38   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003e3a   6e04     movwf	0x4, 0             	MOVWF	r0x04
003e3c   0e00     movlw	0                  	MOVLW	0x00
003e3e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003e40   6e05     movwf	0x5, 0             	MOVWF	r0x05
003e42   0e04     movlw	0x4                	MOVLW	0x04
003e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e46   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003e48   ffe9
003e4a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003e4c   fff3
003e4e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e50   ecbb     call	0x8176, 0           	CALL	__gptrput1
003e52   f040
                                           ;	.line	122; TCPIP_Stack/ARP.c	memcpy(&packet->SenderMACAddr, (void*)&AppConfig.MyMACAddr, 
003e54   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e56   0f08     addlw	0x8                	ADDLW	0x08
003e58   6e03     movwf	0x3, 0             	MOVWF	r0x03
003e5a   0e00     movlw	0                  	MOVLW	0x00
003e5c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003e5e   6e04     movwf	0x4, 0             	MOVWF	r0x04
003e60   0e00     movlw	0                  	MOVLW	0x00
003e62   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003e64   6e05     movwf	0x5, 0             	MOVWF	r0x05
003e66   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
003e68   6e07     movwf	0x7, 0             	MOVWF	r0x07
003e6a   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
003e6c   6e06     movwf	0x6, 0             	MOVWF	r0x06
003e6e   0e80     movlw	0x80               	MOVLW	0x80
003e70   6e08     movwf	0x8, 0             	MOVWF	r0x08
                                           ;	.line	123; TCPIP_Stack/ARP.c	sizeof(packet->SenderMACAddr));
003e72   0e00     movlw	0                  	MOVLW	0x00
003e74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e76   0e06     movlw	0x6                	MOVLW	0x06
003e78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e7a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003e7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e7e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003e80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e82   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003e84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e86   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003e88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e8a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003e8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e8e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e92   ec7a     call	0x5ef4, 0           	CALL	_memcpy
003e94   f02f
003e96   0e08     movlw	0x8                	MOVLW	0x08
003e98   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	127; TCPIP_Stack/ARP.c	packet->SenderIPAddr.Val  = AppConfig.MyIPAddr.Val;
003e9a   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e9c   0f0e     addlw	0xe                	ADDLW	0x0e
003e9e   6e03     movwf	0x3, 0             	MOVWF	r0x03
003ea0   0e00     movlw	0                  	MOVLW	0x00
003ea2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003ea4   6e04     movwf	0x4, 0             	MOVWF	r0x04
003ea6   0e00     movlw	0                  	MOVLW	0x00
003ea8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003eaa   6e05     movwf	0x5, 0             	MOVWF	r0x05
003eac   ce00     movff	0xe00, 0x6         	MOVFF	_AppConfig, r0x06
003eae   f006
003eb0   ce01     movff	0xe01, 0x7         	MOVFF	(_AppConfig + 1), r0x07
003eb2   f007
003eb4   ce02     movff	0xe02, 0x8         	MOVFF	(_AppConfig + 2), r0x08
003eb6   f008
003eb8   ce03     movff	0xe03, 0x9         	MOVFF	(_AppConfig + 3), r0x09
003eba   f009
003ebc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003ebe   ffe5
003ec0   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
003ec2   fff4
003ec4   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
003ec6   fff6
003ec8   c009     movff	0x9, 0xff7         	MOVFF	r0x09, TBLPTRH
003eca   fff7
003ecc   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003ece   ffe9
003ed0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003ed2   fff3
003ed4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003ed6   ec29     call	0x8052, 0           	CALL	__gptrput4
003ed8   f040
                                           ;	.line	129; TCPIP_Stack/ARP.c	SwapARPPacket(packet);
003eda   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003edc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ede   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003ee0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ee2   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ee4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ee6   ecd8     call	0x53b0, 0           	CALL	_SwapARPPacket
003ee8   f029
003eea   0e03     movlw	0x3                	MOVLW	0x03
003eec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	131; TCPIP_Stack/ARP.c	MACPutHeader(&packet->TargetMACAddr, MAC_ARP, sizeof(*packet));
003eee   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ef0   0f12     addlw	0x12               	ADDLW	0x12
003ef2   6e03     movwf	0x3, 0             	MOVWF	r0x03
003ef4   0e00     movlw	0                  	MOVLW	0x00
003ef6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003ef8   6e04     movwf	0x4, 0             	MOVWF	r0x04
003efa   0e00     movlw	0                  	MOVLW	0x00
003efc   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003efe   6e05     movwf	0x5, 0             	MOVWF	r0x05
003f00   0e00     movlw	0                  	MOVLW	0x00
003f02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f04   0e1c     movlw	0x1c               	MOVLW	0x1c
003f06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f08   0e06     movlw	0x6                	MOVLW	0x06
003f0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f0c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003f0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f10   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003f12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f14   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003f16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f18   ec38     call	0x5270, 0           	CALL	_MACPutHeader
003f1a   f029
003f1c   0e06     movlw	0x6                	MOVLW	0x06
003f1e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	132; TCPIP_Stack/ARP.c	MACPutArray((BYTE*)packet, sizeof(*packet));
003f20   0e00     movlw	0                  	MOVLW	0x00
003f22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f24   0e1c     movlw	0x1c               	MOVLW	0x1c
003f26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f28   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003f2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f2c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003f2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f30   5000     movf	0, 0, 0             	MOVF	r0x00, W
003f32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f34   ecf6     call	0x6dec, 0           	CALL	_MACPutArray
003f36   f036
003f38   0e05     movlw	0x5                	MOVLW	0x05
003f3a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	133; TCPIP_Stack/ARP.c	MACFlush();
003f3c   ec63     call	0x76c6, 0           	CALL	_MACFlush
003f3e   f03b
                                           ;	.line	135; TCPIP_Stack/ARP.c	return TRUE;
003f40   0e01     movlw	0x1                	MOVLW	0x01
003f42   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003f44   f009
003f46   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003f48   f008
003f4a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003f4c   f007
003f4e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003f50   f006
003f52   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003f54   f005
003f56   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003f58   f004
003f5a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003f5c   f003
003f5e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003f60   f002
003f62   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003f64   f001
003f66   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003f68   f000
003f6a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003f6c   ffd9
003f6e   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2192 (0x0890) bytes ( 1.67%)
                                           ;           	 1096 (0x0448) words
                                           ; udata size:	   76 (0x004c) bytes ( 1.98%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:57 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:57 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _DHCPInit
                                           	global _DHCPDisable
                                           	global _DHCPEnable
                                           	global _DHCPIsEnabled
                                           	global _DHCPIsBound
                                           	global _DHCPStateChanged
                                           	global _DHCPIsServerDetected
                                           	global _DHCPTask
                                           	global _DHCPClientInitializedOnce
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           	extern _TickGet
                                           	extern _MACIsLinked
                                           	extern _UDPOpen
                                           	extern _UDPClose
                                           	extern _UDPIsPutReady
                                           	extern _UDPPut
                                           	extern _UDPPutArray
                                           	extern _UDPFlush
                                           	extern _UDPIsGetReady
                                           	extern _UDPGet
                                           	extern _UDPGetArray
                                           	extern _UDPDiscard
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _DHCPClientInitializedOnce	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_DHCP_0	udata
                                           _DHCPClient	res	28
                                           
                                           udata_DHCP_1	udata
                                           __DHCPReceive_type_1_1	res	1
                                           
                                           udata_DHCP_2	udata
                                           __DHCPReceive_j_1_1	res	1
                                           
                                           udata_DHCP_3	udata
                                           __DHCPReceive_v_1_1	res	1
                                           
                                           udata_DHCP_4	udata
                                           __DHCPReceive_tempServerID_1_1	res	4
                                           
                                           udata_DHCP_5	udata
                                           __DHCPSend_MyIP_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPSend	code
                                           __DHCPSend:
                                           ;	.line	1039; TCPIP_Stack/DHCP.c	static void _DHCPSend(BYTE messageType, BOOL bRenewing)
00150c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00150e   ffe5
001510   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001512   ffd9
001514   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001516   ffe5
001518   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00151a   ffe5
00151c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00151e   ffe5
001520   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001522   ffe5
001524   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001526   ffe5
001528   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00152a   ffe5
00152c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00152e   ffe5
001530   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001532   ffe5
001534   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001536   ffe5
001538   0e02     movlw	0x2                	MOVLW	0x02
00153a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00153c   f000
00153e   0e03     movlw	0x3                	MOVLW	0x03
001540   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001542   f001
                                           ;	.line	1045; TCPIP_Stack/DHCP.c	UDPPut(BOOT_REQUEST);                       // op
001544   0e01     movlw	0x1                	MOVLW	0x01
001546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001548   ec41     call	0x6e82, 0           	CALL	_UDPPut
00154a   f037
00154c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1046; TCPIP_Stack/DHCP.c	UDPPut(BOOT_HW_TYPE);                       // htype
00154e   0e01     movlw	0x1                	MOVLW	0x01
001550   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001552   ec41     call	0x6e82, 0           	CALL	_UDPPut
001554   f037
001556   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1047; TCPIP_Stack/DHCP.c	UDPPut(BOOT_LEN_OF_HW_TYPE);                // hlen
001558   0e06     movlw	0x6                	MOVLW	0x06
00155a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00155c   ec41     call	0x6e82, 0           	CALL	_UDPPut
00155e   f037
001560   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1048; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // hops
001562   0e00     movlw	0                  	MOVLW	0x00
001564   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001566   ec41     call	0x6e82, 0           	CALL	_UDPPut
001568   f037
00156a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1049; TCPIP_Stack/DHCP.c	UDPPut(0x12);                               // xid[0]
00156c   0e12     movlw	0x12               	MOVLW	0x12
00156e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001570   ec41     call	0x6e82, 0           	CALL	_UDPPut
001572   f037
001574   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1050; TCPIP_Stack/DHCP.c	UDPPut(0x23);                               // xid[1]
001576   0e23     movlw	0x23               	MOVLW	0x23
001578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00157a   ec41     call	0x6e82, 0           	CALL	_UDPPut
00157c   f037
00157e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1051; TCPIP_Stack/DHCP.c	UDPPut(0x34);                               // xid[2]
001580   0e34     movlw	0x34               	MOVLW	0x34
001582   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001584   ec41     call	0x6e82, 0           	CALL	_UDPPut
001586   f037
001588   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1052; TCPIP_Stack/DHCP.c	UDPPut(0x56);                               // xid[3]
00158a   0e56     movlw	0x56               	MOVLW	0x56
00158c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00158e   ec41     call	0x6e82, 0           	CALL	_UDPPut
001590   f037
001592   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1053; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[0]
001594   0e00     movlw	0                  	MOVLW	0x00
001596   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001598   ec41     call	0x6e82, 0           	CALL	_UDPPut
00159a   f037
00159c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1054; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[1]
00159e   0e00     movlw	0                  	MOVLW	0x00
0015a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015a2   ec41     call	0x6e82, 0           	CALL	_UDPPut
0015a4   f037
0015a6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0015a8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1055; TCPIP_Stack/DHCP.c	UDPPut(DHCPClient.flags.bits.bUseUnicastMode ? 0x00: 0x80);
0015aa   a95b     btfss	0x5b, 0x4, 0x1     	BTFSS	(_DHCPClient + 2), 4, B
0015ac   d002     bra	0x15b2               	BRA	_00489_DS_
0015ae   6a02     clrf	0x2, 0              	CLRF	r0x02
0015b0   d002     bra	0x15b6               	BRA	_00490_DS_
                                           _00489_DS_:
0015b2   0e80     movlw	0x80               	MOVLW	0x80
0015b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00490_DS_:
0015b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015ba   ec41     call	0x6e82, 0           	CALL	_UDPPut
0015bc   f037
0015be   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1057; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // flags[1]
0015c0   0e00     movlw	0                  	MOVLW	0x00
0015c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c4   ec41     call	0x6e82, 0           	CALL	_UDPPut
0015c6   f037
0015c8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1060; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && bRenewing)
0015ca   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0015cc   f002
0015ce   6a03     clrf	0x3, 0              	CLRF	r0x03
0015d0   6a04     clrf	0x4, 0              	CLRF	r0x04
0015d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015d4   0a03     xorlw	0x3                	XORLW	0x03
0015d6   e103     bnz	0x15de               	BNZ	_00507_DS_
0015d8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0015da   e101     bnz	0x15de               	BNZ	_00507_DS_
0015dc   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           _00507_DS_:
0015de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0015e0   e017     bz	0x1610                	BZ	_00463_DS_
0015e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015e4   e015     bz	0x1610                	BZ	_00463_DS_
                                           ;	.line	1062; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
0015e6   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 15)
0015e8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0015ea   0e68     movlw	0x68               	MOVLW	LOW(_DHCPClient + 15)
0015ec   6e05     movwf	0x5, 0             	MOVWF	r0x05
0015ee   0e80     movlw	0x80               	MOVLW	0x80
0015f0   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	1063; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
0015f2   0e00     movlw	0                  	MOVLW	0x00
0015f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015f6   0e04     movlw	0x4                	MOVLW	0x04
0015f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015fa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0015fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015fe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001600   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001602   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001604   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001606   ec7d     call	0x60fa, 0           	CALL	_UDPPutArray
001608   f030
00160a   0e05     movlw	0x5                	MOVLW	0x05
00160c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00160e   d014     bra	0x1638               	BRA	_00464_DS_
                                           _00463_DS_:
                                           ;	.line	1067; TCPIP_Stack/DHCP.c	UDPPut(0x00);
001610   0e00     movlw	0                  	MOVLW	0x00
001612   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001614   ec41     call	0x6e82, 0           	CALL	_UDPPut
001616   f037
001618   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1068; TCPIP_Stack/DHCP.c	UDPPut(0x00);
00161a   0e00     movlw	0                  	MOVLW	0x00
00161c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00161e   ec41     call	0x6e82, 0           	CALL	_UDPPut
001620   f037
001622   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1069; TCPIP_Stack/DHCP.c	UDPPut(0x00);
001624   0e00     movlw	0                  	MOVLW	0x00
001626   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001628   ec41     call	0x6e82, 0           	CALL	_UDPPut
00162a   f037
00162c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1070; TCPIP_Stack/DHCP.c	UDPPut(0x00);
00162e   0e00     movlw	0                  	MOVLW	0x00
001630   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001632   ec41     call	0x6e82, 0           	CALL	_UDPPut
001634   f037
001636   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00464_DS_:
                                           ;	.line	1074; TCPIP_Stack/DHCP.c	for ( i = 0; i < 12u; i++ )	UDPPut(0x00);
001638   0e0c     movlw	0xc                	MOVLW	0x0c
00163a   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00483_DS_:
00163c   0e00     movlw	0                  	MOVLW	0x00
00163e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001640   ec41     call	0x6e82, 0           	CALL	_UDPPut
001642   f037
001644   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001646   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001648   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00164a   e1f8     bnz	0x163c               	BNZ	_00483_DS_
                                           ;	.line	1077; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
00164c   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
00164e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001650   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
001652   6e06     movwf	0x6, 0             	MOVWF	r0x06
001654   0e80     movlw	0x80               	MOVLW	0x80
001656   6e08     movwf	0x8, 0             	MOVWF	r0x08
001658   0e00     movlw	0                  	MOVLW	0x00
00165a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00165c   0e06     movlw	0x6                	MOVLW	0x06
00165e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001660   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001662   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001664   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001666   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001668   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00166a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00166c   ec7d     call	0x60fa, 0           	CALL	_UDPPutArray
00166e   f030
001670   0e05     movlw	0x5                	MOVLW	0x05
001672   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1080; TCPIP_Stack/DHCP.c	for ( i = 0; i < 202u; i++ ) UDPPut(0);
001674   0eca     movlw	0xca               	MOVLW	0xca
001676   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00486_DS_:
001678   0e00     movlw	0                  	MOVLW	0x00
00167a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00167c   ec41     call	0x6e82, 0           	CALL	_UDPPut
00167e   f037
001680   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001682   2e05     decfsz	0x5, 0x1, 0       	DECFSZ	r0x05, F
001684   d7f9     bra	0x1678               	BRA	_00486_DS_
                                           ;	.line	1083; TCPIP_Stack/DHCP.c	UDPPut(99);
001686   0e63     movlw	0x63               	MOVLW	0x63
001688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168a   ec41     call	0x6e82, 0           	CALL	_UDPPut
00168c   f037
00168e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1084; TCPIP_Stack/DHCP.c	UDPPut(130);
001690   0e82     movlw	0x82               	MOVLW	0x82
001692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001694   ec41     call	0x6e82, 0           	CALL	_UDPPut
001696   f037
001698   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1085; TCPIP_Stack/DHCP.c	UDPPut(83);
00169a   0e53     movlw	0x53               	MOVLW	0x53
00169c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00169e   ec41     call	0x6e82, 0           	CALL	_UDPPut
0016a0   f037
0016a2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1086; TCPIP_Stack/DHCP.c	UDPPut(99);
0016a4   0e63     movlw	0x63               	MOVLW	0x63
0016a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a8   ec41     call	0x6e82, 0           	CALL	_UDPPut
0016aa   f037
0016ac   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1089; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE);
0016ae   0e35     movlw	0x35               	MOVLW	0x35
0016b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016b2   ec41     call	0x6e82, 0           	CALL	_UDPPut
0016b4   f037
0016b6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1090; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE_LEN);
0016b8   0e01     movlw	0x1                	MOVLW	0x01
0016ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016bc   ec41     call	0x6e82, 0           	CALL	_UDPPut
0016be   f037
0016c0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1091; TCPIP_Stack/DHCP.c	UDPPut(messageType);
0016c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016c6   ec41     call	0x6e82, 0           	CALL	_UDPPut
0016c8   f037
0016ca   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1093; TCPIP_Stack/DHCP.c	if(messageType == DHCP_DISCOVER_MESSAGE)
0016cc   6a00     clrf	0, 0                	CLRF	r0x00
0016ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0016d0   0a01     xorlw	0x1                	XORLW	0x01
0016d2   e103     bnz	0x16da               	BNZ	_00511_DS_
0016d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016d6   e101     bnz	0x16da               	BNZ	_00511_DS_
0016d8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00511_DS_:
0016da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016dc   e002     bz	0x16e2                	BZ	_00467_DS_
0016de   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1096; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
0016e0   955b     bcf	0x5b, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           _00467_DS_:
                                           ;	.line	1100; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing)
0016e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0016e4   e024     bz	0x172e                	BZ	_00469_DS_
0016e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0016e8   e122     bnz	0x172e               	BNZ	_00469_DS_
                                           ;	.line	1108; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER);
0016ea   0e36     movlw	0x36               	MOVLW	0x36
0016ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016ee   ec41     call	0x6e82, 0           	CALL	_UDPPut
0016f0   f037
0016f2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1109; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER_LEN);
0016f4   0e04     movlw	0x4                	MOVLW	0x04
0016f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016f8   ec41     call	0x6e82, 0           	CALL	_UDPPut
0016fa   f037
0016fc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0016fe   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 14)
                                           ;	.line	1110; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[3]);
001700   5167     movf	0x67, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
001702   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001704   ec41     call	0x6e82, 0           	CALL	_UDPPut
001706   f037
001708   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00170a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 13)
                                           ;	.line	1111; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[2]);
00170c   5166     movf	0x66, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
00170e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001710   ec41     call	0x6e82, 0           	CALL	_UDPPut
001712   f037
001714   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001716   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 12)
                                           ;	.line	1112; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[1]);
001718   5165     movf	0x65, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
00171a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00171c   ec41     call	0x6e82, 0           	CALL	_UDPPut
00171e   f037
001720   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001722   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1113; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[0]);
001724   5164     movf	0x64, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
001726   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001728   ec41     call	0x6e82, 0           	CALL	_UDPPut
00172a   f037
00172c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00469_DS_:
                                           ;	.line	1119; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST);
00172e   0e37     movlw	0x37               	MOVLW	0x37
001730   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001732   ec41     call	0x6e82, 0           	CALL	_UDPPut
001734   f037
001736   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1120; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST_LEN);
001738   0e04     movlw	0x4                	MOVLW	0x04
00173a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00173c   ec41     call	0x6e82, 0           	CALL	_UDPPut
00173e   f037
001740   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1121; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SUBNET_MASK);
001742   0e01     movlw	0x1                	MOVLW	0x01
001744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001746   ec41     call	0x6e82, 0           	CALL	_UDPPut
001748   f037
00174a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1122; TCPIP_Stack/DHCP.c	UDPPut(DHCP_ROUTER);
00174c   0e03     movlw	0x3                	MOVLW	0x03
00174e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001750   ec41     call	0x6e82, 0           	CALL	_UDPPut
001752   f037
001754   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1123; TCPIP_Stack/DHCP.c	UDPPut(DHCP_DNS);
001756   0e06     movlw	0x6                	MOVLW	0x06
001758   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00175a   ec41     call	0x6e82, 0           	CALL	_UDPPut
00175c   f037
00175e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1124; TCPIP_Stack/DHCP.c	UDPPut(DHCP_HOST_NAME);
001760   0e0c     movlw	0xc                	MOVLW	0x0c
001762   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001764   ec41     call	0x6e82, 0           	CALL	_UDPPut
001766   f037
001768   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1127; TCPIP_Stack/DHCP.c	if( ((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing) || 
00176a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00176c   e002     bz	0x1772                	BZ	_00475_DS_
00176e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001770   e00b     bz	0x1788                	BZ	_00471_DS_
                                           _00475_DS_:
                                           ;	.line	1128; TCPIP_Stack/DHCP.c	((messageType == DHCP_DISCOVER_MESSAGE) && 
001772   5000     movf	0, 0, 0             	MOVF	r0x00, W
001774   e027     bz	0x17c4                	BZ	_00472_DS_
001776   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	1129; TCPIP_Stack/DHCP.c	DHCPClient.tempIPAddress.Val))
001778   5168     movf	0x68, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
00177a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 16)
00177c   1169     iorwf	0x69, 0, 0x1       	IORWF	(_DHCPClient + 16), W, B
00177e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 17)
001780   116a     iorwf	0x6a, 0, 0x1       	IORWF	(_DHCPClient + 17), W, B
001782   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 18)
001784   116b     iorwf	0x6b, 0, 0x1       	IORWF	(_DHCPClient + 18), W, B
001786   e01e     bz	0x17c4                	BZ	_00472_DS_
                                           _00471_DS_:
                                           ;	.line	1131; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS);
001788   0e32     movlw	0x32               	MOVLW	0x32
00178a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00178c   ec41     call	0x6e82, 0           	CALL	_UDPPut
00178e   f037
001790   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1132; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
001792   0e04     movlw	0x4                	MOVLW	0x04
001794   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001796   ec41     call	0x6e82, 0           	CALL	_UDPPut
001798   f037
00179a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1133; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
00179c   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 15)
00179e   6e02     movwf	0x2, 0             	MOVWF	r0x02
0017a0   0e68     movlw	0x68               	MOVLW	LOW(_DHCPClient + 15)
0017a2   6e00     movwf	0, 0               	MOVWF	r0x00
0017a4   0e80     movlw	0x80               	MOVLW	0x80
0017a6   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	1134; TCPIP_Stack/DHCP.c	DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
0017a8   0e00     movlw	0                  	MOVLW	0x00
0017aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ac   0e04     movlw	0x4                	MOVLW	0x04
0017ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0017b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017bc   ec7d     call	0x60fa, 0           	CALL	_UDPPutArray
0017be   f030
0017c0   0e05     movlw	0x5                	MOVLW	0x05
0017c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00472_DS_:
                                           ;	.line	1140; TCPIP_Stack/DHCP.c	UDPPut(DHCP_END_OPTION);
0017c4   0eff     movlw	0xff               	MOVLW	0xff
0017c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017c8   ec41     call	0x6e82, 0           	CALL	_UDPPut
0017ca   f037
0017cc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00476_DS_:
                                           ;	.line	1144; TCPIP_Stack/DHCP.c	while(UDPTxCount < 300u) UDPPut(0); 
0017ce   0e01     movlw	0x1                	MOVLW	0x01
0017d0   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
0017d2   5d9a     subwf	0x9a, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
0017d4   e103     bnz	0x17dc               	BNZ	_00512_DS_
0017d6   0e2c     movlw	0x2c               	MOVLW	0x2c
0017d8   010a     movlb	0xa                	BANKSEL	_UDPTxCount
0017da   5d99     subwf	0x99, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00512_DS_:
0017dc   e206     bc	0x17ea                	BC	_00478_DS_
0017de   0e00     movlw	0                  	MOVLW	0x00
0017e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e2   ec41     call	0x6e82, 0           	CALL	_UDPPut
0017e4   f037
0017e6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0017e8   d7f2     bra	0x17ce               	BRA	_00476_DS_
                                           _00478_DS_:
0017ea   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	1149; TCPIP_Stack/DHCP.c	MyIP.Val = AppConfig.MyIPAddr.Val;
0017ec   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
0017ee   010a     movlb	0xa                	BANKSEL	__DHCPSend_MyIP_1_1
0017f0   6f24     movwf	0x24, 0x1          	MOVWF	__DHCPSend_MyIP_1_1, B
0017f2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
0017f4   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
0017f6   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
0017f8   6f25     movwf	0x25, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 1), B
0017fa   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
0017fc   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
0017fe   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
001800   6f26     movwf	0x26, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 2), B
001802   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
001804   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
001806   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
001808   6f27     movwf	0x27, 0x1          	MOVWF	(__DHCPSend_MyIP_1_1 + 3), B
                                           ;	.line	1150; TCPIP_Stack/DHCP.c	if(!bRenewing) AppConfig.MyIPAddr.Val = 0x00000000;
00180a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00180c   e108     bnz	0x181e               	BNZ	_00480_DS_
00180e   010e     movlb	0xe                	BANKSEL	_AppConfig
001810   6b00     clrf	0, 0x1              	CLRF	_AppConfig, B
001812   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
001814   6b01     clrf	0x1, 0x1            	CLRF	(_AppConfig + 1), B
001816   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
001818   6b02     clrf	0x2, 0x1            	CLRF	(_AppConfig + 2), B
00181a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
00181c   6b03     clrf	0x3, 0x1            	CLRF	(_AppConfig + 3), B
                                           _00480_DS_:
                                           ;	.line	1151; TCPIP_Stack/DHCP.c	UDPFlush();
00181e   ec15     call	0x282a, 0           	CALL	_UDPFlush
001820   f014
001822   010a     movlb	0xa                	BANKSEL	__DHCPSend_MyIP_1_1
                                           ;	.line	1152; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = MyIP.Val;
001824   5124     movf	0x24, 0, 0x1        	MOVF	__DHCPSend_MyIP_1_1, W, B
001826   010e     movlb	0xe                	BANKSEL	_AppConfig
001828   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
00182a   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
00182c   5125     movf	0x25, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 1), W, B
00182e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
001830   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
001832   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
001834   5126     movf	0x26, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 2), W, B
001836   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
001838   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
00183a   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
00183c   5127     movf	0x27, 0, 0x1        	MOVF	(__DHCPSend_MyIP_1_1 + 3), W, B
00183e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
001840   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
001842   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001844   f008
001846   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001848   f007
00184a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00184c   f006
00184e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001850   f005
001852   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001854   f004
001856   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001858   f003
00185a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00185c   f002
00185e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001860   f001
001862   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001864   f000
001866   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001868   ffd9
00186a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPReceive	code
                                           __DHCPReceive:
                                           ;	.line	720; TCPIP_Stack/DHCP.c	static BYTE _DHCPReceive(void)
00001c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00001e   ffe5
000020   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000022   ffd9
000024   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000026   ffe5
000028   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00002a   ffe5
00002c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00002e   ffe5
000030   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000032   ffe5
000034   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000036   ffe5
000038   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00003a   ffe5
00003c   010a     movlb	0xa                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	766; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
00003e   6ba5     clrf	0xa5, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           ;	.line	768; TCPIP_Stack/DHCP.c	UDPGet(&v);                             // op
000040   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000042   6e01     movwf	0x1, 0             	MOVWF	r0x01
000044   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
000046   6e00     movwf	0, 0               	MOVWF	r0x00
000048   0e80     movlw	0x80               	MOVLW	0x80
00004a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00004c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00004e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000050   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000052   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000054   5000     movf	0, 0, 0             	MOVF	r0x00, W
000056   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000058   ecf0     call	0x71e0, 0           	CALL	_UDPGet
00005a   f038
00005c   0e03     movlw	0x3                	MOVLW	0x03
00005e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	771; TCPIP_Stack/DHCP.c	if ( v == BOOT_REPLY )
000060   caa7     movff	0xaa7, 0           	MOVFF	__DHCPReceive_v_1_1, r0x00
000062   f000
000064   6a01     clrf	0x1, 0              	CLRF	r0x01
000066   5000     movf	0, 0, 0             	MOVF	r0x00, W
000068   0a02     xorlw	0x2                	XORLW	0x02
00006a   e102     bnz	0x70                 	BNZ	_00424_DS_
00006c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00006e   e002     bz	0x74                  	BZ	_00425_DS_
                                           _00424_DS_:
000070   ef3a     goto	0x674               	GOTO	_00345_DS_
000072   f003
                                           _00425_DS_:
                                           ;	.line	774; TCPIP_Stack/DHCP.c	for ( i = 0; i < 15u; i++ ) UDPGet(&v);
000074   0e0f     movlw	0xf                	MOVLW	0x0f
000076   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00354_DS_:
000078   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00007a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00007c   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
00007e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000080   0e80     movlw	0x80               	MOVLW	0x80
000082   6e03     movwf	0x3, 0             	MOVWF	r0x03
000084   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000088   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00008a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00008c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00008e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000090   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000092   f038
000094   0e03     movlw	0x3                	MOVLW	0x03
000096   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000098   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00009a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00009c   e1ed     bnz	0x78                 	BNZ	_00354_DS_
00009e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	777; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0000a0   a55b     btfss	0x5b, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0000a2   d016     bra	0xd0                 	BRA	_00294_DS_
                                           ;	.line	780; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0000a4   0e04     movlw	0x4                	MOVLW	0x04
0000a6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00357_DS_:
0000a8   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0000aa   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000ac   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
0000ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000b0   0e80     movlw	0x80               	MOVLW	0x80
0000b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0000b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000c0   ecf0     call	0x71e0, 0           	CALL	_UDPGet
0000c2   f038
0000c4   0e03     movlw	0x3                	MOVLW	0x03
0000c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000c8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0000ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000cc   e1ed     bnz	0xa8                 	BNZ	_00357_DS_
0000ce   d016     bra	0xfc                 	BRA	_00295_DS_
                                           _00294_DS_:
                                           ;	.line	785; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempIPAddress, 
0000d0   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 15)
0000d2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000d4   0e68     movlw	0x68               	MOVLW	LOW(_DHCPClient + 15)
0000d6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000d8   0e80     movlw	0x80               	MOVLW	0x80
0000da   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	786; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
0000dc   0e00     movlw	0                  	MOVLW	0x00
0000de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e0   0e04     movlw	0x4                	MOVLW	0x04
0000e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f0   ec68     call	0x62d0, 0           	CALL	_UDPGetArray
0000f2   f031
0000f4   0e05     movlw	0x5                	MOVLW	0x05
0000f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000f8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	787; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.IPAddress = 1;
0000fa   8174     bsf	0x74, 0, 0x1         	BSF	(_DHCPClient + 27), 0, B
                                           _00295_DS_:
                                           ;	.line	791; TCPIP_Stack/DHCP.c	for ( i = 0; i < 8u; i++ ) UDPGet(&v);
0000fc   0e08     movlw	0x8                	MOVLW	0x08
0000fe   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00360_DS_:
000100   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000102   6e02     movwf	0x2, 0             	MOVWF	r0x02
000104   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
000106   6e01     movwf	0x1, 0             	MOVWF	r0x01
000108   0e80     movlw	0x80               	MOVLW	0x80
00010a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00010c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00010e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000110   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000114   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000118   ecf0     call	0x71e0, 0           	CALL	_UDPGet
00011a   f038
00011c   0e03     movlw	0x3                	MOVLW	0x03
00011e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000120   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000122   5000     movf	0, 0, 0             	MOVF	r0x00, W
000124   e1ed     bnz	0x100                	BNZ	_00360_DS_
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
000126   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00361_DS_:
000128   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00012a   f002
00012c   6a03     clrf	0x3, 0              	CLRF	r0x03
00012e   0e00     movlw	0                  	MOVLW	0x00
000130   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000132   e102     bnz	0x138                	BNZ	_00426_DS_
000134   0e06     movlw	0x6                	MOVLW	0x06
000136   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00426_DS_:
000138   e224     bc	0x182                 	BC	_00364_DS_
                                           ;	.line	796; TCPIP_Stack/DHCP.c	UDPGet(&v);
00013a   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00013c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00013e   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
000140   6e02     movwf	0x2, 0             	MOVWF	r0x02
000142   0e80     movlw	0x80               	MOVLW	0x80
000144   6e04     movwf	0x4, 0             	MOVWF	r0x04
000146   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00014c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000152   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000154   f038
000156   0e03     movlw	0x3                	MOVLW	0x03
000158   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	797; TCPIP_Stack/DHCP.c	if ( v != AppConfig.MyMACAddr.v[i])	goto UDPInvalid;
00015a   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
00015c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00015e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000160   6a03     clrf	0x3, 0              	CLRF	r0x03
000162   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
000164   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000166   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000168   ffe9
00016a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00016c   ffea
00016e   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
000170   f002
000172   010a     movlb	0xa                	BANKSEL	__DHCPReceive_v_1_1
000174   51a7     movf	0xa7, 0, 0x1        	MOVF	__DHCPReceive_v_1_1, W, B
000176   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
000178   e002     bz	0x17e                 	BZ	_00428_DS_
00017a   ef71     goto	0x6e2               	GOTO	_00351_DS_
00017c   f003
                                           _00428_DS_:
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
00017e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000180   d7d3     bra	0x128                	BRA	_00361_DS_
                                           _00364_DS_:
                                           ;	.line	802; TCPIP_Stack/DHCP.c	for ( i = 0; i < 206u; i++ ) UDPGet(&v);
000182   0ece     movlw	0xce               	MOVLW	0xce
000184   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00367_DS_:
000186   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000188   6e02     movwf	0x2, 0             	MOVWF	r0x02
00018a   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
00018c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00018e   0e80     movlw	0x80               	MOVLW	0x80
000190   6e03     movwf	0x3, 0             	MOVWF	r0x03
000192   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000194   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000196   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000198   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00019c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019e   ecf0     call	0x71e0, 0           	CALL	_UDPGet
0001a0   f038
0001a2   0e03     movlw	0x3                	MOVLW	0x03
0001a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001a6   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0001a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001aa   e1ed     bnz	0x186                	BNZ	_00367_DS_
                                           ;	.line	804; TCPIP_Stack/DHCP.c	lbDone = FALSE;
0001ac   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00341_DS_:
                                           ;	.line	810; TCPIP_Stack/DHCP.c	if(!UDPGet(&v))
0001ae   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0001b0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0001b2   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
0001b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001b6   0e80     movlw	0x80               	MOVLW	0x80
0001b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0001ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0001bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001be   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c6   ecf0     call	0x71e0, 0           	CALL	_UDPGet
0001c8   f038
0001ca   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001cc   0e03     movlw	0x3                	MOVLW	0x03
0001ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001d2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0001d4   ef3a     goto	0x674               	GOTO	_00345_DS_
0001d6   f003
                                           ;	.line	816; TCPIP_Stack/DHCP.c	switch(v)
0001d8   caa7     movff	0xaa7, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0001da   f002
0001dc   6a03     clrf	0x3, 0              	CLRF	r0x03
0001de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001e0   0a01     xorlw	0x1                	XORLW	0x01
0001e2   e103     bnz	0x1ea                	BNZ	_00430_DS_
0001e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001e6   e101     bnz	0x1ea                	BNZ	_00430_DS_
0001e8   d058     bra	0x29a                	BRA	_00307_DS_
                                           _00430_DS_:
0001ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001ec   0a03     xorlw	0x3                	XORLW	0x03
0001ee   e103     bnz	0x1f6                	BNZ	_00432_DS_
0001f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001f2   e101     bnz	0x1f6                	BNZ	_00432_DS_
0001f4   d09c     bra	0x32e                	BRA	_00314_DS_
                                           _00432_DS_:
0001f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001f8   0a33     xorlw	0x33               	XORLW	0x33
0001fa   e103     bnz	0x202                	BNZ	_00434_DS_
0001fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001fe   e101     bnz	0x202                	BNZ	_00434_DS_
000200   d15a     bra	0x4b6                	BRA	_00329_DS_
                                           _00434_DS_:
000202   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000204   0a35     xorlw	0x35               	XORLW	0x35
000206   e102     bnz	0x20c                	BNZ	_00436_DS_
000208   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00020a   e00e     bz	0x228                 	BZ	_00300_DS_
                                           _00436_DS_:
00020c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00020e   0a36     xorlw	0x36               	XORLW	0x36
000210   e103     bnz	0x218                	BNZ	_00438_DS_
000212   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000214   e101     bnz	0x218                	BNZ	_00438_DS_
000216   d0f2     bra	0x3fc                	BRA	_00324_DS_
                                           _00438_DS_:
000218   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00021a   0aff     xorlw	0xff               	XORLW	0xff
00021c   e103     bnz	0x224                	BNZ	_00440_DS_
00021e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000220   e101     bnz	0x224                	BNZ	_00440_DS_
000222   d146     bra	0x4b0                	BRA	_00328_DS_
                                           _00440_DS_:
000224   ef07     goto	0x60e               	GOTO	_00336_DS_
000226   f003
                                           _00300_DS_:
                                           ;	.line	819; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
000228   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00022a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00022c   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
00022e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000230   0e80     movlw	0x80               	MOVLW	0x80
000232   6e04     movwf	0x4, 0             	MOVWF	r0x04
000234   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000236   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000238   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00023a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00023e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000240   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000242   f038
000244   0e03     movlw	0x3                	MOVLW	0x03
000246   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	821; TCPIP_Stack/DHCP.c	if ( v == 1u )
000248   caa7     movff	0xaa7, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
00024a   f002
00024c   6a03     clrf	0x3, 0              	CLRF	r0x03
00024e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000250   0a01     xorlw	0x1                	XORLW	0x01
000252   e102     bnz	0x258                	BNZ	_00441_DS_
000254   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000256   e002     bz	0x25c                 	BZ	_00442_DS_
                                           _00441_DS_:
000258   ef71     goto	0x6e2               	GOTO	_00351_DS_
00025a   f003
                                           _00442_DS_:
                                           ;	.line	823; TCPIP_Stack/DHCP.c	UDPGet(&type);                  // Get type
00025c   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_type_1_1)
00025e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000260   0ea5     movlw	0xa5               	MOVLW	LOW(__DHCPReceive_type_1_1)
000262   6e02     movwf	0x2, 0             	MOVWF	r0x02
000264   0e80     movlw	0x80               	MOVLW	0x80
000266   6e04     movwf	0x4, 0             	MOVWF	r0x04
000268   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00026a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00026c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00026e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000270   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000274   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000276   f038
000278   0e03     movlw	0x3                	MOVLW	0x03
00027a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00027c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	827; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived && 
00027e   a55b     btfss	0x5b, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000280   ef36     goto	0x66c               	GOTO	_00342_DS_
000282   f003
                                           ;	.line	828; TCPIP_Stack/DHCP.c	(type == DHCP_OFFER_MESSAGE))
000284   caa5     movff	0xaa5, 0x2         	MOVFF	__DHCPReceive_type_1_1, r0x02
000286   f002
000288   6a03     clrf	0x3, 0              	CLRF	r0x03
00028a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00028c   0a02     xorlw	0x2                	XORLW	0x02
00028e   e104     bnz	0x298                	BNZ	_00444_DS_
000290   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000292   e102     bnz	0x298                	BNZ	_00444_DS_
000294   ef71     goto	0x6e2               	GOTO	_00351_DS_
000296   f003
                                           _00444_DS_:
                                           ;	.line	835; TCPIP_Stack/DHCP.c	break;
000298   d1e9     bra	0x66c                	BRA	_00342_DS_
                                           _00307_DS_:
                                           ;	.line	838; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
00029a   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00029c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00029e   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002a2   0e80     movlw	0x80               	MOVLW	0x80
0002a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002b2   ecf0     call	0x71e0, 0           	CALL	_UDPGet
0002b4   f038
0002b6   0e03     movlw	0x3                	MOVLW	0x03
0002b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	840; TCPIP_Stack/DHCP.c	if ( v == 4u )
0002ba   caa7     movff	0xaa7, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0002bc   f002
0002be   6a03     clrf	0x3, 0              	CLRF	r0x03
0002c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002c2   0a04     xorlw	0x4                	XORLW	0x04
0002c4   e102     bnz	0x2ca                	BNZ	_00445_DS_
0002c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002c8   e002     bz	0x2ce                 	BZ	_00446_DS_
                                           _00445_DS_:
0002ca   ef71     goto	0x6e2               	GOTO	_00351_DS_
0002cc   f003
                                           _00446_DS_:
0002ce   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	843; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0002d0   a55b     btfss	0x5b, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0002d2   d016     bra	0x300                	BRA	_00309_DS_
                                           ;	.line	847; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0002d4   0e04     movlw	0x4                	MOVLW	0x04
0002d6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00370_DS_:
0002d8   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0002da   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002dc   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002de   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002e0   0e80     movlw	0x80               	MOVLW	0x80
0002e2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002f0   ecf0     call	0x71e0, 0           	CALL	_UDPGet
0002f2   f038
0002f4   0e03     movlw	0x3                	MOVLW	0x03
0002f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0002f8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0002fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002fc   e1ed     bnz	0x2d8                	BNZ	_00370_DS_
0002fe   d1b6     bra	0x66c                	BRA	_00342_DS_
                                           _00309_DS_:
                                           ;	.line	851; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempMask, 
000300   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 23)
000302   6e03     movwf	0x3, 0             	MOVWF	r0x03
000304   0e70     movlw	0x70               	MOVLW	LOW(_DHCPClient + 23)
000306   6e02     movwf	0x2, 0             	MOVWF	r0x02
000308   0e80     movlw	0x80               	MOVLW	0x80
00030a   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	852; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempMask));
00030c   0e00     movlw	0                  	MOVLW	0x00
00030e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000310   0e04     movlw	0x4                	MOVLW	0x04
000312   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000314   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000316   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000318   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00031a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00031c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00031e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000320   ec68     call	0x62d0, 0           	CALL	_UDPGetArray
000322   f031
000324   0e05     movlw	0x5                	MOVLW	0x05
000326   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000328   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	853; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Mask = 1;
00032a   8574     bsf	0x74, 0x2, 0x1       	BSF	(_DHCPClient + 27), 2, B
00032c   d19f     bra	0x66c                	BRA	_00342_DS_
                                           _00314_DS_:
                                           ;	.line	861; TCPIP_Stack/DHCP.c	UDPGet(&j);
00032e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000330   6e03     movwf	0x3, 0             	MOVWF	r0x03
000332   0ea6     movlw	0xa6               	MOVLW	LOW(__DHCPReceive_j_1_1)
000334   6e02     movwf	0x2, 0             	MOVWF	r0x02
000336   0e80     movlw	0x80               	MOVLW	0x80
000338   6e04     movwf	0x4, 0             	MOVWF	r0x04
00033a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00033c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00033e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000340   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000342   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000344   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000346   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000348   f038
00034a   0e03     movlw	0x3                	MOVLW	0x03
00034c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	863; TCPIP_Stack/DHCP.c	if ( j >= 4u )
00034e   caa6     movff	0xaa6, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
000350   f002
000352   6a03     clrf	0x3, 0              	CLRF	r0x03
000354   0e00     movlw	0                  	MOVLW	0x00
000356   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000358   e102     bnz	0x35e                	BNZ	_00447_DS_
00035a   0e04     movlw	0x4                	MOVLW	0x04
00035c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00447_DS_:
00035e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000360   d1c0     bra	0x6e2                	BRA	_00351_DS_
000362   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	866; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
000364   a55b     btfss	0x5b, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000366   d016     bra	0x394                	BRA	_00316_DS_
                                           ;	.line	870; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
000368   0e04     movlw	0x4                	MOVLW	0x04
00036a   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00373_DS_:
00036c   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00036e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000370   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
000372   6e02     movwf	0x2, 0             	MOVWF	r0x02
000374   0e80     movlw	0x80               	MOVLW	0x80
000376   6e04     movwf	0x4, 0             	MOVWF	r0x04
000378   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00037a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00037c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00037e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000380   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000384   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000386   f038
000388   0e03     movlw	0x3                	MOVLW	0x03
00038a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00038c   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00038e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000390   e1ed     bnz	0x36c                	BNZ	_00373_DS_
000392   d016     bra	0x3c0                	BRA	_00320_DS_
                                           _00316_DS_:
                                           ;	.line	874; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempGateway, 
000394   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 19)
000396   6e03     movwf	0x3, 0             	MOVWF	r0x03
000398   0e6c     movlw	0x6c               	MOVLW	LOW(_DHCPClient + 19)
00039a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00039c   0e80     movlw	0x80               	MOVLW	0x80
00039e   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	875; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempGateway));
0003a0   0e00     movlw	0                  	MOVLW	0x00
0003a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a4   0e04     movlw	0x4                	MOVLW	0x04
0003a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0003b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b4   ec68     call	0x62d0, 0           	CALL	_UDPGetArray
0003b6   f031
0003b8   0e05     movlw	0x5                	MOVLW	0x05
0003ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003bc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	876; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Gateway = 1;
0003be   8374     bsf	0x74, 0x1, 0x1       	BSF	(_DHCPClient + 27), 1, B
                                           _00320_DS_:
                                           ;	.line	882; TCPIP_Stack/DHCP.c	j -= 4;
0003c0   0efc     movlw	0xfc               	MOVLW	0xfc
0003c2   010a     movlb	0xa                	BANKSEL	__DHCPReceive_j_1_1
0003c4   27a6     addwf	0xa6, 0x1, 0x1     	ADDWF	__DHCPReceive_j_1_1, F, B
                                           ;	.line	883; TCPIP_Stack/DHCP.c	while(j--) UDPGet(&v);
0003c6   caa6     movff	0xaa6, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
0003c8   f002
                                           _00321_DS_:
0003ca   c002     movff	0x2, 0x3           	MOVFF	r0x02, r0x03
0003cc   f003
0003ce   0602     decf	0x2, 0x1, 0         	DECF	r0x02, F
0003d0   c002     movff	0x2, 0xaa6         	MOVFF	r0x02, __DHCPReceive_j_1_1
0003d2   faa6
0003d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003d6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0003d8   d144     bra	0x662                	BRA	_00422_DS_
0003da   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003dc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0003de   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
0003e0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0003e2   0e80     movlw	0x80               	MOVLW	0x80
0003e4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0003e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0003e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003f2   ecf0     call	0x71e0, 0           	CALL	_UDPGet
0003f4   f038
0003f6   0e03     movlw	0x3                	MOVLW	0x03
0003f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003fa   d7e7     bra	0x3ca                	BRA	_00321_DS_
                                           _00324_DS_:
                                           ;	.line	945; TCPIP_Stack/DHCP.c	UDPGet(&v);    // Get len
0003fc   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003fe   6e04     movwf	0x4, 0             	MOVWF	r0x04
000400   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
000402   6e03     movwf	0x3, 0             	MOVWF	r0x03
000404   0e80     movlw	0x80               	MOVLW	0x80
000406   6e05     movwf	0x5, 0             	MOVWF	r0x05
000408   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00040a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00040c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00040e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000410   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000414   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000416   f038
000418   0e03     movlw	0x3                	MOVLW	0x03
00041a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	947; TCPIP_Stack/DHCP.c	if ( v == 4u )
00041c   caa7     movff	0xaa7, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
00041e   f003
000420   6a04     clrf	0x4, 0              	CLRF	r0x04
000422   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000424   0a04     xorlw	0x4                	XORLW	0x04
000426   e102     bnz	0x42c                	BNZ	_00448_DS_
000428   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00042a   e001     bz	0x42e                 	BZ	_00449_DS_
                                           _00448_DS_:
00042c   d15a     bra	0x6e2                	BRA	_00351_DS_
                                           _00449_DS_:
                                           ;	.line	949; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[3]);   // Get the id
00042e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 3)
000430   6e04     movwf	0x4, 0             	MOVWF	r0x04
000432   0e23     movlw	0x23               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 3)
000434   6e03     movwf	0x3, 0             	MOVWF	r0x03
000436   0e80     movlw	0x80               	MOVLW	0x80
000438   6e05     movwf	0x5, 0             	MOVWF	r0x05
00043a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00043c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00043e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000442   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000446   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000448   f038
00044a   0e03     movlw	0x3                	MOVLW	0x03
00044c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	950; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[2]);
00044e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 2)
000450   6e04     movwf	0x4, 0             	MOVWF	r0x04
000452   0e22     movlw	0x22               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 2)
000454   6e03     movwf	0x3, 0             	MOVWF	r0x03
000456   0e80     movlw	0x80               	MOVLW	0x80
000458   6e05     movwf	0x5, 0             	MOVWF	r0x05
00045a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00045c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00045e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000460   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000462   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000464   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000466   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000468   f038
00046a   0e03     movlw	0x3                	MOVLW	0x03
00046c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	951; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[1]);
00046e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 1)
000470   6e04     movwf	0x4, 0             	MOVWF	r0x04
000472   0e21     movlw	0x21               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 1)
000474   6e03     movwf	0x3, 0             	MOVWF	r0x03
000476   0e80     movlw	0x80               	MOVLW	0x80
000478   6e05     movwf	0x5, 0             	MOVWF	r0x05
00047a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00047c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00047e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000482   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000486   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000488   f038
00048a   0e03     movlw	0x3                	MOVLW	0x03
00048c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	952; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[0]);
00048e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1)
000490   6e04     movwf	0x4, 0             	MOVWF	r0x04
000492   0e20     movlw	0x20               	MOVLW	LOW(__DHCPReceive_tempServerID_1_1)
000494   6e03     movwf	0x3, 0             	MOVWF	r0x03
000496   0e80     movlw	0x80               	MOVLW	0x80
000498   6e05     movwf	0x5, 0             	MOVWF	r0x05
00049a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00049c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00049e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a6   ecf0     call	0x71e0, 0           	CALL	_UDPGet
0004a8   f038
0004aa   0e03     movlw	0x3                	MOVLW	0x03
0004ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0004ae   d0de     bra	0x66c                	BRA	_00342_DS_
                                           _00328_DS_:
                                           ;	.line	958; TCPIP_Stack/DHCP.c	lbDone = TRUE;
0004b0   0e01     movlw	0x1                	MOVLW	0x01
0004b2   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	959; TCPIP_Stack/DHCP.c	break;
0004b4   d0db     bra	0x66c                	BRA	_00342_DS_
                                           _00329_DS_:
                                           ;	.line	962; TCPIP_Stack/DHCP.c	UDPGet(&v);            // Get len
0004b6   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004ba   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004be   0e80     movlw	0x80               	MOVLW	0x80
0004c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0004c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ce   ecf0     call	0x71e0, 0           	CALL	_UDPGet
0004d0   f038
0004d2   0e03     movlw	0x3                	MOVLW	0x03
0004d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/DHCP.c	if ( v == 4u )
0004d6   caa7     movff	0xaa7, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
0004d8   f003
0004da   6a04     clrf	0x4, 0              	CLRF	r0x04
0004dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004de   0a04     xorlw	0x4                	XORLW	0x04
0004e0   e102     bnz	0x4e6                	BNZ	_00450_DS_
0004e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004e4   e001     bz	0x4e8                 	BZ	_00451_DS_
                                           _00450_DS_:
0004e6   d0fd     bra	0x6e2                	BRA	_00351_DS_
                                           _00451_DS_:
0004e8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	967; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0004ea   a55b     btfss	0x5b, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0004ec   d015     bra	0x518                	BRA	_00331_DS_
                                           ;	.line	970; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0004ee   0e04     movlw	0x4                	MOVLW	0x04
0004f0   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00376_DS_:
0004f2   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004f4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004f6   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004f8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004fa   0e80     movlw	0x80               	MOVLW	0x80
0004fc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000502   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000506   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00050a   ecf0     call	0x71e0, 0           	CALL	_UDPGet
00050c   f038
00050e   0e03     movlw	0x3                	MOVLW	0x03
000510   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000512   2e00     decfsz	0, 0x1, 0         	DECFSZ	r0x00, F
000514   d7ee     bra	0x4f2                	BRA	_00376_DS_
000516   d0aa     bra	0x66c                	BRA	_00342_DS_
                                           _00331_DS_:
                                           ;	.line	974; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[3]));
000518   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 10)
00051a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00051c   0e63     movlw	0x63               	MOVLW	LOW(_DHCPClient + 10)
00051e   6e00     movwf	0, 0               	MOVWF	r0x00
000520   0e80     movlw	0x80               	MOVLW	0x80
000522   6e04     movwf	0x4, 0             	MOVWF	r0x04
000524   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000528   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00052a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00052c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00052e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000530   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000532   f038
000534   0e03     movlw	0x3                	MOVLW	0x03
000536   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	975; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[2]));
000538   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 9)
00053a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00053c   0e62     movlw	0x62               	MOVLW	LOW(_DHCPClient + 9)
00053e   6e00     movwf	0, 0               	MOVWF	r0x00
000540   0e80     movlw	0x80               	MOVLW	0x80
000542   6e04     movwf	0x4, 0             	MOVWF	r0x04
000544   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000548   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00054a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00054c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00054e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000550   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000552   f038
000554   0e03     movlw	0x3                	MOVLW	0x03
000556   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	976; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[1]));
000558   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 8)
00055a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00055c   0e61     movlw	0x61               	MOVLW	LOW(_DHCPClient + 8)
00055e   6e00     movwf	0, 0               	MOVWF	r0x00
000560   0e80     movlw	0x80               	MOVLW	0x80
000562   6e04     movwf	0x4, 0             	MOVWF	r0x04
000564   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000568   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00056a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00056c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00056e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000570   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000572   f038
000574   0e03     movlw	0x3                	MOVLW	0x03
000576   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	977; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[0]));
000578   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 7)
00057a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00057c   0e60     movlw	0x60               	MOVLW	LOW(_DHCPClient + 7)
00057e   6e00     movwf	0, 0               	MOVWF	r0x00
000580   0e80     movlw	0x80               	MOVLW	0x80
000582   6e04     movwf	0x4, 0             	MOVWF	r0x04
000584   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000586   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000588   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00058a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00058c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00058e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000590   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000592   f038
000594   0e03     movlw	0x3                	MOVLW	0x03
000596   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000598   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
                                           ;	.line	981; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime -= DHCPClient.dwLeaseTime>>5;
00059a   3960     swapf	0x60, 0, 0x1       	SWAPF	(_DHCPClient + 7), W, B
00059c   0b0f     andlw	0xf                	ANDLW	0x0f
00059e   6e00     movwf	0, 0               	MOVWF	r0x00
0005a0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
0005a2   3961     swapf	0x61, 0, 0x1       	SWAPF	(_DHCPClient + 8), W, B
0005a4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005a6   0bf0     andlw	0xf0               	ANDLW	0xf0
0005a8   1a03     xorwf	0x3, 0x1, 0        	XORWF	r0x03, F
0005aa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0005ac   3203     rrcf	0x3, 0x1, 0         	RRCF	r0x03, F
0005ae   3200     rrcf	0, 0x1, 0           	RRCF	r0x00, F
0005b0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
0005b2   5162     movf	0x62, 0, 0x1        	MOVF	(_DHCPClient + 9), W, B
0005b4   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0005b6   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0005b8   0bf8     andlw	0xf8               	ANDLW	0xf8
0005ba   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
0005bc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
0005be   3962     swapf	0x62, 0, 0x1       	SWAPF	(_DHCPClient + 9), W, B
0005c0   0b0f     andlw	0xf                	ANDLW	0x0f
0005c2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005c4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
0005c6   3963     swapf	0x63, 0, 0x1       	SWAPF	(_DHCPClient + 10), W, B
0005c8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005ca   0bf0     andlw	0xf0               	ANDLW	0xf0
0005cc   1a05     xorwf	0x5, 0x1, 0        	XORWF	r0x05, F
0005ce   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0005d0   3205     rrcf	0x5, 0x1, 0         	RRCF	r0x05, F
0005d2   3204     rrcf	0x4, 0x1, 0         	RRCF	r0x04, F
0005d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005d6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
0005d8   5d60     subwf	0x60, 0, 0x1       	SUBWF	(_DHCPClient + 7), W, B
0005da   6e00     movwf	0, 0               	MOVWF	r0x00
0005dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005de   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
0005e0   5961     subwfb	0x61, 0, 0x1      	SUBWFB	(_DHCPClient + 8), W, B
0005e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0005e6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
0005e8   5962     subwfb	0x62, 0, 0x1      	SUBWFB	(_DHCPClient + 9), W, B
0005ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005ee   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
0005f0   5963     subwfb	0x63, 0, 0x1      	SUBWFB	(_DHCPClient + 10), W, B
0005f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005f6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
0005f8   6f60     movwf	0x60, 0x1          	MOVWF	(_DHCPClient + 7), B
0005fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005fc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
0005fe   6f61     movwf	0x61, 0x1          	MOVWF	(_DHCPClient + 8), B
000600   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000602   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
000604   6f62     movwf	0x62, 0x1          	MOVWF	(_DHCPClient + 9), B
000606   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000608   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
00060a   6f63     movwf	0x63, 0x1          	MOVWF	(_DHCPClient + 10), B
00060c   d02f     bra	0x66c                	BRA	_00342_DS_
                                           _00336_DS_:
                                           ;	.line	989; TCPIP_Stack/DHCP.c	UDPGet(&j);       // Get option len
00060e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000610   6e03     movwf	0x3, 0             	MOVWF	r0x03
000612   0ea6     movlw	0xa6               	MOVLW	LOW(__DHCPReceive_j_1_1)
000614   6e00     movwf	0, 0               	MOVWF	r0x00
000616   0e80     movlw	0x80               	MOVLW	0x80
000618   6e04     movwf	0x4, 0             	MOVWF	r0x04
00061a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00061c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000622   5000     movf	0, 0, 0             	MOVF	r0x00, W
000624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000626   ecf0     call	0x71e0, 0           	CALL	_UDPGet
000628   f038
00062a   0e03     movlw	0x3                	MOVLW	0x03
00062c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	990; TCPIP_Stack/DHCP.c	while( j-- )      // Ignore option values
00062e   caa6     movff	0xaa6, 0           	MOVFF	__DHCPReceive_j_1_1, r0x00
000630   f000
                                           _00337_DS_:
000632   c000     movff	0, 0x3             	MOVFF	r0x00, r0x03
000634   f003
000636   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000638   c000     movff	0, 0xaa6           	MOVFF	r0x00, __DHCPReceive_j_1_1
00063a   faa6
00063c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00063e   e014     bz	0x668                 	BZ	_00423_DS_
                                           ;	.line	991; TCPIP_Stack/DHCP.c	UDPGet(&v);
000640   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000642   6e04     movwf	0x4, 0             	MOVWF	r0x04
000644   0ea7     movlw	0xa7               	MOVLW	LOW(__DHCPReceive_v_1_1)
000646   6e03     movwf	0x3, 0             	MOVWF	r0x03
000648   0e80     movlw	0x80               	MOVLW	0x80
00064a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00064c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00064e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000650   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000654   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000658   ecf0     call	0x71e0, 0           	CALL	_UDPGet
00065a   f038
00065c   0e03     movlw	0x3                	MOVLW	0x03
00065e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000660   d7e8     bra	0x632                	BRA	_00337_DS_
                                           _00422_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000662   c002     movff	0x2, 0xaa6         	MOVFF	r0x02, __DHCPReceive_j_1_1
000664   faa6
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
000666   d002     bra	0x66c                	BRA	_00342_DS_
                                           _00423_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000668   c000     movff	0, 0xaa6           	MOVFF	r0x00, __DHCPReceive_j_1_1
00066a   faa6
                                           _00342_DS_:
                                           ;	.line	993; TCPIP_Stack/DHCP.c	} while( !lbDone );
00066c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00066e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000670   efd7     goto	0x1ae               	GOTO	_00341_DS_
000672   f000
                                           _00345_DS_:
                                           ;	.line	997; TCPIP_Stack/DHCP.c	if ( type == DHCP_OFFER_MESSAGE )
000674   caa5     movff	0xaa5, 0           	MOVFF	__DHCPReceive_type_1_1, r0x00
000676   f000
000678   6a01     clrf	0x1, 0              	CLRF	r0x01
00067a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00067c   0a02     xorlw	0x2                	XORLW	0x02
00067e   e116     bnz	0x6ac                	BNZ	_00349_DS_
000680   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000682   e001     bz	0x686                 	BZ	_00455_DS_
                                           _00454_DS_:
000684   d013     bra	0x6ac                	BRA	_00349_DS_
                                           _00455_DS_:
000686   010a     movlb	0xa                	BANKSEL	__DHCPReceive_tempServerID_1_1
                                           ;	.line	999; TCPIP_Stack/DHCP.c	DHCPClient.dwServerID = tempServerID.Val;
000688   5120     movf	0x20, 0, 0x1        	MOVF	__DHCPReceive_tempServerID_1_1, W, B
00068a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 11)
00068c   6f64     movwf	0x64, 0x1          	MOVWF	(_DHCPClient + 11), B
00068e   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
000690   5121     movf	0x21, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
000692   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 12)
000694   6f65     movwf	0x65, 0x1          	MOVWF	(_DHCPClient + 12), B
000696   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
000698   5122     movf	0x22, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
00069a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 13)
00069c   6f66     movwf	0x66, 0x1          	MOVWF	(_DHCPClient + 13), B
00069e   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006a0   5123     movf	0x23, 0, 0x1        	MOVF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006a2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 14)
0006a4   6f67     movwf	0x67, 0x1          	MOVWF	(_DHCPClient + 14), B
0006a6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1000; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = TRUE;
0006a8   855b     bsf	0x5b, 0x2, 0x1       	BSF	(_DHCPClient + 2), 2, B
0006aa   d016     bra	0x6d8                	BRA	_00350_DS_
                                           _00349_DS_:
0006ac   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1006; TCPIP_Stack/DHCP.c	if ( DHCPClient.dwServerID != tempServerID.Val )
0006ae   5164     movf	0x64, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
0006b0   010a     movlb	0xa                	BANKSEL	__DHCPReceive_tempServerID_1_1
0006b2   1920     xorwf	0x20, 0, 0x1       	XORWF	__DHCPReceive_tempServerID_1_1, W, B
0006b4   e10f     bnz	0x6d4                	BNZ	_00457_DS_
0006b6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 12)
0006b8   5165     movf	0x65, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
0006ba   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
0006bc   1921     xorwf	0x21, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
0006be   e10a     bnz	0x6d4                	BNZ	_00457_DS_
0006c0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 13)
0006c2   5166     movf	0x66, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
0006c4   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
0006c6   1922     xorwf	0x22, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
0006c8   e105     bnz	0x6d4                	BNZ	_00457_DS_
0006ca   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 14)
0006cc   5167     movf	0x67, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
0006ce   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006d0   1923     xorwf	0x23, 0, 0x1       	XORWF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006d2   e002     bz	0x6d8                 	BZ	_00350_DS_
                                           _00457_DS_:
0006d4   010a     movlb	0xa                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1007; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
0006d6   6ba5     clrf	0xa5, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           _00350_DS_:
                                           ;	.line	1010; TCPIP_Stack/DHCP.c	UDPDiscard();  // We are done with this packet
0006d8   ecac     call	0x7f58, 0           	CALL	_UDPDiscard
0006da   f03f
0006dc   010a     movlb	0xa                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1011; TCPIP_Stack/DHCP.c	return type;
0006de   51a5     movf	0xa5, 0, 0x1        	MOVF	__DHCPReceive_type_1_1, W, B
0006e0   d003     bra	0x6e8                	BRA	_00377_DS_
                                           _00351_DS_:
                                           ;	.line	1014; TCPIP_Stack/DHCP.c	UDPDiscard();
0006e2   ecac     call	0x7f58, 0           	CALL	_UDPDiscard
0006e4   f03f
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
0006e6   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00377_DS_:
0006e8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0006ea   f005
0006ec   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0006ee   f004
0006f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0006f2   f003
0006f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0006f6   f002
0006f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0006fa   f001
0006fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0006fe   f000
000700   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000702   ffd9
000704   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPTask	code
                                           _DHCPTask:
                                           ;	.line	485; TCPIP_Stack/DHCP.c	void DHCPTask(void)
000706   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000708   ffe5
00070a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00070c   ffd9
00070e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000710   ffe5
000712   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000714   ffe5
000716   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000718   ffe5
00071a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00071c   ffe5
00071e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000720   ffe5
000722   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000724   ffe5
000726   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000728   ffe5
00072a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00072c   ffe5
00072e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000730   ffe5
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000732   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00227_DS_:
000734   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000736   f001
000738   6a02     clrf	0x2, 0              	CLRF	r0x02
00073a   0e00     movlw	0                  	MOVLW	0x00
00073c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00073e   e102     bnz	0x744                	BNZ	_00259_DS_
000740   0e01     movlw	0x1                	MOVLW	0x01
000742   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
000744   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000746   efe3     goto	0xdc6               	GOTO	_00231_DS_
000748   f006
                                           ;	.line	491; TCPIP_Stack/DHCP.c	LoadState(i);
00074a   6a00     clrf	0, 0                	CLRF	r0x00
                                           ;	.line	492; TCPIP_Stack/DHCP.c	switch(DHCPClient.smState)
00074c   c85a     movff	0x85a, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
00074e   f001
000750   0e0d     movlw	0xd                	MOVLW	0x0d
000752   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000754   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000756   efe0     goto	0xdc0               	GOTO	_00229_DS_
000758   f006
00075a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00075c   ffe5
00075e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000760   ffe5
000762   6a0a     clrf	0xa, 0              	CLRF	r0x0a
000764   3401     rlcf	0x1, 0, 0           	RLCF	r0x01, W
000766   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
000768   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00076a   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
00076c   0bfc     andlw	0xfc               	ANDLW	0xfc
00076e   6e09     movwf	0x9, 0             	MOVWF	r0x09
000770   0e00     movlw	0                  	MOVLW	UPPER(_00261_DS_)
000772   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000774   0e07     movlw	0x7                	MOVLW	HIGH(_00261_DS_)
000776   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000778   0e90     movlw	0x90               	MOVLW	LOW(_00261_DS_)
00077a   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
00077c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00077e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000780   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000782   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000784   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000786   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000788   f00a
00078a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00078c   f009
00078e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00261_DS_:
000790   efe2     goto	0x7c4               	GOTO	_00169_DS_
000792   f003
000794   efe4     goto	0x7c8               	GOTO	_00170_DS_
000796   f003
000798   ef07     goto	0x80e               	GOTO	_00173_DS_
00079a   f004
00079c   ef78     goto	0x8f0               	GOTO	_00178_DS_
00079e   f004
0007a0   efbf     goto	0x97e               	GOTO	_00185_DS_
0007a2   f004
0007a4   ef0a     goto	0xa14               	GOTO	_00188_DS_
0007a6   f005
0007a8   efb1     goto	0xb62               	GOTO	_00202_DS_
0007aa   f005
0007ac   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007ae   f006
0007b0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007b2   f006
0007b4   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007b6   f006
0007b8   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007ba   f006
0007bc   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007be   f006
0007c0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007c2   f006
                                           _00169_DS_:
                                           ;	.line	496; TCPIP_Stack/DHCP.c	break;
0007c4   efe0     goto	0xdc0               	GOTO	_00229_DS_
0007c6   f006
                                           _00170_DS_:
                                           ;	.line	501; TCPIP_Stack/DHCP.c	UDPOpen(DHCP_CLIENT_PORT, NULL, DHCP_SERVER_PORT);
0007c8   0e00     movlw	0                  	MOVLW	0x00
0007ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007cc   0e43     movlw	0x43               	MOVLW	0x43
0007ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d0   0e00     movlw	0                  	MOVLW	0x00
0007d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d4   0e00     movlw	0                  	MOVLW	0x00
0007d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d8   0e00     movlw	0                  	MOVLW	0x00
0007da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007dc   0e00     movlw	0                  	MOVLW	0x00
0007de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e0   0e44     movlw	0x44               	MOVLW	0x44
0007e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e4   ec39     call	0x3072, 0           	CALL	_UDPOpen
0007e6   f018
0007e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007ea   0e07     movlw	0x7                	MOVLW	0x07
0007ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0007ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007f0   0108     movlb	0x8                	BANKSEL	_DHCPClient
0007f2   6f59     movwf	0x59, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	502; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
0007f4   c859     movff	0x859, 0x1         	MOVFF	_DHCPClient, r0x01
0007f6   f001
0007f8   6a02     clrf	0x2, 0              	CLRF	r0x02
0007fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007fc   0aff     xorlw	0xff               	XORLW	0xff
0007fe   e104     bnz	0x808                	BNZ	_00263_DS_
000800   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000802   e102     bnz	0x808                	BNZ	_00263_DS_
000804   efe0     goto	0xdc0               	GOTO	_00229_DS_
000806   f006
                                           _00263_DS_:
                                           ;	.line	504; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000808   0e02     movlw	0x2                	MOVLW	0x02
00080a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
00080c   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00173_DS_:
                                           ;	.line	512; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime = 60;
00080e   0e3c     movlw	0x3c               	MOVLW	0x3c
000810   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
000812   6f60     movwf	0x60, 0x1          	MOVWF	(_DHCPClient + 7), B
000814   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
000816   6b61     clrf	0x61, 0x1           	CLRF	(_DHCPClient + 8), B
000818   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
00081a   6b62     clrf	0x62, 0x1           	CLRF	(_DHCPClient + 9), B
00081c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
00081e   6b63     clrf	0x63, 0x1           	CLRF	(_DHCPClient + 10), B
000820   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	513; TCPIP_Stack/DHCP.c	DHCPClient.validValues.val = 0x00;
000822   6b74     clrf	0x74, 0x1           	CLRF	(_DHCPClient + 27), B
000824   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	514; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;	
000826   915b     bcf	0x5b, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
000828   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	515; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
00082a   955b     bcf	0x5b, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	519; TCPIP_Stack/DHCP.c	if(!MACIsLinked()) break;
00082c   ec5b     call	0x7cb6, 0           	CALL	_MACIsLinked
00082e   f03e
000830   6e01     movwf	0x1, 0             	MOVWF	r0x01
000832   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000834   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000836   efe0     goto	0xdc0               	GOTO	_00229_DS_
000838   f006
00083a   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	522; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 300u) break;
00083c   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
00083e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000840   ec1f     call	0x703e, 0           	CALL	_UDPIsPutReady
000842   f038
000844   6e01     movwf	0x1, 0             	MOVWF	r0x01
000846   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000848   f002
00084a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00084c   0e01     movlw	0x1                	MOVLW	0x01
00084e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000850   e102     bnz	0x856                	BNZ	_00264_DS_
000852   0e2c     movlw	0x2c               	MOVLW	0x2c
000854   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00264_DS_:
000856   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000858   efe0     goto	0xdc0               	GOTO	_00229_DS_
00085a   f006
                                           ;	.line	528; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode ^= 1;
00085c   6a01     clrf	0x1, 0              	CLRF	r0x01
00085e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
000860   b95b     btfsc	0x5b, 0x4, 0x1     	BTFSC	(_DHCPClient + 2), 4, B
000862   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000864   0e01     movlw	0x1                	MOVLW	0x01
000866   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
000868   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00086a   0b01     andlw	0x1                	ANDLW	0x01
00086c   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
00086e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000870   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
000872   515b     movf	0x5b, 0, 0x1        	MOVF	(_DHCPClient + 2), W, B
000874   0bef     andlw	0xef               	ANDLW	0xef
000876   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000878   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
00087a   6f5b     movwf	0x5b, 0x1          	MOVWF	(_DHCPClient + 2), B
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00087c   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	533; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
00087e   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
000880   0d0e     mullw	0xe                	MULLW	0x0e
000882   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000884   f001
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00088a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00088c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00088e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	534; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
000890   0e00     movlw	0                  	MOVLW	0x00
000892   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000894   0e0a     movlw	0xa                	MOVLW	0x0a
000896   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000898   0eff     movlw	0xff               	MOVLW	0xff
00089a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00089e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a4   ec95     call	0x672a, 0           	CALL	_memset
0008a6   f033
0008a8   0e05     movlw	0x5                	MOVLW	0x05
0008aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_DISCOVER_MESSAGE, FALSE);
0008ac   0e00     movlw	0                  	MOVLW	0x00
0008ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b0   0e01     movlw	0x1                	MOVLW	0x01
0008b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b4   ec86     call	0x150c, 0           	CALL	__DHCPSend
0008b6   f00a
0008b8   0e02     movlw	0x2                	MOVLW	0x02
0008ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	540; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0008bc   ece7     call	0x7fce, 0           	CALL	_TickGet
0008be   f03f
0008c0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008c2   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008c4   f002
0008c6   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0008c8   f003
0008ca   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0008cc   f004
0008ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008d0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
0008d2   6f5c     movwf	0x5c, 0x1          	MOVWF	(_DHCPClient + 3), B
0008d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008d6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
0008d8   6f5d     movwf	0x5d, 0x1          	MOVWF	(_DHCPClient + 4), B
0008da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008dc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
0008de   6f5e     movwf	0x5e, 0x1          	MOVWF	(_DHCPClient + 5), B
0008e0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008e2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
0008e4   6f5f     movwf	0x5f, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	541; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_OFFER;
0008e6   0e03     movlw	0x3                	MOVLW	0x03
0008e8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
0008ea   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	542; TCPIP_Stack/DHCP.c	break;
0008ec   efe0     goto	0xdc0               	GOTO	_00229_DS_
0008ee   f006
                                           _00178_DS_:
0008f0   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	546; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
0008f2   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
0008f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f6   ec2e     call	0x765c, 0           	CALL	_UDPIsGetReady
0008f8   f03b
0008fa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008fc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008fe   f002
000900   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000902   0e00     movlw	0                  	MOVLW	0x00
000904   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000906   e102     bnz	0x90c                	BNZ	_00266_DS_
000908   0efa     movlw	0xfa               	MOVLW	0xfa
00090a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00266_DS_:
00090c   e228     bc	0x95e                 	BC	_00182_DS_
                                           ;	.line	550; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
00090e   ece7     call	0x7fce, 0           	CALL	_TickGet
000910   f03f
000912   6e01     movwf	0x1, 0             	MOVWF	r0x01
000914   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000916   f002
000918   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
00091a   f003
00091c   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
00091e   f004
000920   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000922   515c     movf	0x5c, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000924   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000926   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000928   515d     movf	0x5d, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
00092a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
00092c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
00092e   515e     movf	0x5e, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000930   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000932   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000934   515f     movf	0x5f, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000936   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000938   0e00     movlw	0                  	MOVLW	0x00
00093a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00093c   e108     bnz	0x94e                	BNZ	_00267_DS_
00093e   0e01     movlw	0x1                	MOVLW	0x01
000940   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000942   e105     bnz	0x94e                	BNZ	_00267_DS_
000944   0e3d     movlw	0x3d               	MOVLW	0x3d
000946   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000948   e102     bnz	0x94e                	BNZ	_00267_DS_
00094a   0ee4     movlw	0xe4               	MOVLW	0xe4
00094c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00267_DS_:
00094e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000950   efe0     goto	0xdc0               	GOTO	_00229_DS_
000952   f006
                                           ;	.line	551; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000954   0e02     movlw	0x2                	MOVLW	0x02
000956   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000958   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	552; TCPIP_Stack/DHCP.c	break;
00095a   efe0     goto	0xdc0               	GOTO	_00229_DS_
00095c   f006
                                           _00182_DS_:
00095e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	557; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bDHCPServerDetected = TRUE;
000960   875b     bsf	0x5b, 0x3, 0x1       	BSF	(_DHCPClient + 2), 3, B
                                           ;	.line	560; TCPIP_Stack/DHCP.c	if(_DHCPReceive() != DHCP_OFFER_MESSAGE) break;
000962   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000964   f000
000966   6e01     movwf	0x1, 0             	MOVWF	r0x01
000968   6a02     clrf	0x2, 0              	CLRF	r0x02
00096a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00096c   0a02     xorlw	0x2                	XORLW	0x02
00096e   e102     bnz	0x974                	BNZ	_00268_DS_
000970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000972   e002     bz	0x978                 	BZ	_00269_DS_
                                           _00268_DS_:
000974   efe0     goto	0xdc0               	GOTO	_00229_DS_
000976   f006
                                           _00269_DS_:
                                           ;	.line	561; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_REQUEST;
000978   0e04     movlw	0x4                	MOVLW	0x04
00097a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
00097c   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00185_DS_:
00097e   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	565; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000980   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
000982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000984   ec1f     call	0x703e, 0           	CALL	_UDPIsPutReady
000986   f038
000988   6e01     movwf	0x1, 0             	MOVWF	r0x01
00098a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00098c   f002
00098e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000990   0e01     movlw	0x1                	MOVLW	0x01
000992   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000994   e102     bnz	0x99a                	BNZ	_00270_DS_
000996   0e02     movlw	0x2                	MOVLW	0x02
000998   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00270_DS_:
00099a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00099c   efe0     goto	0xdc0               	GOTO	_00229_DS_
00099e   f006
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0009a0   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	572; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
0009a2   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
0009a4   0d0e     mullw	0xe                	MULLW	0x0e
0009a6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0009a8   f001
0009aa   6a02     clrf	0x2, 0              	CLRF	r0x02
0009ac   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0009ae   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0009b0   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0009b2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	573; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
0009b4   0e00     movlw	0                  	MOVLW	0x00
0009b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b8   0e0a     movlw	0xa                	MOVLW	0x0a
0009ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009bc   0eff     movlw	0xff               	MOVLW	0xff
0009be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c8   ec95     call	0x672a, 0           	CALL	_memset
0009ca   f033
0009cc   0e05     movlw	0x5                	MOVLW	0x05
0009ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	576; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, FALSE);	
0009d0   0e00     movlw	0                  	MOVLW	0x00
0009d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d4   0e03     movlw	0x3                	MOVLW	0x03
0009d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d8   ec86     call	0x150c, 0           	CALL	__DHCPSend
0009da   f00a
0009dc   0e02     movlw	0x2                	MOVLW	0x02
0009de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	579; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0009e0   ece7     call	0x7fce, 0           	CALL	_TickGet
0009e2   f03f
0009e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009e6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0009e8   f002
0009ea   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0009ec   f003
0009ee   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0009f0   f004
0009f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009f4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
0009f6   6f5c     movwf	0x5c, 0x1          	MOVWF	(_DHCPClient + 3), B
0009f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009fa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
0009fc   6f5d     movwf	0x5d, 0x1          	MOVWF	(_DHCPClient + 4), B
0009fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a00   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000a02   6f5e     movwf	0x5e, 0x1          	MOVWF	(_DHCPClient + 5), B
000a04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a06   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000a08   6f5f     movwf	0x5f, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	580; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_REQUEST_ACK;
000a0a   0e05     movlw	0x5                	MOVLW	0x05
000a0c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000a0e   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	581; TCPIP_Stack/DHCP.c	break;
000a10   efe0     goto	0xdc0               	GOTO	_00229_DS_
000a12   f006
                                           _00188_DS_:
000a14   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	585; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000a16   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
000a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1a   ec2e     call	0x765c, 0           	CALL	_UDPIsGetReady
000a1c   f03b
000a1e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a20   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a22   f002
000a24   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000a26   0e00     movlw	0                  	MOVLW	0x00
000a28   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a2a   e102     bnz	0xa30                	BNZ	_00271_DS_
000a2c   0efa     movlw	0xfa               	MOVLW	0xfa
000a2e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00271_DS_:
000a30   e226     bc	0xa7e                 	BC	_00192_DS_
                                           ;	.line	589; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
000a32   ece7     call	0x7fce, 0           	CALL	_TickGet
000a34   f03f
000a36   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a38   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a3a   f002
000a3c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000a3e   f003
000a40   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000a42   f004
000a44   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000a46   515c     movf	0x5c, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000a48   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000a4a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000a4c   515d     movf	0x5d, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000a4e   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000a50   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000a52   515e     movf	0x5e, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000a54   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000a56   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000a58   515f     movf	0x5f, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000a5a   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000a5c   0e00     movlw	0                  	MOVLW	0x00
000a5e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000a60   e108     bnz	0xa72                	BNZ	_00272_DS_
000a62   0e01     movlw	0x1                	MOVLW	0x01
000a64   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000a66   e105     bnz	0xa72                	BNZ	_00272_DS_
000a68   0e3d     movlw	0x3d               	MOVLW	0x3d
000a6a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a6c   e102     bnz	0xa72                	BNZ	_00272_DS_
000a6e   0ee4     movlw	0xe4               	MOVLW	0xe4
000a70   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00272_DS_:
000a72   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000a74   d1a5     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	590; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000a76   0e02     movlw	0x2                	MOVLW	0x02
000a78   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000a7a   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	591; TCPIP_Stack/DHCP.c	break;
000a7c   d1a1     bra	0xdc0                	BRA	_00229_DS_
                                           _00192_DS_:
                                           ;	.line	595; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000a7e   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000a80   f000
000a82   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a84   6a02     clrf	0x2, 0              	CLRF	r0x02
000a86   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a88   0a05     xorlw	0x5                	XORLW	0x05
000a8a   e102     bnz	0xa90                	BNZ	_00274_DS_
000a8c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a8e   e007     bz	0xa9e                 	BZ	_00193_DS_
                                           _00274_DS_:
000a90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a92   0a06     xorlw	0x6                	XORLW	0x06
000a94   e103     bnz	0xa9c                	BNZ	_00276_DS_
000a96   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a98   e101     bnz	0xa9c                	BNZ	_00276_DS_
000a9a   d05f     bra	0xb5a                	BRA	_00200_DS_
                                           _00276_DS_:
000a9c   d191     bra	0xdc0                	BRA	_00229_DS_
                                           _00193_DS_:
000a9e   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	598; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000aa0   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
000aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa4   ec67     call	0x70ce, 0           	CALL	_UDPClose
000aa6   f038
000aa8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000aaa   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	599; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000aac   6959     setf	0x59, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	600; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000aae   ece7     call	0x7fce, 0           	CALL	_TickGet
000ab0   f03f
000ab2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ab4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ab6   f002
000ab8   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000aba   f003
000abc   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000abe   f004
000ac0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ac2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000ac4   6f5c     movwf	0x5c, 0x1          	MOVWF	(_DHCPClient + 3), B
000ac6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ac8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000aca   6f5d     movwf	0x5d, 0x1          	MOVWF	(_DHCPClient + 4), B
000acc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ace   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000ad0   6f5e     movwf	0x5e, 0x1          	MOVWF	(_DHCPClient + 5), B
000ad2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ad4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000ad6   6f5f     movwf	0x5f, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	601; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000ad8   0e06     movlw	0x6                	MOVLW	0x06
000ada   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000adc   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
000ade   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	602; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000ae0   835b     bsf	0x5b, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
000ae2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	603; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = TRUE;	
000ae4   815b     bsf	0x5b, 0, 0x1         	BSF	(_DHCPClient + 2), 0, B
000ae6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	605; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.IPAddress)
000ae8   a174     btfss	0x74, 0, 0x1       	BTFSS	(_DHCPClient + 27), 0, B
000aea   d010     bra	0xb0c                	BRA	_00195_DS_
000aec   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	606; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = DHCPClient.tempIPAddress.Val;
000aee   5168     movf	0x68, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
000af0   010e     movlb	0xe                	BANKSEL	_AppConfig
000af2   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
000af4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 16)
000af6   5169     movf	0x69, 0, 0x1        	MOVF	(_DHCPClient + 16), W, B
000af8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
000afa   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
000afc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 17)
000afe   516a     movf	0x6a, 0, 0x1        	MOVF	(_DHCPClient + 17), W, B
000b00   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
000b02   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
000b04   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 18)
000b06   516b     movf	0x6b, 0, 0x1        	MOVF	(_DHCPClient + 18), W, B
000b08   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
000b0a   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
                                           _00195_DS_:
000b0c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	607; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Mask)
000b0e   a574     btfss	0x74, 0x2, 0x1     	BTFSS	(_DHCPClient + 27), 2, B
000b10   d010     bra	0xb32                	BRA	_00197_DS_
000b12   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 23)
                                           ;	.line	608; TCPIP_Stack/DHCP.c	AppConfig.MyMask.Val = DHCPClient.tempMask.Val;
000b14   5170     movf	0x70, 0, 0x1        	MOVF	(_DHCPClient + 23), W, B
000b16   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
000b18   6f04     movwf	0x4, 0x1           	MOVWF	(_AppConfig + 4), B
000b1a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 24)
000b1c   5171     movf	0x71, 0, 0x1        	MOVF	(_DHCPClient + 24), W, B
000b1e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
000b20   6f05     movwf	0x5, 0x1           	MOVWF	(_AppConfig + 5), B
000b22   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 25)
000b24   5172     movf	0x72, 0, 0x1        	MOVF	(_DHCPClient + 25), W, B
000b26   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
000b28   6f06     movwf	0x6, 0x1           	MOVWF	(_AppConfig + 6), B
000b2a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 26)
000b2c   5173     movf	0x73, 0, 0x1        	MOVF	(_DHCPClient + 26), W, B
000b2e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
000b30   6f07     movwf	0x7, 0x1           	MOVWF	(_AppConfig + 7), B
                                           _00197_DS_:
000b32   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	609; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Gateway)
000b34   a374     btfss	0x74, 0x1, 0x1     	BTFSS	(_DHCPClient + 27), 1, B
000b36   d144     bra	0xdc0                	BRA	_00229_DS_
000b38   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 19)
                                           ;	.line	610; TCPIP_Stack/DHCP.c	AppConfig.MyGateway.Val = DHCPClient.tempGateway.Val;
000b3a   516c     movf	0x6c, 0, 0x1        	MOVF	(_DHCPClient + 19), W, B
000b3c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 8)
000b3e   6f08     movwf	0x8, 0x1           	MOVWF	(_AppConfig + 8), B
000b40   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 20)
000b42   516d     movf	0x6d, 0, 0x1        	MOVF	(_DHCPClient + 20), W, B
000b44   010e     movlb	0xe                	BANKSEL	(_AppConfig + 9)
000b46   6f09     movwf	0x9, 0x1           	MOVWF	(_AppConfig + 9), B
000b48   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 21)
000b4a   516e     movf	0x6e, 0, 0x1        	MOVF	(_DHCPClient + 21), W, B
000b4c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 10)
000b4e   6f0a     movwf	0xa, 0x1           	MOVWF	(_AppConfig + 10), B
000b50   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 22)
000b52   516f     movf	0x6f, 0, 0x1        	MOVF	(_DHCPClient + 22), W, B
000b54   010e     movlb	0xe                	BANKSEL	(_AppConfig + 11)
000b56   6f0b     movwf	0xb, 0x1           	MOVWF	(_AppConfig + 11), B
                                           ;	.line	624; TCPIP_Stack/DHCP.c	break;
000b58   d133     bra	0xdc0                	BRA	_00229_DS_
                                           _00200_DS_:
                                           ;	.line	627; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000b5a   0e02     movlw	0x2                	MOVLW	0x02
000b5c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000b5e   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	630; TCPIP_Stack/DHCP.c	break;
000b60   d12f     bra	0xdc0                	BRA	_00229_DS_
                                           _00202_DS_:
                                           ;	.line	633; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer < TICK_SECOND) break;
000b62   ece7     call	0x7fce, 0           	CALL	_TickGet
000b64   f03f
000b66   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b68   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000b6a   f002
000b6c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000b6e   f003
000b70   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000b72   f004
000b74   c85c     movff	0x85c, 0x5         	MOVFF	(_DHCPClient + 3), r0x05
000b76   f005
000b78   c85d     movff	0x85d, 0x6         	MOVFF	(_DHCPClient + 4), r0x06
000b7a   f006
000b7c   c85e     movff	0x85e, 0x7         	MOVFF	(_DHCPClient + 5), r0x07
000b7e   f007
000b80   c85f     movff	0x85f, 0x8         	MOVFF	(_DHCPClient + 6), r0x08
000b82   f008
000b84   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b86   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000b88   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b8a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000b8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000b8e   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000b90   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000b92   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000b94   0e00     movlw	0                  	MOVLW	0x00
000b96   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000b98   e108     bnz	0xbaa                	BNZ	_00277_DS_
000b9a   0e00     movlw	0                  	MOVLW	0x00
000b9c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000b9e   e105     bnz	0xbaa                	BNZ	_00277_DS_
000ba0   0e9e     movlw	0x9e               	MOVLW	0x9e
000ba2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000ba4   e102     bnz	0xbaa                	BNZ	_00277_DS_
000ba6   0ef2     movlw	0xf2               	MOVLW	0xf2
000ba8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00277_DS_:
000baa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000bac   d109     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	637; TCPIP_Stack/DHCP.c	if(DHCPClient.dwLeaseTime >= 2ul)
000bae   c860     movff	0x860, 0x1         	MOVFF	(_DHCPClient + 7), r0x01
000bb0   f001
000bb2   c861     movff	0x861, 0x2         	MOVFF	(_DHCPClient + 8), r0x02
000bb4   f002
000bb6   c862     movff	0x862, 0x3         	MOVFF	(_DHCPClient + 9), r0x03
000bb8   f003
000bba   c863     movff	0x863, 0x4         	MOVFF	(_DHCPClient + 10), r0x04
000bbc   f004
000bbe   0e00     movlw	0                  	MOVLW	0x00
000bc0   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000bc2   e108     bnz	0xbd4                	BNZ	_00278_DS_
000bc4   0e00     movlw	0                  	MOVLW	0x00
000bc6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000bc8   e105     bnz	0xbd4                	BNZ	_00278_DS_
000bca   0e00     movlw	0                  	MOVLW	0x00
000bcc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000bce   e102     bnz	0xbd4                	BNZ	_00278_DS_
000bd0   0e02     movlw	0x2                	MOVLW	0x02
000bd2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00278_DS_:
000bd4   e329     bnc	0xc28                	BNC	_00206_DS_
                                           ;	.line	639; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer += TICK_SECOND;
000bd6   0ef2     movlw	0xf2               	MOVLW	0xf2
000bd8   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
000bda   0e9e     movlw	0x9e               	MOVLW	0x9e
000bdc   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000bde   0e00     movlw	0                  	MOVLW	0x00
000be0   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
000be2   0e00     movlw	0                  	MOVLW	0x00
000be4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
000be6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000be8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000bea   6f5c     movwf	0x5c, 0x1          	MOVWF	(_DHCPClient + 3), B
000bec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bee   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000bf0   6f5d     movwf	0x5d, 0x1          	MOVWF	(_DHCPClient + 4), B
000bf2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000bf4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000bf6   6f5e     movwf	0x5e, 0x1          	MOVWF	(_DHCPClient + 5), B
000bf8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000bfa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000bfc   6f5f     movwf	0x5f, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	640; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime--;
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c06   0eff     movlw	0xff               	MOVLW	0xff
000c08   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c0a   0eff     movlw	0xff               	MOVLW	0xff
000c0c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000c0e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c10   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
000c12   6f60     movwf	0x60, 0x1          	MOVWF	(_DHCPClient + 7), B
000c14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c16   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
000c18   6f61     movwf	0x61, 0x1          	MOVWF	(_DHCPClient + 8), B
000c1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c1c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
000c1e   6f62     movwf	0x62, 0x1          	MOVWF	(_DHCPClient + 9), B
000c20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c22   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
000c24   6f63     movwf	0x63, 0x1          	MOVWF	(_DHCPClient + 10), B
                                           ;	.line	641; TCPIP_Stack/DHCP.c	break;
000c26   d0cc     bra	0xdc0                	BRA	_00229_DS_
                                           _00206_DS_:
                                           ;	.line	646; TCPIP_Stack/DHCP.c	NULL, DHCP_SERVER_PORT);
000c28   0e00     movlw	0                  	MOVLW	0x00
000c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2c   0e43     movlw	0x43               	MOVLW	0x43
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   0e00     movlw	0                  	MOVLW	0x00
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   0e00     movlw	0                  	MOVLW	0x00
000c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c38   0e00     movlw	0                  	MOVLW	0x00
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   0e00     movlw	0                  	MOVLW	0x00
000c3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c40   0e44     movlw	0x44               	MOVLW	0x44
000c42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c44   ec39     call	0x3072, 0           	CALL	_UDPOpen
000c46   f018
000c48   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c4a   0e07     movlw	0x7                	MOVLW	0x07
000c4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c4e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c50   0108     movlb	0x8                	BANKSEL	_DHCPClient
000c52   6f59     movwf	0x59, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	647; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
000c54   c859     movff	0x859, 0x1         	MOVFF	_DHCPClient, r0x01
000c56   f001
000c58   6a02     clrf	0x2, 0              	CLRF	r0x02
000c5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c5c   0aff     xorlw	0xff               	XORLW	0xff
000c5e   e103     bnz	0xc66                	BNZ	_00280_DS_
000c60   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c62   e101     bnz	0xc66                	BNZ	_00280_DS_
000c64   d0ad     bra	0xdc0                	BRA	_00229_DS_
                                           _00280_DS_:
                                           ;	.line	649; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_RENEW;
000c66   0e07     movlw	0x7                	MOVLW	0x07
000c68   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000c6a   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00211_DS_:
000c6c   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	655; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000c6e   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
000c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c72   ec1f     call	0x703e, 0           	CALL	_UDPIsPutReady
000c74   f038
000c76   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c78   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000c7a   f002
000c7c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000c7e   0e01     movlw	0x1                	MOVLW	0x01
000c80   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000c82   e102     bnz	0xc88                	BNZ	_00281_DS_
000c84   0e02     movlw	0x2                	MOVLW	0x02
000c86   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00281_DS_:
000c88   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000c8a   d09a     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	658; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, TRUE);
000c8c   0e01     movlw	0x1                	MOVLW	0x01
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   0e03     movlw	0x3                	MOVLW	0x03
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   ec86     call	0x150c, 0           	CALL	__DHCPSend
000c96   f00a
000c98   0e02     movlw	0x2                	MOVLW	0x02
000c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c9c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	659; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
000c9e   955b     bcf	0x5b, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	662; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000ca0   ece7     call	0x7fce, 0           	CALL	_TickGet
000ca2   f03f
000ca4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ca6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ca8   f002
000caa   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000cac   f003
000cae   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000cb0   f004
000cb2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cb4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000cb6   6f5c     movwf	0x5c, 0x1          	MOVWF	(_DHCPClient + 3), B
000cb8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cba   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000cbc   6f5d     movwf	0x5d, 0x1          	MOVWF	(_DHCPClient + 4), B
000cbe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cc0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000cc2   6f5e     movwf	0x5e, 0x1          	MOVWF	(_DHCPClient + 5), B
000cc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cc6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000cc8   6f5f     movwf	0x5f, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	663; TCPIP_Stack/DHCP.c	DHCPClient.smState++;
000cca   c85a     movff	0x85a, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
000ccc   f001
000cce   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000cd0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cd2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000cd4   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	664; TCPIP_Stack/DHCP.c	break;
000cd6   d074     bra	0xdc0                	BRA	_00229_DS_
                                           _00216_DS_:
000cd8   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	670; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000cda   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
000cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cde   ec2e     call	0x765c, 0           	CALL	_UDPIsGetReady
000ce0   f03b
000ce2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ce4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ce6   f002
000ce8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000cea   0e00     movlw	0                  	MOVLW	0x00
000cec   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000cee   e102     bnz	0xcf4                	BNZ	_00282_DS_
000cf0   0efa     movlw	0xfa               	MOVLW	0xfa
000cf2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00282_DS_:
000cf4   e230     bc	0xd56                 	BC	_00222_DS_
                                           ;	.line	674; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >=  DHCP_TIMEOUT)
000cf6   ece7     call	0x7fce, 0           	CALL	_TickGet
000cf8   f03f
000cfa   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cfc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000cfe   f002
000d00   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d02   f003
000d04   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d06   f004
000d08   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000d0a   515c     movf	0x5c, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000d0c   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000d0e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000d10   515d     movf	0x5d, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000d12   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000d14   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000d16   515e     movf	0x5e, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000d18   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000d1a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000d1c   515f     movf	0x5f, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000d1e   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000d20   0e00     movlw	0                  	MOVLW	0x00
000d22   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000d24   e108     bnz	0xd36                	BNZ	_00283_DS_
000d26   0e01     movlw	0x1                	MOVLW	0x01
000d28   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000d2a   e105     bnz	0xd36                	BNZ	_00283_DS_
000d2c   0e3d     movlw	0x3d               	MOVLW	0x3d
000d2e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000d30   e102     bnz	0xd36                	BNZ	_00283_DS_
000d32   0ee4     movlw	0xe4               	MOVLW	0xe4
000d34   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00283_DS_:
000d36   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d38   d043     bra	0xdc0                	BRA	_00229_DS_
000d3a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	676; TCPIP_Stack/DHCP.c	if(++DHCPClient.smState > SM_DHCP_GET_RENEW_ACK3)
000d3c   295a     incf	0x5a, 0, 0x1        	INCF	(_DHCPClient + 1), W, B
000d3e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d40   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d42   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000d44   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
000d46   0e0d     movlw	0xd                	MOVLW	0x0d
000d48   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000d4a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d4c   d039     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	677; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000d4e   0e02     movlw	0x2                	MOVLW	0x02
000d50   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000d52   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	679; TCPIP_Stack/DHCP.c	break;
000d54   d035     bra	0xdc0                	BRA	_00229_DS_
                                           _00222_DS_:
                                           ;	.line	683; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000d56   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000d58   f000
000d5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d5c   6a02     clrf	0x2, 0              	CLRF	r0x02
000d5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d60   0a05     xorlw	0x5                	XORLW	0x05
000d62   e102     bnz	0xd68                	BNZ	_00286_DS_
000d64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d66   e006     bz	0xd74                 	BZ	_00223_DS_
                                           _00286_DS_:
000d68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d6a   0a06     xorlw	0x6                	XORLW	0x06
000d6c   e129     bnz	0xdc0                	BNZ	_00229_DS_
000d6e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d70   e024     bz	0xdba                 	BZ	_00224_DS_
                                           _00288_DS_:
000d72   d026     bra	0xdc0                	BRA	_00229_DS_
                                           _00223_DS_:
000d74   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	686; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000d76   5159     movf	0x59, 0, 0x1        	MOVF	_DHCPClient, W, B
000d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7a   ec67     call	0x70ce, 0           	CALL	_UDPClose
000d7c   f038
000d7e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000d80   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	687; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000d82   6959     setf	0x59, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	688; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000d84   ece7     call	0x7fce, 0           	CALL	_TickGet
000d86   f03f
000d88   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d8a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000d8c   f002
000d8e   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d90   f003
000d92   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d94   f004
000d96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d98   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000d9a   6f5c     movwf	0x5c, 0x1          	MOVWF	(_DHCPClient + 3), B
000d9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d9e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000da0   6f5d     movwf	0x5d, 0x1          	MOVWF	(_DHCPClient + 4), B
000da2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000da4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000da6   6f5e     movwf	0x5e, 0x1          	MOVWF	(_DHCPClient + 5), B
000da8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000daa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000dac   6f5f     movwf	0x5f, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	689; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000dae   0e06     movlw	0x6                	MOVLW	0x06
000db0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000db2   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
000db4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	690; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000db6   835b     bsf	0x5b, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
                                           ;	.line	691; TCPIP_Stack/DHCP.c	break;
000db8   d003     bra	0xdc0                	BRA	_00229_DS_
                                           _00224_DS_:
                                           ;	.line	694; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000dba   0e02     movlw	0x2                	MOVLW	0x02
000dbc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000dbe   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00229_DS_:
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000dc0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000dc2   ef9a     goto	0x734               	GOTO	_00227_DS_
000dc4   f003
                                           _00231_DS_:
000dc6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000dc8   f008
000dca   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000dcc   f007
000dce   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000dd0   f006
000dd2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000dd4   f005
000dd6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000dd8   f004
000dda   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000ddc   f003
000dde   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000de0   f002
000de2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000de4   f001
000de6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000de8   f000
000dea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dec   ffd9
000dee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsServerDetected	code
                                           _DHCPIsServerDetected:
                                           ;	.line	457; TCPIP_Stack/DHCP.c	BOOL DHCPIsServerDetected(BYTE vInterface)
008012   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008014   ffe5
008016   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008018   ffd9
00801a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00801c   ffe5
                                           ;	.line	460; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bDHCPServerDetected;
00801e   6a00     clrf	0, 0                	CLRF	r0x00
008020   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
008022   b75b     btfsc	0x5b, 0x3, 0x1     	BTFSC	(_DHCPClient + 2), 3, B
008024   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
008026   5000     movf	0, 0, 0             	MOVF	r0x00, W
008028   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00802a   f000
00802c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00802e   ffd9
008030   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPStateChanged	code
                                           _DHCPStateChanged:
                                           ;	.line	420; TCPIP_Stack/DHCP.c	BOOL DHCPStateChanged(BYTE vInterface)
008072   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008074   ffe5
008076   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008078   ffd9
00807a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	423; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bEvent)
00807c   a35b     btfss	0x5b, 0x1, 0x1     	BTFSS	(_DHCPClient + 2), 1, B
00807e   d004     bra	0x8088               	BRA	_00158_DS_
008080   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	425; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 0;
008082   935b     bcf	0x5b, 0x1, 0x1       	BCF	(_DHCPClient + 2), 1, B
                                           ;	.line	426; TCPIP_Stack/DHCP.c	return TRUE;
008084   0e01     movlw	0x1                	MOVLW	0x01
008086   d001     bra	0x808a               	BRA	_00159_DS_
                                           _00158_DS_:
                                           ;	.line	428; TCPIP_Stack/DHCP.c	return FALSE;
008088   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00159_DS_:
00808a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00808c   ffd9
00808e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsBound	code
                                           _DHCPIsBound:
                                           ;	.line	386; TCPIP_Stack/DHCP.c	BOOL DHCPIsBound(BYTE vInterface)
008032   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008034   ffe5
008036   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008038   ffd9
00803a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00803c   ffe5
                                           ;	.line	389; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bIsBound;
00803e   6a00     clrf	0, 0                	CLRF	r0x00
008040   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
008042   b15b     btfsc	0x5b, 0, 0x1       	BTFSC	(_DHCPClient + 2), 0, B
008044   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
008046   5000     movf	0, 0, 0             	MOVF	r0x00, W
008048   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00804a   f000
00804c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00804e   ffd9
008050   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsEnabled	code
                                           _DHCPIsEnabled:
                                           ;	.line	355; TCPIP_Stack/DHCP.c	BOOL DHCPIsEnabled(BYTE vInterface)
007eaa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007eac   ffe5
007eae   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007eb0   ffd9
007eb2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007eb4   ffe5
                                           ;	.line	358; TCPIP_Stack/DHCP.c	return DHCPClient.smState != SM_DHCP_DISABLED;
007eb6   6a00     clrf	0, 0                	CLRF	r0x00
007eb8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
007eba   515a     movf	0x5a, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
007ebc   e101     bnz	0x7ec0               	BNZ	_00147_DS_
007ebe   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00147_DS_:
007ec0   5000     movf	0, 0, 0             	MOVF	r0x00, W
007ec2   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
007ec4   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
007ec6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
007ec8   6a00     clrf	0, 0                	CLRF	r0x00
007eca   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
007ecc   5000     movf	0, 0, 0             	MOVF	r0x00, W
007ece   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007ed0   f000
007ed2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007ed4   ffd9
007ed6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPEnable	code
                                           _DHCPEnable:
                                           ;	.line	324; TCPIP_Stack/DHCP.c	void DHCPEnable(BYTE vInterface)
008090   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008092   ffe5
008094   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008096   ffd9
008098   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	328; TCPIP_Stack/DHCP.c	if(DHCPClient.smState == SM_DHCP_DISABLED)
00809a   515a     movf	0x5a, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
00809c   e105     bnz	0x80a8               	BNZ	_00139_DS_
                                           ;	.line	330; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
00809e   0e01     movlw	0x1                	MOVLW	0x01
0080a0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
0080a2   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
0080a4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	331; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;
0080a6   915b     bcf	0x5b, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
                                           _00139_DS_:
0080a8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0080aa   ffd9
0080ac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPDisable	code
                                           _DHCPDisable:
                                           ;	.line	289; TCPIP_Stack/DHCP.c	void DHCPDisable(BYTE vInterface)
007b4a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007b4c   ffe5
007b4e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007b50   ffd9
007b52   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007b54   ffe5
007b56   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007b58   ffe5
007b5a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007b5c   ffe5
                                           ;	.line	293; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
007b5e   c859     movff	0x859, 0           	MOVFF	_DHCPClient, r0x00
007b60   f000
007b62   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
007b64   f001
007b66   6a02     clrf	0x2, 0              	CLRF	r0x02
007b68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007b6a   0aff     xorlw	0xff               	XORLW	0xff
007b6c   e102     bnz	0x7b72               	BNZ	_00132_DS_
007b6e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007b70   e007     bz	0x7b80                	BZ	_00127_DS_
                                           _00132_DS_:
                                           ;	.line	295; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
007b72   5000     movf	0, 0, 0             	MOVF	r0x00, W
007b74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b76   ec67     call	0x70ce, 0           	CALL	_UDPClose
007b78   f038
007b7a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
007b7c   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	296; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
007b7e   6959     setf	0x59, 0x1           	SETF	_DHCPClient, B
                                           _00127_DS_:
007b80   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	299; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_DISABLED;
007b82   6b5a     clrf	0x5a, 0x1           	CLRF	(_DHCPClient + 1), B
007b84   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007b86   f002
007b88   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007b8a   f001
007b8c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007b8e   f000
007b90   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007b92   ffd9
007b94   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPInit	code
                                           _DHCPInit:
                                           ;	.line	223; TCPIP_Stack/DHCP.c	void DHCPInit(BYTE vInterface)
007266   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007268   ffe5
00726a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00726c   ffd9
00726e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007270   ffe5
007272   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007274   ffe5
007276   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007278   ffe5
00727a   0108     movlb	0x8                	BANKSEL	_DHCPClientInitializedOnce
                                           ;	.line	229; TCPIP_Stack/DHCP.c	if(!DHCPClientInitializedOnce)
00727c   517e     movf	0x7e, 0, 0x1        	MOVF	_DHCPClientInitializedOnce, W, B
00727e   e112     bnz	0x72a4               	BNZ	_00106_DS_
                                           ;	.line	231; TCPIP_Stack/DHCP.c	DHCPClientInitializedOnce = TRUE;
007280   0e01     movlw	0x1                	MOVLW	0x01
007282   0108     movlb	0x8                	BANKSEL	_DHCPClientInitializedOnce
007284   6f7e     movwf	0x7e, 0x1          	MOVWF	_DHCPClientInitializedOnce, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
007286   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00109_DS_:
007288   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00728a   f001
00728c   6a02     clrf	0x2, 0              	CLRF	r0x02
00728e   0e00     movlw	0                  	MOVLW	0x00
007290   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
007292   e102     bnz	0x7298               	BNZ	_00119_DS_
007294   0e01     movlw	0x1                	MOVLW	0x01
007296   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00119_DS_:
007298   e205     bc	0x72a4                	BC	_00106_DS_
00729a   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	235; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
00729c   6959     setf	0x59, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
00729e   0e01     movlw	0x1                	MOVLW	0x01
0072a0   6e00     movwf	0, 0               	MOVWF	r0x00
0072a2   d7f2     bra	0x7288               	BRA	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	242; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
0072a4   c859     movff	0x859, 0           	MOVFF	_DHCPClient, r0x00
0072a6   f000
0072a8   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0072aa   f001
0072ac   6a02     clrf	0x2, 0              	CLRF	r0x02
0072ae   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0072b0   0aff     xorlw	0xff               	XORLW	0xff
0072b2   e102     bnz	0x72b8               	BNZ	_00121_DS_
0072b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0072b6   e007     bz	0x72c6                	BZ	_00108_DS_
                                           _00121_DS_:
                                           ;	.line	244; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
0072b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0072ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072bc   ec67     call	0x70ce, 0           	CALL	_UDPClose
0072be   f038
0072c0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0072c2   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	245; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
0072c4   6959     setf	0x59, 0x1           	SETF	_DHCPClient, B
                                           _00108_DS_:
                                           ;	.line	249; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
0072c6   0e01     movlw	0x1                	MOVLW	0x01
0072c8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
0072ca   6f5a     movwf	0x5a, 0x1          	MOVWF	(_DHCPClient + 1), B
0072cc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	250; TCPIP_Stack/DHCP.c	DHCPClient.flags.val = 0;
0072ce   6b5b     clrf	0x5b, 0x1           	CLRF	(_DHCPClient + 2), B
0072d0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	251; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode = TRUE; // This flag toggles before 
0072d2   895b     bsf	0x5b, 0x4, 0x1       	BSF	(_DHCPClient + 2), 4, B
0072d4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	255; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = TRUE;
0072d6   835b     bsf	0x5b, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
0072d8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0072da   f002
0072dc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0072de   f001
0072e0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0072e2   f000
0072e4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0072e6   ffd9
0072e8   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4782 (0x12ae) bytes ( 3.65%)
                                           ;           	 2391 (0x0957) words
                                           ; udata size:	   39 (0x0027) bytes ( 1.02%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:57 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:57 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _MACInit
                                           	global _MACIsLinked
                                           	global _MACIsTxReady
                                           	global _MACDiscardRx
                                           	global _MACGetFreeRxSize
                                           	global _MACGetHeader
                                           	global _MACPutHeader
                                           	global _MACFlush
                                           	global _MACSetReadPtrInRx
                                           	global _MACSetWritePtr
                                           	global _MACSetReadPtr
                                           	global _MACCalcRxChecksum
                                           	global _CalcIPBufferChecksum
                                           	global _MACMemCopyAsync
                                           	global _MACIsMemCopyDone
                                           	global _MACGet
                                           	global _MACGetArray
                                           	global _MACPut
                                           	global _MACPutArray
                                           	global _ReadPHYReg
                                           	global _WritePHYReg
                                           	global _MACPowerDown
                                           	global _MACPowerUp
                                           	global _MACPrintHeader
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern __gptrget1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _DisplayString
                                           	extern _swaps
                                           	extern _TickGet
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_ETH97J60_0	udata
                                           _NextPacketLocation	res	2
                                           
                                           udata_ETH97J60_1	udata
                                           _CurrentPacketLocation	res	2
                                           
                                           udata_ETH97J60_2	udata
                                           _WasDiscarded	res	1
                                           
                                           udata_ETH97J60_3	udata
                                           _wTXWatchdog	res	2
                                           
                                           udata_ETH97J60_4	udata
                                           _MACIsLinked_pr_1_1	res	2
                                           
                                           udata_ETH97J60_5	udata
                                           _MACDiscardRx_NewRXRDLocation_1_1	res	2
                                           
                                           udata_ETH97J60_6	udata
                                           _MACGetFreeRxSize_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_7	udata
                                           _MACGetFreeRxSize_WritePT_1_1	res	2
                                           
                                           udata_ETH97J60_8	udata
                                           _MACGetHeader_header_1_1	res	20
                                           
                                           udata_ETH97J60_9	udata
                                           _MACFlush_i_2_2	res	1
                                           
                                           udata_ETH97J60_10	udata
                                           _MACSetReadPtrInRx_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_11	udata
                                           _CalcIPBufferChecksum_ChunkLen_1_1	res	2
                                           
                                           udata_ETH97J60_12	udata
                                           _CalcIPBufferChecksum_Checksum_1_1	res	4
                                           
                                           udata_ETH97J60_13	udata
                                           _CalcIPBufferChecksum_DataBuffer_1_1	res	20
                                           
                                           udata_ETH97J60_14	udata
                                           _MACMemCopyAsync_destAddr_1_1	res	2
                                           
                                           udata_ETH97J60_15	udata
                                           _MACMemCopyAsync_sourceAddr_1_1	res	2
                                           
                                           udata_ETH97J60_16	udata
                                           _MACMemCopyAsync_ReadSave_1_1	res	2
                                           
                                           udata_ETH97J60_17	udata
                                           _MACMemCopyAsync_WriteSave_1_1	res	2
                                           
                                           udata_ETH97J60_18	udata
                                           _MACGetArray_i_1_1	res	1
                                           
                                           udata_ETH97J60_19	udata
                                           _ReadPHYReg_Result_1_1	res	2
                                           
                                           udata_ETH97J60_20	udata
                                           _WritePHYReg_Data_1_1	res	2
                                           
                                           udata_ETH97J60_21	udata
                                           _MACPrintHeader_header_1_1	res	64
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPrintHeader	code
                                           _MACPrintHeader:
                                           ;	.line	1452; TCPIP_Stack/ETH97J60.c	void MACPrintHeader(BYTE woffset)
004fda   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004fdc   ffe5
004fde   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004fe0   ffd9
004fe2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004fe4   ffe5
004fe6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004fe8   ffe5
004fea   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004fec   ffe5
004fee   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004ff0   ffe5
004ff2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004ff4   ffe5
004ff6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004ff8   ffe5
004ffa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004ffc   ffe5
004ffe   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005000   ffe5
005002   0e02     movlw	0x2                	MOVLW	0x02
005004   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005006   f000
                                           ;	.line	1458; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(TXSTART + 1) ;
005008   0e0b     movlw	0xb                	MOVLW	0x0b
00500a   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	1459; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(TXSTART + 1) ;
00500c   0e1a     movlw	0x1a               	MOVLW	0x1a
00500e   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	1462; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header[0], sizeof(header));
005010   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
005012   6e02     movwf	0x2, 0             	MOVWF	r0x02
005014   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
005016   6e01     movwf	0x1, 0             	MOVWF	r0x01
005018   0e80     movlw	0x80               	MOVLW	0x80
00501a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00501c   0e00     movlw	0                  	MOVLW	0x00
00501e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005020   0e40     movlw	0x40               	MOVLW	0x40
005022   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005024   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005026   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005028   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00502a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00502c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00502e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005030   ecda     call	0x63b4, 0           	CALL	_MACGetArray
005032   f031
005034   0e05     movlw	0x5                	MOVLW	0x05
005036   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
005038   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00503a   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
00503c   6a01     clrf	0x1, 0              	CLRF	r0x01
00503e   6a02     clrf	0x2, 0              	CLRF	r0x02
005040   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00492_DS_:
005042   0e10     movlw	0x10               	MOVLW	0x10
005044   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
005046   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005048   d057     bra	0x50f8               	BRA	_00495_DS_
                                           ;	.line	1466; TCPIP_Stack/ETH97J60.c	c = (header[i+2*woffset]>>4)&0x0F;
00504a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00504c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00504e   6e04     movwf	0x4, 0             	MOVWF	r0x04
005050   6a05     clrf	0x5, 0              	CLRF	r0x05
005052   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
005054   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
005056   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
005058   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00505a   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00505c   ffe9
00505e   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
005060   ffea
005062   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
005064   f004
005066   3804     swapf	0x4, 0, 0          	SWAPF	r0x04, W
005068   0b0f     andlw	0xf                	ANDLW	0x0f
00506a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00506c   0e0f     movlw	0xf                	MOVLW	0x0f
00506e   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
                                           ;	.line	1467; TCPIP_Stack/ETH97J60.c	LCDText[2*i] = c + (c < 0x0A ? '0' : 'A');
005070   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
005072   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
005074   6e05     movwf	0x5, 0             	MOVWF	r0x05
005076   6a06     clrf	0x6, 0              	CLRF	r0x06
005078   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
00507a   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00507c   0e0a     movlw	0xa                	MOVLW	0x0a
00507e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
005080   e203     bc	0x5088                	BC	_00498_DS_
005082   0e30     movlw	0x30               	MOVLW	0x30
005084   6e07     movwf	0x7, 0             	MOVWF	r0x07
005086   d002     bra	0x508c               	BRA	_00499_DS_
                                           _00498_DS_:
005088   0e41     movlw	0x41               	MOVLW	0x41
00508a   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00499_DS_:
00508c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00508e   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
005090   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
005092   ffe9
005094   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
005096   ffea
005098   c007     movff	0x7, 0xfef         	MOVFF	r0x07, INDF0
00509a   ffef
                                           ;	.line	1468; TCPIP_Stack/ETH97J60.c	c = header[i+2*woffset]&0x0F;
00509c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00509e   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0050a0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0050a2   6a06     clrf	0x6, 0              	CLRF	r0x06
0050a4   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
0050a6   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0050a8   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
0050aa   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0050ac   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0050ae   ffe9
0050b0   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
0050b2   ffea
0050b4   cfef     movff	0xfef, 0x5         	MOVFF	INDF0, r0x05
0050b6   f005
0050b8   0e0f     movlw	0xf                	MOVLW	0x0f
0050ba   1405     andwf	0x5, 0, 0          	ANDWF	r0x05, W
0050bc   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	1469; TCPIP_Stack/ETH97J60.c	LCDText[2*i+1] = c + (c < 0x0A ? '0' : 'A');
0050be   2803     incf	0x3, 0, 0           	INCF	r0x03, W
0050c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0050c2   6a06     clrf	0x6, 0              	CLRF	r0x06
0050c4   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
0050c6   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
0050c8   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0050ca   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0050cc   0e0a     movlw	0xa                	MOVLW	0x0a
0050ce   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0050d0   e203     bc	0x50d8                	BC	_00500_DS_
0050d2   0e30     movlw	0x30               	MOVLW	0x30
0050d4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0050d6   d002     bra	0x50dc               	BRA	_00501_DS_
                                           _00500_DS_:
0050d8   0e41     movlw	0x41               	MOVLW	0x41
0050da   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00501_DS_:
0050dc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0050de   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0050e0   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0050e2   ffe9
0050e4   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
0050e6   ffea
0050e8   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
0050ea   ffef
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
0050ec   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0050ee   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0050f0   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0050f2   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0050f4   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0050f6   d7a5     bra	0x5042               	BRA	_00492_DS_
                                           _00495_DS_:
0050f8   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	1471; TCPIP_Stack/ETH97J60.c	LCDText[32]=0;
0050fa   6b74     clrf	0x74, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	1473; TCPIP_Stack/ETH97J60.c	LCDUpdate();
0050fc   ecf1     call	0x7be2, 0           	CALL	_LCDUpdate
0050fe   f03d
005100   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005102   f007
005104   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005106   f006
005108   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00510a   f005
00510c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00510e   f004
005110   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005112   f003
005114   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005116   f002
005118   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00511a   f001
00511c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00511e   f000
005120   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005122   ffd9
005124   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerUp	code
                                           _MACPowerUp:
                                           ;	.line	1357; TCPIP_Stack/ETH97J60.c	void MACPowerUp(void)
0080cc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0080ce   ffe5
0080d0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0080d2   ffd9
0080d4   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1360; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;
0080d6   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00484_DS_:
0080d8   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1363; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY)
0080da   b1fd     btfsc	0xfd, 0, 0x1       	BTFSC	_ESTATbits, 0, B
0080dc   d002     bra	0x80e2               	BRA	_00487_DS_
                                           ;	.line	1366; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
0080de   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
0080e0   d7fb     bra	0x80d8               	BRA	_00484_DS_
                                           _00487_DS_:
0080e2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0080e4   ffd9
0080e6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerDown	code
                                           _MACPowerDown:
                                           ;	.line	1320; TCPIP_Stack/ETH97J60.c	void MACPowerDown(void)
0080ae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0080b0   ffe5
0080b2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0080b4   ffd9
                                           ;	.line	1323; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 0;
0080b6   94d2     bcf	0xd2, 0x2, 0         	BCF	_ECON1bits, 2
                                           _00473_DS_:
0080b8   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1327; TCPIP_Stack/ETH97J60.c	while(ESTATbits.RXBUSY);
0080ba   b5fd     btfsc	0xfd, 0x2, 0x1     	BTFSC	_ESTATbits, 2, B
0080bc   d7fd     bra	0x80b8               	BRA	_00473_DS_
                                           _00476_DS_:
                                           ;	.line	1330; TCPIP_Stack/ETH97J60.c	while(ECON1bits.TXRTS);
0080be   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
0080c0   d7fe     bra	0x80be               	BRA	_00476_DS_
0080c2   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1333; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 0;
0080c4   9bfe     bcf	0xfe, 0x5, 0x1       	BCF	_ECON2bits, 5, B
0080c6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0080c8   ffd9
0080ca   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__WritePHYReg	code
                                           _WritePHYReg:
                                           ;	.line	1251; TCPIP_Stack/ETH97J60.c	void WritePHYReg(BYTE Register, WORD Data)
007afc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007afe   ffe5
007b00   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007b02   ffd9
007b04   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007b06   ffe5
007b08   0e02     movlw	0x2                	MOVLW	0x02
007b0a   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
007b0c   feb4
007b0e   0e03     movlw	0x3                	MOVLW	0x03
007b10   cfdb     movff	0xfdb, 0xa85       	MOVFF	PLUSW2, _WritePHYReg_Data_1_1
007b12   fa85
007b14   0e04     movlw	0x4                	MOVLW	0x04
007b16   cfdb     movff	0xfdb, 0xa86       	MOVFF	PLUSW2, (_WritePHYReg_Data_1_1 + 1)
007b18   fa86
                                           ;	.line	1268; TCPIP_Stack/ETH97J60.c	PRODL = ((WORD_VAL*)&Data)->v[0];
007b1a   ca85     movff	0xa85, 0xff3       	MOVFF	_WritePHYReg_Data_1_1, _PRODL
007b1c   fff3
                                           ;	.line	1269; TCPIP_Stack/ETH97J60.c	PRODH = ((WORD_VAL*)&Data)->v[1];
007b1e   ca86     movff	0xa86, 0xff4       	MOVFF	(_WritePHYReg_Data_1_1 + 1), _PRODH
007b20   fff4
                                           ;	.line	1270; TCPIP_Stack/ETH97J60.c	GIESave = INTCON & 0xC0;	 // Save GIEH and GIEL bits
007b22   0ec0     movlw	0xc0               	MOVLW	0xc0
007b24   14f2     andwf	0xf2, 0, 0         	ANDWF	_INTCON, W
007b26   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	1271; TCPIP_Stack/ETH97J60.c	INTCON &= 0x3F;		 // Clear INTCONbits.GIEH and INTCONbits.GIEL
007b28   0e3f     movlw	0x3f               	MOVLW	0x3f
007b2a   16f2     andwf	0xf2, 0x1, 0       	ANDWF	_INTCON, F
007b2c   cff3     movff	0xff3, 0xeb6       	movff _PRODL, _MIWRL
007b2e   feb6
007b30   0000     nop                      	nop
007b32   cff4     movff	0xff4, 0xeb7       	movff _PRODH, _MIWRH
007b34   feb7
                                           	
                                           ;	.line	1289; TCPIP_Stack/ETH97J60.c	INTCON |= GIESave;		       // Restore GIEH and GIEL value
007b36   5000     movf	0, 0, 0             	MOVF	r0x00, W
007b38   12f2     iorwf	0xf2, 0x1, 0       	IORWF	_INTCON, F
                                           _00465_DS_:
007b3a   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1293; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
007b3c   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
007b3e   d7fd     bra	0x7b3a               	BRA	_00465_DS_
007b40   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007b42   f000
007b44   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007b46   ffd9
007b48   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__ReadPHYReg	code
                                           _ReadPHYReg:
                                           ;	.line	1208; TCPIP_Stack/ETH97J60.c	WORD ReadPHYReg(BYTE Register)
007c72   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007c74   ffe5
007c76   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007c78   ffd9
007c7a   0e02     movlw	0x2                	MOVLW	0x02
007c7c   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
007c7e   feb4
007c80   0000     nop                      	nop 
                                           ;	.line	1215; TCPIP_Stack/ETH97J60.c	MICMD = MICMD_MIIRD; Nop();
007c82   0e01     movlw	0x1                	MOVLW	0x01
007c84   010e     movlb	0xe                	BANKSEL	_MICMD
007c86   6fb2     movwf	0xb2, 0x1          	MOVWF	_MICMD, B
007c88   0000     nop                      	nop 
                                           _00451_DS_:
007c8a   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1219; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
007c8c   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
007c8e   d7fd     bra	0x7c8a               	BRA	_00451_DS_
007c90   010e     movlb	0xe                	BANKSEL	_MICMD
                                           ;	.line	1222; TCPIP_Stack/ETH97J60.c	MICMD = 0x00; Nop();
007c92   6bb2     clrf	0xb2, 0x1           	CLRF	_MICMD, B
007c94   0000     nop                      	nop 
007c96   010e     movlb	0xe                	BANKSEL	_MIRDL
                                           ;	.line	1225; TCPIP_Stack/ETH97J60.c	Result.VAL.v[0] = MIRDL;
007c98   51b8     movf	0xb8, 0, 0x1        	MOVF	_MIRDL, W, B
007c9a   010a     movlb	0xa                	BANKSEL	_ReadPHYReg_Result_1_1
007c9c   6f83     movwf	0x83, 0x1          	MOVWF	_ReadPHYReg_Result_1_1, B
007c9e   0000     nop                      	nop 
007ca0   010e     movlb	0xe                	BANKSEL	_MIRDH
                                           ;	.line	1227; TCPIP_Stack/ETH97J60.c	Result.VAL.v[1] = MIRDH;
007ca2   51b9     movf	0xb9, 0, 0x1        	MOVF	_MIRDH, W, B
007ca4   010a     movlb	0xa                	BANKSEL	(_ReadPHYReg_Result_1_1 + 1)
007ca6   6f84     movwf	0x84, 0x1          	MOVWF	(_ReadPHYReg_Result_1_1 + 1), B
                                           ;	.line	1229; TCPIP_Stack/ETH97J60.c	return Result2;
007ca8   ca84     movff	0xa84, 0xff3       	MOVFF	(_ReadPHYReg_Result_1_1 + 1), PRODL
007caa   fff3
007cac   010a     movlb	0xa                	BANKSEL	_ReadPHYReg_Result_1_1
007cae   5183     movf	0x83, 0, 0x1        	MOVF	_ReadPHYReg_Result_1_1, W, B
007cb0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007cb2   ffd9
007cb4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutArray	code
                                           _MACPutArray:
                                           ;	.line	1149; TCPIP_Stack/ETH97J60.c	void MACPutArray(BYTE *val, WORD len)
006dec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006dee   ffe5
006df0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006df2   ffd9
006df4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006df6   ffe5
006df8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006dfa   ffe5
006dfc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006dfe   ffe5
006e00   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006e02   ffe5
006e04   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006e06   ffe5
006e08   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006e0a   ffe5
006e0c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006e0e   ffe5
006e10   0e02     movlw	0x2                	MOVLW	0x02
006e12   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006e14   f000
006e16   0e03     movlw	0x3                	MOVLW	0x03
006e18   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006e1a   f001
006e1c   0e04     movlw	0x4                	MOVLW	0x04
006e1e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006e20   f002
006e22   0e05     movlw	0x5                	MOVLW	0x05
006e24   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006e26   f003
006e28   0e06     movlw	0x6                	MOVLW	0x06
006e2a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006e2c   f004
                                           _00437_DS_:
                                           ;	.line	1151; TCPIP_Stack/ETH97J60.c	while(len--)
006e2e   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
006e30   f005
006e32   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
006e34   f006
006e36   0eff     movlw	0xff               	MOVLW	0xff
006e38   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
006e3a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
006e3c   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
006e3e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006e40   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
006e42   e00e     bz	0x6e60                	BZ	_00440_DS_
                                           ;	.line	1167; TCPIP_Stack/ETH97J60.c	EDATA = *val++; 
006e44   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006e46   ffe9
006e48   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006e4a   fff3
006e4c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006e4e   ecf8     call	0x7ff0, 0           	CALL	__gptrget1
006e50   f03f
006e52   6e61     movwf	0x61, 0            	MOVWF	_EDATA
006e54   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
006e56   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006e58   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
006e5a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006e5c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
006e5e   d7e7     bra	0x6e2e               	BRA	_00437_DS_
                                           _00440_DS_:
006e60   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006e62   f006
006e64   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006e66   f005
006e68   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006e6a   f004
006e6c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006e6e   f003
006e70   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006e72   f002
006e74   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006e76   f001
006e78   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006e7a   f000
006e7c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006e7e   ffd9
006e80   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPut	code
                                           _MACPut:
                                           ;	.line	1104; TCPIP_Stack/ETH97J60.c	void MACPut(BYTE val)
00814e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008150   ffe5
008152   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008154   ffd9
008156   0e02     movlw	0x2                	MOVLW	0x02
008158   cfdb     movff	0xfdb, 0xf61       	MOVFF	PLUSW2, _EDATA
00815a   ff61
                                           ;	.line	1121; TCPIP_Stack/ETH97J60.c	EDATA = val;
00815c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00815e   ffd9
008160   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetArray	code
                                           _MACGetArray:
                                           ;	.line	1062; TCPIP_Stack/ETH97J60.c	WORD MACGetArray(BYTE *val, WORD len)
0063b4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0063b6   ffe5
0063b8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0063ba   ffd9
0063bc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0063be   ffe5
0063c0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0063c2   ffe5
0063c4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0063c6   ffe5
0063c8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0063ca   ffe5
0063cc   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0063ce   ffe5
0063d0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0063d2   ffe5
0063d4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0063d6   ffe5
0063d8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0063da   ffe5
0063dc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0063de   ffe5
0063e0   0e02     movlw	0x2                	MOVLW	0x02
0063e2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0063e4   f000
0063e6   0e03     movlw	0x3                	MOVLW	0x03
0063e8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0063ea   f001
0063ec   0e04     movlw	0x4                	MOVLW	0x04
0063ee   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0063f0   f002
0063f2   0e05     movlw	0x5                	MOVLW	0x05
0063f4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0063f6   f003
0063f8   0e06     movlw	0x6                	MOVLW	0x06
0063fa   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0063fc   f004
                                           ;	.line	1068; TCPIP_Stack/ETH97J60.c	if(val)
0063fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
006400   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
006402   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
006404   e01e     bz	0x6442                	BZ	_00427_DS_
                                           ;	.line	1070; TCPIP_Stack/ETH97J60.c	while(w--)
006406   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
006408   f005
00640a   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
00640c   f006
                                           _00413_DS_:
00640e   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
006410   f007
006412   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
006414   f008
006416   0eff     movlw	0xff               	MOVLW	0xff
006418   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
00641a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00641c   0606     decf	0x6, 0x1, 0         	DECF	r0x06, F
00641e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006420   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
006422   e021     bz	0x6466                	BZ	_00421_DS_
                                           ;	.line	1072; TCPIP_Stack/ETH97J60.c	*val++ = EDATA;
006424   cf61     movff	0xf61, 0xfe5       	MOVFF	_EDATA, POSTDEC1
006426   ffe5
006428   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00642a   ffe9
00642c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00642e   fff3
006430   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006432   ecbb     call	0x8176, 0           	CALL	__gptrput1
006434   f040
006436   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
006438   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00643a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00643c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00643e   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
006440   d7e6     bra	0x640e               	BRA	_00413_DS_
                                           _00427_DS_:
                                           ;	.line	1077; TCPIP_Stack/ETH97J60.c	while(w--)
006442   c003     movff	0x3, 0             	MOVFF	r0x03, r0x00
006444   f000
006446   c004     movff	0x4, 0x1           	MOVFF	r0x04, r0x01
006448   f001
                                           _00416_DS_:
00644a   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
00644c   f002
00644e   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
006450   f005
006452   0eff     movlw	0xff               	MOVLW	0xff
006454   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006456   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
006458   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
00645a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00645c   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00645e   e003     bz	0x6466                	BZ	_00421_DS_
                                           ;	.line	1079; TCPIP_Stack/ETH97J60.c	i = EDATA;
006460   cf61     movff	0xf61, 0xaaa       	MOVFF	_EDATA, _MACGetArray_i_1_1
006462   faaa
006464   d7f2     bra	0x644a               	BRA	_00416_DS_
                                           _00421_DS_:
                                           ;	.line	1083; TCPIP_Stack/ETH97J60.c	return len;
006466   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
006468   fff3
00646a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00646c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00646e   f008
006470   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
006472   f007
006474   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006476   f006
006478   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00647a   f005
00647c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00647e   f004
006480   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006482   f003
006484   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006486   f002
006488   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00648a   f001
00648c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00648e   f000
006490   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006492   ffd9
006494   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGet	code
                                           _MACGet:
                                           ;	.line	1037; TCPIP_Stack/ETH97J60.c	BYTE MACGet()
00818a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00818c   ffe5
00818e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008190   ffd9
                                           ;	.line	1039; TCPIP_Stack/ETH97J60.c	return EDATA;
008192   5061     movf	0x61, 0, 0          	MOVF	_EDATA, W
008194   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008196   ffd9
008198   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsMemCopyDone	code
                                           _MACIsMemCopyDone:
                                           ;	.line	1014; TCPIP_Stack/ETH97J60.c	BOOL MACIsMemCopyDone(void)
007f04   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007f06   ffe5
007f08   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007f0a   ffd9
007f0c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007f0e   ffe5
                                           ;	.line	1016; TCPIP_Stack/ETH97J60.c	return !ECON1bits.DMAST;
007f10   6a00     clrf	0, 0                	CLRF	r0x00
007f12   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
007f14   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007f16   5000     movf	0, 0, 0             	MOVF	r0x00, W
007f18   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
007f1a   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
007f1c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
007f1e   6a00     clrf	0, 0                	CLRF	r0x00
007f20   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
007f22   5000     movf	0, 0, 0             	MOVF	r0x00, W
007f24   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007f26   f000
007f28   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007f2a   ffd9
007f2c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACMemCopyAsync	code
                                           _MACMemCopyAsync:
                                           ;	.line	899; TCPIP_Stack/ETH97J60.c	void MACMemCopyAsync(WORD destAddr, WORD sourceAddr, WORD len)
00186c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00186e   ffe5
001870   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001872   ffd9
001874   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001876   ffe5
001878   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00187a   ffe5
00187c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00187e   ffe5
001880   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001882   ffe5
001884   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001886   ffe5
001888   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00188a   ffe5
00188c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00188e   ffe5
001890   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001892   ffe5
001894   0e02     movlw	0x2                	MOVLW	0x02
001896   cfdb     movff	0xfdb, 0xa7b       	MOVFF	PLUSW2, _MACMemCopyAsync_destAddr_1_1
001898   fa7b
00189a   0e03     movlw	0x3                	MOVLW	0x03
00189c   cfdb     movff	0xfdb, 0xa7c       	MOVFF	PLUSW2, (_MACMemCopyAsync_destAddr_1_1 + 1)
00189e   fa7c
0018a0   0e04     movlw	0x4                	MOVLW	0x04
0018a2   cfdb     movff	0xfdb, 0xa7d       	MOVFF	PLUSW2, _MACMemCopyAsync_sourceAddr_1_1
0018a4   fa7d
0018a6   0e05     movlw	0x5                	MOVLW	0x05
0018a8   cfdb     movff	0xfdb, 0xa7e       	MOVFF	PLUSW2, (_MACMemCopyAsync_sourceAddr_1_1 + 1)
0018aa   fa7e
0018ac   0e06     movlw	0x6                	MOVLW	0x06
0018ae   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0018b0   f000
0018b2   0e07     movlw	0x7                	MOVLW	0x07
0018b4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0018b6   f001
                                           ;	.line	902; TCPIP_Stack/ETH97J60.c	BOOL UpdateWritePointer = FALSE;
0018b8   6a02     clrf	0x2, 0              	CLRF	r0x02
                                           ;	.line	903; TCPIP_Stack/ETH97J60.c	BOOL UpdateReadPointer = FALSE;
0018ba   6a03     clrf	0x3, 0              	CLRF	r0x03
0018bc   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	905; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&destAddr)->bits.b15)
0018be   af7c     btfss	0x7c, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_destAddr_1_1 + 1), 7, B
0018c0   d013     bra	0x18e8               	BRA	_00325_DS_
                                           ;	.line	907; TCPIP_Stack/ETH97J60.c	UpdateWritePointer = TRUE;
0018c2   0e01     movlw	0x1                	MOVLW	0x01
0018c4   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	908; TCPIP_Stack/ETH97J60.c	destAddr = ((WORD)EWRPTH)<<8|EWRPTL;
0018c6   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
0018c8   f004
0018ca   6a05     clrf	0x5, 0              	CLRF	r0x05
0018cc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018ce   6e07     movwf	0x7, 0             	MOVWF	r0x07
0018d0   6a06     clrf	0x6, 0              	CLRF	r0x06
0018d2   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
0018d4   f004
0018d6   6a05     clrf	0x5, 0              	CLRF	r0x05
0018d8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018da   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0018dc   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
0018de   6f7b     movwf	0x7b, 0x1          	MOVWF	_MACMemCopyAsync_destAddr_1_1, B
0018e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0018e2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0018e4   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
0018e6   6f7c     movwf	0x7c, 0x1          	MOVWF	(_MACMemCopyAsync_destAddr_1_1 + 1), B
                                           _00325_DS_:
0018e8   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	910; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&sourceAddr)->bits.b15)
0018ea   af7e     btfss	0x7e, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_sourceAddr_1_1 + 1), 7, B
0018ec   d013     bra	0x1914               	BRA	_00327_DS_
                                           ;	.line	912; TCPIP_Stack/ETH97J60.c	UpdateReadPointer = TRUE;
0018ee   0e01     movlw	0x1                	MOVLW	0x01
0018f0   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	913; TCPIP_Stack/ETH97J60.c	sourceAddr = ((WORD)ERDPTH)<<8|ERDPTL;
0018f2   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
0018f4   f004
0018f6   6a05     clrf	0x5, 0              	CLRF	r0x05
0018f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018fa   6e07     movwf	0x7, 0             	MOVWF	r0x07
0018fc   6a06     clrf	0x6, 0              	CLRF	r0x06
0018fe   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
001900   f004
001902   6a05     clrf	0x5, 0              	CLRF	r0x05
001904   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001906   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001908   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
00190a   6f7d     movwf	0x7d, 0x1          	MOVWF	_MACMemCopyAsync_sourceAddr_1_1, B
00190c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00190e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001910   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
001912   6f7e     movwf	0x7e, 0x1          	MOVWF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), B
                                           _00327_DS_:
                                           ;	.line	918; TCPIP_Stack/ETH97J60.c	if(len <= 1u)
001914   0e00     movlw	0                  	MOVLW	0x00
001916   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
001918   e102     bnz	0x191e               	BNZ	_00376_DS_
00191a   0e02     movlw	0x2                	MOVLW	0x02
00191c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00376_DS_:
00191e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001920   d07c     bra	0x1a1a               	BRA	_00352_DS_
                                           ;	.line	920; TCPIP_Stack/ETH97J60.c	ReadSave.Val = ((WORD)ERDPTH)<<8|ERDPTL;
001922   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
001924   f004
001926   6a05     clrf	0x5, 0              	CLRF	r0x05
001928   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00192a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00192c   6a06     clrf	0x6, 0              	CLRF	r0x06
00192e   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
001930   f004
001932   6a05     clrf	0x5, 0              	CLRF	r0x05
001934   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001936   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
001938   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00193a   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
00193c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00193e   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
001940   6f7f     movwf	0x7f, 0x1          	MOVWF	_MACMemCopyAsync_ReadSave_1_1, B
001942   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001944   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
001946   6f80     movwf	0x80, 0x1          	MOVWF	(_MACMemCopyAsync_ReadSave_1_1 + 1), B
                                           ;	.line	921; TCPIP_Stack/ETH97J60.c	WriteSave.Val =  ((WORD)EWRPTH)<<8|EWRPTL;
001948   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
00194a   f004
00194c   6a05     clrf	0x5, 0              	CLRF	r0x05
00194e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001950   6e07     movwf	0x7, 0             	MOVWF	r0x07
001952   6a06     clrf	0x6, 0              	CLRF	r0x06
001954   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
001956   f004
001958   6a05     clrf	0x5, 0              	CLRF	r0x05
00195a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00195c   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
00195e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001960   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
001962   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001964   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
001966   6f81     movwf	0x81, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
001968   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00196a   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
00196c   6f82     movwf	0x82, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
00196e   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	922; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(sourceAddr);
001970   517d     movf	0x7d, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
001972   6e04     movwf	0x4, 0             	MOVWF	r0x04
001974   6a05     clrf	0x5, 0              	CLRF	r0x05
001976   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001978   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
00197a   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	923; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(sourceAddr);
00197c   517e     movf	0x7e, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
00197e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001980   6a05     clrf	0x5, 0              	CLRF	r0x05
001982   6a05     clrf	0x5, 0              	CLRF	r0x05
001984   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001986   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
001988   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	924; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(destAddr);
00198a   517b     movf	0x7b, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
00198c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00198e   6a05     clrf	0x5, 0              	CLRF	r0x05
001990   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001992   010e     movlb	0xe                	BANKSEL	_EWRPTL
001994   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
001996   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	925; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(destAddr);
001998   517c     movf	0x7c, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
00199a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00199c   6a05     clrf	0x5, 0              	CLRF	r0x05
00199e   6a05     clrf	0x5, 0              	CLRF	r0x05
0019a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019a2   010e     movlb	0xe                	BANKSEL	_EWRPTH
0019a4   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	926; TCPIP_Stack/ETH97J60.c	while(len--) MACPut(MACGet());
0019a6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0019a8   f004
0019aa   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0019ac   f005
                                           _00328_DS_:
0019ae   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
0019b0   f006
0019b2   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
0019b4   f007
0019b6   0eff     movlw	0xff               	MOVLW	0xff
0019b8   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0019ba   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0019bc   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
0019be   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019c0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0019c2   e009     bz	0x19d6                	BZ	_00330_DS_
0019c4   ecc5     call	0x818a, 0           	CALL	_MACGet
0019c6   f040
0019c8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0019ca   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ce   eca7     call	0x814e, 0           	CALL	_MACPut
0019d0   f040
0019d2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0019d4   d7ec     bra	0x19ae               	BRA	_00328_DS_
                                           _00330_DS_:
                                           ;	.line	927; TCPIP_Stack/ETH97J60.c	if(!UpdateReadPointer)
0019d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019d8   e10d     bnz	0x19f4               	BNZ	_00332_DS_
0019da   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
                                           ;	.line	929; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(ReadSave.Val);
0019dc   517f     movf	0x7f, 0, 0x1        	MOVF	_MACMemCopyAsync_ReadSave_1_1, W, B
0019de   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019e0   6a05     clrf	0x5, 0              	CLRF	r0x05
0019e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019e4   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
0019e6   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
                                           ;	.line	930; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(ReadSave.Val);
0019e8   5180     movf	0x80, 0, 0x1        	MOVF	(_MACMemCopyAsync_ReadSave_1_1 + 1), W, B
0019ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019ec   6a05     clrf	0x5, 0              	CLRF	r0x05
0019ee   6a05     clrf	0x5, 0              	CLRF	r0x05
0019f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019f2   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00332_DS_:
                                           ;	.line	932; TCPIP_Stack/ETH97J60.c	if(!UpdateWritePointer)
0019f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019f6   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0019f8   d0d5     bra	0x1ba4               	BRA	_00354_DS_
0019fa   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
                                           ;	.line	934; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
0019fc   5181     movf	0x81, 0, 0x1        	MOVF	_MACMemCopyAsync_WriteSave_1_1, W, B
0019fe   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a00   6a05     clrf	0x5, 0              	CLRF	r0x05
001a02   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a04   010e     movlb	0xe                	BANKSEL	_EWRPTL
001a06   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
001a08   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
                                           ;	.line	935; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
001a0a   5182     movf	0x82, 0, 0x1        	MOVF	(_MACMemCopyAsync_WriteSave_1_1 + 1), W, B
001a0c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a0e   6a05     clrf	0x5, 0              	CLRF	r0x05
001a10   6a05     clrf	0x5, 0              	CLRF	r0x05
001a12   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a14   010e     movlb	0xe                	BANKSEL	_EWRPTH
001a16   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
001a18   d0c5     bra	0x1ba4               	BRA	_00354_DS_
                                           _00352_DS_:
                                           ;	.line	940; TCPIP_Stack/ETH97J60.c	if(UpdateWritePointer)
001a1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a1c   e023     bz	0x1a64                	BZ	_00336_DS_
                                           ;	.line	942; TCPIP_Stack/ETH97J60.c	WriteSave.Val = destAddr + len;
001a1e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a20   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
001a22   257b     addwf	0x7b, 0, 0x1       	ADDWF	_MACMemCopyAsync_destAddr_1_1, W, B
001a24   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a26   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a28   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
001a2a   217c     addwfc	0x7c, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
001a2c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a30   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
001a32   6f81     movwf	0x81, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
001a34   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a36   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
001a38   6f82     movwf	0x82, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
                                           ;	.line	943; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
001a3a   ca81     movff	0xa81, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
001a3c   ffe8
001a3e   ca82     movff	0xa82, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
001a40   ffe8
001a42   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a44   6e05     movwf	0x5, 0             	MOVWF	r0x05
001a46   6a06     clrf	0x6, 0              	CLRF	r0x06
001a48   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a4a   010e     movlb	0xe                	BANKSEL	_EWRPTL
001a4c   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	944; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
001a4e   ca81     movff	0xa81, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
001a50   ffe8
001a52   ca82     movff	0xa82, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
001a54   ffe8
001a56   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a58   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a5a   6a04     clrf	0x4, 0              	CLRF	r0x04
001a5c   6a04     clrf	0x4, 0              	CLRF	r0x04
001a5e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a60   010e     movlb	0xe                	BANKSEL	_EWRPTH
001a62   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           _00336_DS_:
001a64   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	946; TCPIP_Stack/ETH97J60.c	len += sourceAddr - 1;
001a66   517d     movf	0x7d, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
001a68   0fff     addlw	0xff               	ADDLW	0xff
001a6a   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a6c   0eff     movlw	0xff               	MOVLW	0xff
001a6e   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
001a70   217e     addwfc	0x7e, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
001a72   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a76   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001a78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a7a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           _00337_DS_:
                                           ;	.line	947; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);
001a7c   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
001a7e   d7fe     bra	0x1a7c               	BRA	_00337_DS_
001a80   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	948; TCPIP_Stack/ETH97J60.c	EDMASTL = LOW(sourceAddr);
001a82   517d     movf	0x7d, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
001a84   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a86   6a04     clrf	0x4, 0              	CLRF	r0x04
001a88   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a8a   010e     movlb	0xe                	BANKSEL	_EDMASTL
001a8c   6ff0     movwf	0xf0, 0x1          	MOVWF	_EDMASTL, B
001a8e   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	949; TCPIP_Stack/ETH97J60.c	EDMASTH = HIGH(sourceAddr);
001a90   517e     movf	0x7e, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
001a92   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a94   6a04     clrf	0x4, 0              	CLRF	r0x04
001a96   6a04     clrf	0x4, 0              	CLRF	r0x04
001a98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a9a   010e     movlb	0xe                	BANKSEL	_EDMASTH
001a9c   6ff1     movwf	0xf1, 0x1          	MOVWF	_EDMASTH, B
001a9e   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	950; TCPIP_Stack/ETH97J60.c	EDMADSTL = LOW(destAddr);
001aa0   517b     movf	0x7b, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
001aa2   6e02     movwf	0x2, 0             	MOVWF	r0x02
001aa4   6a04     clrf	0x4, 0              	CLRF	r0x04
001aa6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001aa8   010e     movlb	0xe                	BANKSEL	_EDMADSTL
001aaa   6ff4     movwf	0xf4, 0x1          	MOVWF	_EDMADSTL, B
001aac   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	951; TCPIP_Stack/ETH97J60.c	EDMADSTH = HIGH(destAddr);
001aae   517c     movf	0x7c, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
001ab0   6e02     movwf	0x2, 0             	MOVWF	r0x02
001ab2   6a04     clrf	0x4, 0              	CLRF	r0x04
001ab4   6a04     clrf	0x4, 0              	CLRF	r0x04
001ab6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ab8   010e     movlb	0xe                	BANKSEL	_EDMADSTH
001aba   6ff5     movwf	0xf5, 0x1          	MOVWF	_EDMADSTH, B
                                           ;	.line	952; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
001abc   ca7d     movff	0xa7d, 0x2         	MOVFF	_MACMemCopyAsync_sourceAddr_1_1, r0x02
001abe   f002
001ac0   ca7e     movff	0xa7e, 0x4         	MOVFF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), r0x04
001ac2   f004
001ac4   6a05     clrf	0x5, 0              	CLRF	r0x05
001ac6   6a06     clrf	0x6, 0              	CLRF	r0x06
001ac8   0e00     movlw	0                  	MOVLW	0x00
001aca   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
001acc   e108     bnz	0x1ade               	BNZ	_00394_DS_
001ace   0e00     movlw	0                  	MOVLW	0x00
001ad0   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
001ad2   e105     bnz	0x1ade               	BNZ	_00394_DS_
001ad4   0e1a     movlw	0x1a               	MOVLW	0x1a
001ad6   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001ad8   e102     bnz	0x1ade               	BNZ	_00394_DS_
001ada   0e0a     movlw	0xa                	MOVLW	0x0a
001adc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00394_DS_:
001ade   6a02     clrf	0x2, 0              	CLRF	r0x02
001ae0   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001ae2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ae4   e11e     bnz	0x1b22               	BNZ	_00341_DS_
001ae6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001ae8   f004
001aea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001aec   f005
001aee   6a06     clrf	0x6, 0              	CLRF	r0x06
001af0   6a07     clrf	0x7, 0              	CLRF	r0x07
001af2   0e00     movlw	0                  	MOVLW	0x00
001af4   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
001af6   e108     bnz	0x1b08               	BNZ	_00395_DS_
001af8   0e00     movlw	0                  	MOVLW	0x00
001afa   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
001afc   e105     bnz	0x1b08               	BNZ	_00395_DS_
001afe   0e1a     movlw	0x1a               	MOVLW	0x1a
001b00   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
001b02   e102     bnz	0x1b08               	BNZ	_00395_DS_
001b04   0e0a     movlw	0xa                	MOVLW	0x0a
001b06   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00395_DS_:
001b08   e30c     bnc	0x1b22               	BNC	_00341_DS_
                                           ;	.line	953; TCPIP_Stack/ETH97J60.c	len -= RXSIZE; //it is a circular buffer
001b0a   0ef6     movlw	0xf6               	MOVLW	0xf6
001b0c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001b0e   0ee5     movlw	0xe5               	MOVLW	0xe5
001b10   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001b12   0eff     movlw	0xff               	MOVLW	0xff
001b14   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001b16   0eff     movlw	0xff               	MOVLW	0xff
001b18   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
001b1a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b1c   6e00     movwf	0, 0               	MOVWF	r0x00
001b1e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001b20   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00341_DS_:
                                           ;	.line	954; TCPIP_Stack/ETH97J60.c	EDMANDL = LOW(len);
001b22   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b24   6e04     movwf	0x4, 0             	MOVWF	r0x04
001b26   6a05     clrf	0x5, 0              	CLRF	r0x05
001b28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b2a   010e     movlb	0xe                	BANKSEL	_EDMANDL
001b2c   6ff2     movwf	0xf2, 0x1          	MOVWF	_EDMANDL, B
                                           ;	.line	955; TCPIP_Stack/ETH97J60.c	EDMANDH = HIGH(len);
001b2e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b30   6e04     movwf	0x4, 0             	MOVWF	r0x04
001b32   6a05     clrf	0x5, 0              	CLRF	r0x05
001b34   6a05     clrf	0x5, 0              	CLRF	r0x05
001b36   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b38   010e     movlb	0xe                	BANKSEL	_EDMANDH
001b3a   6ff3     movwf	0xf3, 0x1          	MOVWF	_EDMANDH, B
                                           ;	.line	956; TCPIP_Stack/ETH97J60.c	ECON1bits.CSUMEN = 0;
001b3c   98d2     bcf	0xd2, 0x4, 0         	BCF	_ECON1bits, 4
                                           ;	.line	957; TCPIP_Stack/ETH97J60.c	ECON1bits.DMAST = 1;
001b3e   8ad2     bsf	0xd2, 0x5, 0         	BSF	_ECON1bits, 5
                                           _00343_DS_:
                                           ;	.line	958; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);	// DMA requires that you must not 
001b40   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
001b42   d7fe     bra	0x1b40               	BRA	_00343_DS_
                                           ;	.line	961; TCPIP_Stack/ETH97J60.c	if(UpdateReadPointer)
001b44   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b46   e02e     bz	0x1ba4                	BZ	_00354_DS_
                                           ;	.line	963; TCPIP_Stack/ETH97J60.c	len++;
001b48   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001b4a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001b4c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
                                           ;	.line	964; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
001b4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b50   e11e     bnz	0x1b8e               	BNZ	_00347_DS_
001b52   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
001b54   f002
001b56   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
001b58   f003
001b5a   6a04     clrf	0x4, 0              	CLRF	r0x04
001b5c   6a05     clrf	0x5, 0              	CLRF	r0x05
001b5e   0e00     movlw	0                  	MOVLW	0x00
001b60   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
001b62   e108     bnz	0x1b74               	BNZ	_00398_DS_
001b64   0e00     movlw	0                  	MOVLW	0x00
001b66   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001b68   e105     bnz	0x1b74               	BNZ	_00398_DS_
001b6a   0e1a     movlw	0x1a               	MOVLW	0x1a
001b6c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001b6e   e102     bnz	0x1b74               	BNZ	_00398_DS_
001b70   0e0a     movlw	0xa                	MOVLW	0x0a
001b72   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00398_DS_:
001b74   e30c     bnc	0x1b8e               	BNC	_00347_DS_
                                           ;	.line	965; TCPIP_Stack/ETH97J60.c	len -= RXSIZE;
001b76   0ef6     movlw	0xf6               	MOVLW	0xf6
001b78   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
001b7a   0ee5     movlw	0xe5               	MOVLW	0xe5
001b7c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001b7e   0eff     movlw	0xff               	MOVLW	0xff
001b80   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001b82   0eff     movlw	0xff               	MOVLW	0xff
001b84   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001b86   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b88   6e00     movwf	0, 0               	MOVWF	r0x00
001b8a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b8c   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00347_DS_:
                                           ;	.line	966; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(len);
001b8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b90   6e02     movwf	0x2, 0             	MOVWF	r0x02
001b92   6a03     clrf	0x3, 0              	CLRF	r0x03
001b94   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b96   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	967; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(len);
001b98   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b9a   6e00     movwf	0, 0               	MOVWF	r0x00
001b9c   6a01     clrf	0x1, 0              	CLRF	r0x01
001b9e   6a01     clrf	0x1, 0              	CLRF	r0x01
001ba0   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ba2   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00354_DS_:
001ba4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ba6   f007
001ba8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001baa   f006
001bac   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001bae   f005
001bb0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001bb2   f004
001bb4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001bb6   f003
001bb8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001bba   f002
001bbc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001bbe   f001
001bc0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001bc2   f000
001bc4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001bc6   ffd9
001bc8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__CalcIPBufferChecksum	code
                                           _CalcIPBufferChecksum:
                                           ;	.line	824; TCPIP_Stack/ETH97J60.c	WORD CalcIPBufferChecksum(WORD len)
000df0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000df2   ffe5
000df4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000df6   ffd9
000df8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000dfa   ffe5
000dfc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000dfe   ffe5
000e00   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e02   ffe5
000e04   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e06   ffe5
000e08   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e0a   ffe5
000e0c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e0e   ffe5
000e10   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000e12   ffe5
000e14   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000e16   ffe5
000e18   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000e1a   ffe5
000e1c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000e1e   ffe5
000e20   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000e22   ffe5
000e24   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000e26   ffe5
000e28   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000e2a   ffe5
000e2c   0e02     movlw	0x2                	MOVLW	0x02
000e2e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e30   f000
000e32   0e03     movlw	0x3                	MOVLW	0x03
000e34   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000e36   f001
000e38   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	827; TCPIP_Stack/ETH97J60.c	DWORD_VAL Checksum = {0x00000000ul};
000e3a   6b28     clrf	0x28, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e3c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e3e   6b29     clrf	0x29, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e40   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e42   6b2a     clrf	0x2a, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e44   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e46   6b2b     clrf	0x2b, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e48   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e4a   6b28     clrf	0x28, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e4c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e4e   6b29     clrf	0x29, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e50   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e52   6b2a     clrf	0x2a, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e54   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e56   6b2b     clrf	0x2b, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e58   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e5a   6b28     clrf	0x28, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e5c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e5e   6b29     clrf	0x29, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e60   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e62   6b2a     clrf	0x2a, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e64   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e66   6b2b     clrf	0x2b, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e68   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e6a   6b28     clrf	0x28, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e6c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e6e   6b29     clrf	0x29, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e70   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e72   6b2a     clrf	0x2a, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e74   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e76   6b2b     clrf	0x2b, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e78   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e7a   6b28     clrf	0x28, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e7c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e7e   6b29     clrf	0x29, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e80   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e82   6b2a     clrf	0x2a, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e84   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e86   6b2b     clrf	0x2b, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e88   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e8a   6b28     clrf	0x28, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e8c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e8e   6b29     clrf	0x29, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e90   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e92   6b28     clrf	0x28, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e94   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e96   6b29     clrf	0x29, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e98   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e9a   6b28     clrf	0x28, 0x1           	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e9c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e9e   6b29     clrf	0x29, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000ea0   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000ea2   9128     bcf	0x28, 0, 0x1         	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
000ea4   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000ea6   9328     bcf	0x28, 0x1, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
000ea8   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eaa   9528     bcf	0x28, 0x2, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
000eac   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eae   9728     bcf	0x28, 0x3, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
000eb0   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eb2   9928     bcf	0x28, 0x4, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
000eb4   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eb6   9b28     bcf	0x28, 0x5, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
000eb8   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eba   9d28     bcf	0x28, 0x6, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
000ebc   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000ebe   9f28     bcf	0x28, 0x7, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
000ec0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ec2   9129     bcf	0x29, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
000ec4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ec6   9329     bcf	0x29, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
000ec8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000eca   9529     bcf	0x29, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
000ecc   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ece   9729     bcf	0x29, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
000ed0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ed2   9929     bcf	0x29, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
000ed4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ed6   9b29     bcf	0x29, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
000ed8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000eda   9d29     bcf	0x29, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
000edc   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ede   9f29     bcf	0x29, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
000ee0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000ee2   6b2a     clrf	0x2a, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000ee4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000ee6   6b2b     clrf	0x2b, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000ee8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000eea   6b2a     clrf	0x2a, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000eec   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000eee   6b2b     clrf	0x2b, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000ef0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000ef2   6b2a     clrf	0x2a, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000ef4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000ef6   6b2b     clrf	0x2b, 0x1           	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000ef8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000efa   912a     bcf	0x2a, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
000efc   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000efe   932a     bcf	0x2a, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
000f00   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f02   952a     bcf	0x2a, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
000f04   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f06   972a     bcf	0x2a, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
000f08   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f0a   992a     bcf	0x2a, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
000f0c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f0e   9b2a     bcf	0x2a, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
000f10   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f12   9d2a     bcf	0x2a, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
000f14   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f16   9f2a     bcf	0x2a, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
000f18   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f1a   912b     bcf	0x2b, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
000f1c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f1e   932b     bcf	0x2b, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
000f20   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f22   952b     bcf	0x2b, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
000f24   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f26   972b     bcf	0x2b, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
000f28   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f2a   992b     bcf	0x2b, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
000f2c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f2e   9b2b     bcf	0x2b, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
000f30   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f32   9d2b     bcf	0x2b, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
000f34   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f36   9f2b     bcf	0x2b, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
000f38   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f3a   9128     bcf	0x28, 0, 0x1         	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
000f3c   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f3e   9328     bcf	0x28, 0x1, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
000f40   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f42   9528     bcf	0x28, 0x2, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
000f44   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f46   9728     bcf	0x28, 0x3, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
000f48   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f4a   9928     bcf	0x28, 0x4, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
000f4c   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f4e   9b28     bcf	0x28, 0x5, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
000f50   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f52   9d28     bcf	0x28, 0x6, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
000f54   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f56   9f28     bcf	0x28, 0x7, 0x1       	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
000f58   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f5a   9129     bcf	0x29, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
000f5c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f5e   9329     bcf	0x29, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
000f60   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f62   9529     bcf	0x29, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
000f64   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f66   9729     bcf	0x29, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
000f68   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f6a   9929     bcf	0x29, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
000f6c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f6e   9b29     bcf	0x29, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
000f70   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f72   9d29     bcf	0x29, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
000f74   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f76   9f29     bcf	0x29, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
000f78   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f7a   912a     bcf	0x2a, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
000f7c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f7e   932a     bcf	0x2a, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
000f80   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f82   952a     bcf	0x2a, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
000f84   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f86   972a     bcf	0x2a, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
000f88   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f8a   992a     bcf	0x2a, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
000f8c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f8e   9b2a     bcf	0x2a, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
000f90   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f92   9d2a     bcf	0x2a, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
000f94   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f96   9f2a     bcf	0x2a, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
000f98   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f9a   912b     bcf	0x2b, 0, 0x1         	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
000f9c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f9e   932b     bcf	0x2b, 0x1, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
000fa0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fa2   952b     bcf	0x2b, 0x2, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
000fa4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fa6   972b     bcf	0x2b, 0x3, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
000fa8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000faa   992b     bcf	0x2b, 0x4, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
000fac   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fae   9b2b     bcf	0x2b, 0x5, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
000fb0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fb2   9d2b     bcf	0x2b, 0x6, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
000fb4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fb6   9f2b     bcf	0x2b, 0x7, 0x1       	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
                                           ;	.line	833; TCPIP_Stack/ETH97J60.c	Start = ((WORD)ERDPTH)<<8|ERDPTL;
000fb8   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
000fba   f002
000fbc   6a03     clrf	0x3, 0              	CLRF	r0x03
000fbe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fc0   6e05     movwf	0x5, 0             	MOVWF	r0x05
000fc2   6a04     clrf	0x4, 0              	CLRF	r0x04
000fc4   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
000fc6   f002
000fc8   6a03     clrf	0x3, 0              	CLRF	r0x03
000fca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fcc   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
000fce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000fd0   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
                                           _00305_DS_:
                                           ;	.line	835; TCPIP_Stack/ETH97J60.c	while(len)
000fd2   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fd4   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
000fd6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000fd8   d07d     bra	0x10d4               	BRA	_00307_DS_
                                           ;	.line	839; TCPIP_Stack/ETH97J60.c	ChunkLen = len > sizeof(DataBuffer) ? sizeof(DataBuffer) : len;
000fda   0e00     movlw	0                  	MOVLW	0x00
000fdc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000fde   e102     bnz	0xfe4                	BNZ	_00319_DS_
000fe0   0e15     movlw	0x15               	MOVLW	0x15
000fe2   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00319_DS_:
000fe4   e304     bnc	0xfee                	BNC	_00310_DS_
000fe6   0e14     movlw	0x14               	MOVLW	0x14
000fe8   6e04     movwf	0x4, 0             	MOVWF	r0x04
000fea   6a05     clrf	0x5, 0              	CLRF	r0x05
000fec   d004     bra	0xff6                	BRA	_00311_DS_
                                           _00310_DS_:
000fee   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ff0   f004
000ff2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ff4   f005
                                           _00311_DS_:
000ff6   c004     movff	0x4, 0xa79         	MOVFF	r0x04, _CalcIPBufferChecksum_ChunkLen_1_1
000ff8   fa79
000ffa   c005     movff	0x5, 0xa7a         	MOVFF	r0x05, (_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
000ffc   fa7a
                                           ;	.line	840; TCPIP_Stack/ETH97J60.c	MACGetArray(DataBuffer, ChunkLen);
000ffe   0e08     movlw	0x8                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
001000   6e07     movwf	0x7, 0             	MOVWF	r0x07
001002   0e8e     movlw	0x8e               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001004   6e06     movwf	0x6, 0             	MOVWF	r0x06
001006   0e80     movlw	0x80               	MOVLW	0x80
001008   6e08     movwf	0x8, 0             	MOVWF	r0x08
00100a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00100c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001010   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001012   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001016   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001018   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00101c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101e   ecda     call	0x63b4, 0           	CALL	_MACGetArray
001020   f031
001022   0e05     movlw	0x5                	MOVLW	0x05
001024   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	842; TCPIP_Stack/ETH97J60.c	len -= ChunkLen;
001026   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001028   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
00102a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00102c   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
00102e   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	845; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&ChunkLen)->bits.b0)
001030   a179     btfss	0x79, 0, 0x1       	BTFSS	_CalcIPBufferChecksum_ChunkLen_1_1, 0, B
001032   d013     bra	0x105a               	BRA	_00301_DS_
                                           ;	.line	847; TCPIP_Stack/ETH97J60.c	DataBuffer[ChunkLen] = 0x00;
001034   0e8e     movlw	0x8e               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001036   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
001038   2579     addwf	0x79, 0, 0x1       	ADDWF	_CalcIPBufferChecksum_ChunkLen_1_1, W, B
00103a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00103c   0e08     movlw	0x8                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
00103e   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001040   217a     addwfc	0x7a, 0, 0x1      	ADDWFC	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), W, B
001042   6e05     movwf	0x5, 0             	MOVWF	r0x05
001044   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001046   ffe9
001048   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
00104a   ffea
00104c   0e00     movlw	0                  	MOVLW	0x00
00104e   6eef     movwf	0xef, 0            	MOVWF	INDF0
001050   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	848; TCPIP_Stack/ETH97J60.c	ChunkLen++;
001052   2b79     incf	0x79, 0x1, 0x1      	INCF	_CalcIPBufferChecksum_ChunkLen_1_1, F, B
001054   e302     bnc	0x105a               	BNC	_10492_DS_
001056   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001058   2b7a     incf	0x7a, 0x1, 0x1      	INCF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), F, B
                                           _10492_DS_:
                                           _00301_DS_:
                                           ;	.line	852; TCPIP_Stack/ETH97J60.c	DataPtr = (WORD*)&DataBuffer[0];
00105a   0e08     movlw	0x8                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
00105c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00105e   0e8e     movlw	0x8e               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001060   6e04     movwf	0x4, 0             	MOVWF	r0x04
001062   0e80     movlw	0x80               	MOVLW	0x80
001064   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/ETH97J60.c	while(ChunkLen)
001066   ca79     movff	0xa79, 0x7         	MOVFF	_CalcIPBufferChecksum_ChunkLen_1_1, r0x07
001068   f007
00106a   ca7a     movff	0xa7a, 0x8         	MOVFF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), r0x08
00106c   f008
                                           _00302_DS_:
00106e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001070   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001072   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001074   d7ae     bra	0xfd2                	BRA	_00305_DS_
                                           ;	.line	855; TCPIP_Stack/ETH97J60.c	Checksum.Val += *DataPtr++;
001076   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001078   ffe9
00107a   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00107c   fff3
00107e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001080   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
001082   f03f
001084   6e09     movwf	0x9, 0             	MOVWF	r0x09
001086   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
001088   f00a
00108a   0e02     movlw	0x2                	MOVLW	0x02
00108c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
00108e   0e00     movlw	0                  	MOVLW	0x00
001090   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001092   0e00     movlw	0                  	MOVLW	0x00
001094   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001096   6a0b     clrf	0xb, 0              	CLRF	r0x0b
001098   6a0c     clrf	0xc, 0              	CLRF	r0x0c
00109a   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00109c   5128     movf	0x28, 0, 0x1        	MOVF	_CalcIPBufferChecksum_Checksum_1_1, W, B
00109e   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
0010a0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0010a2   5129     movf	0x29, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
0010a4   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0010a6   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0010a8   512a     movf	0x2a, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
0010aa   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
0010ac   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0010ae   512b     movf	0x2b, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
0010b0   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
0010b2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010b4   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0010b6   6f28     movwf	0x28, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
0010b8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010ba   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0010bc   6f29     movwf	0x29, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
0010be   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0010c0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0010c2   6f2a     movwf	0x2a, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
0010c4   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0010c6   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0010c8   6f2b     movwf	0x2b, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
                                           ;	.line	856; TCPIP_Stack/ETH97J60.c	ChunkLen -= 2;
0010ca   0efe     movlw	0xfe               	MOVLW	0xfe
0010cc   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
0010ce   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0010d0   0608     decf	0x8, 0x1, 0         	DECF	r0x08, F
0010d2   d7cd     bra	0x106e               	BRA	_00302_DS_
                                           _00307_DS_:
                                           ;	.line	861; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(Start);
0010d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010d6   6e00     movwf	0, 0               	MOVWF	r0x00
0010d8   6a01     clrf	0x1, 0              	CLRF	r0x01
0010da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010dc   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	862; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(Start);
0010de   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010e0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0010e2   6a03     clrf	0x3, 0              	CLRF	r0x03
0010e4   6a03     clrf	0x3, 0              	CLRF	r0x03
0010e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010e8   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	865; TCPIP_Stack/ETH97J60.c	Checksum.Val = (DWORD)Checksum.w[0] + (DWORD)Checksum.w[1];
0010ea   ca28     movff	0xa28, 0           	MOVFF	_CalcIPBufferChecksum_Checksum_1_1, r0x00
0010ec   f000
0010ee   ca29     movff	0xa29, 0x1         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), r0x01
0010f0   f001
0010f2   6a02     clrf	0x2, 0              	CLRF	r0x02
0010f4   6a03     clrf	0x3, 0              	CLRF	r0x03
0010f6   ca2a     movff	0xa2a, 0x4         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), r0x04
0010f8   f004
0010fa   ca2b     movff	0xa2b, 0x5         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), r0x05
0010fc   f005
0010fe   6a06     clrf	0x6, 0              	CLRF	r0x06
001100   6a07     clrf	0x7, 0              	CLRF	r0x07
001102   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001104   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001106   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001108   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00110a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00110c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00110e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001110   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001112   5000     movf	0, 0, 0             	MOVF	r0x00, W
001114   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001116   6f28     movwf	0x28, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001118   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00111a   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
00111c   6f29     movwf	0x29, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
00111e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001120   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001122   6f2a     movwf	0x2a, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001124   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001126   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001128   6f2b     movwf	0x2b, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
00112a   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
                                           ;	.line	869; TCPIP_Stack/ETH97J60.c	Checksum.w[0] += Checksum.w[1];
00112c   512a     movf	0x2a, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
00112e   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001130   2528     addwf	0x28, 0, 0x1       	ADDWF	_CalcIPBufferChecksum_Checksum_1_1, W, B
001132   6e00     movwf	0, 0               	MOVWF	r0x00
001134   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001136   512b     movf	0x2b, 0, 0x1        	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
001138   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
00113a   2129     addwfc	0x29, 0, 0x1      	ADDWFC	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
00113c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00113e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001140   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001142   6f28     movwf	0x28, 0x1          	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001144   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001146   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001148   6f29     movwf	0x29, 0x1          	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
00114a   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	872; TCPIP_Stack/ETH97J60.c	return ~Checksum.w[0];
00114c   1d28     comf	0x28, 0, 0x1        	COMF	_CalcIPBufferChecksum_Checksum_1_1, W, B
00114e   6e00     movwf	0, 0               	MOVWF	r0x00
001150   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001152   1d29     comf	0x29, 0, 0x1        	COMF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
001154   6e01     movwf	0x1, 0             	MOVWF	r0x01
001156   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001158   fff3
00115a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00115c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00115e   f00c
001160   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001162   f00b
001164   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001166   f00a
001168   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00116a   f009
00116c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00116e   f008
001170   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001172   f007
001174   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001176   f006
001178   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00117a   f005
00117c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00117e   f004
001180   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001182   f003
001184   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001186   f002
001188   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00118a   f001
00118c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00118e   f000
001190   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001192   ffd9
001194   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACCalcRxChecksum	code
                                           _MACCalcRxChecksum:
                                           ;	.line	699; TCPIP_Stack/ETH97J60.c	WORD MACCalcRxChecksum(WORD offset, WORD len)
00586a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00586c   ffe5
00586e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005870   ffd9
005872   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005874   ffe5
005876   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005878   ffe5
00587a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00587c   ffe5
00587e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005880   ffe5
005882   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005884   ffe5
005886   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005888   ffe5
00588a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00588c   ffe5
00588e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005890   ffe5
005892   0e02     movlw	0x2                	MOVLW	0x02
005894   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005896   f000
005898   0e03     movlw	0x3                	MOVLW	0x03
00589a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00589c   f001
00589e   0e04     movlw	0x4                	MOVLW	0x04
0058a0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0058a2   f002
0058a4   0e05     movlw	0x5                	MOVLW	0x05
0058a6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0058a8   f003
0058aa   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	705; TCPIP_Stack/ETH97J60.c	temp = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
0058ac   516b     movf	0x6b, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
0058ae   0f14     addlw	0x14               	ADDLW	0x14
0058b0   6e04     movwf	0x4, 0             	MOVWF	r0x04
0058b2   0e00     movlw	0                  	MOVLW	0x00
0058b4   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
0058b6   216c     addwfc	0x6c, 0, 0x1      	ADDWFC	(_CurrentPacketLocation + 1), W, B
0058b8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0058ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0058bc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0058be   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0058c0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           ;	.line	706; TCPIP_Stack/ETH97J60.c	if(temp > RXSTOP)		// Adjust value if a wrap is needed
0058c2   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0058c4   f004
0058c6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0058c8   f005
0058ca   6a06     clrf	0x6, 0              	CLRF	r0x06
0058cc   6a07     clrf	0x7, 0              	CLRF	r0x07
0058ce   0e00     movlw	0                  	MOVLW	0x00
0058d0   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
0058d2   e108     bnz	0x58e4               	BNZ	_00295_DS_
0058d4   0e00     movlw	0                  	MOVLW	0x00
0058d6   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
0058d8   e105     bnz	0x58e4               	BNZ	_00295_DS_
0058da   0e1a     movlw	0x1a               	MOVLW	0x1a
0058dc   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
0058de   e102     bnz	0x58e4               	BNZ	_00295_DS_
0058e0   0e0a     movlw	0xa                	MOVLW	0x0a
0058e2   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00295_DS_:
0058e4   e30c     bnc	0x58fe               	BNC	_00291_DS_
                                           ;	.line	708; TCPIP_Stack/ETH97J60.c	temp -= RXSIZE;
0058e6   0ef6     movlw	0xf6               	MOVLW	0xf6
0058e8   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0058ea   0ee5     movlw	0xe5               	MOVLW	0xe5
0058ec   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0058ee   0eff     movlw	0xff               	MOVLW	0xff
0058f0   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0058f2   0eff     movlw	0xff               	MOVLW	0xff
0058f4   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0058f6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0058f8   6e00     movwf	0, 0               	MOVWF	r0x00
0058fa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0058fc   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00291_DS_:
                                           ;	.line	711; TCPIP_Stack/ETH97J60.c	RDSave = ((WORD)ERDPTH)<<8|ERDPTL;
0058fe   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
005900   f004
005902   6a05     clrf	0x5, 0              	CLRF	r0x05
005904   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005906   6e07     movwf	0x7, 0             	MOVWF	r0x07
005908   6a06     clrf	0x6, 0              	CLRF	r0x06
00590a   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
00590c   f004
00590e   6a05     clrf	0x5, 0              	CLRF	r0x05
005910   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005912   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
005914   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005916   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
                                           ;	.line	712; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(temp);
005918   5000     movf	0, 0, 0             	MOVF	r0x00, W
00591a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00591c   6a05     clrf	0x5, 0              	CLRF	r0x05
00591e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005920   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	713; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(temp);
005922   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005924   6e04     movwf	0x4, 0             	MOVWF	r0x04
005926   6a05     clrf	0x5, 0              	CLRF	r0x05
005928   6a05     clrf	0x5, 0              	CLRF	r0x05
00592a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00592c   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	714; TCPIP_Stack/ETH97J60.c	temp = CalcIPBufferChecksum(len);
00592e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005930   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005932   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005934   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005936   ecf8     call	0xdf0, 0            	CALL	_CalcIPBufferChecksum
005938   f006
00593a   6e00     movwf	0, 0               	MOVWF	r0x00
00593c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00593e   f001
005940   0e02     movlw	0x2                	MOVLW	0x02
005942   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	715; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(RDSave);
005944   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005946   6e02     movwf	0x2, 0             	MOVWF	r0x02
005948   6a03     clrf	0x3, 0              	CLRF	r0x03
00594a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00594c   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	716; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(RDSave);
00594e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005950   6e06     movwf	0x6, 0             	MOVWF	r0x06
005952   6a07     clrf	0x7, 0              	CLRF	r0x07
005954   6a07     clrf	0x7, 0              	CLRF	r0x07
005956   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005958   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	718; TCPIP_Stack/ETH97J60.c	return temp;
00595a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00595c   fff3
00595e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005960   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005962   f007
005964   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005966   f006
005968   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00596a   f005
00596c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00596e   f004
005970   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005972   f003
005974   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005976   f002
005978   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00597a   f001
00597c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00597e   f000
005980   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005982   ffd9
005984   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtr	code
                                           _MACSetReadPtr:
                                           ;	.line	669; TCPIP_Stack/ETH97J60.c	WORD MACSetReadPtr(WORD address)
0073f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0073f4   ffe5
0073f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0073f8   ffd9
0073fa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0073fc   ffe5
0073fe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007400   ffe5
007402   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007404   ffe5
007406   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007408   ffe5
00740a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00740c   ffe5
00740e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007410   ffe5
007412   0e02     movlw	0x2                	MOVLW	0x02
007414   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007416   f000
007418   0e03     movlw	0x3                	MOVLW	0x03
00741a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00741c   f001
                                           ;	.line	673; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)ERDPTH)<<8|ERDPTL;
00741e   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
007420   f002
007422   6a03     clrf	0x3, 0              	CLRF	r0x03
007424   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007426   6e05     movwf	0x5, 0             	MOVWF	r0x05
007428   6a04     clrf	0x4, 0              	CLRF	r0x04
00742a   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
00742c   f002
00742e   6a03     clrf	0x3, 0              	CLRF	r0x03
007430   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007432   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
007434   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007436   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	674; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(address);
007438   5000     movf	0, 0, 0             	MOVF	r0x00, W
00743a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00743c   6a03     clrf	0x3, 0              	CLRF	r0x03
00743e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007440   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	675; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(address);
007442   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007444   6e00     movwf	0, 0               	MOVWF	r0x00
007446   6a01     clrf	0x1, 0              	CLRF	r0x01
007448   6a01     clrf	0x1, 0              	CLRF	r0x01
00744a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00744c   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	676; TCPIP_Stack/ETH97J60.c	return oldVal;
00744e   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
007450   fff3
007452   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007454   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007456   f005
007458   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00745a   f004
00745c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00745e   f003
007460   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007462   f002
007464   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007466   f001
007468   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00746a   f000
00746c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00746e   ffd9
007470   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetWritePtr	code
                                           _MACSetWritePtr:
                                           ;	.line	642; TCPIP_Stack/ETH97J60.c	WORD MACSetWritePtr(WORD address)
0072ea   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0072ec   ffe5
0072ee   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0072f0   ffd9
0072f2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0072f4   ffe5
0072f6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0072f8   ffe5
0072fa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0072fc   ffe5
0072fe   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007300   ffe5
007302   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007304   ffe5
007306   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007308   ffe5
00730a   0e02     movlw	0x2                	MOVLW	0x02
00730c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00730e   f000
007310   0e03     movlw	0x3                	MOVLW	0x03
007312   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007314   f001
                                           ;	.line	646; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)EWRPTH)<<8|EWRPTL;
007316   cee3     movff	0xee3, 0x2         	MOVFF	_EWRPTH, r0x02
007318   f002
00731a   6a03     clrf	0x3, 0              	CLRF	r0x03
00731c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00731e   6e05     movwf	0x5, 0             	MOVWF	r0x05
007320   6a04     clrf	0x4, 0              	CLRF	r0x04
007322   cee2     movff	0xee2, 0x2         	MOVFF	_EWRPTL, r0x02
007324   f002
007326   6a03     clrf	0x3, 0              	CLRF	r0x03
007328   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00732a   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
00732c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00732e   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	648; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(address);
007330   5000     movf	0, 0, 0             	MOVF	r0x00, W
007332   6e02     movwf	0x2, 0             	MOVWF	r0x02
007334   6a03     clrf	0x3, 0              	CLRF	r0x03
007336   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007338   010e     movlb	0xe                	BANKSEL	_EWRPTL
00733a   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	649; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(address);
00733c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00733e   6e00     movwf	0, 0               	MOVWF	r0x00
007340   6a01     clrf	0x1, 0              	CLRF	r0x01
007342   6a01     clrf	0x1, 0              	CLRF	r0x01
007344   5000     movf	0, 0, 0             	MOVF	r0x00, W
007346   010e     movlb	0xe                	BANKSEL	_EWRPTH
007348   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	650; TCPIP_Stack/ETH97J60.c	return oldVal;
00734a   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00734c   fff3
00734e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007350   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007352   f005
007354   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007356   f004
007358   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00735a   f003
00735c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00735e   f002
007360   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007362   f001
007364   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007366   f000
007368   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00736a   ffd9
00736c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtrInRx	code
                                           _MACSetReadPtrInRx:
                                           ;	.line	609; TCPIP_Stack/ETH97J60.c	void MACSetReadPtrInRx(WORD offset)
0068bc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0068be   ffe5
0068c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0068c2   ffd9
0068c4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0068c6   ffe5
0068c8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0068ca   ffe5
0068cc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0068ce   ffe5
0068d0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0068d2   ffe5
0068d4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0068d6   ffe5
0068d8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0068da   ffe5
0068dc   0e02     movlw	0x2                	MOVLW	0x02
0068de   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0068e0   f000
0068e2   0e03     movlw	0x3                	MOVLW	0x03
0068e4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0068e6   f001
0068e8   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	615; TCPIP_Stack/ETH97J60.c	ReadPT.Val = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
0068ea   516b     movf	0x6b, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
0068ec   0f14     addlw	0x14               	ADDLW	0x14
0068ee   6e02     movwf	0x2, 0             	MOVWF	r0x02
0068f0   0e00     movlw	0                  	MOVLW	0x00
0068f2   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
0068f4   216c     addwfc	0x6c, 0, 0x1      	ADDWFC	(_CurrentPacketLocation + 1), W, B
0068f6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0068f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0068fa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0068fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0068fe   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006900   5000     movf	0, 0, 0             	MOVF	r0x00, W
006902   010a     movlb	0xa                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
006904   6f77     movwf	0x77, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
006906   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006908   010a     movlb	0xa                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
00690a   6f78     movwf	0x78, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           ;	.line	618; TCPIP_Stack/ETH97J60.c	if(ReadPT.Val > RXSTOP)  ReadPT.Val -= RXSIZE;
00690c   ca77     movff	0xa77, 0x2         	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, r0x02
00690e   f002
006910   ca78     movff	0xa78, 0x3         	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), r0x03
006912   f003
006914   6a04     clrf	0x4, 0              	CLRF	r0x04
006916   6a05     clrf	0x5, 0              	CLRF	r0x05
006918   0e00     movlw	0                  	MOVLW	0x00
00691a   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
00691c   e108     bnz	0x692e               	BNZ	_00275_DS_
00691e   0e00     movlw	0                  	MOVLW	0x00
006920   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
006922   e105     bnz	0x692e               	BNZ	_00275_DS_
006924   0e1a     movlw	0x1a               	MOVLW	0x1a
006926   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
006928   e102     bnz	0x692e               	BNZ	_00275_DS_
00692a   0e0a     movlw	0xa                	MOVLW	0x0a
00692c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00275_DS_:
00692e   e310     bnc	0x6950               	BNC	_00271_DS_
006930   6a00     clrf	0, 0                	CLRF	r0x00
006932   6a01     clrf	0x1, 0              	CLRF	r0x01
006934   0ef6     movlw	0xf6               	MOVLW	0xf6
006936   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
006938   0ee5     movlw	0xe5               	MOVLW	0xe5
00693a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00693c   0eff     movlw	0xff               	MOVLW	0xff
00693e   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
006940   0eff     movlw	0xff               	MOVLW	0xff
006942   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006944   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006946   010a     movlb	0xa                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
006948   6f77     movwf	0x77, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
00694a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00694c   010a     movlb	0xa                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
00694e   6f78     movwf	0x78, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           _00271_DS_:
                                           ;	.line	621; TCPIP_Stack/ETH97J60.c	ERDPTL = ReadPT.v[0];
006950   ca77     movff	0xa77, 0xf7a       	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, _ERDPTL
006952   ff7a
                                           ;	.line	622; TCPIP_Stack/ETH97J60.c	ERDPTH = ReadPT.v[1];
006954   ca78     movff	0xa78, 0xf7b       	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), _ERDPTH
006956   ff7b
006958   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00695a   f005
00695c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00695e   f004
006960   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006962   f003
006964   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006966   f002
006968   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00696a   f001
00696c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00696e   f000
006970   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006972   ffd9
006974   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACFlush	code
                                           _MACFlush:
                                           ;	.line	563; TCPIP_Stack/ETH97J60.c	void MACFlush(void)
0076c6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0076c8   ffe5
0076ca   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0076cc   ffd9
0076ce   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0076d0   ffe5
0076d2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0076d4   ffe5
0076d6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0076d8   ffe5
0076da   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0076dc   ffe5
                                           ;	.line	569; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 1;
0076de   8ed2     bsf	0xd2, 0x7, 0         	BSF	_ECON1bits, 7
                                           ;	.line	570; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 0;
0076e0   9ed2     bcf	0xd2, 0x7, 0         	BCF	_ECON1bits, 7
                                           ;	.line	574; TCPIP_Stack/ETH97J60.c	{volatile BYTE i = 8; while(i--);}
0076e2   0e08     movlw	0x8                	MOVLW	0x08
0076e4   010a     movlb	0xa                	BANKSEL	_MACFlush_i_2_2
0076e6   6fa9     movwf	0xa9, 0x1          	MOVWF	_MACFlush_i_2_2, B
                                           _00262_DS_:
0076e8   caa9     movff	0xaa9, 0           	MOVFF	_MACFlush_i_2_2, r0x00
0076ea   f000
0076ec   010a     movlb	0xa                	BANKSEL	_MACFlush_i_2_2
0076ee   07a9     decf	0xa9, 0x1, 0x1      	DECF	_MACFlush_i_2_2, F, B
0076f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0076f2   e1fa     bnz	0x76e8               	BNZ	_00262_DS_
                                           ;	.line	575; TCPIP_Stack/ETH97J60.c	EIRbits.TXERIF = 0;
0076f4   9260     bcf	0x60, 0x1, 0         	BCF	_EIRbits, 1
                                           ;	.line	582; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 1;
0076f6   86d2     bsf	0xd2, 0x3, 0         	BSF	_ECON1bits, 3
                                           ;	.line	583; TCPIP_Stack/ETH97J60.c	wTXWatchdog = TickGet();
0076f8   ece7     call	0x7fce, 0           	CALL	_TickGet
0076fa   f03f
0076fc   6e00     movwf	0, 0               	MOVWF	r0x00
0076fe   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
007700   f001
007702   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
007704   f002
007706   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
007708   f003
00770a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00770c   010a     movlb	0xa                	BANKSEL	_wTXWatchdog
00770e   6f6d     movwf	0x6d, 0x1          	MOVWF	_wTXWatchdog, B
007710   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007712   010a     movlb	0xa                	BANKSEL	(_wTXWatchdog + 1)
007714   6f6e     movwf	0x6e, 0x1          	MOVWF	(_wTXWatchdog + 1), B
007716   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007718   f003
00771a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00771c   f002
00771e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007720   f001
007722   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007724   f000
007726   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007728   ffd9
00772a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutHeader	code
                                           _MACPutHeader:
                                           ;	.line	515; TCPIP_Stack/ETH97J60.c	void MACPutHeader(MAC_ADDR *remote, BYTE type, WORD dataLen)
005270   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005272   ffe5
005274   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005276   ffd9
005278   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00527a   ffe5
00527c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00527e   ffe5
005280   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005282   ffe5
005284   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005286   ffe5
005288   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00528a   ffe5
00528c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00528e   ffe5
005290   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005292   ffe5
005294   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005296   ffe5
005298   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00529a   ffe5
00529c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00529e   ffe5
0052a0   0e02     movlw	0x2                	MOVLW	0x02
0052a2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0052a4   f000
0052a6   0e03     movlw	0x3                	MOVLW	0x03
0052a8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0052aa   f001
0052ac   0e04     movlw	0x4                	MOVLW	0x04
0052ae   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0052b0   f002
0052b2   0e05     movlw	0x5                	MOVLW	0x05
0052b4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0052b6   f003
0052b8   0e06     movlw	0x6                	MOVLW	0x06
0052ba   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0052bc   f004
0052be   0e07     movlw	0x7                	MOVLW	0x07
0052c0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0052c2   f005
                                           ;	.line	518; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART + 1);
0052c4   0e0b     movlw	0xb                	MOVLW	0x0b
0052c6   010e     movlb	0xe                	BANKSEL	_EWRPTL
0052c8   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	519; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART + 1);
0052ca   0e1a     movlw	0x1a               	MOVLW	0x1a
0052cc   010e     movlb	0xe                	BANKSEL	_EWRPTH
0052ce   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	522; TCPIP_Stack/ETH97J60.c	dataLen += (WORD)sizeof(ETHER_HEADER) + TXSTART;
0052d0   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
0052d2   f006
0052d4   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
0052d6   f007
0052d8   6a08     clrf	0x8, 0              	CLRF	r0x08
0052da   6a09     clrf	0x9, 0              	CLRF	r0x09
0052dc   0e18     movlw	0x18               	MOVLW	0x18
0052de   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
0052e0   0e1a     movlw	0x1a               	MOVLW	0x1a
0052e2   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0052e4   0e00     movlw	0                  	MOVLW	0x00
0052e6   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
0052e8   0e00     movlw	0                  	MOVLW	0x00
0052ea   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
0052ec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0052ee   6e04     movwf	0x4, 0             	MOVWF	r0x04
0052f0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0052f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	525; TCPIP_Stack/ETH97J60.c	ETXNDL = LOW(dataLen);
0052f4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0052f6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0052f8   6a07     clrf	0x7, 0              	CLRF	r0x07
0052fa   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0052fc   010e     movlb	0xe                	BANKSEL	_ETXNDL
0052fe   6fe6     movwf	0xe6, 0x1          	MOVWF	_ETXNDL, B
                                           ;	.line	526; TCPIP_Stack/ETH97J60.c	ETXNDH = HIGH(dataLen);
005300   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005302   6e04     movwf	0x4, 0             	MOVWF	r0x04
005304   6a05     clrf	0x5, 0              	CLRF	r0x05
005306   6a05     clrf	0x5, 0              	CLRF	r0x05
005308   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00530a   010e     movlb	0xe                	BANKSEL	_ETXNDH
00530c   6fe7     movwf	0xe7, 0x1          	MOVWF	_ETXNDH, B
                                           ;	.line	530; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)remote, sizeof(*remote));
00530e   0e00     movlw	0                  	MOVLW	0x00
005310   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005312   0e06     movlw	0x6                	MOVLW	0x06
005314   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005316   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005318   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00531a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00531c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00531e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005320   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005322   ecf6     call	0x6dec, 0           	CALL	_MACPutArray
005324   f036
005326   0e05     movlw	0x5                	MOVLW	0x05
005328   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	533; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
00532a   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
00532c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00532e   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
005330   6e00     movwf	0, 0               	MOVWF	r0x00
005332   0e80     movlw	0x80               	MOVLW	0x80
005334   6e02     movwf	0x2, 0             	MOVWF	r0x02
005336   0e00     movlw	0                  	MOVLW	0x00
005338   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00533a   0e06     movlw	0x6                	MOVLW	0x06
00533c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00533e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005340   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005342   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005344   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005346   5000     movf	0, 0, 0             	MOVF	r0x00, W
005348   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00534a   ecf6     call	0x6dec, 0           	CALL	_MACPutArray
00534c   f036
00534e   0e05     movlw	0x5                	MOVLW	0x05
005350   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	536; TCPIP_Stack/ETH97J60.c	MACPut(0x08);
005352   0e08     movlw	0x8                	MOVLW	0x08
005354   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005356   eca7     call	0x814e, 0           	CALL	_MACPut
005358   f040
00535a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/ETH97J60.c	MACPut((type == MAC_IP) ? ETHER_IP : ETHER_ARP);
00535c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00535e   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
005360   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
005362   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
005364   6a03     clrf	0x3, 0              	CLRF	r0x03
005366   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
005368   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00536a   e003     bz	0x5372                	BZ	_00256_DS_
00536c   6a00     clrf	0, 0                	CLRF	r0x00
00536e   6a01     clrf	0x1, 0              	CLRF	r0x01
005370   d003     bra	0x5378               	BRA	_00257_DS_
                                           _00256_DS_:
005372   0e06     movlw	0x6                	MOVLW	0x06
005374   6e00     movwf	0, 0               	MOVWF	r0x00
005376   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00257_DS_:
005378   5000     movf	0, 0, 0             	MOVF	r0x00, W
00537a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00537c   eca7     call	0x814e, 0           	CALL	_MACPut
00537e   f040
005380   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005382   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
005384   f009
005386   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005388   f008
00538a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00538c   f007
00538e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005390   f006
005392   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005394   f005
005396   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005398   f004
00539a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00539c   f003
00539e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0053a0   f002
0053a2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0053a4   f001
0053a6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0053a8   f000
0053aa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0053ac   ffd9
0053ae   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetHeader	code
                                           _MACGetHeader:
                                           ;	.line	425; TCPIP_Stack/ETH97J60.c	BOOL MACGetHeader(MAC_ADDR *remote, BYTE* type)
003960   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003962   ffe5
003964   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003966   ffd9
003968   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00396a   ffe5
00396c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00396e   ffe5
003970   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003972   ffe5
003974   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003976   ffe5
003978   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00397a   ffe5
00397c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00397e   ffe5
003980   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003982   ffe5
003984   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003986   ffe5
003988   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00398a   ffe5
00398c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00398e   ffe5
003990   0e02     movlw	0x2                	MOVLW	0x02
003992   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003994   f000
003996   0e03     movlw	0x3                	MOVLW	0x03
003998   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00399a   f001
00399c   0e04     movlw	0x4                	MOVLW	0x04
00399e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0039a0   f002
0039a2   0e05     movlw	0x5                	MOVLW	0x05
0039a4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0039a6   f003
0039a8   0e06     movlw	0x6                	MOVLW	0x06
0039aa   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0039ac   f004
0039ae   0e07     movlw	0x7                	MOVLW	0x07
0039b0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0039b2   f005
0039b4   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	430; TCPIP_Stack/ETH97J60.c	if(EPKTCNT == 0u)
0039b6   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
0039b8   e102     bnz	0x39be               	BNZ	_00213_DS_
                                           ;	.line	432; TCPIP_Stack/ETH97J60.c	return FALSE;
0039ba   6ae8     clrf	0xe8, 0             	CLRF	WREG
0039bc   d0c3     bra	0x3b44               	BRA	_00230_DS_
                                           _00213_DS_:
0039be   010a     movlb	0xa                	BANKSEL	_WasDiscarded
                                           ;	.line	436; TCPIP_Stack/ETH97J60.c	if(WasDiscarded == FALSE)
0039c0   51a8     movf	0xa8, 0, 0x1        	MOVF	_WasDiscarded, W, B
0039c2   e104     bnz	0x39cc               	BNZ	_00215_DS_
                                           ;	.line	438; TCPIP_Stack/ETH97J60.c	MACDiscardRx();
0039c4   ec8c     call	0x6f18, 0           	CALL	_MACDiscardRx
0039c6   f037
                                           ;	.line	439; TCPIP_Stack/ETH97J60.c	return FALSE;
0039c8   6ae8     clrf	0xe8, 0             	CLRF	WREG
0039ca   d0bc     bra	0x3b44               	BRA	_00230_DS_
                                           _00215_DS_:
0039cc   0108     movlb	0x8                	BANKSEL	_NextPacketLocation
                                           ;	.line	442; TCPIP_Stack/ETH97J60.c	CurrentPacketLocation.Val = NextPacketLocation.Val;
0039ce   51fe     movf	0xfe, 0, 0x1        	MOVF	_NextPacketLocation, W, B
0039d0   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
0039d2   6f6b     movwf	0x6b, 0x1          	MOVWF	_CurrentPacketLocation, B
0039d4   0108     movlb	0x8                	BANKSEL	(_NextPacketLocation + 1)
0039d6   51ff     movf	0xff, 0, 0x1        	MOVF	(_NextPacketLocation + 1), W, B
0039d8   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
0039da   6f6c     movwf	0x6c, 0x1          	MOVWF	(_CurrentPacketLocation + 1), B
0039dc   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
                                           ;	.line	445; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(CurrentPacketLocation.Val);
0039de   516c     movf	0x6c, 0, 0x1        	MOVF	(_CurrentPacketLocation + 1), W, B
0039e0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0039e2   6a07     clrf	0x7, 0              	CLRF	r0x07
0039e4   6a07     clrf	0x7, 0              	CLRF	r0x07
0039e6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0039e8   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
0039ea   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	446; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(CurrentPacketLocation.Val);
0039ec   516b     movf	0x6b, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
0039ee   6e06     movwf	0x6, 0             	MOVWF	r0x06
0039f0   6a07     clrf	0x7, 0              	CLRF	r0x07
0039f2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0039f4   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	449; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header, sizeof(header));
0039f6   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1)
0039f8   6e07     movwf	0x7, 0             	MOVWF	r0x07
0039fa   0eec     movlw	0xec               	MOVLW	LOW(_MACGetHeader_header_1_1)
0039fc   6e06     movwf	0x6, 0             	MOVWF	r0x06
0039fe   0e80     movlw	0x80               	MOVLW	0x80
003a00   6e08     movwf	0x8, 0             	MOVWF	r0x08
003a02   0e00     movlw	0                  	MOVLW	0x00
003a04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a06   0e14     movlw	0x14               	MOVLW	0x14
003a08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a0a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003a0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a0e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003a10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a12   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003a14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a16   ecda     call	0x63b4, 0           	CALL	_MACGetArray
003a18   f031
003a1a   0e05     movlw	0x5                	MOVLW	0x05
003a1c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003a1e   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
                                           ;	.line	453; TCPIP_Stack/ETH97J60.c	header.Type.Val = swaps(header.Type.Val);
003a20   51ff     movf	0xff, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 19), W, B
003a22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a24   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
003a26   51fe     movf	0xfe, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 18), W, B
003a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a2a   ec03     call	0x7a06, 0           	CALL	_swaps
003a2c   f03d
003a2e   6e06     movwf	0x6, 0             	MOVWF	r0x06
003a30   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
003a32   f007
003a34   0e02     movlw	0x2                	MOVLW	0x02
003a36   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003a38   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003a3a   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
003a3c   6ffe     movwf	0xfe, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 18), B
003a3e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003a40   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
003a42   6fff     movwf	0xff, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 19), B
                                           ;	.line	458; TCPIP_Stack/ETH97J60.c	if(header.NextPacketPointer > RXSTOP || 
003a44   c0ec     movff	0xec, 0x6          	MOVFF	_MACGetHeader_header_1_1, r0x06
003a46   f006
003a48   c0ed     movff	0xed, 0x7          	MOVFF	(_MACGetHeader_header_1_1 + 1), r0x07
003a4a   f007
003a4c   6a08     clrf	0x8, 0              	CLRF	r0x08
003a4e   6a09     clrf	0x9, 0              	CLRF	r0x09
003a50   0e00     movlw	0                  	MOVLW	0x00
003a52   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
003a54   e108     bnz	0x3a66               	BNZ	_00244_DS_
003a56   0e00     movlw	0                  	MOVLW	0x00
003a58   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
003a5a   e105     bnz	0x3a66               	BNZ	_00244_DS_
003a5c   0e1a     movlw	0x1a               	MOVLW	0x1a
003a5e   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
003a60   e102     bnz	0x3a66               	BNZ	_00244_DS_
003a62   0e0a     movlw	0xa                	MOVLW	0x0a
003a64   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00244_DS_:
003a66   e214     bc	0x3a90                	BC	_00219_DS_
003a68   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	459; TCPIP_Stack/ETH97J60.c	((BYTE_VAL*)(&header.NextPacketPointer))->bits.b0 ||
003a6a   b1ec     btfsc	0xec, 0, 0x1       	BTFSC	_MACGetHeader_header_1_1, 0, B
003a6c   d011     bra	0x3a90               	BRA	_00219_DS_
003a6e   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 5)
                                           ;	.line	460; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.Zero ||
003a70   bff1     btfsc	0xf1, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 5), 7, B
003a72   d00e     bra	0x3a90               	BRA	_00219_DS_
003a74   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	461; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.CRCError ||
003a76   b9f0     btfsc	0xf0, 0x4, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 4, B
003a78   d00b     bra	0x3a90               	BRA	_00219_DS_
                                           ;	.line	462; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.ByteCount > 1518u ||
003a7a   0e05     movlw	0x5                	MOVLW	0x05
003a7c   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 3)
003a7e   5def     subwf	0xef, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 3), W, B
003a80   e103     bnz	0x3a88               	BNZ	_00245_DS_
003a82   0eef     movlw	0xef               	MOVLW	0xef
003a84   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 2)
003a86   5dee     subwf	0xee, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 2), W, B
                                           _00245_DS_:
003a88   e203     bc	0x3a90                	BC	_00219_DS_
003a8a   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	463; TCPIP_Stack/ETH97J60.c	!header.StatusVector.bits.ReceiveOk)
003a8c   bff0     btfsc	0xf0, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 7, B
003a8e   d00d     bra	0x3aaa               	BRA	_00220_DS_
                                           _00219_DS_:
                                           ;	.line	465; TCPIP_Stack/ETH97J60.c	DisplayString(0,"error reading hdr");while(1);//////////////////////ML
003a90   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
003a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a94   0e5b     movlw	0x5b               	MOVLW	HIGH(__str_0)
003a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a98   0ea6     movlw	0xa6               	MOVLW	LOW(__str_0)
003a9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a9c   0e00     movlw	0                  	MOVLW	0x00
003a9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003aa0   ec2a     call	0x6654, 0           	CALL	_DisplayString
003aa2   f033
003aa4   0e04     movlw	0x4                	MOVLW	0x04
003aa6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00217_DS_:
003aa8   d7ff     bra	0x3aa8               	BRA	_00217_DS_
                                           _00220_DS_:
003aaa   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	470; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = header.NextPacketPointer;
003aac   51ec     movf	0xec, 0, 0x1        	MOVF	_MACGetHeader_header_1_1, W, B
003aae   0108     movlb	0x8                	BANKSEL	_NextPacketLocation
003ab0   6ffe     movwf	0xfe, 0x1          	MOVWF	_NextPacketLocation, B
003ab2   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 1)
003ab4   51ed     movf	0xed, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 1), W, B
003ab6   0108     movlb	0x8                	BANKSEL	(_NextPacketLocation + 1)
003ab8   6fff     movwf	0xff, 0x1          	MOVWF	(_NextPacketLocation + 1), B
                                           ;	.line	475; TCPIP_Stack/ETH97J60.c	memcpy((void*)remote->v, (void*)header.SourceMACAddr.v, sizeof(*remote));
003aba   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1 + 12)
003abc   6e07     movwf	0x7, 0             	MOVWF	r0x07
003abe   0ef8     movlw	0xf8               	MOVLW	LOW(_MACGetHeader_header_1_1 + 12)
003ac0   6e06     movwf	0x6, 0             	MOVWF	r0x06
003ac2   0e80     movlw	0x80               	MOVLW	0x80
003ac4   6e08     movwf	0x8, 0             	MOVWF	r0x08
003ac6   0e00     movlw	0                  	MOVLW	0x00
003ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003aca   0e06     movlw	0x6                	MOVLW	0x06
003acc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ace   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003ad0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ad2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003ad4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ad6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003ad8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ada   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003adc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ade   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003ae0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ae2   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ae4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ae6   ec7a     call	0x5ef4, 0           	CALL	_memcpy
003ae8   f02f
003aea   0e08     movlw	0x8                	MOVLW	0x08
003aec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	478; TCPIP_Stack/ETH97J60.c	*type = MAC_UNKNOWN;
003aee   0eff     movlw	0xff               	MOVLW	0xff
003af0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003af2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003af4   ffe9
003af6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003af8   fff3
003afa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003afc   ecbb     call	0x8176, 0           	CALL	__gptrput1
003afe   f040
                                           ;	.line	479; TCPIP_Stack/ETH97J60.c	if( (header.Type.v[1] == 0x08u) &&
003b00   c0ff     movff	0xff, 0            	MOVFF	(_MACGetHeader_header_1_1 + 19), r0x00
003b02   f000
003b04   6a01     clrf	0x1, 0              	CLRF	r0x01
003b06   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b08   0a08     xorlw	0x8                	XORLW	0x08
003b0a   e102     bnz	0x3b10               	BNZ	_00246_DS_
003b0c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003b0e   e001     bz	0x3b12                	BZ	_00247_DS_
                                           _00246_DS_:
003b10   d016     bra	0x3b3e               	BRA	_00227_DS_
                                           _00247_DS_:
                                           ;	.line	480; TCPIP_Stack/ETH97J60.c	((header.Type.v[0] == ETHER_IP) || (header.Type.v[0] == ETHER_ARP)) )
003b12   c0fe     movff	0xfe, 0            	MOVFF	(_MACGetHeader_header_1_1 + 18), r0x00
003b14   f000
003b16   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b18   e009     bz	0x3b2c                	BZ	_00226_DS_
003b1a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
003b1c   f001
003b1e   6a02     clrf	0x2, 0              	CLRF	r0x02
003b20   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003b22   0a06     xorlw	0x6                	XORLW	0x06
003b24   e102     bnz	0x3b2a               	BNZ	_00248_DS_
003b26   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003b28   e001     bz	0x3b2c                	BZ	_00226_DS_
                                           _00248_DS_:
003b2a   d009     bra	0x3b3e               	BRA	_00227_DS_
                                           _00226_DS_:
                                           ;	.line	482; TCPIP_Stack/ETH97J60.c	*type = header.Type.v[0];
003b2c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003b2e   ffe5
003b30   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003b32   ffe9
003b34   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003b36   fff3
003b38   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003b3a   ecbb     call	0x8176, 0           	CALL	__gptrput1
003b3c   f040
                                           _00227_DS_:
003b3e   010a     movlb	0xa                	BANKSEL	_WasDiscarded
                                           ;	.line	486; TCPIP_Stack/ETH97J60.c	WasDiscarded = FALSE;
003b40   6ba8     clrf	0xa8, 0x1           	CLRF	_WasDiscarded, B
                                           ;	.line	487; TCPIP_Stack/ETH97J60.c	return TRUE;
003b42   0e01     movlw	0x1                	MOVLW	0x01
                                           _00230_DS_:
003b44   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003b46   f009
003b48   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003b4a   f008
003b4c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003b4e   f007
003b50   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003b52   f006
003b54   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003b56   f005
003b58   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003b5a   f004
003b5c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003b5e   f003
003b60   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003b62   f002
003b64   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003b66   f001
003b68   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003b6a   f000
003b6c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003b6e   ffd9
003b70   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetFreeRxSize	code
                                           _MACGetFreeRxSize:
                                           ;	.line	367; TCPIP_Stack/ETH97J60.c	WORD MACGetFreeRxSize(void)
005bb8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005bba   ffe5
005bbc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005bbe   ffd9
005bc0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005bc2   ffe5
005bc4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005bc6   ffe5
005bc8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005bca   ffe5
005bcc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005bce   ffe5
005bd0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005bd2   ffe5
005bd4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005bd6   ffe5
                                           _00186_DS_:
005bd8   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	377; TCPIP_Stack/ETH97J60.c	ReadPT.v[0] = EPKTCNT;
005bda   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
005bdc   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
005bde   6f73     movwf	0x73, 0x1          	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
                                           ;	.line	379; TCPIP_Stack/ETH97J60.c	WritePT.Val = ((WORD)ERXWRPTH)<<8|ERXWRPTL;
005be0   ceef     movff	0xeef, 0           	MOVFF	_ERXWRPTH, r0x00
005be2   f000
005be4   6a01     clrf	0x1, 0              	CLRF	r0x01
005be6   5000     movf	0, 0, 0             	MOVF	r0x00, W
005be8   6e03     movwf	0x3, 0             	MOVWF	r0x03
005bea   6a02     clrf	0x2, 0              	CLRF	r0x02
005bec   ceee     movff	0xeee, 0           	MOVFF	_ERXWRPTL, r0x00
005bee   f000
005bf0   6a01     clrf	0x1, 0              	CLRF	r0x01
005bf2   5000     movf	0, 0, 0             	MOVF	r0x00, W
005bf4   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
005bf6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005bf8   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
005bfa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005bfc   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
005bfe   6f75     movwf	0x75, 0x1          	MOVWF	_MACGetFreeRxSize_WritePT_1_1, B
005c00   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005c02   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005c04   6f76     movwf	0x76, 0x1          	MOVWF	(_MACGetFreeRxSize_WritePT_1_1 + 1), B
005c06   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	380; TCPIP_Stack/ETH97J60.c	} while(EPKTCNT != ReadPT.v[0]);
005c08   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
005c0a   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
005c0c   1973     xorwf	0x73, 0, 0x1       	XORWF	_MACGetFreeRxSize_ReadPT_1_1, W, B
005c0e   e1e4     bnz	0x5bd8               	BNZ	_00186_DS_
                                           ;	.line	383; TCPIP_Stack/ETH97J60.c	ReadPT.Val = ERXRDPTH<<8|ERXRDPTL;
005c10   ceed     movff	0xeed, 0           	MOVFF	_ERXRDPTH, r0x00
005c12   f000
005c14   6a01     clrf	0x1, 0              	CLRF	r0x01
005c16   5000     movf	0, 0, 0             	MOVF	r0x00, W
005c18   6e03     movwf	0x3, 0             	MOVWF	r0x03
005c1a   6a02     clrf	0x2, 0              	CLRF	r0x02
005c1c   ceec     movff	0xeec, 0           	MOVFF	_ERXRDPTL, r0x00
005c1e   f000
005c20   6a01     clrf	0x1, 0              	CLRF	r0x01
005c22   5000     movf	0, 0, 0             	MOVF	r0x00, W
005c24   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
005c26   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005c28   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
005c2a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c2c   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
005c2e   6f73     movwf	0x73, 0x1          	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
005c30   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005c32   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_ReadPT_1_1 + 1)
005c34   6f74     movwf	0x74, 0x1          	MOVWF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), B
                                           ;	.line	388; TCPIP_Stack/ETH97J60.c	if(WritePT.Val > ReadPT.Val)
005c36   ca73     movff	0xa73, 0           	MOVFF	_MACGetFreeRxSize_ReadPT_1_1, r0x00
005c38   f000
005c3a   ca74     movff	0xa74, 0x1         	MOVFF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), r0x01
005c3c   f001
005c3e   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005c40   5176     movf	0x76, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005c42   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
005c44   e103     bnz	0x5c4c               	BNZ	_00205_DS_
005c46   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
005c48   5175     movf	0x75, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
005c4a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00205_DS_:
005c4c   e217     bc	0x5c7c                	BC	_00193_DS_
                                           ;	.line	390; TCPIP_Stack/ETH97J60.c	return (RXSTOP - RXSTART) - (WritePT.Val - ReadPT.Val);
005c4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005c50   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
005c52   5d75     subwf	0x75, 0, 0x1       	SUBWF	_MACGetFreeRxSize_WritePT_1_1, W, B
005c54   6e02     movwf	0x2, 0             	MOVWF	r0x02
005c56   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005c58   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005c5a   5976     subwfb	0x76, 0, 0x1      	SUBWFB	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005c5c   6e03     movwf	0x3, 0             	MOVWF	r0x03
005c5e   6a04     clrf	0x4, 0              	CLRF	r0x04
005c60   6a05     clrf	0x5, 0              	CLRF	r0x05
005c62   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c64   0809     sublw	0x9                	SUBLW	0x09
005c66   6e02     movwf	0x2, 0             	MOVWF	r0x02
005c68   0e1a     movlw	0x1a               	MOVLW	0x1a
005c6a   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
005c6c   0e00     movlw	0                  	MOVLW	0x00
005c6e   5604     subfwb	0x4, 0x1, 0       	SUBFWB	r0x04, F
005c70   0e00     movlw	0                  	MOVLW	0x00
005c72   5605     subfwb	0x5, 0x1, 0       	SUBFWB	r0x05, F
005c74   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
005c76   fff3
005c78   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c7a   d01a     bra	0x5cb0               	BRA	_00195_DS_
                                           _00193_DS_:
005c7c   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	392; TCPIP_Stack/ETH97J60.c	else if(WritePT.Val == ReadPT.Val)
005c7e   5175     movf	0x75, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
005c80   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
005c82   e104     bnz	0x5c8c               	BNZ	_00206_DS_
005c84   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005c86   5176     movf	0x76, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005c88   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
005c8a   e001     bz	0x5c8e                	BZ	_00207_DS_
                                           _00206_DS_:
005c8c   d004     bra	0x5c96               	BRA	_00190_DS_
                                           _00207_DS_:
                                           ;	.line	394; TCPIP_Stack/ETH97J60.c	return RXSIZE - 1;
005c8e   0e1a     movlw	0x1a               	MOVLW	0x1a
005c90   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
005c92   0e09     movlw	0x9                	MOVLW	0x09
005c94   d00d     bra	0x5cb0               	BRA	_00195_DS_
                                           _00190_DS_:
005c96   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	398; TCPIP_Stack/ETH97J60.c	return ReadPT.Val - WritePT.Val - 1;
005c98   5175     movf	0x75, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
005c9a   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
005c9c   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005c9e   5176     movf	0x76, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005ca0   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
005ca2   0eff     movlw	0xff               	MOVLW	0xff
005ca4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005ca6   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
005ca8   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
005caa   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005cac   fff3
005cae   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00195_DS_:
005cb0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005cb2   f005
005cb4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005cb6   f004
005cb8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005cba   f003
005cbc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005cbe   f002
005cc0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005cc2   f001
005cc4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005cc6   f000
005cc8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005cca   ffd9
005ccc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACDiscardRx	code
                                           _MACDiscardRx:
                                           ;	.line	313; TCPIP_Stack/ETH97J60.c	void MACDiscardRx(void)
006f18   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006f1a   ffe5
006f1c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006f1e   ffd9
006f20   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006f22   ffe5
006f24   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006f26   ffe5
006f28   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006f2a   ffe5
006f2c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006f2e   ffe5
006f30   010a     movlb	0xa                	BANKSEL	_WasDiscarded
                                           ;	.line	318; TCPIP_Stack/ETH97J60.c	if(WasDiscarded) return;
006f32   51a8     movf	0xa8, 0, 0x1        	MOVF	_WasDiscarded, W, B
006f34   e130     bnz	0x6f96               	BNZ	_00177_DS_
                                           ;	.line	319; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
006f36   0e01     movlw	0x1                	MOVLW	0x01
006f38   010a     movlb	0xa                	BANKSEL	_WasDiscarded
006f3a   6fa8     movwf	0xa8, 0x1          	MOVWF	_WasDiscarded, B
006f3c   0108     movlb	0x8                	BANKSEL	_NextPacketLocation
                                           ;	.line	325; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = NextPacketLocation.Val - 1;
006f3e   51fe     movf	0xfe, 0, 0x1        	MOVF	_NextPacketLocation, W, B
006f40   0fff     addlw	0xff               	ADDLW	0xff
006f42   6e00     movwf	0, 0               	MOVWF	r0x00
006f44   0eff     movlw	0xff               	MOVLW	0xff
006f46   0108     movlb	0x8                	BANKSEL	(_NextPacketLocation + 1)
006f48   21ff     addwfc	0xff, 0, 0x1      	ADDWFC	(_NextPacketLocation + 1), W, B
006f4a   6e01     movwf	0x1, 0             	MOVWF	r0x01
006f4c   5000     movf	0, 0, 0             	MOVF	r0x00, W
006f4e   010a     movlb	0xa                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
006f50   6f71     movwf	0x71, 0x1          	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
006f52   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006f54   010a     movlb	0xa                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
006f56   6f72     movwf	0x72, 0x1          	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           ;	.line	327; TCPIP_Stack/ETH97J60.c	if(NewRXRDLocation.Val > RXSTOP)
006f58   ca71     movff	0xa71, 0xfe8       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, WREG
006f5a   ffe8
006f5c   ca72     movff	0xa72, 0xfe8       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), WREG
006f5e   ffe8
006f60   6a02     clrf	0x2, 0              	CLRF	r0x02
006f62   6a03     clrf	0x3, 0              	CLRF	r0x03
006f64   0e00     movlw	0                  	MOVLW	0x00
006f66   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
006f68   e108     bnz	0x6f7a               	BNZ	_00181_DS_
006f6a   0e00     movlw	0                  	MOVLW	0x00
006f6c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
006f6e   e105     bnz	0x6f7a               	BNZ	_00181_DS_
006f70   0e1a     movlw	0x1a               	MOVLW	0x1a
006f72   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
006f74   e102     bnz	0x6f7a               	BNZ	_00181_DS_
006f76   0e0a     movlw	0xa                	MOVLW	0x0a
006f78   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00181_DS_:
006f7a   e306     bnc	0x6f88               	BNC	_00176_DS_
                                           ;	.line	332; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = RXSTOP;
006f7c   0e09     movlw	0x9                	MOVLW	0x09
006f7e   010a     movlb	0xa                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
006f80   6f71     movwf	0x71, 0x1          	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
006f82   0e1a     movlw	0x1a               	MOVLW	0x1a
006f84   010a     movlb	0xa                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
006f86   6f72     movwf	0x72, 0x1          	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           _00176_DS_:
006f88   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	336; TCPIP_Stack/ETH97J60.c	ECON2bits.PKTDEC = 1;
006f8a   8dfe     bsf	0xfe, 0x6, 0x1       	BSF	_ECON2bits, 6, B
                                           ;	.line	341; TCPIP_Stack/ETH97J60.c	ERXRDPTL = NewRXRDLocation.v[0];
006f8c   ca71     movff	0xa71, 0xeec       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, _ERXRDPTL
006f8e   feec
                                           ;	.line	342; TCPIP_Stack/ETH97J60.c	ERXRDPTH = NewRXRDLocation.v[1];
006f90   ca72     movff	0xa72, 0xeed       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), _ERXRDPTH
006f92   feed
                                           ;	.line	347; TCPIP_Stack/ETH97J60.c	EIRbits.PKTIF = 0;
006f94   9c60     bcf	0x60, 0x6, 0         	BCF	_EIRbits, 6
                                           _00177_DS_:
006f96   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006f98   f003
006f9a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006f9c   f002
006f9e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006fa0   f001
006fa2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006fa4   f000
006fa6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006fa8   ffd9
006faa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsTxReady	code
                                           _MACIsTxReady:
                                           ;	.line	278; TCPIP_Stack/ETH97J60.c	BOOL MACIsTxReady(void)
007570   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007572   ffe5
007574   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007576   ffd9
007578   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00757a   ffe5
00757c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00757e   ffe5
007580   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007582   ffe5
007584   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007586   ffe5
                                           ;	.line	280; TCPIP_Stack/ETH97J60.c	if(!ECON1bits.TXRTS)
007588   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
00758a   d002     bra	0x7590               	BRA	_00161_DS_
                                           ;	.line	281; TCPIP_Stack/ETH97J60.c	return TRUE;
00758c   0e01     movlw	0x1                	MOVLW	0x01
00758e   d021     bra	0x75d2               	BRA	_00164_DS_
                                           _00161_DS_:
                                           ;	.line	285; TCPIP_Stack/ETH97J60.c	if((WORD)TickGet() - wTXWatchdog >= (3ull*TICK_SECOND/1000ull))
007590   ece7     call	0x7fce, 0           	CALL	_TickGet
007592   f03f
007594   6e00     movwf	0, 0               	MOVWF	r0x00
007596   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
007598   f001
00759a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00759c   f002
00759e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0075a0   f003
0075a2   010a     movlb	0xa                	BANKSEL	_wTXWatchdog
0075a4   516d     movf	0x6d, 0, 0x1        	MOVF	_wTXWatchdog, W, B
0075a6   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
0075a8   010a     movlb	0xa                	BANKSEL	(_wTXWatchdog + 1)
0075aa   516e     movf	0x6e, 0, 0x1        	MOVF	(_wTXWatchdog + 1), W, B
0075ac   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
0075ae   6a02     clrf	0x2, 0              	CLRF	r0x02
0075b0   6a03     clrf	0x3, 0              	CLRF	r0x03
0075b2   0e00     movlw	0                  	MOVLW	0x00
0075b4   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0075b6   e108     bnz	0x75c8               	BNZ	_00168_DS_
0075b8   0e00     movlw	0                  	MOVLW	0x00
0075ba   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0075bc   e105     bnz	0x75c8               	BNZ	_00168_DS_
0075be   0e00     movlw	0                  	MOVLW	0x00
0075c0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0075c2   e102     bnz	0x75c8               	BNZ	_00168_DS_
0075c4   0e7a     movlw	0x7a               	MOVLW	0x7a
0075c6   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00168_DS_:
0075c8   e303     bnc	0x75d0               	BNC	_00163_DS_
                                           ;	.line	287; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 0;
0075ca   96d2     bcf	0xd2, 0x3, 0         	BCF	_ECON1bits, 3
                                           ;	.line	288; TCPIP_Stack/ETH97J60.c	MACFlush();
0075cc   ec63     call	0x76c6, 0           	CALL	_MACFlush
0075ce   f03b
                                           _00163_DS_:
                                           ;	.line	290; TCPIP_Stack/ETH97J60.c	return FALSE;
0075d0   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00164_DS_:
0075d2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0075d4   f003
0075d6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0075d8   f002
0075da   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0075dc   f001
0075de   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0075e0   f000
0075e2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0075e4   ffd9
0075e6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsLinked	code
                                           _MACIsLinked:
                                           ;	.line	244; TCPIP_Stack/ETH97J60.c	BOOL MACIsLinked(void)
007cb6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007cb8   ffe5
007cba   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007cbc   ffd9
007cbe   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007cc0   ffe5
007cc2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007cc4   ffe5
                                           ;	.line	253; TCPIP_Stack/ETH97J60.c	pr.Val= ReadPHYReg(PHSTAT1);
007cc6   0e01     movlw	0x1                	MOVLW	0x01
007cc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007cca   ec39     call	0x7c72, 0           	CALL	_ReadPHYReg
007ccc   f03e
007cce   6e00     movwf	0, 0               	MOVWF	r0x00
007cd0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
007cd2   f001
007cd4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
007cd6   5000     movf	0, 0, 0             	MOVF	r0x00, W
007cd8   010a     movlb	0xa                	BANKSEL	_MACIsLinked_pr_1_1
007cda   6f6f     movwf	0x6f, 0x1          	MOVWF	_MACIsLinked_pr_1_1, B
007cdc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007cde   010a     movlb	0xa                	BANKSEL	(_MACIsLinked_pr_1_1 + 1)
007ce0   6f70     movwf	0x70, 0x1          	MOVWF	(_MACIsLinked_pr_1_1 + 1), B
                                           ;	.line	254; TCPIP_Stack/ETH97J60.c	return pr.PHSTAT1bits.LLSTAT;
007ce2   6a00     clrf	0, 0                	CLRF	r0x00
007ce4   010a     movlb	0xa                	BANKSEL	_MACIsLinked_pr_1_1
007ce6   b56f     btfsc	0x6f, 0x2, 0x1     	BTFSC	_MACIsLinked_pr_1_1, 2, B
007ce8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007cea   5000     movf	0, 0, 0             	MOVF	r0x00, W
007cec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007cee   f001
007cf0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007cf2   f000
007cf4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007cf6   ffd9
007cf8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACInit	code
                                           _MACInit:
                                           ;	.line	131; TCPIP_Stack/ETH97J60.c	void MACInit(void)
005aa0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005aa2   ffe5
005aa4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005aa6   ffd9
                                           ;	.line	135; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA0 = 0; // Set LEDA as output (green on ethernet connector)
005aa8   9092     bcf	0x92, 0, 0           	BCF	_TRISAbits, 0
                                           ;	.line	136; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA1 = 0; // Set LEDB as output (yellow on ethernet connector)
005aaa   9292     bcf	0x92, 0x1, 0         	BCF	_TRISAbits, 1
005aac   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	137; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;    // Enable Ethernet!
005aae   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00105_DS_:
005ab0   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	140; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY);
005ab2   a1fd     btfss	0xfd, 0, 0x1       	BTFSS	_ESTATbits, 0, B
005ab4   d7fd     bra	0x5ab0               	BRA	_00105_DS_
                                           ;	.line	144; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
005ab6   0e01     movlw	0x1                	MOVLW	0x01
005ab8   010a     movlb	0xa                	BANKSEL	_WasDiscarded
005aba   6fa8     movwf	0xa8, 0x1          	MOVWF	_WasDiscarded, B
005abc   0108     movlb	0x8                	BANKSEL	_NextPacketLocation
                                           ;	.line	145; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = RXSTART;
005abe   6bfe     clrf	0xfe, 0x1           	CLRF	_NextPacketLocation, B
005ac0   0108     movlb	0x8                	BANKSEL	(_NextPacketLocation + 1)
005ac2   6bff     clrf	0xff, 0x1           	CLRF	(_NextPacketLocation + 1), B
005ac4   010e     movlb	0xe                	BANKSEL	_ERXSTL
                                           ;	.line	146; TCPIP_Stack/ETH97J60.c	ERXSTL = LOW(RXSTART);
005ac6   6be8     clrf	0xe8, 0x1           	CLRF	_ERXSTL, B
005ac8   010e     movlb	0xe                	BANKSEL	_ERXSTH
                                           ;	.line	147; TCPIP_Stack/ETH97J60.c	ERXSTH = HIGH(RXSTART);
005aca   6be9     clrf	0xe9, 0x1           	CLRF	_ERXSTH, B
                                           ;	.line	149; TCPIP_Stack/ETH97J60.c	ERXRDPTL = LOW(RXSTOP);	// Write low byte first
005acc   0e09     movlw	0x9                	MOVLW	0x09
005ace   010e     movlb	0xe                	BANKSEL	_ERXRDPTL
005ad0   6fec     movwf	0xec, 0x1          	MOVWF	_ERXRDPTL, B
                                           ;	.line	150; TCPIP_Stack/ETH97J60.c	ERXRDPTH = HIGH(RXSTOP);    // Write high byte last
005ad2   0e1a     movlw	0x1a               	MOVLW	0x1a
005ad4   010e     movlb	0xe                	BANKSEL	_ERXRDPTH
005ad6   6fed     movwf	0xed, 0x1          	MOVWF	_ERXRDPTH, B
                                           ;	.line	152; TCPIP_Stack/ETH97J60.c	ERXNDL = LOW(RXSTOP);
005ad8   0e09     movlw	0x9                	MOVLW	0x09
005ada   010e     movlb	0xe                	BANKSEL	_ERXNDL
005adc   6fea     movwf	0xea, 0x1          	MOVWF	_ERXNDL, B
                                           ;	.line	153; TCPIP_Stack/ETH97J60.c	ERXNDH = HIGH(RXSTOP);
005ade   0e1a     movlw	0x1a               	MOVLW	0x1a
005ae0   010e     movlb	0xe                	BANKSEL	_ERXNDH
005ae2   6feb     movwf	0xeb, 0x1          	MOVWF	_ERXNDH, B
                                           ;	.line	155; TCPIP_Stack/ETH97J60.c	ETXSTL = LOW(TXSTART);
005ae4   0e0a     movlw	0xa                	MOVLW	0x0a
005ae6   010e     movlb	0xe                	BANKSEL	_ETXSTL
005ae8   6fe4     movwf	0xe4, 0x1          	MOVWF	_ETXSTL, B
                                           ;	.line	156; TCPIP_Stack/ETH97J60.c	ETXSTH = HIGH(TXSTART);
005aea   0e1a     movlw	0x1a               	MOVLW	0x1a
005aec   010e     movlb	0xe                	BANKSEL	_ETXSTH
005aee   6fe5     movwf	0xe5, 0x1          	MOVWF	_ETXSTH, B
                                           ;	.line	159; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART);
005af0   0e0a     movlw	0xa                	MOVLW	0x0a
005af2   010e     movlb	0xe                	BANKSEL	_EWRPTL
005af4   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	160; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART);
005af6   0e1a     movlw	0x1a               	MOVLW	0x1a
005af8   010e     movlb	0xe                	BANKSEL	_EWRPTH
005afa   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	161; TCPIP_Stack/ETH97J60.c	EDATA = 0x00;
005afc   6a61     clrf	0x61, 0             	CLRF	_EDATA
                                           ;	.line	171; TCPIP_Stack/ETH97J60.c	MACON1 = MACON1_TXPAUS | MACON1_RXPAUS | MACON1_MARXEN; Nop();
005afe   0e0d     movlw	0xd                	MOVLW	0x0d
005b00   010e     movlb	0xe                	BANKSEL	_MACON1
005b02   6fa0     movwf	0xa0, 0x1          	MOVWF	_MACON1, B
005b04   0000     nop                      	nop 
                                           ;	.line	179; TCPIP_Stack/ETH97J60.c	MACON3 = MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN; Nop();
005b06   0e32     movlw	0x32               	MOVLW	0x32
005b08   010e     movlb	0xe                	BANKSEL	_MACON3
005b0a   6fa2     movwf	0xa2, 0x1          	MOVWF	_MACON3, B
005b0c   0000     nop                      	nop 
                                           ;	.line	180; TCPIP_Stack/ETH97J60.c	MABBIPG = 0x12; Nop();
005b0e   0e12     movlw	0x12               	MOVLW	0x12
005b10   010e     movlb	0xe                	BANKSEL	_MABBIPG
005b12   6fa4     movwf	0xa4, 0x1          	MOVWF	_MABBIPG, B
005b14   0000     nop                      	nop 
                                           ;	.line	186; TCPIP_Stack/ETH97J60.c	MACON4 = MACON4_DEFER; Nop();
005b16   0e40     movlw	0x40               	MOVLW	0x40
005b18   010e     movlb	0xe                	BANKSEL	_MACON4
005b1a   6fa3     movwf	0xa3, 0x1          	MOVWF	_MACON4, B
005b1c   0000     nop                      	nop 
                                           ;	.line	191; TCPIP_Stack/ETH97J60.c	MAIPGL = 0x12; Nop();
005b1e   0e12     movlw	0x12               	MOVLW	0x12
005b20   010e     movlb	0xe                	BANKSEL	_MAIPGL
005b22   6fa6     movwf	0xa6, 0x1          	MOVWF	_MAIPGL, B
005b24   0000     nop                      	nop 
                                           ;	.line	192; TCPIP_Stack/ETH97J60.c	MAIPGH = 0x0C; Nop();
005b26   0e0c     movlw	0xc                	MOVLW	0x0c
005b28   010e     movlb	0xe                	BANKSEL	_MAIPGH
005b2a   6fa7     movwf	0xa7, 0x1          	MOVWF	_MAIPGH, B
005b2c   0000     nop                      	nop 
                                           ;	.line	195; TCPIP_Stack/ETH97J60.c	MAMXFLL = LOW(6+6+2+1500+4); Nop();
005b2e   0eee     movlw	0xee               	MOVLW	0xee
005b30   010e     movlb	0xe                	BANKSEL	_MAMXFLL
005b32   6faa     movwf	0xaa, 0x1          	MOVWF	_MAMXFLL, B
005b34   0000     nop                      	nop 
                                           ;	.line	196; TCPIP_Stack/ETH97J60.c	MAMXFLH = HIGH(6+6+2+1500+4); Nop();
005b36   0e05     movlw	0x5                	MOVLW	0x05
005b38   010e     movlb	0xe                	BANKSEL	_MAMXFLH
005b3a   6fab     movwf	0xab, 0x1          	MOVWF	_MAMXFLH, B
005b3c   0000     nop                      	nop 
                                           ;	.line	199; TCPIP_Stack/ETH97J60.c	MAADR1 = AppConfig.MyMACAddr.v[0]; Nop();
005b3e   ce2d     movff	0xe2d, 0xe84       	MOVFF	(_AppConfig + 45), _MAADR1
005b40   fe84
005b42   0000     nop                      	nop 
                                           ;	.line	200; TCPIP_Stack/ETH97J60.c	MAADR2 = AppConfig.MyMACAddr.v[1]; Nop();
005b44   ce2e     movff	0xe2e, 0xe85       	MOVFF	(_AppConfig + 46), _MAADR2
005b46   fe85
005b48   0000     nop                      	nop 
                                           ;	.line	201; TCPIP_Stack/ETH97J60.c	MAADR3 = AppConfig.MyMACAddr.v[2]; Nop();
005b4a   ce2f     movff	0xe2f, 0xe82       	MOVFF	(_AppConfig + 47), _MAADR3
005b4c   fe82
005b4e   0000     nop                      	nop 
                                           ;	.line	202; TCPIP_Stack/ETH97J60.c	MAADR4 = AppConfig.MyMACAddr.v[3]; Nop();
005b50   ce30     movff	0xe30, 0xe83       	MOVFF	(_AppConfig + 48), _MAADR4
005b52   fe83
005b54   0000     nop                      	nop 
                                           ;	.line	203; TCPIP_Stack/ETH97J60.c	MAADR5 = AppConfig.MyMACAddr.v[4]; Nop();
005b56   ce31     movff	0xe31, 0xe80       	MOVFF	(_AppConfig + 49), _MAADR5
005b58   fe80
005b5a   0000     nop                      	nop 
                                           ;	.line	204; TCPIP_Stack/ETH97J60.c	MAADR6 = AppConfig.MyMACAddr.v[5]; Nop();
005b5c   ce32     movff	0xe32, 0xe81       	MOVFF	(_AppConfig + 50), _MAADR6
005b5e   fe81
005b60   0000     nop                      	nop 
                                           ;	.line	207; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON2, PHCON2_HDLDIS | PHCON2_RXAPDIS);
005b62   0e01     movlw	0x1                	MOVLW	0x01
005b64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b66   0e10     movlw	0x10               	MOVLW	0x10
005b68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b6a   0e10     movlw	0x10               	MOVLW	0x10
005b6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b6e   ec7e     call	0x7afc, 0           	CALL	_WritePHYReg
005b70   f03d
005b72   0e03     movlw	0x3                	MOVLW	0x03
005b74   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	210; TCPIP_Stack/ETH97J60.c	SetLEDConfig(0x3472);
005b76   0e34     movlw	0x34               	MOVLW	0x34
005b78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b7a   0e72     movlw	0x72               	MOVLW	0x72
005b7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b7e   0e14     movlw	0x14               	MOVLW	0x14
005b80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b82   ec7e     call	0x7afc, 0           	CALL	_WritePHYReg
005b84   f03d
005b86   0e03     movlw	0x3                	MOVLW	0x03
005b88   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	216; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON1, 0x0000);
005b8a   0e00     movlw	0                  	MOVLW	0x00
005b8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b8e   0e00     movlw	0                  	MOVLW	0x00
005b90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b92   0e00     movlw	0                  	MOVLW	0x00
005b94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005b96   ec7e     call	0x7afc, 0           	CALL	_WritePHYReg
005b98   f03d
005b9a   0e03     movlw	0x3                	MOVLW	0x03
005b9c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	220; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
005b9e   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
005ba0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005ba2   ffd9
005ba4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
005ba6   7265     btg	0x65, 0x1, 0         	DB	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e
005ba8   6f72     movwf	0x72, 0x1          
005baa   2072     addwfc	0x72, 0, 0        
005bac   6572     cpfsgt	0x72, 0x1         
005bae   6461     cpfsgt	0x61, 0           
005bb0   6e69     movwf	0x69, 0            
005bb2   2067     addwfc	0x67, 0, 0        	DB	0x67, 0x20, 0x68, 0x64, 0x72, 0x00
005bb4   6468     cpfsgt	0x68, 0           
005bb6   0072     dw	0x72  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5346 (0x14e2) bytes ( 4.08%)
                                           ;           	 2673 (0x0a71) words
                                           ; udata size:	  141 (0x008d) bytes ( 3.67%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _GenerateRandomDWORD
                                           	global _StringToIPAddress
                                           	global _btohexa_high
                                           	global _btohexa_low
                                           	global _swaps
                                           	global _swapl
                                           	global _CalcIPChecksum
                                           	global _leftRotateDWORD
                                           	global _strnchr
                                           	global _toRotate
                                           	global _hexatob
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _rand
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           r0x1c	res	1
                                           r0x1d	res	1
                                           
                                           udata_Helpers_0	udata
                                           _GenerateRandomDWORD_wTime_1_1	res	2
                                           
                                           udata_Helpers_1	udata
                                           _StringToIPAddress_dwVal_1_1	res	4
                                           
                                           udata_Helpers_2	udata
                                           _hexatob_AsciiChars_1_1	res	2
                                           
                                           udata_Helpers_3	udata
                                           _swaps_t_1_1	res	2
                                           
                                           udata_Helpers_4	udata
                                           _swapl_v_1_1	res	4
                                           
                                           udata_Helpers_5	udata
                                           _CalcIPChecksum_count_1_1	res	2
                                           
                                           udata_Helpers_6	udata
                                           _CalcIPChecksum_sum_1_1	res	4
                                           
                                           udata_Helpers_7	udata
                                           _toRotate	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Helpers__strnchr	code
                                           _strnchr:
                                           ;	.line	1359; TCPIP_Stack/Helpers.c	char * strnchr(const char *searchString, size_t count, char c)
005ffe   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006000   ffe5
006002   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006004   ffd9
006006   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006008   ffe5
00600a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00600c   ffe5
00600e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006010   ffe5
006012   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006014   ffe5
006016   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006018   ffe5
00601a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00601c   ffe5
00601e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006020   ffe5
006022   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006024   ffe5
006026   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006028   ffe5
00602a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00602c   ffe5
00602e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
006030   ffe5
006032   0e02     movlw	0x2                	MOVLW	0x02
006034   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006036   f000
006038   0e03     movlw	0x3                	MOVLW	0x03
00603a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00603c   f001
00603e   0e04     movlw	0x4                	MOVLW	0x04
006040   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006042   f002
006044   0e05     movlw	0x5                	MOVLW	0x05
006046   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006048   f003
00604a   0e06     movlw	0x6                	MOVLW	0x06
00604c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00604e   f004
006050   0e07     movlw	0x7                	MOVLW	0x07
006052   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
006054   f005
                                           ;	.line	1363; TCPIP_Stack/Helpers.c	while(count--)
006056   c000     movff	0, 0x6             	MOVFF	r0x00, r0x06
006058   f006
00605a   c001     movff	0x1, 0x7           	MOVFF	r0x01, r0x07
00605c   f007
00605e   c002     movff	0x2, 0x8           	MOVFF	r0x02, r0x08
006060   f008
                                           _00311_DS_:
006062   c003     movff	0x3, 0x9           	MOVFF	r0x03, r0x09
006064   f009
006066   c004     movff	0x4, 0xa           	MOVFF	r0x04, r0x0a
006068   f00a
00606a   0eff     movlw	0xff               	MOVLW	0xff
00606c   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00606e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
006070   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
006072   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006074   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
006076   e025     bz	0x60c2                	BZ	_00313_DS_
                                           ;	.line	1365; TCPIP_Stack/Helpers.c	c2  = *searchString++;
006078   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00607a   ffe9
00607c   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00607e   fff3
006080   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
006082   ecf8     call	0x7ff0, 0           	CALL	__gptrget1
006084   f03f
006086   6e09     movwf	0x9, 0             	MOVWF	r0x09
006088   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00608a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00608c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
00608e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006090   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
                                           ;	.line	1366; TCPIP_Stack/Helpers.c	if(c2 == 0u)
006092   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
006094   e104     bnz	0x609e               	BNZ	_00308_DS_
                                           ;	.line	1367; TCPIP_Stack/Helpers.c	return NULL;
006096   6af4     clrf	0xf4, 0             	CLRF	PRODH
006098   6af3     clrf	0xf3, 0             	CLRF	PRODL
00609a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00609c   d015     bra	0x60c8               	BRA	_00314_DS_
                                           _00308_DS_:
                                           ;	.line	1368; TCPIP_Stack/Helpers.c	if(c2 == c)
00609e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0060a0   1805     xorwf	0x5, 0, 0          	XORWF	r0x05, W
0060a2   e1df     bnz	0x6062               	BNZ	_00311_DS_
                                           ;	.line	1369; TCPIP_Stack/Helpers.c	return (char*)--searchString;
0060a4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0060a6   0fff     addlw	0xff               	ADDLW	0xff
0060a8   6e00     movwf	0, 0               	MOVWF	r0x00
0060aa   0eff     movlw	0xff               	MOVLW	0xff
0060ac   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
0060ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0060b0   0eff     movlw	0xff               	MOVLW	0xff
0060b2   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0060b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0060b6   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
0060b8   fff4
0060ba   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0060bc   fff3
0060be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0060c0   d003     bra	0x60c8               	BRA	_00314_DS_
                                           _00313_DS_:
                                           ;	.line	1371; TCPIP_Stack/Helpers.c	return NULL;
0060c2   6af4     clrf	0xf4, 0             	CLRF	PRODH
0060c4   6af3     clrf	0xf3, 0             	CLRF	PRODL
0060c6   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00314_DS_:
0060c8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0060ca   f00a
0060cc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0060ce   f009
0060d0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0060d2   f008
0060d4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0060d6   f007
0060d8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0060da   f006
0060dc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0060de   f005
0060e0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0060e2   f004
0060e4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0060e6   f003
0060e8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0060ea   f002
0060ec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0060ee   f001
0060f0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0060f2   f000
0060f4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0060f6   ffd9
0060f8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__leftRotateDWORD	code
                                           _leftRotateDWORD:
                                           ;	.line	1235; TCPIP_Stack/Helpers.c	DWORD leftRotateDWORD(DWORD val, BYTE bits)
006496   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006498   ffe5
00649a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00649c   ffd9
00649e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0064a0   ffe5
0064a2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0064a4   ffe5
0064a6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0064a8   ffe5
0064aa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0064ac   ffe5
0064ae   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0064b0   ffe5
0064b2   0e02     movlw	0x2                	MOVLW	0x02
0064b4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0064b6   f000
0064b8   0e03     movlw	0x3                	MOVLW	0x03
0064ba   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0064bc   f001
0064be   0e04     movlw	0x4                	MOVLW	0x04
0064c0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0064c2   f002
0064c4   0e05     movlw	0x5                	MOVLW	0x05
0064c6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0064c8   f003
0064ca   0e06     movlw	0x6                	MOVLW	0x06
0064cc   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0064ce   f004
                                           ;	.line	1239; TCPIP_Stack/Helpers.c	toRotate.Val = val;
0064d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0064d2   010a     movlb	0xa                	BANKSEL	_toRotate
0064d4   6f38     movwf	0x38, 0x1          	MOVWF	_toRotate, B
0064d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0064d8   010a     movlb	0xa                	BANKSEL	(_toRotate + 1)
0064da   6f39     movwf	0x39, 0x1          	MOVWF	(_toRotate + 1), B
0064dc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0064de   010a     movlb	0xa                	BANKSEL	(_toRotate + 2)
0064e0   6f3a     movwf	0x3a, 0x1          	MOVWF	(_toRotate + 2), B
0064e2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0064e4   010a     movlb	0xa                	BANKSEL	(_toRotate + 3)
0064e6   6f3b     movwf	0x3b, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
0064e8   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
0064ea   f000
                                           _00284_DS_:
0064ec   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0064ee   f001
0064f0   6a02     clrf	0x2, 0              	CLRF	r0x02
0064f2   0e00     movlw	0                  	MOVLW	0x00
0064f4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0064f6   e102     bnz	0x64fc               	BNZ	_00300_DS_
0064f8   0e08     movlw	0x8                	MOVLW	0x08
0064fa   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00300_DS_:
0064fc   e317     bnc	0x652c               	BNC	_00288_DS_
                                           ;	.line	1243; TCPIP_Stack/Helpers.c	t = toRotate.v[3];
0064fe   ca3b     movff	0xa3b, 0x1         	MOVFF	(_toRotate + 3), r0x01
006500   f001
                                           ;	.line	1244; TCPIP_Stack/Helpers.c	toRotate.v[3] = toRotate.v[2];
006502   ca3a     movff	0xa3a, 0x2         	MOVFF	(_toRotate + 2), r0x02
006504   f002
006506   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006508   010a     movlb	0xa                	BANKSEL	(_toRotate + 3)
00650a   6f3b     movwf	0x3b, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1245; TCPIP_Stack/Helpers.c	toRotate.v[2] = toRotate.v[1];
00650c   ca39     movff	0xa39, 0x2         	MOVFF	(_toRotate + 1), r0x02
00650e   f002
006510   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006512   010a     movlb	0xa                	BANKSEL	(_toRotate + 2)
006514   6f3a     movwf	0x3a, 0x1          	MOVWF	(_toRotate + 2), B
                                           ;	.line	1246; TCPIP_Stack/Helpers.c	toRotate.v[1] = toRotate.v[0];
006516   ca38     movff	0xa38, 0x2         	MOVFF	_toRotate, r0x02
006518   f002
00651a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00651c   010a     movlb	0xa                	BANKSEL	(_toRotate + 1)
00651e   6f39     movwf	0x39, 0x1          	MOVWF	(_toRotate + 1), B
                                           ;	.line	1247; TCPIP_Stack/Helpers.c	toRotate.v[0] = t;
006520   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006522   010a     movlb	0xa                	BANKSEL	_toRotate
006524   6f38     movwf	0x38, 0x1          	MOVWF	_toRotate, B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
006526   0ef8     movlw	0xf8               	MOVLW	0xf8
006528   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00652a   d7e0     bra	0x64ec               	BRA	_00284_DS_
                                           _00288_DS_:
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
00652c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
00652e   f001
006530   6a02     clrf	0x2, 0              	CLRF	r0x02
006532   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006534   e102     bnz	0x653a               	BNZ	_00302_DS_
006536   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006538   e00a     bz	0x654e                	BZ	_00291_DS_
                                           _00301_DS_:
                                           _00302_DS_:
00653a   010a     movlb	0xa                	movlb _toRotate
00653c   90d8     bcf	0xd8, 0, 0           	bcf STATUS,0,0
00653e   bf3b     btfsc	0x3b, 0x7, 0x1     	btfsc _toRotate+3,7,1
006540   80d8     bsf	0xd8, 0, 0           	bsf STATUS,0,0
006542   3738     rlcf	0x38, 0x1, 0x1      	rlcf _toRotate+0,1,1
006544   3739     rlcf	0x39, 0x1, 0x1      	rlcf _toRotate+1,1,1
006546   373a     rlcf	0x3a, 0x1, 0x1      	rlcf _toRotate+2,1,1
006548   373b     rlcf	0x3b, 0x1, 0x1      	rlcf _toRotate+3,1,1
                                           	
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
00654a   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00654c   d7ef     bra	0x652c               	BRA	_00288_DS_
                                           _00291_DS_:
                                           ;	.line	1281; TCPIP_Stack/Helpers.c	return toRotate.Val;
00654e   ca3b     movff	0xa3b, 0xfe9       	MOVFF	(_toRotate + 3), FSR0L
006550   ffe9
006552   ca3a     movff	0xa3a, 0xff4       	MOVFF	(_toRotate + 2), PRODH
006554   fff4
006556   ca39     movff	0xa39, 0xff3       	MOVFF	(_toRotate + 1), PRODL
006558   fff3
00655a   010a     movlb	0xa                	BANKSEL	_toRotate
00655c   5138     movf	0x38, 0, 0x1        	MOVF	_toRotate, W, B
00655e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006560   f004
006562   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006564   f003
006566   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006568   f002
00656a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00656c   f001
00656e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006570   f000
006572   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006574   ffd9
006576   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__CalcIPChecksum	code
                                           _CalcIPChecksum:
                                           ;	.line	1062; TCPIP_Stack/Helpers.c	WORD CalcIPChecksum(BYTE* buffer, WORD count)
001ef8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001efa   ffe5
001efc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001efe   ffd9
001f00   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001f02   ffe5
001f04   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001f06   ffe5
001f08   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001f0a   ffe5
001f0c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001f0e   ffe5
001f10   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001f12   ffe5
001f14   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001f16   ffe5
001f18   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001f1a   ffe5
001f1c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001f1e   ffe5
001f20   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001f22   ffe5
001f24   0e02     movlw	0x2                	MOVLW	0x02
001f26   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001f28   f000
001f2a   0e03     movlw	0x3                	MOVLW	0x03
001f2c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001f2e   f001
001f30   0e04     movlw	0x4                	MOVLW	0x04
001f32   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001f34   f002
001f36   0e05     movlw	0x5                	MOVLW	0x05
001f38   cfdb     movff	0xfdb, 0xa8d       	MOVFF	PLUSW2, _CalcIPChecksum_count_1_1
001f3a   fa8d
001f3c   0e06     movlw	0x6                	MOVLW	0x06
001f3e   cfdb     movff	0xfdb, 0xa8e       	MOVFF	PLUSW2, (_CalcIPChecksum_count_1_1 + 1)
001f40   fa8e
001f42   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1066; TCPIP_Stack/Helpers.c	DWORD_VAL sum = {0x00000000ul};
001f44   6b34     clrf	0x34, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f46   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f48   6b35     clrf	0x35, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f4a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f4c   6b36     clrf	0x36, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f4e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f50   6b37     clrf	0x37, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f52   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f54   6b34     clrf	0x34, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f56   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f58   6b35     clrf	0x35, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f5a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f5c   6b36     clrf	0x36, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f5e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f60   6b37     clrf	0x37, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f62   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f64   6b34     clrf	0x34, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f66   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f68   6b35     clrf	0x35, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f6a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f6c   6b36     clrf	0x36, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f6e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f70   6b37     clrf	0x37, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f72   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f74   6b34     clrf	0x34, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f76   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f78   6b35     clrf	0x35, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f7a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f7c   6b36     clrf	0x36, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f7e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f80   6b37     clrf	0x37, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f82   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f84   6b34     clrf	0x34, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f86   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f88   6b35     clrf	0x35, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f8a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f8c   6b36     clrf	0x36, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f8e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f90   6b37     clrf	0x37, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f92   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f94   6b34     clrf	0x34, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f96   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f98   6b35     clrf	0x35, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f9a   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f9c   6b34     clrf	0x34, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f9e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fa0   6b35     clrf	0x35, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001fa2   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fa4   6b34     clrf	0x34, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001fa6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fa8   6b35     clrf	0x35, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001faa   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fac   9134     bcf	0x34, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
001fae   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fb0   9334     bcf	0x34, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
001fb2   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fb4   9534     bcf	0x34, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
001fb6   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fb8   9734     bcf	0x34, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
001fba   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fbc   9934     bcf	0x34, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
001fbe   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fc0   9b34     bcf	0x34, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
001fc2   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fc4   9d34     bcf	0x34, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
001fc6   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fc8   9f34     bcf	0x34, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
001fca   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fcc   9135     bcf	0x35, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
001fce   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fd0   9335     bcf	0x35, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
001fd2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fd4   9535     bcf	0x35, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
001fd6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fd8   9735     bcf	0x35, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
001fda   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fdc   9935     bcf	0x35, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
001fde   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fe0   9b35     bcf	0x35, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
001fe2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fe4   9d35     bcf	0x35, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
001fe6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fe8   9f35     bcf	0x35, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
001fea   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001fec   6b36     clrf	0x36, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001fee   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001ff0   6b37     clrf	0x37, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001ff2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001ff4   6b36     clrf	0x36, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001ff6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001ff8   6b37     clrf	0x37, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001ffa   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001ffc   6b36     clrf	0x36, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001ffe   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002000   6b37     clrf	0x37, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
002002   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002004   9136     bcf	0x36, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
002006   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002008   9336     bcf	0x36, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
00200a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00200c   9536     bcf	0x36, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
00200e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002010   9736     bcf	0x36, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
002012   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002014   9936     bcf	0x36, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
002016   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002018   9b36     bcf	0x36, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
00201a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00201c   9d36     bcf	0x36, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
00201e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002020   9f36     bcf	0x36, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
002022   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002024   9137     bcf	0x37, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
002026   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002028   9337     bcf	0x37, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
00202a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00202c   9537     bcf	0x37, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
00202e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002030   9737     bcf	0x37, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
002032   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002034   9937     bcf	0x37, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
002036   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002038   9b37     bcf	0x37, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
00203a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00203c   9d37     bcf	0x37, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
00203e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002040   9f37     bcf	0x37, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
002042   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002044   9134     bcf	0x34, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
002046   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002048   9334     bcf	0x34, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
00204a   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
00204c   9534     bcf	0x34, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
00204e   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002050   9734     bcf	0x34, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
002052   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002054   9934     bcf	0x34, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
002056   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002058   9b34     bcf	0x34, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
00205a   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
00205c   9d34     bcf	0x34, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
00205e   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002060   9f34     bcf	0x34, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
002062   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002064   9135     bcf	0x35, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
002066   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002068   9335     bcf	0x35, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
00206a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00206c   9535     bcf	0x35, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
00206e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002070   9735     bcf	0x35, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
002072   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002074   9935     bcf	0x35, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
002076   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002078   9b35     bcf	0x35, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
00207a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00207c   9d35     bcf	0x35, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
00207e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002080   9f35     bcf	0x35, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
002082   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002084   9136     bcf	0x36, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
002086   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002088   9336     bcf	0x36, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
00208a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00208c   9536     bcf	0x36, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
00208e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002090   9736     bcf	0x36, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
002092   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002094   9936     bcf	0x36, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
002096   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002098   9b36     bcf	0x36, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
00209a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00209c   9d36     bcf	0x36, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
00209e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0020a0   9f36     bcf	0x36, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
0020a2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020a4   9137     bcf	0x37, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
0020a6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020a8   9337     bcf	0x37, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
0020aa   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020ac   9537     bcf	0x37, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
0020ae   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020b0   9737     bcf	0x37, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
0020b2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020b4   9937     bcf	0x37, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
0020b6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020b8   9b37     bcf	0x37, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
0020ba   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020bc   9d37     bcf	0x37, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
0020be   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020c0   9f37     bcf	0x37, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
                                           ;	.line	1068; TCPIP_Stack/Helpers.c	i = count >> 1;
0020c2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0020c4   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_count_1_1 + 1)
0020c6   318e     rrcf	0x8e, 0, 0x1        	RRCF	(_CalcIPChecksum_count_1_1 + 1), W, B
0020c8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0020ca   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_count_1_1
0020cc   318d     rrcf	0x8d, 0, 0x1        	RRCF	_CalcIPChecksum_count_1_1, W, B
0020ce   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           _00274_DS_:
                                           ;	.line	1072; TCPIP_Stack/Helpers.c	while(i--)
0020d0   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
0020d2   f005
0020d4   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
0020d6   f006
0020d8   0eff     movlw	0xff               	MOVLW	0xff
0020da   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0020dc   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0020de   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0020e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0020e2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0020e4   e02b     bz	0x213c                	BZ	_00276_DS_
                                           ;	.line	1073; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*val++;
0020e6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0020e8   ffe9
0020ea   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0020ec   fff3
0020ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020f0   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
0020f2   f03f
0020f4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0020f6   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0020f8   f006
0020fa   0e02     movlw	0x2                	MOVLW	0x02
0020fc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0020fe   0e00     movlw	0                  	MOVLW	0x00
002100   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002102   0e00     movlw	0                  	MOVLW	0x00
002104   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002106   6a07     clrf	0x7, 0              	CLRF	r0x07
002108   6a08     clrf	0x8, 0              	CLRF	r0x08
00210a   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
00210c   5134     movf	0x34, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
00210e   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
002110   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002112   5135     movf	0x35, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
002114   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002116   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002118   5136     movf	0x36, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
00211a   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
00211c   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00211e   5137     movf	0x37, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
002120   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
002122   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002124   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002126   6f34     movwf	0x34, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
002128   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00212a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00212c   6f35     movwf	0x35, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
00212e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002130   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002132   6f36     movwf	0x36, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
002134   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002136   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002138   6f37     movwf	0x37, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
00213a   d7ca     bra	0x20d0               	BRA	_00274_DS_
                                           _00276_DS_:
00213c   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_count_1_1
                                           ;	.line	1076; TCPIP_Stack/Helpers.c	if(((WORD_VAL*)&count)->bits.b0)
00213e   a18d     btfss	0x8d, 0, 0x1       	BTFSS	_CalcIPChecksum_count_1_1, 0, B
002140   d023     bra	0x2188               	BRA	_00278_DS_
                                           ;	.line	1077; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*(BYTE*)val;
002142   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002144   ffe9
002146   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002148   fff3
00214a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00214c   ecf8     call	0x7ff0, 0           	CALL	__gptrget1
00214e   f03f
002150   6e00     movwf	0, 0               	MOVWF	r0x00
002152   6a01     clrf	0x1, 0              	CLRF	r0x01
002154   6a02     clrf	0x2, 0              	CLRF	r0x02
002156   6a03     clrf	0x3, 0              	CLRF	r0x03
002158   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
00215a   5134     movf	0x34, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
00215c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00215e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002160   5135     movf	0x35, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
002162   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002164   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002166   5136     movf	0x36, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
002168   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00216a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00216c   5137     movf	0x37, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
00216e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002170   5000     movf	0, 0, 0             	MOVF	r0x00, W
002172   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002174   6f34     movwf	0x34, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
002176   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002178   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00217a   6f35     movwf	0x35, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
00217c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00217e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002180   6f36     movwf	0x36, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
002182   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002184   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002186   6f37     movwf	0x37, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
                                           _00278_DS_:
                                           ;	.line	1080; TCPIP_Stack/Helpers.c	sum.Val = (DWORD)sum.w[0] + (DWORD)sum.w[1];
002188   ca34     movff	0xa34, 0           	MOVFF	_CalcIPChecksum_sum_1_1, r0x00
00218a   f000
00218c   ca35     movff	0xa35, 0x1         	MOVFF	(_CalcIPChecksum_sum_1_1 + 1), r0x01
00218e   f001
002190   6a02     clrf	0x2, 0              	CLRF	r0x02
002192   6a03     clrf	0x3, 0              	CLRF	r0x03
002194   ca36     movff	0xa36, 0x4         	MOVFF	(_CalcIPChecksum_sum_1_1 + 2), r0x04
002196   f004
002198   ca37     movff	0xa37, 0x5         	MOVFF	(_CalcIPChecksum_sum_1_1 + 3), r0x05
00219a   f005
00219c   6a06     clrf	0x6, 0              	CLRF	r0x06
00219e   6a07     clrf	0x7, 0              	CLRF	r0x07
0021a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0021a2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0021a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0021a6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0021a8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0021aa   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0021ac   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0021ae   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0021b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021b2   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
0021b4   6f34     movwf	0x34, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
0021b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021b8   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021ba   6f35     movwf	0x35, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
0021bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021be   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0021c0   6f36     movwf	0x36, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
0021c2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0021c4   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0021c6   6f37     movwf	0x37, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
0021c8   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
                                           ;	.line	1084; TCPIP_Stack/Helpers.c	sum.w[0] += sum.w[1];
0021ca   5136     movf	0x36, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
0021cc   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
0021ce   2534     addwf	0x34, 0, 0x1       	ADDWF	_CalcIPChecksum_sum_1_1, W, B
0021d0   6e00     movwf	0, 0               	MOVWF	r0x00
0021d2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0021d4   5137     movf	0x37, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
0021d6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021d8   2135     addwfc	0x35, 0, 0x1      	ADDWFC	(_CalcIPChecksum_sum_1_1 + 1), W, B
0021da   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021de   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
0021e0   6f34     movwf	0x34, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
0021e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021e4   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021e6   6f35     movwf	0x35, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
0021e8   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1087; TCPIP_Stack/Helpers.c	return ~sum.w[0];
0021ea   1d34     comf	0x34, 0, 0x1        	COMF	_CalcIPChecksum_sum_1_1, W, B
0021ec   6e00     movwf	0, 0               	MOVWF	r0x00
0021ee   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021f0   1d35     comf	0x35, 0, 0x1        	COMF	(_CalcIPChecksum_sum_1_1 + 1), W, B
0021f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021f4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0021f6   fff3
0021f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021fa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0021fc   f008
0021fe   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002200   f007
002202   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002204   f006
002206   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002208   f005
00220a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00220c   f004
00220e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002210   f003
002212   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002214   f002
002216   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002218   f001
00221a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00221c   f000
00221e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002220   ffd9
002222   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swapl	code
                                           _swapl:
                                           ;	.line	1020; TCPIP_Stack/Helpers.c	DWORD swapl(DWORD v)
006ade   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006ae0   ffe5
006ae2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006ae4   ffd9
006ae6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006ae8   ffe5
006aea   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006aec   ffe5
006aee   0e02     movlw	0x2                	MOVLW	0x02
006af0   cfdb     movff	0xfdb, 0xa30       	MOVFF	PLUSW2, _swapl_v_1_1
006af2   fa30
006af4   0e03     movlw	0x3                	MOVLW	0x03
006af6   cfdb     movff	0xfdb, 0xa31       	MOVFF	PLUSW2, (_swapl_v_1_1 + 1)
006af8   fa31
006afa   0e04     movlw	0x4                	MOVLW	0x04
006afc   cfdb     movff	0xfdb, 0xa32       	MOVFF	PLUSW2, (_swapl_v_1_1 + 2)
006afe   fa32
006b00   0e05     movlw	0x5                	MOVLW	0x05
006b02   cfdb     movff	0xfdb, 0xa33       	MOVFF	PLUSW2, (_swapl_v_1_1 + 3)
006b04   fa33
                                           ;	.line	1023; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
006b06   ca33     movff	0xa33, 0           	MOVFF	(_swapl_v_1_1 + 3), r0x00
006b08   f000
006b0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
006b0c   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006b0e   1930     xorwf	0x30, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
006b10   6e01     movwf	0x1, 0             	MOVWF	r0x01
006b12   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006b14   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006b16   6f30     movwf	0x30, 0x1          	MOVWF	_swapl_v_1_1, B
006b18   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
                                           ;	.line	1024; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[3] ^= ((DWORD_VAL*)&v)->v[0];
006b1a   5130     movf	0x30, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
006b1c   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
006b1e   5000     movf	0, 0, 0             	MOVF	r0x00, W
006b20   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 3)
006b22   6f33     movwf	0x33, 0x1          	MOVWF	(_swapl_v_1_1 + 3), B
006b24   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 3)
                                           ;	.line	1025; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
006b26   5133     movf	0x33, 0, 0x1        	MOVF	(_swapl_v_1_1 + 3), W, B
006b28   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006b2a   1930     xorwf	0x30, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
006b2c   6e00     movwf	0, 0               	MOVWF	r0x00
006b2e   5000     movf	0, 0, 0             	MOVF	r0x00, W
006b30   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006b32   6f30     movwf	0x30, 0x1          	MOVWF	_swapl_v_1_1, B
                                           ;	.line	1028; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
006b34   ca32     movff	0xa32, 0           	MOVFF	(_swapl_v_1_1 + 2), r0x00
006b36   f000
006b38   5000     movf	0, 0, 0             	MOVF	r0x00, W
006b3a   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
006b3c   1931     xorwf	0x31, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
006b3e   6e01     movwf	0x1, 0             	MOVWF	r0x01
006b40   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006b42   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
006b44   6f31     movwf	0x31, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
006b46   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
                                           ;	.line	1029; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[2] ^= ((DWORD_VAL*)&v)->v[1];
006b48   5131     movf	0x31, 0, 0x1        	MOVF	(_swapl_v_1_1 + 1), W, B
006b4a   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
006b4c   5000     movf	0, 0, 0             	MOVF	r0x00, W
006b4e   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 2)
006b50   6f32     movwf	0x32, 0x1          	MOVWF	(_swapl_v_1_1 + 2), B
006b52   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 2)
                                           ;	.line	1030; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
006b54   5132     movf	0x32, 0, 0x1        	MOVF	(_swapl_v_1_1 + 2), W, B
006b56   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
006b58   1931     xorwf	0x31, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
006b5a   6e00     movwf	0, 0               	MOVWF	r0x00
006b5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
006b5e   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
006b60   6f31     movwf	0x31, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
                                           ;	.line	1032; TCPIP_Stack/Helpers.c	return v;
006b62   ca33     movff	0xa33, 0xfe9       	MOVFF	(_swapl_v_1_1 + 3), FSR0L
006b64   ffe9
006b66   ca32     movff	0xa32, 0xff4       	MOVFF	(_swapl_v_1_1 + 2), PRODH
006b68   fff4
006b6a   ca31     movff	0xa31, 0xff3       	MOVFF	(_swapl_v_1_1 + 1), PRODL
006b6c   fff3
006b6e   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006b70   5130     movf	0x30, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
006b72   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006b74   f001
006b76   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006b78   f000
006b7a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006b7c   ffd9
006b7e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swaps	code
                                           _swaps:
                                           ;	.line	991; TCPIP_Stack/Helpers.c	WORD swaps(WORD v)
007a06   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007a08   ffe5
007a0a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007a0c   ffd9
007a0e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007a10   ffe5
007a12   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007a14   ffe5
007a16   0e02     movlw	0x2                	MOVLW	0x02
007a18   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007a1a   f000
007a1c   0e03     movlw	0x3                	MOVLW	0x03
007a1e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007a20   f001
                                           ;	.line	996; TCPIP_Stack/Helpers.c	t.Val   = v;
007a22   5000     movf	0, 0, 0             	MOVF	r0x00, W
007a24   010a     movlb	0xa                	BANKSEL	_swaps_t_1_1
007a26   6f8b     movwf	0x8b, 0x1          	MOVWF	_swaps_t_1_1, B
007a28   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007a2a   010a     movlb	0xa                	BANKSEL	(_swaps_t_1_1 + 1)
007a2c   6f8c     movwf	0x8c, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	997; TCPIP_Stack/Helpers.c	b       = t.v[1];
007a2e   ca8c     movff	0xa8c, 0           	MOVFF	(_swaps_t_1_1 + 1), r0x00
007a30   f000
                                           ;	.line	998; TCPIP_Stack/Helpers.c	t.v[1]  = t.v[0];
007a32   ca8b     movff	0xa8b, 0x1         	MOVFF	_swaps_t_1_1, r0x01
007a34   f001
007a36   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007a38   010a     movlb	0xa                	BANKSEL	(_swaps_t_1_1 + 1)
007a3a   6f8c     movwf	0x8c, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	999; TCPIP_Stack/Helpers.c	t.v[0]  = b;
007a3c   5000     movf	0, 0, 0             	MOVF	r0x00, W
007a3e   010a     movlb	0xa                	BANKSEL	_swaps_t_1_1
007a40   6f8b     movwf	0x8b, 0x1          	MOVWF	_swaps_t_1_1, B
                                           ;	.line	1001; TCPIP_Stack/Helpers.c	return t.Val;
007a42   ca8c     movff	0xa8c, 0xff3       	MOVFF	(_swaps_t_1_1 + 1), PRODL
007a44   fff3
007a46   010a     movlb	0xa                	BANKSEL	_swaps_t_1_1
007a48   518b     movf	0x8b, 0, 0x1        	MOVF	_swaps_t_1_1, W, B
007a4a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007a4c   f001
007a4e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007a50   f000
007a52   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007a54   ffd9
007a56   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_low	code
                                           _btohexa_low:
                                           ;	.line	904; TCPIP_Stack/Helpers.c	BYTE btohexa_low(BYTE b)
007a58   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007a5a   ffe5
007a5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007a5e   ffd9
007a60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007a62   ffe5
007a64   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007a66   ffe5
007a68   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007a6a   ffe5
007a6c   0e02     movlw	0x2                	MOVLW	0x02
007a6e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007a70   f000
                                           ;	.line	906; TCPIP_Stack/Helpers.c	b &= 0x0F;
007a72   0e0f     movlw	0xf                	MOVLW	0x0f
007a74   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
                                           ;	.line	907; TCPIP_Stack/Helpers.c	return (b>9u) ? b+'A'-10:b+'0';
007a76   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
007a78   f001
007a7a   6a02     clrf	0x2, 0              	CLRF	r0x02
007a7c   0e00     movlw	0                  	MOVLW	0x00
007a7e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
007a80   e102     bnz	0x7a86               	BNZ	_00259_DS_
007a82   0e0a     movlw	0xa                	MOVLW	0x0a
007a84   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
007a86   e304     bnc	0x7a90               	BNC	_00255_DS_
007a88   0e37     movlw	0x37               	MOVLW	0x37
007a8a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
007a8c   6e01     movwf	0x1, 0             	MOVWF	r0x01
007a8e   d003     bra	0x7a96               	BRA	_00256_DS_
                                           _00255_DS_:
007a90   0e30     movlw	0x30               	MOVLW	0x30
007a92   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
007a94   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00256_DS_:
007a96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007a98   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007a9a   f002
007a9c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007a9e   f001
007aa0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007aa2   f000
007aa4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007aa6   ffd9
007aa8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_high	code
                                           _btohexa_high:
                                           ;	.line	878; TCPIP_Stack/Helpers.c	BYTE btohexa_high(BYTE b)
0079b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0079b4   ffe5
0079b6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0079b8   ffd9
0079ba   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0079bc   ffe5
0079be   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0079c0   ffe5
0079c2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0079c4   ffe5
0079c6   0e02     movlw	0x2                	MOVLW	0x02
0079c8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0079ca   f000
                                           ;	.line	880; TCPIP_Stack/Helpers.c	b >>= 4;
0079cc   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
0079ce   0b0f     andlw	0xf                	ANDLW	0x0f
0079d0   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	881; TCPIP_Stack/Helpers.c	return (b>0x9u) ? b+'A'-10:b+'0';
0079d2   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0079d4   f001
0079d6   6a02     clrf	0x2, 0              	CLRF	r0x02
0079d8   0e00     movlw	0                  	MOVLW	0x00
0079da   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0079dc   e102     bnz	0x79e2               	BNZ	_00248_DS_
0079de   0e0a     movlw	0xa                	MOVLW	0x0a
0079e0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00248_DS_:
0079e2   e304     bnc	0x79ec               	BNC	_00245_DS_
0079e4   0e37     movlw	0x37               	MOVLW	0x37
0079e6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0079e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0079ea   d003     bra	0x79f2               	BRA	_00246_DS_
                                           _00245_DS_:
0079ec   0e30     movlw	0x30               	MOVLW	0x30
0079ee   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0079f0   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00246_DS_:
0079f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0079f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0079f6   f002
0079f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0079fa   f001
0079fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0079fe   f000
007a00   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007a02   ffd9
007a04   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__hexatob	code
                                           _hexatob:
                                           ;	.line	829; TCPIP_Stack/Helpers.c	BYTE hexatob(WORD AsciiCharsarg)
005cce   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005cd0   ffe5
005cd2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005cd4   ffd9
005cd6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005cd8   ffe5
005cda   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005cdc   ffe5
005cde   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005ce0   ffe5
005ce2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005ce4   ffe5
005ce6   0e02     movlw	0x2                	MOVLW	0x02
005ce8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005cea   f000
005cec   0e03     movlw	0x3                	MOVLW	0x03
005cee   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005cf0   f001
                                           ;	.line	832; TCPIP_Stack/Helpers.c	AsciiChars.v[0] = (BYTE)AsciiCharsarg&0xFF; //ML
005cf2   5000     movf	0, 0, 0             	MOVF	r0x00, W
005cf4   6e02     movwf	0x2, 0             	MOVWF	r0x02
005cf6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005cf8   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005cfa   6f89     movwf	0x89, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           ;	.line	833; TCPIP_Stack/Helpers.c	AsciiChars.v[1] = (BYTE)(AsciiCharsarg>>8)&0xFF; //ML
005cfc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005cfe   6e00     movwf	0, 0               	MOVWF	r0x00
005d00   6a01     clrf	0x1, 0              	CLRF	r0x01
005d02   5000     movf	0, 0, 0             	MOVF	r0x00, W
005d04   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005d06   6f8a     movwf	0x8a, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           ;	.line	836; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'F')
005d08   ca8a     movff	0xa8a, 0x1         	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x01
005d0a   f001
005d0c   6a02     clrf	0x2, 0              	CLRF	r0x02
005d0e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005d10   0f80     addlw	0x80               	ADDLW	0x80
005d12   0f80     addlw	0x80               	ADDLW	0x80
005d14   e102     bnz	0x5d1a               	BNZ	_00235_DS_
005d16   0e47     movlw	0x47               	MOVLW	0x47
005d18   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00235_DS_:
005d1a   e305     bnc	0x5d26               	BNC	_00220_DS_
                                           ;	.line	837; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'a'-(int)'A';
005d1c   0ee0     movlw	0xe0               	MOVLW	0xe0
005d1e   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
005d20   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005d22   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005d24   6f8a     movwf	0x8a, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00220_DS_:
                                           ;	.line	838; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'F')
005d26   ca89     movff	0xa89, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
005d28   f000
005d2a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005d2c   f001
005d2e   6a02     clrf	0x2, 0              	CLRF	r0x02
005d30   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005d32   0f80     addlw	0x80               	ADDLW	0x80
005d34   0f80     addlw	0x80               	ADDLW	0x80
005d36   e102     bnz	0x5d3c               	BNZ	_00236_DS_
005d38   0e47     movlw	0x47               	MOVLW	0x47
005d3a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00236_DS_:
005d3c   e305     bnc	0x5d48               	BNC	_00222_DS_
                                           ;	.line	839; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'a'-(int)'A';
005d3e   0ee0     movlw	0xe0               	MOVLW	0xe0
005d40   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005d42   5000     movf	0, 0, 0             	MOVF	r0x00, W
005d44   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005d46   6f89     movwf	0x89, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00222_DS_:
                                           ;	.line	842; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'9')
005d48   ca8a     movff	0xa8a, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
005d4a   f000
005d4c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005d4e   f001
005d50   6a02     clrf	0x2, 0              	CLRF	r0x02
005d52   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005d54   0f80     addlw	0x80               	ADDLW	0x80
005d56   0f80     addlw	0x80               	ADDLW	0x80
005d58   e102     bnz	0x5d5e               	BNZ	_00237_DS_
005d5a   0e3a     movlw	0x3a               	MOVLW	0x3a
005d5c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00237_DS_:
005d5e   e307     bnc	0x5d6e               	BNC	_00224_DS_
                                           ;	.line	843; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'A' - 10;
005d60   0ec9     movlw	0xc9               	MOVLW	0xc9
005d62   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005d64   6e01     movwf	0x1, 0             	MOVWF	r0x01
005d66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005d68   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005d6a   6f8a     movwf	0x8a, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
005d6c   d005     bra	0x5d78               	BRA	_00225_DS_
                                           _00224_DS_:
                                           ;	.line	845; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= '0';
005d6e   0ed0     movlw	0xd0               	MOVLW	0xd0
005d70   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005d72   5000     movf	0, 0, 0             	MOVF	r0x00, W
005d74   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005d76   6f8a     movwf	0x8a, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00225_DS_:
                                           ;	.line	847; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'9')
005d78   ca89     movff	0xa89, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
005d7a   f000
005d7c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005d7e   f001
005d80   6a02     clrf	0x2, 0              	CLRF	r0x02
005d82   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005d84   0f80     addlw	0x80               	ADDLW	0x80
005d86   0f80     addlw	0x80               	ADDLW	0x80
005d88   e102     bnz	0x5d8e               	BNZ	_00238_DS_
005d8a   0e3a     movlw	0x3a               	MOVLW	0x3a
005d8c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00238_DS_:
005d8e   e307     bnc	0x5d9e               	BNC	_00227_DS_
                                           ;	.line	848; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'A' - 10;
005d90   0ec9     movlw	0xc9               	MOVLW	0xc9
005d92   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005d94   6e01     movwf	0x1, 0             	MOVWF	r0x01
005d96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005d98   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005d9a   6f89     movwf	0x89, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
005d9c   d005     bra	0x5da8               	BRA	_00228_DS_
                                           _00227_DS_:
                                           ;	.line	850; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'0';
005d9e   0ed0     movlw	0xd0               	MOVLW	0xd0
005da0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005da2   5000     movf	0, 0, 0             	MOVF	r0x00, W
005da4   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005da6   6f89     movwf	0x89, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00228_DS_:
                                           ;	.line	854; TCPIP_Stack/Helpers.c	return (WORD)((AsciiChars.v[1]<<4) |  AsciiChars.v[0]);
005da8   ca8a     movff	0xa8a, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
005daa   f000
005dac   6a01     clrf	0x1, 0              	CLRF	r0x01
005dae   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
005db0   0bf0     andlw	0xf0               	ANDLW	0xf0
005db2   6e03     movwf	0x3, 0             	MOVWF	r0x03
005db4   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
005db6   6e02     movwf	0x2, 0             	MOVWF	r0x02
005db8   0b0f     andlw	0xf                	ANDLW	0x0f
005dba   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
005dbc   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
005dbe   ca89     movff	0xa89, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
005dc0   f000
005dc2   6a01     clrf	0x1, 0              	CLRF	r0x01
005dc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
005dc6   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
005dc8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005dca   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
005dcc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005dce   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005dd0   f003
005dd2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005dd4   f002
005dd6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005dd8   f001
005dda   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005ddc   f000
005dde   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005de0   ffd9
005de2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__StringToIPAddress	code
                                           _StringToIPAddress:
                                           ;	.line	330; TCPIP_Stack/Helpers.c	BOOL StringToIPAddress(BYTE* str, IP_ADDR* IPAddress)
002224   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002226   ffe5
002228   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00222a   ffd9
00222c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00222e   ffe5
002230   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002232   ffe5
002234   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002236   ffe5
002238   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00223a   ffe5
00223c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00223e   ffe5
002240   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002242   ffe5
002244   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002246   ffe5
002248   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00224a   ffe5
00224c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00224e   ffe5
002250   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002252   ffe5
002254   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002256   ffe5
002258   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00225a   ffe5
00225c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00225e   ffe5
002260   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002262   ffe5
002264   0e02     movlw	0x2                	MOVLW	0x02
002266   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002268   f000
00226a   0e03     movlw	0x3                	MOVLW	0x03
00226c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00226e   f001
002270   0e04     movlw	0x4                	MOVLW	0x04
002272   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002274   f002
002276   0e05     movlw	0x5                	MOVLW	0x05
002278   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00227a   f003
00227c   0e06     movlw	0x6                	MOVLW	0x06
00227e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002280   f004
002282   0e07     movlw	0x7                	MOVLW	0x07
002284   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002286   f005
                                           ;	.line	335; TCPIP_Stack/Helpers.c	charLen = 0;
002288   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           ;	.line	336; TCPIP_Stack/Helpers.c	currentOctet = 0;
00228a   6a07     clrf	0x7, 0              	CLRF	r0x07
00228c   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	337; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
00228e   6b2c     clrf	0x2c, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
002290   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002292   6b2d     clrf	0x2d, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
002294   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
002296   6b2e     clrf	0x2e, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
002298   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00229a   6b2f     clrf	0x2f, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           _00161_DS_:
                                           ;	.line	338; TCPIP_Stack/Helpers.c	while((i = *str++))
00229c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00229e   ffe9
0022a0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0022a2   fff3
0022a4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0022a6   ecf8     call	0x7ff0, 0           	CALL	__gptrget1
0022a8   f03f
0022aa   6e08     movwf	0x8, 0             	MOVWF	r0x08
0022ac   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0022ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0022b0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0022b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0022b4   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0022b6   c008     movff	0x8, 0x9           	MOVFF	r0x08, r0x09
0022b8   f009
0022ba   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0022bc   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0022be   d0d0     bra	0x2460               	BRA	_00163_DS_
                                           ;	.line	340; TCPIP_Stack/Helpers.c	if(currentOctet > 3u)
0022c0   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
0022c2   f008
0022c4   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0022c6   0e00     movlw	0                  	MOVLW	0x00
0022c8   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0022ca   e102     bnz	0x22d0               	BNZ	_00193_DS_
0022cc   0e04     movlw	0x4                	MOVLW	0x04
0022ce   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00193_DS_:
0022d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0022d2   d0c6     bra	0x2460               	BRA	_00163_DS_
                                           ;	.line	343; TCPIP_Stack/Helpers.c	i -= '0';
0022d4   0ed0     movlw	0xd0               	MOVLW	0xd0
0022d6   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
                                           ;	.line	347; TCPIP_Stack/Helpers.c	if(charLen == 0u)
0022d8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0022da   e10c     bnz	0x22f4               	BNZ	_00159_DS_
                                           ;	.line	349; TCPIP_Stack/Helpers.c	if(i > 9u)
0022dc   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
0022de   f008
0022e0   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0022e2   0e00     movlw	0                  	MOVLW	0x00
0022e4   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0022e6   e102     bnz	0x22ec               	BNZ	_00194_DS_
0022e8   0e0a     movlw	0xa                	MOVLW	0x0a
0022ea   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00194_DS_:
0022ec   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0022ee   d09d     bra	0x242a               	BRA	_00160_DS_
                                           ;	.line	350; TCPIP_Stack/Helpers.c	return FALSE;
0022f0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0022f2   d107     bra	0x2502               	BRA	_00173_DS_
                                           _00159_DS_:
                                           ;	.line	352; TCPIP_Stack/Helpers.c	else if(charLen == 3u)
0022f4   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
0022f6   f008
0022f8   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0022fa   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0022fc   0a03     xorlw	0x3                	XORLW	0x03
0022fe   e102     bnz	0x2304               	BNZ	_00195_DS_
002300   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002302   e001     bz	0x2306                	BZ	_00196_DS_
                                           _00195_DS_:
002304   d044     bra	0x238e               	BRA	_00156_DS_
                                           _00196_DS_:
                                           ;	.line	354; TCPIP_Stack/Helpers.c	if(i != (BYTE)('.' - '0'))
002306   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002308   0afe     xorlw	0xfe               	XORLW	0xfe
00230a   e002     bz	0x2310                	BZ	_00146_DS_
                                           ;	.line	355; TCPIP_Stack/Helpers.c	return FALSE;
00230c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00230e   d0f9     bra	0x2502               	BRA	_00173_DS_
                                           _00146_DS_:
                                           ;	.line	357; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
002310   0e00     movlw	0                  	MOVLW	0x00
002312   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
002314   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
002316   e10b     bnz	0x232e               	BNZ	_00199_DS_
002318   0e02     movlw	0x2                	MOVLW	0x02
00231a   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00231c   5d2e     subwf	0x2e, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
00231e   e107     bnz	0x232e               	BNZ	_00199_DS_
002320   0e05     movlw	0x5                	MOVLW	0x05
002322   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002324   5d2d     subwf	0x2d, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
002326   e103     bnz	0x232e               	BNZ	_00199_DS_
002328   0e06     movlw	0x6                	MOVLW	0x06
00232a   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
00232c   5d2c     subwf	0x2c, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00199_DS_:
00232e   e302     bnc	0x2334               	BNC	_00148_DS_
                                           ;	.line	358; TCPIP_Stack/Helpers.c	return FALSE;
002330   6ae8     clrf	0xe8, 0             	CLRF	WREG
002332   d0e7     bra	0x2502               	BRA	_00173_DS_
                                           _00148_DS_:
                                           ;	.line	360; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
002334   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
002336   f008
002338   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
00233a   6a0a     clrf	0xa, 0              	CLRF	r0x0a
00233c   6a0b     clrf	0xb, 0              	CLRF	r0x0b
00233e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002340   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
002342   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002344   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
002346   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002348   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00234a   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00234c   512e     movf	0x2e, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
00234e   0d64     mullw	0x64               	MULLW	0x64
002350   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
002352   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
002354   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002356   512d     movf	0x2d, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
002358   0d0a     mullw	0xa                	MULLW	0x0a
00235a   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
00235c   f00d
00235e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002360   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
002362   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
002364   512c     movf	0x2c, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
002366   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
002368   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00236a   ffe5
00236c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00236e   ffe9
002370   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
002372   fff3
002374   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002376   ecbb     call	0x8176, 0           	CALL	__gptrput1
002378   f040
                                           ;	.line	361; TCPIP_Stack/Helpers.c	charLen = 0;
00237a   6a06     clrf	0x6, 0              	CLRF	r0x06
00237c   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	362; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
00237e   6b2c     clrf	0x2c, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
002380   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002382   6b2d     clrf	0x2d, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
002384   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
002386   6b2e     clrf	0x2e, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
002388   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00238a   6b2f     clrf	0x2f, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	363; TCPIP_Stack/Helpers.c	continue;
00238c   d787     bra	0x229c               	BRA	_00161_DS_
                                           _00156_DS_:
                                           ;	.line	367; TCPIP_Stack/Helpers.c	if(i == (BYTE)('.' - '0'))
00238e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002390   0afe     xorlw	0xfe               	XORLW	0xfe
002392   e001     bz	0x2396                	BZ	_00201_DS_
002394   d03f     bra	0x2414               	BRA	_00152_DS_
                                           _00201_DS_:
                                           ;	.line	369; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
002396   0e00     movlw	0                  	MOVLW	0x00
002398   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00239a   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
00239c   e10b     bnz	0x23b4               	BNZ	_00202_DS_
00239e   0e02     movlw	0x2                	MOVLW	0x02
0023a0   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0023a2   5d2e     subwf	0x2e, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0023a4   e107     bnz	0x23b4               	BNZ	_00202_DS_
0023a6   0e05     movlw	0x5                	MOVLW	0x05
0023a8   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0023aa   5d2d     subwf	0x2d, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0023ac   e103     bnz	0x23b4               	BNZ	_00202_DS_
0023ae   0e06     movlw	0x6                	MOVLW	0x06
0023b0   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
0023b2   5d2c     subwf	0x2c, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00202_DS_:
0023b4   e302     bnc	0x23ba               	BNC	_00150_DS_
                                           ;	.line	370; TCPIP_Stack/Helpers.c	return FALSE;
0023b6   6ae8     clrf	0xe8, 0             	CLRF	WREG
0023b8   d0a4     bra	0x2502               	BRA	_00173_DS_
                                           _00150_DS_:
                                           ;	.line	372; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
0023ba   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
0023bc   f008
0023be   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0023c0   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0023c2   6a0b     clrf	0xb, 0              	CLRF	r0x0b
0023c4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023c6   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
0023c8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023ca   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0023cc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0023ce   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0023d0   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0023d2   512e     movf	0x2e, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0023d4   0d64     mullw	0x64               	MULLW	0x64
0023d6   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
0023d8   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0023da   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0023dc   512d     movf	0x2d, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0023de   0d0a     mullw	0xa                	MULLW	0x0a
0023e0   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
0023e2   f00d
0023e4   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0023e6   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0023e8   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
0023ea   512c     movf	0x2c, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
0023ec   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0023ee   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0023f0   ffe5
0023f2   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0023f4   ffe9
0023f6   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0023f8   fff3
0023fa   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0023fc   ecbb     call	0x8176, 0           	CALL	__gptrput1
0023fe   f040
                                           ;	.line	373; TCPIP_Stack/Helpers.c	charLen = 0;
002400   6a06     clrf	0x6, 0              	CLRF	r0x06
002402   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	374; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
002404   6b2c     clrf	0x2c, 0x1           	CLRF	_StringToIPAddress_dwVal_1_1, B
002406   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002408   6b2d     clrf	0x2d, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
00240a   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00240c   6b2e     clrf	0x2e, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
00240e   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
002410   6b2f     clrf	0x2f, 0x1           	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	375; TCPIP_Stack/Helpers.c	continue;
002412   d744     bra	0x229c               	BRA	_00161_DS_
                                           _00152_DS_:
                                           ;	.line	377; TCPIP_Stack/Helpers.c	if(i > 9u)
002414   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
002416   f008
002418   6a0a     clrf	0xa, 0              	CLRF	r0x0a
00241a   0e00     movlw	0                  	MOVLW	0x00
00241c   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
00241e   e102     bnz	0x2424               	BNZ	_00203_DS_
002420   0e0a     movlw	0xa                	MOVLW	0x0a
002422   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00203_DS_:
002424   e302     bnc	0x242a               	BNC	_00160_DS_
                                           ;	.line	378; TCPIP_Stack/Helpers.c	return FALSE;
002426   6ae8     clrf	0xe8, 0             	CLRF	WREG
002428   d06c     bra	0x2502               	BRA	_00173_DS_
                                           _00160_DS_:
                                           ;	.line	381; TCPIP_Stack/Helpers.c	charLen++;
00242a   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00242c   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
                                           ;	.line	382; TCPIP_Stack/Helpers.c	dwVal.Val <<= 8;
00242e   512e     movf	0x2e, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
002430   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002432   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002434   512d     movf	0x2d, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
002436   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002438   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
00243a   512c     movf	0x2c, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
00243c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00243e   6a08     clrf	0x8, 0              	CLRF	r0x08
002440   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002442   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
002444   6f2c     movwf	0x2c, 0x1          	MOVWF	_StringToIPAddress_dwVal_1_1, B
002446   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002448   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
00244a   6f2d     movwf	0x2d, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 1), B
00244c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00244e   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
002450   6f2e     movwf	0x2e, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 2), B
002452   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002454   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
002456   6f2f     movwf	0x2f, 0x1          	MOVWF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	383; TCPIP_Stack/Helpers.c	dwVal.v[0] = i;
002458   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00245a   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
00245c   6f2c     movwf	0x2c, 0x1          	MOVWF	_StringToIPAddress_dwVal_1_1, B
00245e   d71e     bra	0x229c               	BRA	_00161_DS_
                                           _00163_DS_:
                                           ;	.line	389; TCPIP_Stack/Helpers.c	if(i != 0u && i != (int)'/' && i != (int)'\r' && i != (int)'\n' && i !=(int) ' ' && i != (int)'\t')
002460   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002462   e01e     bz	0x24a0                	BZ	_00165_DS_
002464   c009     movff	0x9, 0             	MOVFF	r0x09, r0x00
002466   f000
002468   6a01     clrf	0x1, 0              	CLRF	r0x01
00246a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00246c   0a2f     xorlw	0x2f               	XORLW	0x2f
00246e   e102     bnz	0x2474               	BNZ	_00205_DS_
002470   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002472   e016     bz	0x24a0                	BZ	_00165_DS_
                                           _00205_DS_:
002474   5000     movf	0, 0, 0             	MOVF	r0x00, W
002476   0a0d     xorlw	0xd                	XORLW	0x0d
002478   e102     bnz	0x247e               	BNZ	_00207_DS_
00247a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00247c   e011     bz	0x24a0                	BZ	_00165_DS_
                                           _00207_DS_:
00247e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002480   0a0a     xorlw	0xa                	XORLW	0x0a
002482   e102     bnz	0x2488               	BNZ	_00209_DS_
002484   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002486   e00c     bz	0x24a0                	BZ	_00165_DS_
                                           _00209_DS_:
002488   5000     movf	0, 0, 0             	MOVF	r0x00, W
00248a   0a20     xorlw	0x20               	XORLW	0x20
00248c   e102     bnz	0x2492               	BNZ	_00211_DS_
00248e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002490   e007     bz	0x24a0                	BZ	_00165_DS_
                                           _00211_DS_:
002492   5000     movf	0, 0, 0             	MOVF	r0x00, W
002494   0a09     xorlw	0x9                	XORLW	0x09
002496   e102     bnz	0x249c               	BNZ	_00213_DS_
002498   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00249a   e002     bz	0x24a0                	BZ	_00165_DS_
                                           _00213_DS_:
                                           ;	.line	390; TCPIP_Stack/Helpers.c	return FALSE;
00249c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00249e   d031     bra	0x2502               	BRA	_00173_DS_
                                           _00165_DS_:
                                           ;	.line	393; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
0024a0   0e00     movlw	0                  	MOVLW	0x00
0024a2   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
0024a4   5d2f     subwf	0x2f, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
0024a6   e10b     bnz	0x24be               	BNZ	_00214_DS_
0024a8   0e02     movlw	0x2                	MOVLW	0x02
0024aa   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0024ac   5d2e     subwf	0x2e, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0024ae   e107     bnz	0x24be               	BNZ	_00214_DS_
0024b0   0e05     movlw	0x5                	MOVLW	0x05
0024b2   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0024b4   5d2d     subwf	0x2d, 0, 0x1       	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0024b6   e103     bnz	0x24be               	BNZ	_00214_DS_
0024b8   0e06     movlw	0x6                	MOVLW	0x06
0024ba   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
0024bc   5d2c     subwf	0x2c, 0, 0x1       	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00214_DS_:
0024be   e302     bnc	0x24c4               	BNC	_00172_DS_
                                           ;	.line	394; TCPIP_Stack/Helpers.c	return FALSE;
0024c0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0024c2   d01f     bra	0x2502               	BRA	_00173_DS_
                                           _00172_DS_:
                                           ;	.line	396; TCPIP_Stack/Helpers.c	IPAddress->v[3] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
0024c4   0e03     movlw	0x3                	MOVLW	0x03
0024c6   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0024c8   0e00     movlw	0                  	MOVLW	0x00
0024ca   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0024cc   0e00     movlw	0                  	MOVLW	0x00
0024ce   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0024d0   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0024d2   512e     movf	0x2e, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0024d4   0d64     mullw	0x64               	MULLW	0x64
0024d6   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0024d8   f000
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0024da   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0024dc   512d     movf	0x2d, 0, 0x1        	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0024de   0d0a     mullw	0xa                	MULLW	0x0a
0024e0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0024e2   f001
0024e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024e6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0024e8   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
0024ea   512c     movf	0x2c, 0, 0x1        	MOVF	_StringToIPAddress_dwVal_1_1, W, B
0024ec   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0024ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0024f0   ffe5
0024f2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0024f4   ffe9
0024f6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0024f8   fff3
0024fa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0024fc   ecbb     call	0x8176, 0           	CALL	__gptrput1
0024fe   f040
                                           ;	.line	398; TCPIP_Stack/Helpers.c	return TRUE;
002500   0e01     movlw	0x1                	MOVLW	0x01
                                           _00173_DS_:
002502   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002504   f00d
002506   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002508   f00c
00250a   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00250c   f00b
00250e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002510   f00a
002512   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002514   f009
002516   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002518   f008
00251a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00251c   f007
00251e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002520   f006
002522   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002524   f005
002526   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002528   f004
00252a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00252c   f003
00252e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002530   f002
002532   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002534   f001
002536   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002538   f000
00253a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00253c   ffd9
00253e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__GenerateRandomDWORD	code
                                           _GenerateRandomDWORD:
                                           ;	.line	106; TCPIP_Stack/Helpers.c	DWORD GenerateRandomDWORD(void)
002b14   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b16   ffe5
002b18   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b1a   ffd9
002b1c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b1e   ffe5
002b20   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b22   ffe5
002b24   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b26   ffe5
002b28   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b2a   ffe5
002b2c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b2e   ffe5
002b30   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002b32   ffe5
002b34   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002b36   ffe5
002b38   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002b3a   ffe5
002b3c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002b3e   ffe5
002b40   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002b42   ffe5
002b44   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002b46   ffe5
002b48   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002b4a   ffe5
002b4c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002b4e   ffe5
002b50   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002b52   ffe5
002b54   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002b56   ffe5
002b58   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002b5a   ffe5
002b5c   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
002b5e   ffe5
002b60   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
002b62   ffe5
002b64   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
002b66   ffe5
002b68   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
002b6a   ffe5
002b6c   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
002b6e   ffe5
002b70   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002b72   ffe5
002b74   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
002b76   ffe5
002b78   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
002b7a   ffe5
002b7c   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
002b7e   ffe5
002b80   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
002b82   ffe5
002b84   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
002b86   ffe5
002b88   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
002b8a   ffe5
002b8c   c01c     movff	0x1c, 0xfe5        	MOVFF	r0x1c, POSTDEC1
002b8e   ffe5
002b90   c01d     movff	0x1d, 0xfe5        	MOVFF	r0x1d, POSTDEC1
002b92   ffe5
                                           ;	.line	119; TCPIP_Stack/Helpers.c	ADCON0Save = ADCON0;
002b94   cfc2     movff	0xfc2, 0           	MOVFF	_ADCON0, r0x00
002b96   f000
                                           ;	.line	120; TCPIP_Stack/Helpers.c	ADCON2Save = ADCON2;
002b98   cfc0     movff	0xfc0, 0x1         	MOVFF	_ADCON2, r0x01
002b9a   f001
                                           ;	.line	121; TCPIP_Stack/Helpers.c	T0CONSave = T0CON;
002b9c   cfd5     movff	0xfd5, 0x2         	MOVFF	_T0CON, r0x02
002b9e   f002
                                           ;	.line	122; TCPIP_Stack/Helpers.c	TMR0LSave = TMR0L;
002ba0   cfd6     movff	0xfd6, 0x3         	MOVFF	_TMR0L, r0x03
002ba2   f003
                                           ;	.line	123; TCPIP_Stack/Helpers.c	TMR0HSave = TMR0H;
002ba4   cfd7     movff	0xfd7, 0x4         	MOVFF	_TMR0H, r0x04
002ba6   f004
                                           ;	.line	126; TCPIP_Stack/Helpers.c	ADCON0 = 0x01;	// Turn on the A/D module
002ba8   0e01     movlw	0x1                	MOVLW	0x01
002baa   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           ;	.line	127; TCPIP_Stack/Helpers.c	ADCON2 = 0x3F;	// 20 Tad acquisition, Frc A/D clock used for conversion
002bac   0e3f     movlw	0x3f               	MOVLW	0x3f
002bae   6ec0     movwf	0xc0, 0            	MOVWF	_ADCON2
                                           ;	.line	128; TCPIP_Stack/Helpers.c	T0CON = 0x88;	// TMR0ON = 1, no prescalar
002bb0   0e88     movlw	0x88               	MOVLW	0x88
002bb2   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
                                           ;	.line	130; TCPIP_Stack/Helpers.c	dwTotalTime = 0;
002bb4   6a05     clrf	0x5, 0              	CLRF	r0x05
002bb6   6a06     clrf	0x6, 0              	CLRF	r0x06
002bb8   6a07     clrf	0x7, 0              	CLRF	r0x07
002bba   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           ;	.line	131; TCPIP_Stack/Helpers.c	wLastValue = 0;
002bbc   6a09     clrf	0x9, 0              	CLRF	r0x09
002bbe   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	132; TCPIP_Stack/Helpers.c	dwRandomResult = rand();
002bc0   ec55     call	0x7aaa, 0           	CALL	_rand
002bc2   f03d
002bc4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002bc6   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
002bc8   f00c
002bca   cff4     movff	0xff4, 0xd         	MOVFF	PRODH, r0x0d
002bcc   f00d
002bce   cfe9     movff	0xfe9, 0xe         	MOVFF	FSR0L, r0x0e
002bd0   f00e
                                           ;	.line	133; TCPIP_Stack/Helpers.c	while(1)
002bd2   6a0f     clrf	0xf, 0              	CLRF	r0x0f
                                           _00120_DS_:
                                           ;	.line	136; TCPIP_Stack/Helpers.c	TMR0H = 0x00;
002bd4   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	137; TCPIP_Stack/Helpers.c	TMR0L = 0x00;
002bd6   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	138; TCPIP_Stack/Helpers.c	ADCON0bits.GO = 1;
002bd8   82c2     bsf	0xc2, 0x1, 0         	BSF	_ADCON0bits, 1
002bda   0004     clrwdt                   	clrwdt 
                                           _00108_DS_:
                                           ;	.line	140; TCPIP_Stack/Helpers.c	while(ADCON0bits.GO);
002bdc   b2c2     btfsc	0xc2, 0x1, 0       	BTFSC	_ADCON0bits, 1
002bde   d7fe     bra	0x2bdc               	BRA	_00108_DS_
                                           ;	.line	141; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[0] = TMR0L;
002be0   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
002be2   010a     movlb	0xa                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
002be4   6f87     movwf	0x87, 0x1          	MOVWF	_GenerateRandomDWORD_wTime_1_1, B
                                           ;	.line	142; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[1] = TMR0H;
002be6   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
002be8   010a     movlb	0xa                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
002bea   6f88     movwf	0x88, 0x1          	MOVWF	(_GenerateRandomDWORD_wTime_1_1 + 1), B
                                           ;	.line	143; TCPIP_Stack/Helpers.c	w = rand();
002bec   ec55     call	0x7aaa, 0           	CALL	_rand
002bee   f03d
002bf0   6e10     movwf	0x10, 0            	MOVWF	r0x10
002bf2   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
002bf4   f011
002bf6   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
002bf8   f012
002bfa   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
002bfc   f013
                                           ;	.line	146; TCPIP_Stack/Helpers.c	dwTotalTime += wTime;
002bfe   ca87     movff	0xa87, 0x12        	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x12
002c00   f012
002c02   ca88     movff	0xa88, 0x13        	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x13
002c04   f013
002c06   6a14     clrf	0x14, 0             	CLRF	r0x14
002c08   6a15     clrf	0x15, 0             	CLRF	r0x15
002c0a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002c0c   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
002c0e   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002c10   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002c12   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002c14   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
002c16   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002c18   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
                                           ;	.line	147; TCPIP_Stack/Helpers.c	if(dwTotalTime >= GetInstructionClock())
002c1a   0e00     movlw	0                  	MOVLW	0x00
002c1c   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
002c1e   e108     bnz	0x2c30               	BNZ	_00130_DS_
002c20   0e9e     movlw	0x9e               	MOVLW	0x9e
002c22   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
002c24   e105     bnz	0x2c30               	BNZ	_00130_DS_
002c26   0ef2     movlw	0xf2               	MOVLW	0xf2
002c28   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
002c2a   e102     bnz	0x2c30               	BNZ	_00130_DS_
002c2c   0e1a     movlw	0x1a               	MOVLW	0x1a
002c2e   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00130_DS_:
002c30   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002c32   d048     bra	0x2cc4               	BRA	_00112_DS_
                                           ;	.line	149; TCPIP_Stack/Helpers.c	dwRandomResult ^= rand() | (((DWORD)rand())<<15ul) | (((DWORD)rand())<<30ul);
002c34   ec55     call	0x7aaa, 0           	CALL	_rand
002c36   f03d
002c38   6e12     movwf	0x12, 0            	MOVWF	r0x12
002c3a   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
002c3c   f013
002c3e   cff4     movff	0xff4, 0x14        	MOVFF	PRODH, r0x14
002c40   f014
002c42   cfe9     movff	0xfe9, 0x15        	MOVFF	FSR0L, r0x15
002c44   f015
002c46   ec55     call	0x7aaa, 0           	CALL	_rand
002c48   f03d
002c4a   6e16     movwf	0x16, 0            	MOVWF	r0x16
002c4c   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
002c4e   f017
002c50   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
002c52   f018
002c54   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
002c56   f019
002c58   3018     rrcf	0x18, 0, 0          	RRCF	r0x18, W
002c5a   3017     rrcf	0x17, 0, 0          	RRCF	r0x17, W
002c5c   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
002c5e   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
002c60   321c     rrcf	0x1c, 0x1, 0        	RRCF	r0x1c, F
002c62   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
002c64   0b80     andlw	0x80               	ANDLW	0x80
002c66   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
002c68   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
002c6a   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
002c6c   0b7f     andlw	0x7f               	ANDLW	0x7f
002c6e   121c     iorwf	0x1c, 0x1, 0       	IORWF	r0x1c, F
002c70   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
002c72   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
002c74   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
002c76   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
002c78   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
002c7a   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
002c7c   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
002c7e   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
002c80   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
002c82   ec55     call	0x7aaa, 0           	CALL	_rand
002c84   f03d
002c86   6e16     movwf	0x16, 0            	MOVWF	r0x16
002c88   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
002c8a   f017
002c8c   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
002c8e   f018
002c90   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
002c92   f019
002c94   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
002c96   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
002c98   0bc0     andlw	0xc0               	ANDLW	0xc0
002c9a   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
002c9c   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
002c9e   6a1b     clrf	0x1b, 0             	CLRF	r0x1b
002ca0   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
002ca2   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
002ca4   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
002ca6   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
002ca8   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
002caa   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
002cac   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
002cae   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
002cb0   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
002cb2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002cb4   1a0b     xorwf	0xb, 0x1, 0        	XORWF	r0x0b, F
002cb6   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002cb8   1a0c     xorwf	0xc, 0x1, 0        	XORWF	r0x0c, F
002cba   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002cbc   1a0d     xorwf	0xd, 0x1, 0        	XORWF	r0x0d, F
002cbe   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002cc0   1a0e     xorwf	0xe, 0x1, 0        	XORWF	r0x0e, F
                                           ;	.line	150; TCPIP_Stack/Helpers.c	break;
002cc2   d047     bra	0x2d52               	BRA	_00121_DS_
                                           _00112_DS_:
                                           ;	.line	154; TCPIP_Stack/Helpers.c	if(wLastValue == wTime)
002cc4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002cc6   010a     movlb	0xa                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
002cc8   1987     xorwf	0x87, 0, 0x1       	XORWF	_GenerateRandomDWORD_wTime_1_1, W, B
002cca   e105     bnz	0x2cd6               	BNZ	_00135_DS_
002ccc   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002cce   010a     movlb	0xa                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
002cd0   1988     xorwf	0x88, 0, 0x1       	XORWF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
002cd2   e101     bnz	0x2cd6               	BNZ	_00135_DS_
002cd4   d77f     bra	0x2bd4               	BRA	_00120_DS_
                                           _00135_DS_:
002cd6   010a     movlb	0xa                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
                                           ;	.line	158; TCPIP_Stack/Helpers.c	srand(w + (wLastValue - wTime));
002cd8   5187     movf	0x87, 0, 0x1        	MOVF	_GenerateRandomDWORD_wTime_1_1, W, B
002cda   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
002cdc   6e12     movwf	0x12, 0            	MOVWF	r0x12
002cde   010a     movlb	0xa                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
002ce0   5188     movf	0x88, 0, 0x1        	MOVF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
002ce2   580a     subwfb	0xa, 0, 0         	SUBWFB	r0x0a, W
002ce4   6e13     movwf	0x13, 0            	MOVWF	r0x13
002ce6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002ce8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
002cea   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002cec   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
002cee   6a12     clrf	0x12, 0             	CLRF	r0x12
002cf0   6a13     clrf	0x13, 0             	CLRF	r0x13
002cf2   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002cf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002cf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfa   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
002cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfe   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
002d00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d02   ecd4     call	0x7fa8, 0           	CALL	_srand
002d04   f03f
002d06   0e04     movlw	0x4                	MOVLW	0x04
002d08   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	159; TCPIP_Stack/Helpers.c	wLastValue = wTime;
002d0a   ca87     movff	0xa87, 0x9         	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x09
002d0c   f009
002d0e   ca88     movff	0xa88, 0xa         	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x0a
002d10   f00a
                                           ;	.line	162; TCPIP_Stack/Helpers.c	dwRandomResult <<= 1;
002d12   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002d14   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
002d16   360c     rlcf	0xc, 0x1, 0         	RLCF	r0x0c, F
002d18   360d     rlcf	0xd, 0x1, 0         	RLCF	r0x0d, F
002d1a   360e     rlcf	0xe, 0x1, 0         	RLCF	r0x0e, F
                                           ;	.line	163; TCPIP_Stack/Helpers.c	if(rand() >= 16384)
002d1c   ec55     call	0x7aaa, 0           	CALL	_rand
002d1e   f03d
002d20   6e10     movwf	0x10, 0            	MOVWF	r0x10
002d22   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
002d24   f011
002d26   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
002d28   f012
002d2a   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
002d2c   f013
002d2e   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002d30   0f80     addlw	0x80               	ADDLW	0x80
002d32   0f80     addlw	0x80               	ADDLW	0x80
002d34   e108     bnz	0x2d46               	BNZ	_00136_DS_
002d36   0e00     movlw	0                  	MOVLW	0x00
002d38   5c12     subwf	0x12, 0, 0         	SUBWF	r0x12, W
002d3a   e105     bnz	0x2d46               	BNZ	_00136_DS_
002d3c   0e40     movlw	0x40               	MOVLW	0x40
002d3e   5c11     subwf	0x11, 0, 0         	SUBWF	r0x11, W
002d40   e102     bnz	0x2d46               	BNZ	_00136_DS_
002d42   0e00     movlw	0                  	MOVLW	0x00
002d44   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
                                           _00136_DS_:
002d46   e301     bnc	0x2d4a               	BNC	_00116_DS_
                                           ;	.line	164; TCPIP_Stack/Helpers.c	dwRandomResult |= 0x1;
002d48   800b     bsf	0xb, 0, 0            	BSF	r0x0b, 0
                                           _00116_DS_:
                                           ;	.line	167; TCPIP_Stack/Helpers.c	if(++vBitCount == 0u)
002d4a   2a0f     incf	0xf, 0x1, 0         	INCF	r0x0f, F
002d4c   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
002d4e   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
002d50   d741     bra	0x2bd4               	BRA	_00120_DS_
                                           _00121_DS_:
                                           ;	.line	172; TCPIP_Stack/Helpers.c	ADCON0 = ADCON0Save;
002d52   c000     movff	0, 0xfc2           	MOVFF	r0x00, _ADCON0
002d54   ffc2
                                           ;	.line	173; TCPIP_Stack/Helpers.c	ADCON2 = ADCON2Save;
002d56   c001     movff	0x1, 0xfc0         	MOVFF	r0x01, _ADCON2
002d58   ffc0
                                           ;	.line	174; TCPIP_Stack/Helpers.c	TMR0H = TMR0HSave;
002d5a   c004     movff	0x4, 0xfd7         	MOVFF	r0x04, _TMR0H
002d5c   ffd7
                                           ;	.line	175; TCPIP_Stack/Helpers.c	TMR0L = TMR0LSave;
002d5e   c003     movff	0x3, 0xfd6         	MOVFF	r0x03, _TMR0L
002d60   ffd6
                                           ;	.line	176; TCPIP_Stack/Helpers.c	T0CON = T0CONSave;
002d62   c002     movff	0x2, 0xfd5         	MOVFF	r0x02, _T0CON
002d64   ffd5
                                           ;	.line	254; TCPIP_Stack/Helpers.c	return dwRandomResult;
002d66   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
002d68   ffe9
002d6a   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
002d6c   fff4
002d6e   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
002d70   fff3
002d72   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002d74   cfe4     movff	0xfe4, 0x1d        	MOVFF	PREINC1, r0x1d
002d76   f01d
002d78   cfe4     movff	0xfe4, 0x1c        	MOVFF	PREINC1, r0x1c
002d7a   f01c
002d7c   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
002d7e   f01b
002d80   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
002d82   f01a
002d84   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
002d86   f019
002d88   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
002d8a   f018
002d8c   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
002d8e   f017
002d90   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
002d92   f016
002d94   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
002d96   f015
002d98   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
002d9a   f014
002d9c   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
002d9e   f013
002da0   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
002da2   f012
002da4   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002da6   f011
002da8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
002daa   f010
002dac   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002dae   f00f
002db0   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002db2   f00e
002db4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002db6   f00d
002db8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002dba   f00c
002dbc   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002dbe   f00b
002dc0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002dc2   f00a
002dc4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002dc6   f009
002dc8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002dca   f008
002dcc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002dce   f007
002dd0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002dd2   f006
002dd4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002dd6   f005
002dd8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002dda   f004
002ddc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002dde   f003
002de0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002de2   f002
002de4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002de6   f001
002de8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002dea   f000
002dec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002dee   ffd9
002df0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3510 (0x0db6) bytes ( 2.68%)
                                           ;           	 1755 (0x06db) words
                                           ; udata size:	   24 (0x0018) bytes ( 0.62%)
                                           ; access size:	   30 (0x001e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ICMPProcess
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACMemCopyAsync
                                           	extern _MACIsMemCopyDone
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           udata_ICMP_0	udata
                                           _ICMPProcess_dwVal_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ICMP__ICMPProcess	code
                                           _ICMPProcess:
                                           ;	.line	132; TCPIP_Stack/ICMP.c	void ICMPProcess(NODE_INFO *remote, WORD len)
0048b0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0048b2   ffe5
0048b4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0048b6   ffd9
0048b8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0048ba   ffe5
0048bc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0048be   ffe5
0048c0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0048c2   ffe5
0048c4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0048c6   ffe5
0048c8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0048ca   ffe5
0048cc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0048ce   ffe5
0048d0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0048d2   ffe5
0048d4   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0048d6   ffe5
0048d8   0e02     movlw	0x2                	MOVLW	0x02
0048da   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0048dc   f000
0048de   0e03     movlw	0x3                	MOVLW	0x03
0048e0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0048e2   f001
0048e4   0e04     movlw	0x4                	MOVLW	0x04
0048e6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0048e8   f002
0048ea   0e05     movlw	0x5                	MOVLW	0x05
0048ec   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0048ee   f003
0048f0   0e06     movlw	0x6                	MOVLW	0x06
0048f2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0048f4   f004
                                           ;	.line	137; TCPIP_Stack/ICMP.c	MACGetArray((BYTE*)&dwVal, sizeof(dwVal));
0048f6   0e0a     movlw	0xa                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
0048f8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0048fa   0e3c     movlw	0x3c               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
0048fc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0048fe   0e80     movlw	0x80               	MOVLW	0x80
004900   6e07     movwf	0x7, 0             	MOVWF	r0x07
004902   0e00     movlw	0                  	MOVLW	0x00
004904   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004906   0e04     movlw	0x4                	MOVLW	0x04
004908   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00490a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00490c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00490e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004910   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004912   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004914   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004916   ecda     call	0x63b4, 0           	CALL	_MACGetArray
004918   f031
00491a   0e05     movlw	0x5                	MOVLW	0x05
00491c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00491e   010a     movlb	0xa                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	140; TCPIP_Stack/ICMP.c	if(dwVal.w[0] == 0x0008u)
004920   513c     movf	0x3c, 0, 0x1        	MOVF	_ICMPProcess_dwVal_1_1, W, B
004922   0a08     xorlw	0x8                	XORLW	0x08
004924   e103     bnz	0x492c               	BNZ	_00129_DS_
004926   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 1)
004928   513d     movf	0x3d, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 1), W, B
00492a   e001     bz	0x492e                	BZ	_00130_DS_
                                           _00129_DS_:
00492c   d07e     bra	0x4a2a               	BRA	_00119_DS_
                                           _00130_DS_:
                                           ;	.line	146; TCPIP_Stack/ICMP.c	if(MACCalcRxChecksum(0+sizeof(IP_HEADER), len))
00492e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004930   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004932   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004934   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004936   0e00     movlw	0                  	MOVLW	0x00
004938   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00493a   0e14     movlw	0x14               	MOVLW	0x14
00493c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00493e   ec35     call	0x586a, 0           	CALL	_MACCalcRxChecksum
004940   f02c
004942   6e05     movwf	0x5, 0             	MOVWF	r0x05
004944   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004946   f006
004948   0e04     movlw	0x4                	MOVLW	0x04
00494a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00494c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00494e   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
004950   e001     bz	0x4954                	BZ	_00106_DS_
                                           ;	.line	147; TCPIP_Stack/ICMP.c	return;
004952   d06b     bra	0x4a2a               	BRA	_00119_DS_
                                           _00106_DS_:
004954   010a     movlb	0xa                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	150; TCPIP_Stack/ICMP.c	dwVal.v[0] = 0x00;	// Type: 0 (ICMP echo/ping reply)
004956   6b3c     clrf	0x3c, 0x1           	CLRF	_ICMPProcess_dwVal_1_1, B
                                           ;	.line	151; TCPIP_Stack/ICMP.c	dwVal.v[2] += 8;	// Subtract 0x0800 from the checksum
004958   0e08     movlw	0x8                	MOVLW	0x08
00495a   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
00495c   253e     addwf	0x3e, 0, 0x1       	ADDWF	(_ICMPProcess_dwVal_1_1 + 2), W, B
00495e   6e05     movwf	0x5, 0             	MOVWF	r0x05
004960   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004962   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
004964   6f3e     movwf	0x3e, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           ;	.line	152; TCPIP_Stack/ICMP.c	if(dwVal.v[2] < 8u)
004966   ca3e     movff	0xa3e, 0x6         	MOVFF	(_ICMPProcess_dwVal_1_1 + 2), r0x06
004968   f006
00496a   6a07     clrf	0x7, 0              	CLRF	r0x07
00496c   0e00     movlw	0                  	MOVLW	0x00
00496e   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
004970   e102     bnz	0x4976               	BNZ	_00131_DS_
004972   0e08     movlw	0x8                	MOVLW	0x08
004974   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00131_DS_:
004976   e20d     bc	0x4992                	BC	_00111_DS_
                                           ;	.line	154; TCPIP_Stack/ICMP.c	dwVal.v[3]++;
004978   ca3f     movff	0xa3f, 0x5         	MOVFF	(_ICMPProcess_dwVal_1_1 + 3), r0x05
00497a   f005
00497c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00497e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004980   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
004982   6f3f     movwf	0x3f, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 3), B
004984   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
                                           ;	.line	155; TCPIP_Stack/ICMP.c	if(dwVal.v[3] == 0u) dwVal.v[2]++;
004986   513f     movf	0x3f, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 3), W, B
004988   e104     bnz	0x4992               	BNZ	_00111_DS_
00498a   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00498c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00498e   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
004990   6f3e     movwf	0x3e, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           _00111_DS_:
                                           ;	.line	160; TCPIP_Stack/ICMP.c	while(!IPIsTxReady());
004992   ecb8     call	0x7570, 0           	CALL	_MACIsTxReady
004994   f03a
004996   6e05     movwf	0x5, 0             	MOVWF	r0x05
004998   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00499a   e0fb     bz	0x4992                	BZ	_00111_DS_
                                           ;	.line	165; TCPIP_Stack/ICMP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
00499c   0e1a     movlw	0x1a               	MOVLW	0x1a
00499e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049a0   0e19     movlw	0x19               	MOVLW	0x19
0049a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049a4   ec75     call	0x72ea, 0           	CALL	_MACSetWritePtr
0049a6   f039
0049a8   0e02     movlw	0x2                	MOVLW	0x02
0049aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	168; TCPIP_Stack/ICMP.c	IPPutHeader(remote, IP_PROT_ICMP, len);
0049ac   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0049ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0049b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049b4   0e01     movlw	0x1                	MOVLW	0x01
0049b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0049ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0049be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0049c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049c4   eca4     call	0x4348, 0           	CALL	_IPPutHeader
0049c6   f021
0049c8   0e06     movlw	0x6                	MOVLW	0x06
0049ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	171; TCPIP_Stack/ICMP.c	MACPutArray((BYTE*)&dwVal, sizeof(dwVal));
0049cc   0e0a     movlw	0xa                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
0049ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0049d0   0e3c     movlw	0x3c               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
0049d2   6e00     movwf	0, 0               	MOVWF	r0x00
0049d4   0e80     movlw	0x80               	MOVLW	0x80
0049d6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0049d8   0e00     movlw	0                  	MOVLW	0x00
0049da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049dc   0e04     movlw	0x4                	MOVLW	0x04
0049de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0049e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0049e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0049ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049ec   ecf6     call	0x6dec, 0           	CALL	_MACPutArray
0049ee   f036
0049f0   0e05     movlw	0x5                	MOVLW	0x05
0049f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	172; TCPIP_Stack/ICMP.c	MACMemCopyAsync(-1, -1, len-4);
0049f4   0efc     movlw	0xfc               	MOVLW	0xfc
0049f6   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0049f8   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0049fa   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0049fc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0049fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a00   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004a02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a04   0eff     movlw	0xff               	MOVLW	0xff
004a06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a08   0eff     movlw	0xff               	MOVLW	0xff
004a0a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a0c   0eff     movlw	0xff               	MOVLW	0xff
004a0e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a10   0eff     movlw	0xff               	MOVLW	0xff
004a12   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004a14   ec36     call	0x186c, 0           	CALL	_MACMemCopyAsync
004a16   f00c
004a18   0e06     movlw	0x6                	MOVLW	0x06
004a1a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00114_DS_:
                                           ;	.line	173; TCPIP_Stack/ICMP.c	while(!MACIsMemCopyDone());
004a1c   ec82     call	0x7f04, 0           	CALL	_MACIsMemCopyDone
004a1e   f03f
004a20   6e00     movwf	0, 0               	MOVWF	r0x00
004a22   5000     movf	0, 0, 0             	MOVF	r0x00, W
004a24   e0fb     bz	0x4a1c                	BZ	_00114_DS_
                                           ;	.line	176; TCPIP_Stack/ICMP.c	MACFlush();
004a26   ec63     call	0x76c6, 0           	CALL	_MACFlush
004a28   f03b
                                           _00119_DS_:
004a2a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004a2c   f007
004a2e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004a30   f006
004a32   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004a34   f005
004a36   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004a38   f004
004a3a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004a3c   f003
004a3e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004a40   f002
004a42   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004a44   f001
004a46   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004a48   f000
004a4a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004a4c   ffd9
004a4e   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  416 (0x01a0) bytes ( 0.32%)
                                           ;           	  208 (0x00d0) words
                                           ; udata size:	    4 (0x0004) bytes ( 0.10%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _IPGetHeader
                                           	global _IPPutHeader
                                           	global _IPSetRxBuffer
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput4
                                           	extern __gptrput1
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetReadPtrInRx
                                           	extern _MACGetArray
                                           	extern _MACPutHeader
                                           	extern _MACPutArray
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           __Identifier	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_IP_0	udata
                                           _IPHeaderLen	res	1
                                           
                                           udata_IP_1	udata
                                           _IPGetHeader_header_1_1	res	20
                                           
                                           udata_IP_2	udata
                                           _IPGetHeader_CalcChecksum_1_1	res	2
                                           
                                           udata_IP_3	udata
                                           _IPPutHeader_header_1_1	res	20
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_IP__SwapIPHeader	code
                                           _SwapIPHeader:
                                           ;	.line	302; TCPIP_Stack/IP.c	static void SwapIPHeader(IP_HEADER* h)
004e8a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004e8c   ffe5
004e8e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004e90   ffd9
004e92   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004e94   ffe5
004e96   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004e98   ffe5
004e9a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004e9c   ffe5
004e9e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004ea0   ffe5
004ea2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004ea4   ffe5
004ea6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004ea8   ffe5
004eaa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004eac   ffe5
004eae   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004eb0   ffe5
004eb2   0e02     movlw	0x2                	MOVLW	0x02
004eb4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004eb6   f000
004eb8   0e03     movlw	0x3                	MOVLW	0x03
004eba   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004ebc   f001
004ebe   0e04     movlw	0x4                	MOVLW	0x04
004ec0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004ec2   f002
                                           ;	.line	304; TCPIP_Stack/IP.c	h->TotalLength      = swaps(h->TotalLength);
004ec4   5000     movf	0, 0, 0             	MOVF	r0x00, W
004ec6   0f02     addlw	0x2                	ADDLW	0x02
004ec8   6e03     movwf	0x3, 0             	MOVWF	r0x03
004eca   0e00     movlw	0                  	MOVLW	0x00
004ecc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004ece   6e04     movwf	0x4, 0             	MOVWF	r0x04
004ed0   0e00     movlw	0                  	MOVLW	0x00
004ed2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004ed4   6e05     movwf	0x5, 0             	MOVWF	r0x05
004ed6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004ed8   ffe9
004eda   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004edc   fff3
004ede   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004ee0   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
004ee2   f03f
004ee4   6e06     movwf	0x6, 0             	MOVWF	r0x06
004ee6   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004ee8   f007
004eea   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004eec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004eee   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ef2   ec03     call	0x7a06, 0           	CALL	_swaps
004ef4   f03d
004ef6   6e06     movwf	0x6, 0             	MOVWF	r0x06
004ef8   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004efa   f007
004efc   0e02     movlw	0x2                	MOVLW	0x02
004efe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004f00   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004f02   ffe5
004f04   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
004f06   fff4
004f08   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004f0a   ffe9
004f0c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004f0e   fff3
004f10   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004f12   ec9b     call	0x8136, 0           	CALL	__gptrput2
004f14   f040
                                           ;	.line	305; TCPIP_Stack/IP.c	h->Identification   = swaps(h->Identification);
004f16   5000     movf	0, 0, 0             	MOVF	r0x00, W
004f18   0f04     addlw	0x4                	ADDLW	0x04
004f1a   6e03     movwf	0x3, 0             	MOVWF	r0x03
004f1c   0e00     movlw	0                  	MOVLW	0x00
004f1e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004f20   6e04     movwf	0x4, 0             	MOVWF	r0x04
004f22   0e00     movlw	0                  	MOVLW	0x00
004f24   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004f26   6e05     movwf	0x5, 0             	MOVWF	r0x05
004f28   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004f2a   ffe9
004f2c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004f2e   fff3
004f30   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004f32   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
004f34   f03f
004f36   6e06     movwf	0x6, 0             	MOVWF	r0x06
004f38   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004f3a   f007
004f3c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004f3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f40   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004f42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f44   ec03     call	0x7a06, 0           	CALL	_swaps
004f46   f03d
004f48   6e06     movwf	0x6, 0             	MOVWF	r0x06
004f4a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004f4c   f007
004f4e   0e02     movlw	0x2                	MOVLW	0x02
004f50   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004f52   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004f54   ffe5
004f56   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
004f58   fff4
004f5a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004f5c   ffe9
004f5e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004f60   fff3
004f62   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004f64   ec9b     call	0x8136, 0           	CALL	__gptrput2
004f66   f040
                                           ;	.line	306; TCPIP_Stack/IP.c	h->HeaderChecksum   = swaps(h->HeaderChecksum);
004f68   0e0a     movlw	0xa                	MOVLW	0x0a
004f6a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004f6c   0e00     movlw	0                  	MOVLW	0x00
004f6e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004f70   0e00     movlw	0                  	MOVLW	0x00
004f72   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004f74   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004f76   ffe9
004f78   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004f7a   fff3
004f7c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004f7e   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
004f80   f03f
004f82   6e03     movwf	0x3, 0             	MOVWF	r0x03
004f84   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004f86   f004
004f88   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004f8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f8c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004f8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f90   ec03     call	0x7a06, 0           	CALL	_swaps
004f92   f03d
004f94   6e03     movwf	0x3, 0             	MOVWF	r0x03
004f96   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004f98   f004
004f9a   0e02     movlw	0x2                	MOVLW	0x02
004f9c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004f9e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004fa0   ffe5
004fa2   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
004fa4   fff4
004fa6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004fa8   ffe9
004faa   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004fac   fff3
004fae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004fb0   ec9b     call	0x8136, 0           	CALL	__gptrput2
004fb2   f040
004fb4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004fb6   f007
004fb8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004fba   f006
004fbc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004fbe   f005
004fc0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004fc2   f004
004fc4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004fc6   f003
004fc8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004fca   f002
004fcc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004fce   f001
004fd0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004fd2   f000
004fd4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004fd6   ffd9
004fd8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPSetRxBuffer	code
                                           _IPSetRxBuffer:
                                           ;	.line	295; TCPIP_Stack/IP.c	void IPSetRxBuffer(WORD Offset) 
0078ac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0078ae   ffe5
0078b0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0078b2   ffd9
0078b4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0078b6   ffe5
0078b8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0078ba   ffe5
0078bc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0078be   ffe5
0078c0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0078c2   ffe5
0078c4   0e02     movlw	0x2                	MOVLW	0x02
0078c6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0078c8   f000
0078ca   0e03     movlw	0x3                	MOVLW	0x03
0078cc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0078ce   f001
                                           ;	.line	297; TCPIP_Stack/IP.c	MACSetReadPtrInRx(Offset+IPHeaderLen);
0078d0   caab     movff	0xaab, 0x2         	MOVFF	_IPHeaderLen, r0x02
0078d2   f002
0078d4   6a03     clrf	0x3, 0              	CLRF	r0x03
0078d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0078d8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0078da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0078dc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0078de   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0078e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0078e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0078e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0078e6   ec5e     call	0x68bc, 0           	CALL	_MACSetReadPtrInRx
0078e8   f034
0078ea   0e02     movlw	0x2                	MOVLW	0x02
0078ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0078ee   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0078f0   f003
0078f2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0078f4   f002
0078f6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0078f8   f001
0078fa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0078fc   f000
0078fe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007900   ffd9
007902   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPPutHeader	code
                                           _IPPutHeader:
                                           ;	.line	247; TCPIP_Stack/IP.c	WORD IPPutHeader(NODE_INFO *remote,
004348   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00434a   ffe5
00434c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00434e   ffd9
004350   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004352   ffe5
004354   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004356   ffe5
004358   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00435a   ffe5
00435c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00435e   ffe5
004360   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004362   ffe5
004364   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004366   ffe5
004368   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00436a   ffe5
00436c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00436e   ffe5
004370   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004372   ffe5
004374   0e02     movlw	0x2                	MOVLW	0x02
004376   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004378   f000
00437a   0e03     movlw	0x3                	MOVLW	0x03
00437c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00437e   f001
004380   0e04     movlw	0x4                	MOVLW	0x04
004382   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004384   f002
004386   0e05     movlw	0x5                	MOVLW	0x05
004388   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00438a   f003
00438c   0e06     movlw	0x6                	MOVLW	0x06
00438e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
004390   f004
004392   0e07     movlw	0x7                	MOVLW	0x07
004394   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
004396   f005
                                           ;	.line	253; TCPIP_Stack/IP.c	IPHeaderLen = sizeof(IP_HEADER);
004398   0e14     movlw	0x14               	MOVLW	0x14
00439a   010a     movlb	0xa                	BANKSEL	_IPHeaderLen
00439c   6fab     movwf	0xab, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	255; TCPIP_Stack/IP.c	header.VersionIHL       = IP_VERSION | IP_IHL;
00439e   0e45     movlw	0x45               	MOVLW	0x45
0043a0   0108     movlb	0x8                	BANKSEL	_IPPutHeader_header_1_1
0043a2   6fb6     movwf	0xb6, 0x1          	MOVWF	_IPPutHeader_header_1_1, B
0043a4   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 1)
                                           ;	.line	256; TCPIP_Stack/IP.c	header.TypeOfService    = IP_SERVICE;
0043a6   6bb7     clrf	0xb7, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 1), B
                                           ;	.line	257; TCPIP_Stack/IP.c	header.TotalLength      = sizeof(header) + len;
0043a8   0e14     movlw	0x14               	MOVLW	0x14
0043aa   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0043ac   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0043ae   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0043b0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0043b2   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 2)
0043b4   6fb8     movwf	0xb8, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 2), B
0043b6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0043b8   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 3)
0043ba   6fb9     movwf	0xb9, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 3), B
0043bc   0108     movlb	0x8                	BANKSEL	__Identifier
                                           ;	.line	258; TCPIP_Stack/IP.c	header.Identification   = ++_Identifier;
0043be   2b7f     incf	0x7f, 0x1, 0x1      	INCF	__Identifier, F, B
0043c0   e302     bnc	0x43c6               	BNC	_10137_DS_
0043c2   0108     movlb	0x8                	BANKSEL	(__Identifier + 1)
0043c4   2b80     incf	0x80, 0x1, 0x1      	INCF	(__Identifier + 1), F, B
                                           _10137_DS_:
0043c6   0108     movlb	0x8                	BANKSEL	__Identifier
0043c8   517f     movf	0x7f, 0, 0x1        	MOVF	__Identifier, W, B
0043ca   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 4)
0043cc   6fba     movwf	0xba, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 4), B
0043ce   0108     movlb	0x8                	BANKSEL	(__Identifier + 1)
0043d0   5180     movf	0x80, 0, 0x1        	MOVF	(__Identifier + 1), W, B
0043d2   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 5)
0043d4   6fbb     movwf	0xbb, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 5), B
0043d6   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 6)
                                           ;	.line	259; TCPIP_Stack/IP.c	header.FragmentInfo     = 0;
0043d8   6bbc     clrf	0xbc, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 6), B
0043da   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 7)
0043dc   6bbd     clrf	0xbd, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 7), B
                                           ;	.line	260; TCPIP_Stack/IP.c	header.TimeToLive       = MY_IP_TTL;
0043de   0e64     movlw	0x64               	MOVLW	0x64
0043e0   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 8)
0043e2   6fbe     movwf	0xbe, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 8), B
                                           ;	.line	261; TCPIP_Stack/IP.c	header.Protocol         = protocol;
0043e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0043e6   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 9)
0043e8   6fbf     movwf	0xbf, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 9), B
0043ea   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
                                           ;	.line	262; TCPIP_Stack/IP.c	header.HeaderChecksum   = 0;
0043ec   6bc0     clrf	0xc0, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 10), B
0043ee   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
0043f0   6bc1     clrf	0xc1, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 11), B
0043f2   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	264; TCPIP_Stack/IP.c	header.SourceAddress.Val 	= AppConfig.MyIPAddr.Val;
0043f4   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
0043f6   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 12)
0043f8   6fc2     movwf	0xc2, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 12), B
0043fa   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
0043fc   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
0043fe   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 13)
004400   6fc3     movwf	0xc3, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 13), B
004402   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
004404   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
004406   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 14)
004408   6fc4     movwf	0xc4, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 14), B
00440a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
00440c   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
00440e   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 15)
004410   6fc5     movwf	0xc5, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 15), B
                                           ;	.line	266; TCPIP_Stack/IP.c	header.DestAddress.Val = remote->IPAddr.Val;
004412   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004414   ffe9
004416   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004418   fff3
00441a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00441c   ece0     call	0x7dc0, 0           	CALL	__gptrget4
00441e   f03e
004420   6e03     movwf	0x3, 0             	MOVWF	r0x03
004422   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004424   f006
004426   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
004428   f007
00442a   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
00442c   f008
00442e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004430   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 16)
004432   6fc6     movwf	0xc6, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 16), B
004434   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004436   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 17)
004438   6fc7     movwf	0xc7, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 17), B
00443a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00443c   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 18)
00443e   6fc8     movwf	0xc8, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 18), B
004440   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004442   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 19)
004444   6fc9     movwf	0xc9, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 19), B
                                           ;	.line	268; TCPIP_Stack/IP.c	SwapIPHeader(&header);
004446   0e08     movlw	0x8                	MOVLW	HIGH(_IPPutHeader_header_1_1)
004448   6e06     movwf	0x6, 0             	MOVWF	r0x06
00444a   0eb6     movlw	0xb6               	MOVLW	LOW(_IPPutHeader_header_1_1)
00444c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00444e   0e80     movlw	0x80               	MOVLW	0x80
004450   6e07     movwf	0x7, 0             	MOVWF	r0x07
004452   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004454   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004456   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004458   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00445a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00445c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00445e   ec45     call	0x4e8a, 0           	CALL	_SwapIPHeader
004460   f027
004462   0e03     movlw	0x3                	MOVLW	0x03
004464   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	270; TCPIP_Stack/IP.c	header.HeaderChecksum   = CalcIPChecksum((BYTE*)&header, sizeof(header));
004466   0e08     movlw	0x8                	MOVLW	HIGH(_IPPutHeader_header_1_1)
004468   6e06     movwf	0x6, 0             	MOVWF	r0x06
00446a   0eb6     movlw	0xb6               	MOVLW	LOW(_IPPutHeader_header_1_1)
00446c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00446e   0e80     movlw	0x80               	MOVLW	0x80
004470   6e07     movwf	0x7, 0             	MOVWF	r0x07
004472   0e00     movlw	0                  	MOVLW	0x00
004474   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004476   0e14     movlw	0x14               	MOVLW	0x14
004478   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00447a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00447c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00447e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004482   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004486   ec7c     call	0x1ef8, 0           	CALL	_CalcIPChecksum
004488   f00f
00448a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00448c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00448e   f006
004490   0e05     movlw	0x5                	MOVLW	0x05
004492   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004494   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004496   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
004498   6fc0     movwf	0xc0, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 10), B
00449a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00449c   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
00449e   6fc1     movwf	0xc1, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 11), B
                                           ;	.line	272; TCPIP_Stack/IP.c	MACPutHeader(&remote->MACAddr, MAC_IP, (sizeof(header)+len));
0044a0   0e04     movlw	0x4                	MOVLW	0x04
0044a2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0044a4   0e00     movlw	0                  	MOVLW	0x00
0044a6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0044a8   0e00     movlw	0                  	MOVLW	0x00
0044aa   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0044ac   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0044ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044b0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0044b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044b4   0e00     movlw	0                  	MOVLW	0x00
0044b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0044ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0044be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044c0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0044c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044c4   ec38     call	0x5270, 0           	CALL	_MACPutHeader
0044c6   f029
0044c8   0e06     movlw	0x6                	MOVLW	0x06
0044ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	273; TCPIP_Stack/IP.c	MACPutArray((BYTE*)&header, sizeof(header));
0044cc   0e08     movlw	0x8                	MOVLW	HIGH(_IPPutHeader_header_1_1)
0044ce   6e01     movwf	0x1, 0             	MOVWF	r0x01
0044d0   0eb6     movlw	0xb6               	MOVLW	LOW(_IPPutHeader_header_1_1)
0044d2   6e00     movwf	0, 0               	MOVWF	r0x00
0044d4   0e80     movlw	0x80               	MOVLW	0x80
0044d6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0044d8   0e00     movlw	0                  	MOVLW	0x00
0044da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044dc   0e14     movlw	0x14               	MOVLW	0x14
0044de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044e0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0044e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0044e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0044ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0044ec   ecf6     call	0x6dec, 0           	CALL	_MACPutArray
0044ee   f036
0044f0   0e05     movlw	0x5                	MOVLW	0x05
0044f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	275; TCPIP_Stack/IP.c	return 0x0000;
0044f4   6af3     clrf	0xf3, 0             	CLRF	PRODL
0044f6   6ae8     clrf	0xe8, 0             	CLRF	WREG
0044f8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0044fa   f008
0044fc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0044fe   f007
004500   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004502   f006
004504   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004506   f005
004508   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00450a   f004
00450c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00450e   f003
004510   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004512   f002
004514   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004516   f001
004518   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00451a   f000
00451c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00451e   ffd9
004520   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPGetHeader	code
                                           _IPGetHeader:
                                           ;	.line	136; TCPIP_Stack/IP.c	BOOL IPGetHeader(IP_ADDR *localIP,
0032d4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0032d6   ffe5
0032d8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0032da   ffd9
0032dc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0032de   ffe5
0032e0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0032e2   ffe5
0032e4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0032e6   ffe5
0032e8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0032ea   ffe5
0032ec   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0032ee   ffe5
0032f0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0032f2   ffe5
0032f4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0032f6   ffe5
0032f8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0032fa   ffe5
0032fc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0032fe   ffe5
003300   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003302   ffe5
003304   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003306   ffe5
003308   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00330a   ffe5
00330c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00330e   ffe5
003310   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003312   ffe5
003314   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003316   ffe5
003318   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00331a   ffe5
00331c   0e02     movlw	0x2                	MOVLW	0x02
00331e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003320   f000
003322   0e03     movlw	0x3                	MOVLW	0x03
003324   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003326   f001
003328   0e04     movlw	0x4                	MOVLW	0x04
00332a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00332c   f002
00332e   0e05     movlw	0x5                	MOVLW	0x05
003330   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003332   f003
003334   0e06     movlw	0x6                	MOVLW	0x06
003336   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003338   f004
00333a   0e07     movlw	0x7                	MOVLW	0x07
00333c   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00333e   f005
003340   0e08     movlw	0x8                	MOVLW	0x08
003342   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
003344   f006
003346   0e09     movlw	0x9                	MOVLW	0x09
003348   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
00334a   f007
00334c   0e0a     movlw	0xa                	MOVLW	0x0a
00334e   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
003350   f008
003352   0e0b     movlw	0xb                	MOVLW	0x0b
003354   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
003356   f009
003358   0e0c     movlw	0xc                	MOVLW	0x0c
00335a   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
00335c   f00a
00335e   0e0d     movlw	0xd                	MOVLW	0x0d
003360   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
003362   f00b
                                           ;	.line	153; TCPIP_Stack/IP.c	MACGetArray((BYTE*)&header, sizeof(header));
003364   0e08     movlw	0x8                	MOVLW	HIGH(_IPGetHeader_header_1_1)
003366   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
003368   0ea2     movlw	0xa2               	MOVLW	LOW(_IPGetHeader_header_1_1)
00336a   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00336c   0e80     movlw	0x80               	MOVLW	0x80
00336e   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
003370   0e00     movlw	0                  	MOVLW	0x00
003372   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003374   0e14     movlw	0x14               	MOVLW	0x14
003376   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003378   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00337a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00337c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00337e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003380   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003384   ecda     call	0x63b4, 0           	CALL	_MACGetArray
003386   f031
003388   0e05     movlw	0x5                	MOVLW	0x05
00338a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	156; TCPIP_Stack/IP.c	if((header.VersionIHL & 0xf0) != IP_VERSION) return FALSE;
00338c   0ef0     movlw	0xf0               	MOVLW	0xf0
00338e   0108     movlb	0x8                	BANKSEL	_IPGetHeader_header_1_1
003390   15a2     andwf	0xa2, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
003392   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003394   6a0d     clrf	0xd, 0              	CLRF	r0x0d
003396   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003398   0a40     xorlw	0x40               	XORLW	0x40
00339a   e102     bnz	0x33a0               	BNZ	_00121_DS_
00339c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00339e   e002     bz	0x33a4                	BZ	_00106_DS_
                                           _00121_DS_:
0033a0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0033a2   d0a0     bra	0x34e4               	BRA	_00113_DS_
                                           _00106_DS_:
0033a4   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 6)
                                           ;	.line	160; TCPIP_Stack/IP.c	if(header.FragmentInfo & 0xFF1F) return FALSE;
0033a6   51a8     movf	0xa8, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 6), W, B
0033a8   0b1f     andlw	0x1f               	ANDLW	0x1f
0033aa   e103     bnz	0x33b2               	BNZ	_00122_DS_
0033ac   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 7)
0033ae   51a9     movf	0xa9, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 7), W, B
0033b0   e002     bz	0x33b6                	BZ	_00108_DS_
                                           _00122_DS_:
0033b2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0033b4   d097     bra	0x34e4               	BRA	_00113_DS_
                                           _00108_DS_:
                                           ;	.line	162; TCPIP_Stack/IP.c	IPHeaderLen = (header.VersionIHL & 0x0f) << 2;
0033b6   0e0f     movlw	0xf                	MOVLW	0x0f
0033b8   0108     movlb	0x8                	BANKSEL	_IPGetHeader_header_1_1
0033ba   15a2     andwf	0xa2, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
0033bc   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0033be   440c     rlncf	0xc, 0, 0          	RLNCF	r0x0c, W
0033c0   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0033c2   0bfc     andlw	0xfc               	ANDLW	0xfc
0033c4   010a     movlb	0xa                	BANKSEL	_IPHeaderLen
0033c6   6fab     movwf	0xab, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	169; TCPIP_Stack/IP.c	CalcChecksum.Val = MACCalcRxChecksum(0, IPHeaderLen);
0033c8   caab     movff	0xaab, 0xc         	MOVFF	_IPHeaderLen, r0x0c
0033ca   f00c
0033cc   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0033ce   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0033d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033d2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0033d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033d6   0e00     movlw	0                  	MOVLW	0x00
0033d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033da   0e00     movlw	0                  	MOVLW	0x00
0033dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033de   ec35     call	0x586a, 0           	CALL	_MACCalcRxChecksum
0033e0   f02c
0033e2   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0033e4   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
0033e6   f00d
0033e8   0e04     movlw	0x4                	MOVLW	0x04
0033ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0033ec   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0033ee   010a     movlb	0xa                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
0033f0   6f8f     movwf	0x8f, 0x1          	MOVWF	_IPGetHeader_CalcChecksum_1_1, B
0033f2   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0033f4   010a     movlb	0xa                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
0033f6   6f90     movwf	0x90, 0x1          	MOVWF	(_IPGetHeader_CalcChecksum_1_1 + 1), B
                                           ;	.line	172; TCPIP_Stack/IP.c	MACSetReadPtrInRx(IPHeaderLen);
0033f8   caab     movff	0xaab, 0xc         	MOVFF	_IPHeaderLen, r0x0c
0033fa   f00c
0033fc   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0033fe   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003400   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003402   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003406   ec5e     call	0x68bc, 0           	CALL	_MACSetReadPtrInRx
003408   f034
00340a   0e02     movlw	0x2                	MOVLW	0x02
00340c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00340e   010a     movlb	0xa                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
                                           ;	.line	174; TCPIP_Stack/IP.c	if(CalcChecksum.Val)
003410   518f     movf	0x8f, 0, 0x1        	MOVF	_IPGetHeader_CalcChecksum_1_1, W, B
003412   010a     movlb	0xa                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
003414   1190     iorwf	0x90, 0, 0x1       	IORWF	(_IPGetHeader_CalcChecksum_1_1 + 1), W, B
003416   e002     bz	0x341c                	BZ	_00110_DS_
                                           ;	.line	209; TCPIP_Stack/IP.c	return FALSE;
003418   6ae8     clrf	0xe8, 0             	CLRF	WREG
00341a   d064     bra	0x34e4               	BRA	_00113_DS_
                                           _00110_DS_:
                                           ;	.line	213; TCPIP_Stack/IP.c	SwapIPHeader(&header);
00341c   0e08     movlw	0x8                	MOVLW	HIGH(_IPGetHeader_header_1_1)
00341e   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
003420   0ea2     movlw	0xa2               	MOVLW	LOW(_IPGetHeader_header_1_1)
003422   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003424   0e80     movlw	0x80               	MOVLW	0x80
003426   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
003428   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00342a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00342c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00342e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003430   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003432   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003434   ec45     call	0x4e8a, 0           	CALL	_SwapIPHeader
003436   f027
003438   0e03     movlw	0x3                	MOVLW	0x03
00343a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; TCPIP_Stack/IP.c	if ( localIP ) localIP->Val = header.DestAddress.Val;
00343c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00343e   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
003440   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
003442   e017     bz	0x3472                	BZ	_00112_DS_
003444   c8b2     movff	0x8b2, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 16), r0x0c
003446   f00c
003448   c8b3     movff	0x8b3, 0xd         	MOVFF	(_IPGetHeader_header_1_1 + 17), r0x0d
00344a   f00d
00344c   c8b4     movff	0x8b4, 0xe         	MOVFF	(_IPGetHeader_header_1_1 + 18), r0x0e
00344e   f00e
003450   c8b5     movff	0x8b5, 0xf         	MOVFF	(_IPGetHeader_header_1_1 + 19), r0x0f
003452   f00f
003454   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003456   ffe5
003458   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
00345a   fff4
00345c   c00e     movff	0xe, 0xff6         	MOVFF	r0x0e, TBLPTRL
00345e   fff6
003460   c00f     movff	0xf, 0xff7         	MOVFF	r0x0f, TBLPTRH
003462   fff7
003464   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003466   ffe9
003468   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00346a   fff3
00346c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00346e   ec29     call	0x8052, 0           	CALL	__gptrput4
003470   f040
                                           _00112_DS_:
                                           ;	.line	219; TCPIP_Stack/IP.c	remote->IPAddr.Val  = header.SourceAddress.Val;
003472   c8ae     movff	0x8ae, 0           	MOVFF	(_IPGetHeader_header_1_1 + 12), r0x00
003474   f000
003476   c8af     movff	0x8af, 0x1         	MOVFF	(_IPGetHeader_header_1_1 + 13), r0x01
003478   f001
00347a   c8b0     movff	0x8b0, 0x2         	MOVFF	(_IPGetHeader_header_1_1 + 14), r0x02
00347c   f002
00347e   c8b1     movff	0x8b1, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 15), r0x0c
003480   f00c
003482   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003484   ffe5
003486   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
003488   fff4
00348a   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
00348c   fff6
00348e   c00c     movff	0xc, 0xff7         	MOVFF	r0x0c, TBLPTRH
003490   fff7
003492   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003494   ffe9
003496   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003498   fff3
00349a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00349c   ec29     call	0x8052, 0           	CALL	__gptrput4
00349e   f040
                                           ;	.line	220; TCPIP_Stack/IP.c	*protocol           = header.Protocol;
0034a0   c8ab     movff	0x8ab, 0           	MOVFF	(_IPGetHeader_header_1_1 + 9), r0x00
0034a2   f000
0034a4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0034a6   ffe5
0034a8   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0034aa   ffe9
0034ac   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0034ae   fff3
0034b0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0034b2   ecbb     call	0x8176, 0           	CALL	__gptrput1
0034b4   f040
                                           ;	.line	221; TCPIP_Stack/IP.c	*len 		= header.TotalLength - IPHeaderLen;
0034b6   caab     movff	0xaab, 0           	MOVFF	_IPHeaderLen, r0x00
0034b8   f000
0034ba   6a01     clrf	0x1, 0              	CLRF	r0x01
0034bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0034be   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 2)
0034c0   5da4     subwf	0xa4, 0, 0x1       	SUBWF	(_IPGetHeader_header_1_1 + 2), W, B
0034c2   6e00     movwf	0, 0               	MOVWF	r0x00
0034c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0034c6   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 3)
0034c8   59a5     subwfb	0xa5, 0, 0x1      	SUBWFB	(_IPGetHeader_header_1_1 + 3), W, B
0034ca   6e01     movwf	0x1, 0             	MOVWF	r0x01
0034cc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0034ce   ffe5
0034d0   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
0034d2   fff4
0034d4   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0034d6   ffe9
0034d8   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0034da   fff3
0034dc   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0034de   ec9b     call	0x8136, 0           	CALL	__gptrput2
0034e0   f040
                                           ;	.line	223; TCPIP_Stack/IP.c	return TRUE;
0034e2   0e01     movlw	0x1                	MOVLW	0x01
                                           _00113_DS_:
0034e4   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0034e6   f00f
0034e8   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0034ea   f00e
0034ec   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0034ee   f00d
0034f0   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0034f2   f00c
0034f4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0034f6   f00b
0034f8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0034fa   f00a
0034fc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0034fe   f009
003500   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003502   f008
003504   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003506   f007
003508   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00350a   f006
00350c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00350e   f005
003510   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003512   f004
003514   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003516   f003
003518   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00351a   f002
00351c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00351e   f001
003520   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003522   f000
003524   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003526   ffd9
003528   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   43 (0x002b) bytes ( 1.12%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDListInit
                                           	global _LCDListIsEmpty
                                           	global _LCDListIsFull
                                           	global _LCDListPush
                                           	global _LCDListPop
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern __moduint
                                           	extern __mulint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _LCDListReady	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           
                                           lcd_scn	udata
                                           _listLCD	res	378
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListPop	code
                                           _LCDListPop:
                                           ;	.line	84; TCPIP_Stack/LCDCircularList.c	char LCDListPop(char *order, char text[])
004164   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004166   ffe5
004168   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00416a   ffd9
00416c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00416e   ffe5
004170   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004172   ffe5
004174   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004176   ffe5
004178   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00417a   ffe5
00417c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00417e   ffe5
004180   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004182   ffe5
004184   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004186   ffe5
004188   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00418a   ffe5
00418c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00418e   ffe5
004190   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004192   ffe5
004194   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004196   ffe5
004198   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00419a   ffe5
00419c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00419e   ffe5
0041a0   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0041a2   ffe5
0041a4   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0041a6   ffe5
0041a8   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0041aa   ffe5
0041ac   0e02     movlw	0x2                	MOVLW	0x02
0041ae   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0041b0   f000
0041b2   0e03     movlw	0x3                	MOVLW	0x03
0041b4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0041b6   f001
0041b8   0e04     movlw	0x4                	MOVLW	0x04
0041ba   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0041bc   f002
0041be   0e05     movlw	0x5                	MOVLW	0x05
0041c0   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0041c2   f003
0041c4   0e06     movlw	0x6                	MOVLW	0x06
0041c6   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0041c8   f004
0041ca   0e07     movlw	0x7                	MOVLW	0x07
0041cc   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0041ce   f005
0041d0   0108     movlb	0x8                	BANKSEL	_LCDListReady
                                           ;	.line	88; TCPIP_Stack/LCDCircularList.c	if (!LCDListReady)
0041d2   5181     movf	0x81, 0, 0x1        	MOVF	_LCDListReady, W, B
0041d4   e102     bnz	0x41da               	BNZ	_00162_DS_
                                           ;	.line	89; TCPIP_Stack/LCDCircularList.c	return -1;
0041d6   68e8     setf	0xe8, 0             	SETF	WREG
0041d8   d094     bra	0x4302               	BRA	_00169_DS_
                                           _00162_DS_:
                                           ;	.line	90; TCPIP_Stack/LCDCircularList.c	if (LCDListIsEmpty())
0041da   ec1d     call	0x7e3a, 0           	CALL	_LCDListIsEmpty
0041dc   f03f
0041de   6e06     movwf	0x6, 0             	MOVWF	r0x06
0041e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0041e2   e002     bz	0x41e8                	BZ	_00164_DS_
                                           ;	.line	91; TCPIP_Stack/LCDCircularList.c	return -2;
0041e4   0efe     movlw	0xfe               	MOVLW	0xfe
0041e6   d08d     bra	0x4302               	BRA	_00169_DS_
                                           _00164_DS_:
                                           ;	.line	93; TCPIP_Stack/LCDCircularList.c	*order = listLCD.op[listLCD.tail].order;
0041e8   c478     movff	0x478, 0x6         	MOVFF	(_listLCD + 376), r0x06
0041ea   f006
0041ec   c479     movff	0x479, 0x7         	MOVFF	(_listLCD + 377), r0x07
0041ee   f007
0041f0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0041f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041f4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0041f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041f8   0e00     movlw	0                  	MOVLW	0x00
0041fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0041fc   0e22     movlw	0x22               	MOVLW	0x22
0041fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004200   ecc0     call	0x6b80, 0           	CALL	__mulint
004202   f035
004204   6e08     movwf	0x8, 0             	MOVWF	r0x08
004206   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
004208   f009
00420a   0e04     movlw	0x4                	MOVLW	0x04
00420c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00420e   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
004210   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
004212   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
004214   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
004216   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
004218   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00421a   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
00421c   ffe9
00421e   c00b     movff	0xb, 0xfea         	MOVFF	r0x0b, FSR0H
004220   ffea
004222   cfef     movff	0xfef, 0xa         	MOVFF	INDF0, r0x0a
004224   f00a
004226   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004228   ffe5
00422a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00422c   ffe9
00422e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004230   fff3
004232   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004234   ecbb     call	0x8176, 0           	CALL	__gptrput1
004236   f040
                                           ;	.line	95; TCPIP_Stack/LCDCircularList.c	for (i=0; i<ROWCHARS*2+1; i++)
004238   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
00423a   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
00423c   6e00     movwf	0, 0               	MOVWF	r0x00
00423e   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
004240   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
004242   6e01     movwf	0x1, 0             	MOVWF	r0x01
004244   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
004246   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004248   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00424a   6a02     clrf	0x2, 0              	CLRF	r0x02
00424c   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           _00165_DS_:
00424e   0e00     movlw	0                  	MOVLW	0x00
004250   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
004252   e102     bnz	0x4258               	BNZ	_00176_DS_
004254   0e21     movlw	0x21               	MOVLW	0x21
004256   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00176_DS_:
004258   e222     bc	0x429e                	BC	_00168_DS_
                                           ;	.line	96; TCPIP_Stack/LCDCircularList.c	text[i] = listLCD.op[listLCD.tail].text[i];
00425a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00425c   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
00425e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
004260   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
004262   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
004264   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
004266   6ae8     clrf	0xe8, 0             	CLRF	WREG
004268   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00426a   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00426c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00426e   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
004270   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
004272   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
004274   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004276   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
004278   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
00427a   ffe9
00427c   c00f     movff	0xf, 0xfea         	MOVFF	r0x0f, FSR0H
00427e   ffea
004280   cfef     movff	0xfef, 0xe         	MOVFF	INDF0, r0x0e
004282   f00e
004284   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
004286   ffe5
004288   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
00428a   ffe9
00428c   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
00428e   fff3
004290   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
004292   ecbb     call	0x8176, 0           	CALL	__gptrput1
004294   f040
                                           ;	.line	95; TCPIP_Stack/LCDCircularList.c	for (i=0; i<ROWCHARS*2+1; i++)
004296   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
004298   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00429a   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
00429c   d7d8     bra	0x424e               	BRA	_00165_DS_
                                           _00168_DS_:
                                           ;	.line	98; TCPIP_Stack/LCDCircularList.c	listLCD.op[listLCD.tail].order = 0;
00429e   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
0042a0   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
0042a2   6e00     movwf	0, 0               	MOVWF	r0x00
0042a4   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
0042a6   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0042a8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0042aa   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0042ac   ffe9
0042ae   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0042b0   ffea
0042b2   0e00     movlw	0                  	MOVLW	0x00
0042b4   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	99; TCPIP_Stack/LCDCircularList.c	listLCD.op[listLCD.tail].text[0] = '\0';
0042b6   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
0042b8   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
0042ba   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
0042bc   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
0042be   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
0042c0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0042c2   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
0042c4   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0042c6   ffe9
0042c8   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
0042ca   ffea
0042cc   0e00     movlw	0                  	MOVLW	0x00
0042ce   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	101; TCPIP_Stack/LCDCircularList.c	listLCD.tail = (listLCD.tail + 1) % OP_LIST_SIZE;
0042d0   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0042d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0042d4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0042d6   0e00     movlw	0                  	MOVLW	0x00
0042d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042da   0e0b     movlw	0xb                	MOVLW	0x0b
0042dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042de   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0042e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042e2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0042e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042e6   ecbb     call	0x6976, 0           	CALL	__moduint
0042e8   f034
0042ea   6e00     movwf	0, 0               	MOVWF	r0x00
0042ec   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0042ee   f001
0042f0   0e04     movlw	0x4                	MOVLW	0x04
0042f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0042f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0042f6   0104     movlb	0x4                	BANKSEL	(_listLCD + 376)
0042f8   6f78     movwf	0x78, 0x1          	MOVWF	(_listLCD + 376), B
0042fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0042fc   0104     movlb	0x4                	BANKSEL	(_listLCD + 377)
0042fe   6f79     movwf	0x79, 0x1          	MOVWF	(_listLCD + 377), B
                                           ;	.line	102; TCPIP_Stack/LCDCircularList.c	return 0;
004300   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00169_DS_:
004302   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
004304   f00f
004306   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
004308   f00e
00430a   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00430c   f00d
00430e   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
004310   f00c
004312   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
004314   f00b
004316   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
004318   f00a
00431a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00431c   f009
00431e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004320   f008
004322   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004324   f007
004326   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004328   f006
00432a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00432c   f005
00432e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004330   f004
004332   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004334   f003
004336   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004338   f002
00433a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00433c   f001
00433e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004340   f000
004342   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004344   ffd9
004346   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListPush	code
                                           _LCDListPush:
                                           ;	.line	66; TCPIP_Stack/LCDCircularList.c	char LCDListPush(char order, char text[])
004a50   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004a52   ffe5
004a54   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004a56   ffd9
004a58   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004a5a   ffe5
004a5c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004a5e   ffe5
004a60   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004a62   ffe5
004a64   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004a66   ffe5
004a68   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004a6a   ffe5
004a6c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004a6e   ffe5
004a70   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004a72   ffe5
004a74   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004a76   ffe5
004a78   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004a7a   ffe5
004a7c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004a7e   ffe5
004a80   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004a82   ffe5
004a84   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
004a86   ffe5
004a88   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
004a8a   ffe5
004a8c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
004a8e   ffe5
004a90   0e02     movlw	0x2                	MOVLW	0x02
004a92   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004a94   f000
004a96   0e03     movlw	0x3                	MOVLW	0x03
004a98   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004a9a   f001
004a9c   0e04     movlw	0x4                	MOVLW	0x04
004a9e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004aa0   f002
004aa2   0e05     movlw	0x5                	MOVLW	0x05
004aa4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004aa6   f003
004aa8   0108     movlb	0x8                	BANKSEL	_LCDListReady
                                           ;	.line	70; TCPIP_Stack/LCDCircularList.c	if (!LCDListReady)
004aaa   5181     movf	0x81, 0, 0x1        	MOVF	_LCDListReady, W, B
004aac   e102     bnz	0x4ab2               	BNZ	_00142_DS_
                                           ;	.line	71; TCPIP_Stack/LCDCircularList.c	return -1;
004aae   68e8     setf	0xe8, 0             	SETF	WREG
004ab0   d072     bra	0x4b96               	BRA	_00149_DS_
                                           _00142_DS_:
                                           ;	.line	72; TCPIP_Stack/LCDCircularList.c	if (LCDListIsFull())
004ab2   ecb7     call	0x736e, 0           	CALL	_LCDListIsFull
004ab4   f039
004ab6   6e04     movwf	0x4, 0             	MOVWF	r0x04
004ab8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004aba   e002     bz	0x4ac0                	BZ	_00144_DS_
                                           ;	.line	73; TCPIP_Stack/LCDCircularList.c	return -2;
004abc   0efe     movlw	0xfe               	MOVLW	0xfe
004abe   d06b     bra	0x4b96               	BRA	_00149_DS_
                                           _00144_DS_:
                                           ;	.line	75; TCPIP_Stack/LCDCircularList.c	listLCD.op[listLCD.head].order = order;
004ac0   c476     movff	0x476, 0x4         	MOVFF	(_listLCD + 374), r0x04
004ac2   f004
004ac4   c477     movff	0x477, 0x5         	MOVFF	(_listLCD + 375), r0x05
004ac6   f005
004ac8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004aca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004acc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004ace   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ad0   0e00     movlw	0                  	MOVLW	0x00
004ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ad4   0e22     movlw	0x22               	MOVLW	0x22
004ad6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004ad8   ecc0     call	0x6b80, 0           	CALL	__mulint
004ada   f035
004adc   6e06     movwf	0x6, 0             	MOVWF	r0x06
004ade   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004ae0   f007
004ae2   0e04     movlw	0x4                	MOVLW	0x04
004ae4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004ae6   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
004ae8   2406     addwf	0x6, 0, 0          	ADDWF	r0x06, W
004aea   6e08     movwf	0x8, 0             	MOVWF	r0x08
004aec   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
004aee   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
004af0   6e09     movwf	0x9, 0             	MOVWF	r0x09
004af2   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
004af4   ffe9
004af6   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
004af8   ffea
004afa   c000     movff	0, 0xfef           	MOVFF	r0x00, INDF0
004afc   ffef
                                           ;	.line	77; TCPIP_Stack/LCDCircularList.c	for (i=0; i<ROWCHARS*2+1; i++)
004afe   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
004b00   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
004b02   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
004b04   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
004b06   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004b08   0f01     addlw	0x1                	ADDLW	0x01
004b0a   6e06     movwf	0x6, 0             	MOVWF	r0x06
004b0c   0e00     movlw	0                  	MOVLW	0x00
004b0e   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
004b10   6e00     movwf	0, 0               	MOVWF	r0x00
004b12   6a07     clrf	0x7, 0              	CLRF	r0x07
004b14   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           _00145_DS_:
004b16   0e00     movlw	0                  	MOVLW	0x00
004b18   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
004b1a   e102     bnz	0x4b20               	BNZ	_00156_DS_
004b1c   0e21     movlw	0x21               	MOVLW	0x21
004b1e   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
                                           _00156_DS_:
004b20   e221     bc	0x4b64                	BC	_00148_DS_
                                           ;	.line	78; TCPIP_Stack/LCDCircularList.c	listLCD.op[listLCD.head].text[i] = text[i];
004b22   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004b24   2406     addwf	0x6, 0, 0          	ADDWF	r0x06, W
004b26   6e09     movwf	0x9, 0             	MOVWF	r0x09
004b28   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004b2a   2000     addwfc	0, 0, 0           	ADDWFC	r0x00, W
004b2c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
004b2e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004b30   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
004b32   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
004b34   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004b36   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004b38   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
004b3a   6ae8     clrf	0xe8, 0             	CLRF	WREG
004b3c   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
004b3e   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
004b40   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
004b42   ffe9
004b44   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
004b46   fff3
004b48   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
004b4a   ecf8     call	0x7ff0, 0           	CALL	__gptrget1
004b4c   f03f
004b4e   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
004b50   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
004b52   ffe9
004b54   c00a     movff	0xa, 0xfea         	MOVFF	r0x0a, FSR0H
004b56   ffea
004b58   c00b     movff	0xb, 0xfef         	MOVFF	r0x0b, INDF0
004b5a   ffef
                                           ;	.line	77; TCPIP_Stack/LCDCircularList.c	for (i=0; i<ROWCHARS*2+1; i++)
004b5c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
004b5e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004b60   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
004b62   d7d9     bra	0x4b16               	BRA	_00145_DS_
                                           _00148_DS_:
                                           ;	.line	80; TCPIP_Stack/LCDCircularList.c	listLCD.head = (listLCD.head + 1) % OP_LIST_SIZE;
004b64   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
004b66   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004b68   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
004b6a   0e00     movlw	0                  	MOVLW	0x00
004b6c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b6e   0e0b     movlw	0xb                	MOVLW	0x0b
004b70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b72   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004b74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b76   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004b78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b7a   ecbb     call	0x6976, 0           	CALL	__moduint
004b7c   f034
004b7e   6e00     movwf	0, 0               	MOVWF	r0x00
004b80   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
004b82   f001
004b84   0e04     movlw	0x4                	MOVLW	0x04
004b86   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004b88   5000     movf	0, 0, 0             	MOVF	r0x00, W
004b8a   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
004b8c   6f76     movwf	0x76, 0x1          	MOVWF	(_listLCD + 374), B
004b8e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004b90   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
004b92   6f77     movwf	0x77, 0x1          	MOVWF	(_listLCD + 375), B
                                           ;	.line	81; TCPIP_Stack/LCDCircularList.c	return 0;
004b94   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00149_DS_:
004b96   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
004b98   f00d
004b9a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
004b9c   f00c
004b9e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
004ba0   f00b
004ba2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
004ba4   f00a
004ba6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004ba8   f009
004baa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004bac   f008
004bae   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004bb0   f007
004bb2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004bb4   f006
004bb6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004bb8   f005
004bba   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004bbc   f004
004bbe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004bc0   f003
004bc2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004bc4   f002
004bc6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004bc8   f001
004bca   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004bcc   f000
004bce   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004bd0   ffd9
004bd2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListIsFull	code
                                           _LCDListIsFull:
                                           ;	.line	58; TCPIP_Stack/LCDCircularList.c	char LCDListIsFull(void)
00736e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007370   ffe5
007372   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007374   ffd9
007376   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007378   ffe5
00737a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00737c   ffe5
00737e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007380   ffe5
007382   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007384   ffe5
007386   0108     movlb	0x8                	BANKSEL	_LCDListReady
                                           ;	.line	61; TCPIP_Stack/LCDCircularList.c	if (!LCDListReady)
007388   5181     movf	0x81, 0, 0x1        	MOVF	_LCDListReady, W, B
00738a   e102     bnz	0x7390               	BNZ	_00131_DS_
                                           ;	.line	62; TCPIP_Stack/LCDCircularList.c	return -1;
00738c   68e8     setf	0xe8, 0             	SETF	WREG
00738e   d026     bra	0x73dc               	BRA	_00132_DS_
                                           _00131_DS_:
                                           ;	.line	63; TCPIP_Stack/LCDCircularList.c	return (listLCD.tail == ((listLCD.head + 1) % OP_LIST_SIZE));
007390   c478     movff	0x478, 0           	MOVFF	(_listLCD + 376), r0x00
007392   f000
007394   c479     movff	0x479, 0x1         	MOVFF	(_listLCD + 377), r0x01
007396   f001
007398   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
00739a   5176     movf	0x76, 0, 0x1        	MOVF	(_listLCD + 374), W, B
00739c   0f01     addlw	0x1                	ADDLW	0x01
00739e   6e02     movwf	0x2, 0             	MOVWF	r0x02
0073a0   0e00     movlw	0                  	MOVLW	0x00
0073a2   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
0073a4   2177     addwfc	0x77, 0, 0x1      	ADDWFC	(_listLCD + 375), W, B
0073a6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0073a8   0e00     movlw	0                  	MOVLW	0x00
0073aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0073ac   0e0b     movlw	0xb                	MOVLW	0x0b
0073ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0073b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0073b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0073b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0073b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0073b8   ecbb     call	0x6976, 0           	CALL	__moduint
0073ba   f034
0073bc   6e02     movwf	0x2, 0             	MOVWF	r0x02
0073be   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0073c0   f003
0073c2   0e04     movlw	0x4                	MOVLW	0x04
0073c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0073c6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0073c8   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
0073ca   e106     bnz	0x73d8               	BNZ	_00135_DS_
0073cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0073ce   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
0073d0   e103     bnz	0x73d8               	BNZ	_00135_DS_
0073d2   6a00     clrf	0, 0                	CLRF	r0x00
0073d4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0073d6   d001     bra	0x73da               	BRA	_00136_DS_
                                           _00135_DS_:
0073d8   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00136_DS_:
0073da   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00132_DS_:
0073dc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0073de   f003
0073e0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0073e2   f002
0073e4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0073e6   f001
0073e8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0073ea   f000
0073ec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0073ee   ffd9
0073f0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListIsEmpty	code
                                           _LCDListIsEmpty:
                                           ;	.line	50; TCPIP_Stack/LCDCircularList.c	char LCDListIsEmpty(void)
007e3a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007e3c   ffe5
007e3e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007e40   ffd9
007e42   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007e44   ffe5
007e46   0108     movlb	0x8                	BANKSEL	_LCDListReady
                                           ;	.line	53; TCPIP_Stack/LCDCircularList.c	if (!LCDListReady)
007e48   5181     movf	0x81, 0, 0x1        	MOVF	_LCDListReady, W, B
007e4a   e102     bnz	0x7e50               	BNZ	_00120_DS_
                                           ;	.line	54; TCPIP_Stack/LCDCircularList.c	return -1;
007e4c   68e8     setf	0xe8, 0             	SETF	WREG
007e4e   d00d     bra	0x7e6a               	BRA	_00121_DS_
                                           _00120_DS_:
                                           ;	.line	55; TCPIP_Stack/LCDCircularList.c	return (listLCD.head == listLCD.tail);
007e50   6a00     clrf	0, 0                	CLRF	r0x00
007e52   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
007e54   5176     movf	0x76, 0, 0x1        	MOVF	(_listLCD + 374), W, B
007e56   0104     movlb	0x4                	BANKSEL	(_listLCD + 376)
007e58   1978     xorwf	0x78, 0, 0x1       	XORWF	(_listLCD + 376), W, B
007e5a   e106     bnz	0x7e68               	BNZ	_00125_DS_
007e5c   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
007e5e   5177     movf	0x77, 0, 0x1        	MOVF	(_listLCD + 375), W, B
007e60   0104     movlb	0x4                	BANKSEL	(_listLCD + 377)
007e62   1979     xorwf	0x79, 0, 0x1       	XORWF	(_listLCD + 377), W, B
007e64   e101     bnz	0x7e68               	BNZ	_00125_DS_
007e66   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00125_DS_:
007e68   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00121_DS_:
007e6a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007e6c   f000
007e6e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007e70   ffd9
007e72   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListInit	code
                                           _LCDListInit:
                                           ;	.line	34; TCPIP_Stack/LCDCircularList.c	char LCDListInit()
006a2e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006a30   ffe5
006a32   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006a34   ffd9
006a36   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006a38   ffe5
006a3a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006a3c   ffe5
006a3e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006a40   ffe5
006a42   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006a44   ffe5
006a46   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006a48   ffe5
006a4a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006a4c   ffe5
006a4e   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
                                           ;	.line	37; TCPIP_Stack/LCDCircularList.c	listLCD.head = 0;
006a50   6b76     clrf	0x76, 0x1           	CLRF	(_listLCD + 374), B
006a52   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
006a54   6b77     clrf	0x77, 0x1           	CLRF	(_listLCD + 375), B
006a56   0104     movlb	0x4                	BANKSEL	(_listLCD + 376)
                                           ;	.line	38; TCPIP_Stack/LCDCircularList.c	listLCD.tail = 0;
006a58   6b78     clrf	0x78, 0x1           	CLRF	(_listLCD + 376), B
006a5a   0104     movlb	0x4                	BANKSEL	(_listLCD + 377)
006a5c   6b79     clrf	0x79, 0x1           	CLRF	(_listLCD + 377), B
                                           ;	.line	40; TCPIP_Stack/LCDCircularList.c	for (i=0; i<OP_LIST_SIZE; i++)
006a5e   6a00     clrf	0, 0                	CLRF	r0x00
006a60   6a01     clrf	0x1, 0              	CLRF	r0x01
006a62   6a02     clrf	0x2, 0              	CLRF	r0x02
006a64   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00105_DS_:
006a66   0e00     movlw	0                  	MOVLW	0x00
006a68   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
006a6a   e102     bnz	0x6a70               	BNZ	_00114_DS_
006a6c   0e0b     movlw	0xb                	MOVLW	0x0b
006a6e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00114_DS_:
006a70   e223     bc	0x6ab8                	BC	_00108_DS_
                                           ;	.line	42; TCPIP_Stack/LCDCircularList.c	listLCD.op[i].order = 0;
006a72   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
006a74   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
006a76   6e04     movwf	0x4, 0             	MOVWF	r0x04
006a78   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
006a7a   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
006a7c   6e05     movwf	0x5, 0             	MOVWF	r0x05
006a7e   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
006a80   ffe9
006a82   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
006a84   ffea
006a86   0e00     movlw	0                  	MOVLW	0x00
006a88   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	43; TCPIP_Stack/LCDCircularList.c	listLCD.op[i].text[0] = '\0';
006a8a   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
006a8c   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
006a8e   6e04     movwf	0x4, 0             	MOVWF	r0x04
006a90   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
006a92   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
006a94   6e05     movwf	0x5, 0             	MOVWF	r0x05
006a96   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
006a98   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006a9a   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
006a9c   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
006a9e   ffe9
006aa0   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
006aa2   ffea
006aa4   0e00     movlw	0                  	MOVLW	0x00
006aa6   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	40; TCPIP_Stack/LCDCircularList.c	for (i=0; i<OP_LIST_SIZE; i++)
006aa8   0e22     movlw	0x22               	MOVLW	0x22
006aaa   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
006aac   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006aae   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
006ab0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
006ab2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006ab4   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
006ab6   d7d7     bra	0x6a66               	BRA	_00105_DS_
                                           _00108_DS_:
                                           ;	.line	46; TCPIP_Stack/LCDCircularList.c	LCDListReady = 1;
006ab8   0e01     movlw	0x1                	MOVLW	0x01
006aba   0108     movlb	0x8                	BANKSEL	_LCDListReady
006abc   6f81     movwf	0x81, 0x1          	MOVWF	_LCDListReady, B
                                           ;	.line	47; TCPIP_Stack/LCDCircularList.c	return 0;
006abe   6ae8     clrf	0xe8, 0             	CLRF	WREG
006ac0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006ac2   f005
006ac4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006ac6   f004
006ac8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006aca   f003
006acc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006ace   f002
006ad0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006ad2   f001
006ad4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006ad6   f000
006ad8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006ada   ffd9
006adc   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1238 (0x04d6) bytes ( 0.94%)
                                           ;           	  619 (0x026b) words
                                           ; udata size:	  378 (0x017a) bytes ( 9.84%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDTaskInit
                                           	global _LCDTask
                                           	global _LCDInit
                                           	global _LCDErase
                                           	global _LCDUpdate
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _ultoa
                                           	extern _memset
                                           	extern _LCDListInit
                                           	extern _LCDListIsEmpty
                                           	extern _LCDListPush
                                           	extern _LCDListPop
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_LCDNonBlocking_0	udata
                                           _LCDi	res	1
                                           
                                           udata_LCDNonBlocking_1	udata
                                           _LCDj	res	1
                                           
                                           udata_LCDNonBlocking_2	udata
                                           _st_init	res	1
                                           
                                           udata_LCDNonBlocking_3	udata
                                           _st_update	res	1
                                           
                                           udata_LCDNonBlocking_4	udata
                                           _st_erase	res	1
                                           
                                           udata_LCDNonBlocking_5	udata
                                           _LCDWaiting	res	1
                                           
                                           udata_LCDNonBlocking_6	udata
                                           _LCDOpInProgress	res	1
                                           
                                           udata_LCDNonBlocking_7	udata
                                           _LCDCurrentOrder	res	1
                                           
                                           udata_LCDNonBlocking_8	udata
                                           _LCDCurrentText	res	33
                                           
                                           udata_LCDNonBlocking_9	udata
                                           _LCDText	res	33
                                           
                                           udata_LCDNonBlocking_10	udata
                                           _tmpBuf	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	609; TCPIP_Stack/LCDNonBlocking.c	void LCDUpdate(void)
007be2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007be4   ffe5
007be6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007be8   ffd9
007bea   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007bec   ffe5
007bee   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007bf0   ffe5
007bf2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007bf4   ffe5
                                           ;	.line	611; TCPIP_Stack/LCDNonBlocking.c	LCDListPush(3, LCDText);
007bf6   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
007bf8   6e01     movwf	0x1, 0             	MOVWF	r0x01
007bfa   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
007bfc   6e00     movwf	0, 0               	MOVWF	r0x00
007bfe   0e80     movlw	0x80               	MOVLW	0x80
007c00   6e02     movwf	0x2, 0             	MOVWF	r0x02
007c02   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007c04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c06   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007c08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
007c0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c0e   0e03     movlw	0x3                	MOVLW	0x03
007c10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007c12   ec28     call	0x4a50, 0           	CALL	_LCDListPush
007c14   f025
007c16   0e04     movlw	0x4                	MOVLW	0x04
007c18   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007c1a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007c1c   f002
007c1e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007c20   f001
007c22   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007c24   f000
007c26   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007c28   ffd9
007c2a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	584; TCPIP_Stack/LCDNonBlocking.c	void LCDErase(void)
007cfa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007cfc   ffe5
007cfe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007d00   ffd9
                                           ;	.line	586; TCPIP_Stack/LCDNonBlocking.c	LCDListPush(2, "");
007d02   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
007d04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d06   0e77     movlw	0x77               	MOVLW	HIGH(__str_0)
007d08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d0a   0e8e     movlw	0x8e               	MOVLW	LOW(__str_0)
007d0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d0e   0e02     movlw	0x2                	MOVLW	0x02
007d10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d12   ec28     call	0x4a50, 0           	CALL	_LCDListPush
007d14   f025
007d16   0e04     movlw	0x4                	MOVLW	0x04
007d18   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	588; TCPIP_Stack/LCDNonBlocking.c	memset(LCDText, ' ', 32);
007d1a   0e00     movlw	0                  	MOVLW	0x00
007d1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d1e   0e20     movlw	0x20               	MOVLW	0x20
007d20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d22   0e20     movlw	0x20               	MOVLW	0x20
007d24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d26   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
007d28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d2a   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
007d2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007d2e   ec95     call	0x672a, 0           	CALL	_memset
007d30   f033
007d32   0e05     movlw	0x5                	MOVLW	0x05
007d34   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007d36   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007d38   ffd9
007d3a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	563; TCPIP_Stack/LCDNonBlocking.c	void LCDInit(void)
007f82   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007f84   ffe5
007f86   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007f88   ffd9
                                           ;	.line	565; TCPIP_Stack/LCDNonBlocking.c	LCDListPush(1, "");
007f8a   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
007f8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007f8e   0e77     movlw	0x77               	MOVLW	HIGH(__str_0)
007f90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007f92   0e8e     movlw	0x8e               	MOVLW	LOW(__str_0)
007f94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007f96   0e01     movlw	0x1                	MOVLW	0x01
007f98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007f9a   ec28     call	0x4a50, 0           	CALL	_LCDListPush
007f9c   f025
007f9e   0e04     movlw	0x4                	MOVLW	0x04
007fa0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007fa2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007fa4   ffd9
007fa6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDTask	code
                                           _LCDTask:
                                           ;	.line	503; TCPIP_Stack/LCDNonBlocking.c	void LCDTask(void)
004d38   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004d3a   ffe5
004d3c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004d3e   ffd9
004d40   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004d42   ffe5
004d44   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004d46   ffe5
004d48   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004d4a   ffe5
004d4c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004d4e   ffe5
004d50   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004d52   ffe5
004d54   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004d56   ffe5
                                           ;	.line	505; TCPIP_Stack/LCDNonBlocking.c	if (PIR1bits.TMR1IF && LCDWaiting)		// Time expired
004d58   a09e     btfss	0x9e, 0, 0         	BTFSS	_PIR1bits, 0
004d5a   d007     bra	0x4d6a               	BRA	_00243_DS_
004d5c   010a     movlb	0xa                	BANKSEL	_LCDWaiting
004d5e   51b1     movf	0xb1, 0, 0x1        	MOVF	_LCDWaiting, W, B
004d60   e004     bz	0x4d6a                	BZ	_00243_DS_
004d62   010a     movlb	0xa                	BANKSEL	_LCDWaiting
                                           ;	.line	507; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 0;
004d64   6bb1     clrf	0xb1, 0x1           	CLRF	_LCDWaiting, B
                                           ;	.line	508; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON = 0;
004d66   90cd     bcf	0xcd, 0, 0           	BCF	_T1CONbits, 0
                                           ;	.line	509; TCPIP_Stack/LCDNonBlocking.c	PIR1bits.TMR1IF = 0;
004d68   909e     bcf	0x9e, 0, 0           	BCF	_PIR1bits, 0
                                           _00243_DS_:
004d6a   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	511; TCPIP_Stack/LCDNonBlocking.c	if (!LCDOpInProgress)				// No operations being executed
004d6c   51b2     movf	0xb2, 0, 0x1        	MOVF	_LCDOpInProgress, W, B
004d6e   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004d70   d040     bra	0x4df2               	BRA	_00248_DS_
                                           ;	.line	513; TCPIP_Stack/LCDNonBlocking.c	if (!LCDListIsEmpty())				// The list contains at least one operation
004d72   ec1d     call	0x7e3a, 0           	CALL	_LCDListIsEmpty
004d74   f03f
004d76   6e00     movwf	0, 0               	MOVWF	r0x00
004d78   5000     movf	0, 0, 0             	MOVF	r0x00, W
004d7a   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004d7c   d03a     bra	0x4df2               	BRA	_00248_DS_
                                           ;	.line	515; TCPIP_Stack/LCDNonBlocking.c	LCDListPop(&LCDCurrentOrder, LCDCurrentText);			// Retrieve the operation to execute
004d7e   0e0a     movlw	0xa                	MOVLW	HIGH(_LCDCurrentOrder)
004d80   6e01     movwf	0x1, 0             	MOVWF	r0x01
004d82   0eb3     movlw	0xb3               	MOVLW	LOW(_LCDCurrentOrder)
004d84   6e00     movwf	0, 0               	MOVWF	r0x00
004d86   0e80     movlw	0x80               	MOVLW	0x80
004d88   6e02     movwf	0x2, 0             	MOVWF	r0x02
004d8a   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
004d8c   6e04     movwf	0x4, 0             	MOVWF	r0x04
004d8e   0e33     movlw	0x33               	MOVLW	LOW(_LCDCurrentText)
004d90   6e03     movwf	0x3, 0             	MOVWF	r0x03
004d92   0e80     movlw	0x80               	MOVLW	0x80
004d94   6e05     movwf	0x5, 0             	MOVWF	r0x05
004d96   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004d98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d9a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d9e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004da0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004da2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004da4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004da6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004da8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004daa   5000     movf	0, 0, 0             	MOVF	r0x00, W
004dac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004dae   ecb2     call	0x4164, 0           	CALL	_LCDListPop
004db0   f020
004db2   0e06     movlw	0x6                	MOVLW	0x06
004db4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	516; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 1;		// Set the execution flag
004db6   0e01     movlw	0x1                	MOVLW	0x01
004db8   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
004dba   6fb2     movwf	0xb2, 0x1          	MOVWF	_LCDOpInProgress, B
                                           ;	.line	518; TCPIP_Stack/LCDNonBlocking.c	ultoa(LCDCurrentOrder, tmpBuf,10);
004dbc   cab3     movff	0xab3, 0           	MOVFF	_LCDCurrentOrder, r0x00
004dbe   f000
004dc0   6ae8     clrf	0xe8, 0             	CLRF	WREG
004dc2   010a     movlb	0xa                	BANKSEL	_LCDCurrentOrder
004dc4   bfb3     btfsc	0xb3, 0x7, 0x1     	BTFSC	_LCDCurrentOrder, 7, B
004dc6   0eff     movlw	0xff               	MOVLW	0xff
004dc8   6e01     movwf	0x1, 0             	MOVWF	r0x01
004dca   6e02     movwf	0x2, 0             	MOVWF	r0x02
004dcc   6e03     movwf	0x3, 0             	MOVWF	r0x03
004dce   0e0a     movlw	0xa                	MOVLW	0x0a
004dd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004dd2   0e08     movlw	0x8                	MOVLW	HIGH(_tmpBuf)
004dd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004dd6   0e00     movlw	0                  	MOVLW	LOW(_tmpBuf)
004dd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004dda   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004ddc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004dde   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004de0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004de2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004de4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004de6   5000     movf	0, 0, 0             	MOVF	r0x00, W
004de8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004dea   ec7c     call	0x46f8, 0           	CALL	_ultoa
004dec   f023
004dee   0e07     movlw	0x7                	MOVLW	0x07
004df0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00248_DS_:
004df2   010a     movlb	0xa                	BANKSEL	_LCDWaiting
                                           ;	.line	523; TCPIP_Stack/LCDNonBlocking.c	if (!LCDWaiting && LCDOpInProgress)				// Not waiting for timers
004df4   51b1     movf	0xb1, 0, 0x1        	MOVF	_LCDWaiting, W, B
004df6   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004df8   d039     bra	0x4e6c               	BRA	_00257_DS_
004dfa   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
004dfc   51b2     movf	0xb2, 0, 0x1        	MOVF	_LCDOpInProgress, W, B
004dfe   e036     bz	0x4e6c                	BZ	_00257_DS_
004e00   010a     movlb	0xa                	BANKSEL	_LCDCurrentOrder
                                           ;	.line	525; TCPIP_Stack/LCDNonBlocking.c	switch (LCDCurrentOrder)
004e02   51b3     movf	0xb3, 0, 0x1        	MOVF	_LCDCurrentOrder, W, B
004e04   0f80     addlw	0x80               	ADDLW	0x80
004e06   0f7f     addlw	0x7f               	ADDLW	0x7f
004e08   e331     bnc	0x4e6c               	BNC	_00257_DS_
004e0a   010a     movlb	0xa                	BANKSEL	_LCDCurrentOrder
004e0c   51b3     movf	0xb3, 0, 0x1        	MOVF	_LCDCurrentOrder, W, B
004e0e   0f80     addlw	0x80               	ADDLW	0x80
004e10   0f7c     addlw	0x7c               	ADDLW	0x7c
004e12   e22c     bc	0x4e6c                	BC	_00257_DS_
004e14   010a     movlb	0xa                	BANKSEL	_LCDCurrentOrder
004e16   05b3     decf	0xb3, 0, 0x1        	DECF	_LCDCurrentOrder, W, B
004e18   6e00     movwf	0, 0               	MOVWF	r0x00
004e1a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004e1c   ffe5
004e1e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004e20   ffe5
004e22   6a07     clrf	0x7, 0              	CLRF	r0x07
004e24   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
004e26   3607     rlcf	0x7, 0x1, 0         	RLCF	r0x07, F
004e28   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
004e2a   3607     rlcf	0x7, 0x1, 0         	RLCF	r0x07, F
004e2c   0bfc     andlw	0xfc               	ANDLW	0xfc
004e2e   6e06     movwf	0x6, 0             	MOVWF	r0x06
004e30   0e00     movlw	0                  	MOVLW	UPPER(_00269_DS_)
004e32   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
004e34   0e4e     movlw	0x4e               	MOVLW	HIGH(_00269_DS_)
004e36   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
004e38   0e50     movlw	0x50               	MOVLW	LOW(_00269_DS_)
004e3a   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
004e3c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004e3e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
004e40   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004e42   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
004e44   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004e46   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004e48   f007
004e4a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004e4c   f006
004e4e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00269_DS_:
004e50   ef2e     goto	0x4e5c              	GOTO	_00249_DS_
004e52   f027
004e54   ef31     goto	0x4e62              	GOTO	_00250_DS_
004e56   f027
004e58   ef34     goto	0x4e68              	GOTO	_00251_DS_
004e5a   f027
                                           _00249_DS_:
                                           ;	.line	528; TCPIP_Stack/LCDNonBlocking.c	LCDInitExec();
004e5c   ecb8     call	0x3f70, 0           	CALL	_LCDInitExec
004e5e   f01f
                                           ;	.line	529; TCPIP_Stack/LCDNonBlocking.c	break;
004e60   d005     bra	0x4e6c               	BRA	_00257_DS_
                                           _00250_DS_:
                                           ;	.line	532; TCPIP_Stack/LCDNonBlocking.c	LCDEraseExec();
004e62   ec82     call	0x7904, 0           	CALL	_LCDEraseExec
004e64   f03c
                                           ;	.line	533; TCPIP_Stack/LCDNonBlocking.c	break;
004e66   d002     bra	0x4e6c               	BRA	_00257_DS_
                                           _00251_DS_:
                                           ;	.line	536; TCPIP_Stack/LCDNonBlocking.c	LCDUpdateExec();
004e68   ec95     call	0x352a, 0           	CALL	_LCDUpdateExec
004e6a   f01a
                                           _00257_DS_:
                                           ;	.line	542; TCPIP_Stack/LCDNonBlocking.c	}
004e6c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004e6e   f005
004e70   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004e72   f004
004e74   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004e76   f003
004e78   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004e7a   f002
004e7c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004e7e   f001
004e80   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004e82   f000
004e84   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004e86   ffd9
004e88   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDTaskInit	code
                                           _LCDTaskInit:
                                           ;	.line	476; TCPIP_Stack/LCDNonBlocking.c	void LCDTaskInit(void)
007850   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007852   ffe5
007854   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007856   ffd9
007858   010a     movlb	0xa                	BANKSEL	_st_init
                                           ;	.line	479; TCPIP_Stack/LCDNonBlocking.c	st_init   = LCD_RESET;
00785a   6bae     clrf	0xae, 0x1           	CLRF	_st_init, B
00785c   010a     movlb	0xa                	BANKSEL	_st_update
                                           ;	.line	480; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_GOTOFIRSTLINE;
00785e   6baf     clrf	0xaf, 0x1           	CLRF	_st_update, B
007860   010a     movlb	0xa                	BANKSEL	_st_erase
                                           ;	.line	481; TCPIP_Stack/LCDNonBlocking.c	st_erase  = LCD_CLEARDISPLAY;
007862   6bb0     clrf	0xb0, 0x1           	CLRF	_st_erase, B
007864   010a     movlb	0xa                	BANKSEL	_LCDWaiting
                                           ;	.line	483; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 0;
007866   6bb1     clrf	0xb1, 0x1           	CLRF	_LCDWaiting, B
007868   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	484; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 0;
00786a   6bb2     clrf	0xb2, 0x1           	CLRF	_LCDOpInProgress, B
00786c   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	485; TCPIP_Stack/LCDNonBlocking.c	LCDi = 0;
00786e   6bac     clrf	0xac, 0x1           	CLRF	_LCDi, B
007870   010a     movlb	0xa                	BANKSEL	_LCDj
                                           ;	.line	486; TCPIP_Stack/LCDNonBlocking.c	LCDj = 0;
007872   6bad     clrf	0xad, 0x1           	CLRF	_LCDj, B
                                           ;	.line	488; TCPIP_Stack/LCDNonBlocking.c	LCDListInit();
007874   ec17     call	0x6a2e, 0           	CALL	_LCDListInit
007876   f035
                                           ;	.line	490; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	0;		// disable timer1
007878   90cd     bcf	0xcd, 0, 0           	BCF	_T1CONbits, 0
                                           ;	.line	491; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.RD16		=	1;		// use timer1 16-bit counter
00787a   8ecd     bsf	0xcd, 0x7, 0         	BSF	_T1CONbits, 7
                                           ;	.line	492; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.T1CKPS0	=	0;		// prescaler set to 1:1
00787c   98cd     bcf	0xcd, 0x4, 0         	BCF	_T1CONbits, 4
                                           ;	.line	493; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.T1CKPS1	=	0;
00787e   9acd     bcf	0xcd, 0x5, 0         	BCF	_T1CONbits, 5
                                           ;	.line	494; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.T1OSCEN	=	1;		// timer1 oscillator enable
007880   86cd     bsf	0xcd, 0x3, 0         	BSF	_T1CONbits, 3
                                           ;	.line	495; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1CS	=	1;		// external clock selected
007882   82cd     bsf	0xcd, 0x1, 0         	BSF	_T1CONbits, 1
                                           ;	.line	496; TCPIP_Stack/LCDNonBlocking.c	PIR1bits.TMR1IF		=	0;		// clear timer1 overflow bit
007884   909e     bcf	0x9e, 0, 0           	BCF	_PIR1bits, 0
                                           ;	.line	498; TCPIP_Stack/LCDNonBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
007886   0e00     movlw	0                  	MOVLW	0x00
007888   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00788a   0e20     movlw	0x20               	MOVLW	0x20
00788c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00788e   0e20     movlw	0x20               	MOVLW	0x20
007890   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007892   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
007894   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007896   0e54     movlw	0x54               	MOVLW	LOW(_LCDText)
007898   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00789a   ec95     call	0x672a, 0           	CALL	_memset
00789c   f033
00789e   0e05     movlw	0x5                	MOVLW	0x05
0078a0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0078a2   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	499; TCPIP_Stack/LCDNonBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
0078a4   6b74     clrf	0x74, 0x1           	CLRF	(_LCDText + 32), B
0078a6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0078a8   ffd9
0078aa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDUpdateExec	code
                                           _LCDUpdateExec:
                                           ;	.line	369; TCPIP_Stack/LCDNonBlocking.c	static void LCDUpdateExec(void)
00352a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00352c   ffe5
00352e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003530   ffd9
003532   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003534   ffe5
003536   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003538   ffe5
00353a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00353c   ffe5
                                           ;	.line	371; TCPIP_Stack/LCDNonBlocking.c	switch(st_update)
00353e   0e05     movlw	0x5                	MOVLW	0x05
003540   010a     movlb	0xa                	BANKSEL	_st_update
003542   5daf     subwf	0xaf, 0, 0x1       	SUBWF	_st_update, W, B
003544   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003546   d0f9     bra	0x373a               	BRA	_00216_DS_
003548   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00354a   ffe5
00354c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00354e   ffe5
003550   6a04     clrf	0x4, 0              	CLRF	r0x04
003552   010a     movlb	0xa                	BANKSEL	_st_update
003554   35af     rlcf	0xaf, 0, 0x1        	RLCF	_st_update, W, B
003556   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
003558   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00355a   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
00355c   0bfc     andlw	0xfc               	ANDLW	0xfc
00355e   6e03     movwf	0x3, 0             	MOVWF	r0x03
003560   0e00     movlw	0                  	MOVLW	UPPER(_00228_DS_)
003562   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003564   0e35     movlw	0x35               	MOVLW	HIGH(_00228_DS_)
003566   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
003568   0e80     movlw	0x80               	MOVLW	LOW(_00228_DS_)
00356a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00356c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00356e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003570   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003572   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003574   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003576   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003578   f004
00357a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00357c   f003
00357e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00228_DS_:
003580   efca     goto	0x3594              	GOTO	_00191_DS_
003582   f01a
003584   efe0     goto	0x35c0              	GOTO	_00192_DS_
003586   f01a
003588   ef31     goto	0x3662              	GOTO	_00198_DS_
00358a   f01b
00358c   ef48     goto	0x3690              	GOTO	_00199_DS_
00358e   f01b
003590   ef99     goto	0x3732              	GOTO	_00205_DS_
003592   f01b
                                           _00191_DS_:
                                           ;	.line	378; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x02);
003594   0e02     movlw	0x2                	MOVLW	0x02
003596   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003598   0e00     movlw	0                  	MOVLW	0x00
00359a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00359c   ec96     call	0x772c, 0           	CALL	_LCDWrite
00359e   f03b
0035a0   0e02     movlw	0x2                	MOVLW	0x02
0035a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	380; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
0035a4   0e01     movlw	0x1                	MOVLW	0x01
0035a6   010a     movlb	0xa                	BANKSEL	_LCDWaiting
0035a8   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	381; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 66)	& 0xff;
0035aa   0ebe     movlw	0xbe               	MOVLW	0xbe
0035ac   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	382; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 66)	>> 8;
0035ae   0eff     movlw	0xff               	MOVLW	0xff
0035b0   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	383; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
0035b2   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	384; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_OUTFIRSTLINE;
0035b4   0e01     movlw	0x1                	MOVLW	0x01
0035b6   010a     movlb	0xa                	BANKSEL	_st_update
0035b8   6faf     movwf	0xaf, 0x1          	MOVWF	_st_update, B
0035ba   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	385; TCPIP_Stack/LCDNonBlocking.c	LCDi = 0;
0035bc   6bac     clrf	0xac, 0x1           	CLRF	_LCDi, B
                                           ;	.line	386; TCPIP_Stack/LCDNonBlocking.c	break;
0035be   d0bd     bra	0x373a               	BRA	_00216_DS_
                                           _00192_DS_:
                                           ;	.line	391; TCPIP_Stack/LCDNonBlocking.c	if(LCDCurrentText[LCDi] == 0u)
0035c0   0e33     movlw	0x33               	MOVLW	LOW(_LCDCurrentText)
0035c2   010a     movlb	0xa                	BANKSEL	_LCDi
0035c4   25ac     addwf	0xac, 0, 0x1       	ADDWF	_LCDi, W, B
0035c6   6e00     movwf	0, 0               	MOVWF	r0x00
0035c8   6a01     clrf	0x1, 0              	CLRF	r0x01
0035ca   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
0035cc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0035ce   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0035d0   ffe9
0035d2   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0035d4   ffea
0035d6   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
0035d8   f000
0035da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0035dc   e123     bnz	0x3624               	BNZ	_00194_DS_
                                           ;	.line	393; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(1, ' ');
0035de   0e20     movlw	0x20               	MOVLW	0x20
0035e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035e2   0e01     movlw	0x1                	MOVLW	0x01
0035e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035e6   ec96     call	0x772c, 0           	CALL	_LCDWrite
0035e8   f03b
0035ea   0e02     movlw	0x2                	MOVLW	0x02
0035ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	394; TCPIP_Stack/LCDNonBlocking.c	for(LCDj=LCDi; LCDj < 16u; LCDj++)
0035ee   caac     movff	0xaac, 0xaad       	MOVFF	_LCDi, _LCDj
0035f0   faad
                                           _00208_DS_:
0035f2   caad     movff	0xaad, 0x1         	MOVFF	_LCDj, r0x01
0035f4   f001
0035f6   6a02     clrf	0x2, 0              	CLRF	r0x02
0035f8   0e00     movlw	0                  	MOVLW	0x00
0035fa   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0035fc   e102     bnz	0x3602               	BNZ	_00229_DS_
0035fe   0e10     movlw	0x10               	MOVLW	0x10
003600   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00229_DS_:
003602   e218     bc	0x3634                	BC	_00195_DS_
                                           ;	.line	396; TCPIP_Stack/LCDNonBlocking.c	LCDCurrentText[LCDj] = ' ';
003604   0e33     movlw	0x33               	MOVLW	LOW(_LCDCurrentText)
003606   010a     movlb	0xa                	BANKSEL	_LCDj
003608   25ad     addwf	0xad, 0, 0x1       	ADDWF	_LCDj, W, B
00360a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00360c   6a02     clrf	0x2, 0              	CLRF	r0x02
00360e   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
003610   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003612   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
003614   ffe9
003616   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
003618   ffea
00361a   0e20     movlw	0x20               	MOVLW	0x20
00361c   6eef     movwf	0xef, 0            	MOVWF	INDF0
00361e   010a     movlb	0xa                	BANKSEL	_LCDj
                                           ;	.line	394; TCPIP_Stack/LCDNonBlocking.c	for(LCDj=LCDi; LCDj < 16u; LCDj++)
003620   2bad     incf	0xad, 0x1, 0x1      	INCF	_LCDj, F, B
003622   d7e7     bra	0x35f2               	BRA	_00208_DS_
                                           _00194_DS_:
                                           ;	.line	399; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(1, LCDCurrentText[LCDi]);
003624   5000     movf	0, 0, 0             	MOVF	r0x00, W
003626   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003628   0e01     movlw	0x1                	MOVLW	0x01
00362a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00362c   ec96     call	0x772c, 0           	CALL	_LCDWrite
00362e   f03b
003630   0e02     movlw	0x2                	MOVLW	0x02
003632   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00195_DS_:
003634   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	401; TCPIP_Stack/LCDNonBlocking.c	LCDi++;
003636   2bac     incf	0xac, 0x1, 0x1      	INCF	_LCDi, F, B
                                           ;	.line	402; TCPIP_Stack/LCDNonBlocking.c	if (LCDi >= 16u)
003638   caac     movff	0xaac, 0           	MOVFF	_LCDi, r0x00
00363a   f000
00363c   6a01     clrf	0x1, 0              	CLRF	r0x01
00363e   0e00     movlw	0                  	MOVLW	0x00
003640   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
003642   e102     bnz	0x3648               	BNZ	_00230_DS_
003644   0e10     movlw	0x10               	MOVLW	0x10
003646   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00230_DS_:
003648   e303     bnc	0x3650               	BNC	_00197_DS_
                                           ;	.line	403; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_GOTOSECONDLINE;
00364a   0e02     movlw	0x2                	MOVLW	0x02
00364c   010a     movlb	0xa                	BANKSEL	_st_update
00364e   6faf     movwf	0xaf, 0x1          	MOVWF	_st_update, B
                                           _00197_DS_:
                                           ;	.line	405; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
003650   0e01     movlw	0x1                	MOVLW	0x01
003652   010a     movlb	0xa                	BANKSEL	_LCDWaiting
003654   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	406; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
003656   0efe     movlw	0xfe               	MOVLW	0xfe
003658   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	407; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
00365a   0eff     movlw	0xff               	MOVLW	0xff
00365c   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	408; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
00365e   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	409; TCPIP_Stack/LCDNonBlocking.c	break;
003660   d06c     bra	0x373a               	BRA	_00216_DS_
                                           _00198_DS_:
                                           ;	.line	413; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0xC0);
003662   0ec0     movlw	0xc0               	MOVLW	0xc0
003664   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003666   0e00     movlw	0                  	MOVLW	0x00
003668   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00366a   ec96     call	0x772c, 0           	CALL	_LCDWrite
00366c   f03b
00366e   0e02     movlw	0x2                	MOVLW	0x02
003670   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	415; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
003672   0e01     movlw	0x1                	MOVLW	0x01
003674   010a     movlb	0xa                	BANKSEL	_LCDWaiting
003676   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	416; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
003678   0efe     movlw	0xfe               	MOVLW	0xfe
00367a   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	417; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
00367c   0eff     movlw	0xff               	MOVLW	0xff
00367e   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	418; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
003680   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	419; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_OUTSECONDLINE;
003682   0e03     movlw	0x3                	MOVLW	0x03
003684   010a     movlb	0xa                	BANKSEL	_st_update
003686   6faf     movwf	0xaf, 0x1          	MOVWF	_st_update, B
                                           ;	.line	420; TCPIP_Stack/LCDNonBlocking.c	LCDi = 16;
003688   0e10     movlw	0x10               	MOVLW	0x10
00368a   010a     movlb	0xa                	BANKSEL	_LCDi
00368c   6fac     movwf	0xac, 0x1          	MOVWF	_LCDi, B
                                           ;	.line	421; TCPIP_Stack/LCDNonBlocking.c	break;
00368e   d055     bra	0x373a               	BRA	_00216_DS_
                                           _00199_DS_:
                                           ;	.line	426; TCPIP_Stack/LCDNonBlocking.c	if(LCDCurrentText[LCDi] == 0u)
003690   0e33     movlw	0x33               	MOVLW	LOW(_LCDCurrentText)
003692   010a     movlb	0xa                	BANKSEL	_LCDi
003694   25ac     addwf	0xac, 0, 0x1       	ADDWF	_LCDi, W, B
003696   6e00     movwf	0, 0               	MOVWF	r0x00
003698   6a01     clrf	0x1, 0              	CLRF	r0x01
00369a   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
00369c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00369e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0036a0   ffe9
0036a2   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0036a4   ffea
0036a6   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
0036a8   f000
0036aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0036ac   e123     bnz	0x36f4               	BNZ	_00201_DS_
                                           ;	.line	428; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(1, ' ');
0036ae   0e20     movlw	0x20               	MOVLW	0x20
0036b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036b2   0e01     movlw	0x1                	MOVLW	0x01
0036b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036b6   ec96     call	0x772c, 0           	CALL	_LCDWrite
0036b8   f03b
0036ba   0e02     movlw	0x2                	MOVLW	0x02
0036bc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	429; TCPIP_Stack/LCDNonBlocking.c	for(LCDj=LCDi; LCDj < 32u; LCDj++)
0036be   caac     movff	0xaac, 0xaad       	MOVFF	_LCDi, _LCDj
0036c0   faad
                                           _00212_DS_:
0036c2   caad     movff	0xaad, 0x1         	MOVFF	_LCDj, r0x01
0036c4   f001
0036c6   6a02     clrf	0x2, 0              	CLRF	r0x02
0036c8   0e00     movlw	0                  	MOVLW	0x00
0036ca   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0036cc   e102     bnz	0x36d2               	BNZ	_00231_DS_
0036ce   0e20     movlw	0x20               	MOVLW	0x20
0036d0   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00231_DS_:
0036d2   e218     bc	0x3704                	BC	_00202_DS_
                                           ;	.line	431; TCPIP_Stack/LCDNonBlocking.c	LCDCurrentText[LCDj] = ' ';
0036d4   0e33     movlw	0x33               	MOVLW	LOW(_LCDCurrentText)
0036d6   010a     movlb	0xa                	BANKSEL	_LCDj
0036d8   25ad     addwf	0xad, 0, 0x1       	ADDWF	_LCDj, W, B
0036da   6e01     movwf	0x1, 0             	MOVWF	r0x01
0036dc   6a02     clrf	0x2, 0              	CLRF	r0x02
0036de   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
0036e0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0036e2   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0036e4   ffe9
0036e6   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0036e8   ffea
0036ea   0e20     movlw	0x20               	MOVLW	0x20
0036ec   6eef     movwf	0xef, 0            	MOVWF	INDF0
0036ee   010a     movlb	0xa                	BANKSEL	_LCDj
                                           ;	.line	429; TCPIP_Stack/LCDNonBlocking.c	for(LCDj=LCDi; LCDj < 32u; LCDj++)
0036f0   2bad     incf	0xad, 0x1, 0x1      	INCF	_LCDj, F, B
0036f2   d7e7     bra	0x36c2               	BRA	_00212_DS_
                                           _00201_DS_:
                                           ;	.line	434; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(1, LCDCurrentText[LCDi]);
0036f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0036f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036f8   0e01     movlw	0x1                	MOVLW	0x01
0036fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036fc   ec96     call	0x772c, 0           	CALL	_LCDWrite
0036fe   f03b
003700   0e02     movlw	0x2                	MOVLW	0x02
003702   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00202_DS_:
003704   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	436; TCPIP_Stack/LCDNonBlocking.c	LCDi++;
003706   2bac     incf	0xac, 0x1, 0x1      	INCF	_LCDi, F, B
                                           ;	.line	437; TCPIP_Stack/LCDNonBlocking.c	if (LCDi >= 32u)
003708   caac     movff	0xaac, 0           	MOVFF	_LCDi, r0x00
00370a   f000
00370c   6a01     clrf	0x1, 0              	CLRF	r0x01
00370e   0e00     movlw	0                  	MOVLW	0x00
003710   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
003712   e102     bnz	0x3718               	BNZ	_00232_DS_
003714   0e20     movlw	0x20               	MOVLW	0x20
003716   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00232_DS_:
003718   e303     bnc	0x3720               	BNC	_00204_DS_
                                           ;	.line	438; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_ENDUPDATE;
00371a   0e04     movlw	0x4                	MOVLW	0x04
00371c   010a     movlb	0xa                	BANKSEL	_st_update
00371e   6faf     movwf	0xaf, 0x1          	MOVWF	_st_update, B
                                           _00204_DS_:
                                           ;	.line	440; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
003720   0e01     movlw	0x1                	MOVLW	0x01
003722   010a     movlb	0xa                	BANKSEL	_LCDWaiting
003724   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	441; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
003726   0efe     movlw	0xfe               	MOVLW	0xfe
003728   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	442; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
00372a   0eff     movlw	0xff               	MOVLW	0xff
00372c   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	443; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
00372e   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	444; TCPIP_Stack/LCDNonBlocking.c	break;
003730   d004     bra	0x373a               	BRA	_00216_DS_
                                           _00205_DS_:
003732   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	450; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 0;
003734   6bb2     clrf	0xb2, 0x1           	CLRF	_LCDOpInProgress, B
003736   010a     movlb	0xa                	BANKSEL	_st_update
                                           ;	.line	451; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_GOTOFIRSTLINE;
003738   6baf     clrf	0xaf, 0x1           	CLRF	_st_update, B
                                           _00216_DS_:
                                           ;	.line	457; TCPIP_Stack/LCDNonBlocking.c	}
00373a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00373c   f002
00373e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003740   f001
003742   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003744   f000
003746   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003748   ffd9
00374a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDEraseExec	code
                                           _LCDEraseExec:
                                           ;	.line	336; TCPIP_Stack/LCDNonBlocking.c	static void LCDEraseExec(void)
007904   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007906   ffe5
007908   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00790a   ffd9
00790c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00790e   ffe5
                                           ;	.line	338; TCPIP_Stack/LCDNonBlocking.c	switch(st_erase)
007910   cab0     movff	0xab0, 0           	MOVFF	_st_erase, r0x00
007912   f000
007914   5000     movf	0, 0, 0             	MOVF	r0x00, W
007916   e005     bz	0x7922                	BZ	_00175_DS_
                                           _00184_DS_:
007918   010a     movlb	0xa                	BANKSEL	_st_erase
00791a   51b0     movf	0xb0, 0, 0x1        	MOVF	_st_erase, W, B
00791c   0a01     xorlw	0x1                	XORLW	0x01
00791e   e015     bz	0x794a                	BZ	_00176_DS_
007920   d018     bra	0x7952               	BRA	_00179_DS_
                                           _00175_DS_:
                                           ;	.line	342; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x01);
007922   0e01     movlw	0x1                	MOVLW	0x01
007924   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007926   0e00     movlw	0                  	MOVLW	0x00
007928   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00792a   ec96     call	0x772c, 0           	CALL	_LCDWrite
00792c   f03b
00792e   0e02     movlw	0x2                	MOVLW	0x02
007930   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	344; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
007932   0e01     movlw	0x1                	MOVLW	0x01
007934   010a     movlb	0xa                	BANKSEL	_LCDWaiting
007936   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	345; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 66)	& 0xff;
007938   0ebe     movlw	0xbe               	MOVLW	0xbe
00793a   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	346; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 66)	>> 8;
00793c   0eff     movlw	0xff               	MOVLW	0xff
00793e   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	347; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
007940   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	349; TCPIP_Stack/LCDNonBlocking.c	st_erase = LCD_CLEARLOCAL;
007942   0e01     movlw	0x1                	MOVLW	0x01
007944   010a     movlb	0xa                	BANKSEL	_st_erase
007946   6fb0     movwf	0xb0, 0x1          	MOVWF	_st_erase, B
                                           ;	.line	350; TCPIP_Stack/LCDNonBlocking.c	break;
007948   d004     bra	0x7952               	BRA	_00179_DS_
                                           _00176_DS_:
00794a   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	357; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 0;
00794c   6bb2     clrf	0xb2, 0x1           	CLRF	_LCDOpInProgress, B
00794e   010a     movlb	0xa                	BANKSEL	_st_erase
                                           ;	.line	359; TCPIP_Stack/LCDNonBlocking.c	st_erase = LCD_CLEARDISPLAY;
007950   6bb0     clrf	0xb0, 0x1           	CLRF	_st_erase, B
                                           _00179_DS_:
                                           ;	.line	365; TCPIP_Stack/LCDNonBlocking.c	}
007952   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007954   f000
007956   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007958   ffd9
00795a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDInitExec	code
                                           _LCDInitExec:
                                           ;	.line	174; TCPIP_Stack/LCDNonBlocking.c	static void LCDInitExec(void)
003f70   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003f72   ffe5
003f74   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003f76   ffd9
003f78   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003f7a   ffe5
003f7c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003f7e   ffe5
003f80   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003f82   ffe5
003f84   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003f86   ffe5
003f88   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003f8a   ffe5
003f8c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003f8e   ffe5
003f90   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003f92   ffe5
003f94   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003f96   ffe5
                                           ;	.line	176; TCPIP_Stack/LCDNonBlocking.c	switch (st_init)
003f98   0e08     movlw	0x8                	MOVLW	0x08
003f9a   010a     movlb	0xa                	BANKSEL	_st_init
003f9c   5dae     subwf	0xae, 0, 0x1       	SUBWF	_st_init, W, B
003f9e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003fa0   d0ce     bra	0x413e               	BRA	_00161_DS_
003fa2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003fa4   ffe5
003fa6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003fa8   ffe5
003faa   6a09     clrf	0x9, 0              	CLRF	r0x09
003fac   010a     movlb	0xa                	BANKSEL	_st_init
003fae   35ae     rlcf	0xae, 0, 0x1        	RLCF	_st_init, W, B
003fb0   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
003fb2   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003fb4   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
003fb6   0bfc     andlw	0xfc               	ANDLW	0xfc
003fb8   6e08     movwf	0x8, 0             	MOVWF	r0x08
003fba   0e00     movlw	0                  	MOVLW	UPPER(_00169_DS_)
003fbc   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003fbe   0e3f     movlw	0x3f               	MOVLW	HIGH(_00169_DS_)
003fc0   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
003fc2   0eda     movlw	0xda               	MOVLW	LOW(_00169_DS_)
003fc4   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
003fc6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003fc8   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003fca   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003fcc   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003fce   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003fd0   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003fd2   f009
003fd4   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003fd6   f008
003fd8   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00169_DS_:
003fda   effd     goto	0x3ffa              	GOTO	_00143_DS_
003fdc   f01f
003fde   ef0f     goto	0x401e              	GOTO	_00144_DS_
003fe0   f020
003fe2   ef18     goto	0x4030              	GOTO	_00145_DS_
003fe4   f020
003fe6   ef4b     goto	0x4096              	GOTO	_00154_DS_
003fe8   f020
003fea   ef5f     goto	0x40be              	GOTO	_00155_DS_
003fec   f020
003fee   ef73     goto	0x40e6              	GOTO	_00156_DS_
003ff0   f020
003ff2   ef87     goto	0x410e              	GOTO	_00157_DS_
003ff4   f020
003ff6   ef9b     goto	0x4136              	GOTO	_00158_DS_
003ff8   f020
                                           _00143_DS_:
                                           ;	.line	183; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 0;
003ffa   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	184; TCPIP_Stack/LCDNonBlocking.c	LCD_RD_WR_IO = 0;
003ffc   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	186; TCPIP_Stack/LCDNonBlocking.c	LCD_DATA_TRIS = 0x00;
003ffe   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	199; TCPIP_Stack/LCDNonBlocking.c	LCD_RD_WR_TRIS = 0;
004000   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	200; TCPIP_Stack/LCDNonBlocking.c	LCD_RS_TRIS = 0;
004002   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	201; TCPIP_Stack/LCDNonBlocking.c	LCD_E_TRIS = 0;
004004   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	203; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
004006   0e01     movlw	0x1                	MOVLW	0x01
004008   010a     movlb	0xa                	BANKSEL	_LCDWaiting
00400a   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	204; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 1311)	& 0xff;
00400c   0ee1     movlw	0xe1               	MOVLW	0xe1
00400e   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	205; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 1311)	>> 8;
004010   0efa     movlw	0xfa               	MOVLW	0xfa
004012   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	206; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
004014   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	208; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_DEFAULTFUNC1;
004016   0e01     movlw	0x1                	MOVLW	0x01
004018   010a     movlb	0xa                	BANKSEL	_st_init
00401a   6fae     movwf	0xae, 0x1          	MOVWF	_st_init, B
                                           ;	.line	209; TCPIP_Stack/LCDNonBlocking.c	break;
00401c   d090     bra	0x413e               	BRA	_00161_DS_
                                           _00144_DS_:
                                           ;	.line	218; TCPIP_Stack/LCDNonBlocking.c	LCD_RS_IO = 0;
00401e   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	220; TCPIP_Stack/LCDNonBlocking.c	LCD_DATA_IO = 0x03;
004020   0e03     movlw	0x3                	MOVLW	0x03
004022   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
                                           ;	.line	236; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_EPULSETIME;
004024   0e02     movlw	0x2                	MOVLW	0x02
004026   010a     movlb	0xa                	BANKSEL	_st_init
004028   6fae     movwf	0xae, 0x1          	MOVWF	_st_init, B
00402a   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	237; TCPIP_Stack/LCDNonBlocking.c	LCDi = 0;
00402c   6bac     clrf	0xac, 0x1           	CLRF	_LCDi, B
                                           ;	.line	238; TCPIP_Stack/LCDNonBlocking.c	break;
00402e   d087     bra	0x413e               	BRA	_00161_DS_
                                           _00145_DS_:
                                           ;	.line	241; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 1;
004030   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	242; TCPIP_Stack/LCDNonBlocking.c	Delay10us(1);			// Wait E Pulse width time (min 230ns)
004032   0e11     movlw	0x11               	MOVLW	0x11
004034   6e00     movwf	0, 0               	MOVWF	r0x00
004036   6a01     clrf	0x1, 0              	CLRF	r0x01
004038   6a02     clrf	0x2, 0              	CLRF	r0x02
00403a   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00146_DS_:
00403c   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
00403e   f004
004040   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
004042   f005
004044   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
004046   f006
004048   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
00404a   f007
00404c   0eff     movlw	0xff               	MOVLW	0xff
00404e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004050   0eff     movlw	0xff               	MOVLW	0xff
004052   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004054   0eff     movlw	0xff               	MOVLW	0xff
004056   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004058   0eff     movlw	0xff               	MOVLW	0xff
00405a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00405c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00405e   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
004060   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
004062   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
004064   e1eb     bnz	0x403c               	BNZ	_00146_DS_
                                           ;	.line	243; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 0;
004066   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
004068   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	245; TCPIP_Stack/LCDNonBlocking.c	LCDi++;
00406a   2bac     incf	0xac, 0x1, 0x1      	INCF	_LCDi, F, B
                                           ;	.line	246; TCPIP_Stack/LCDNonBlocking.c	if (LCDi >= 3u)
00406c   caac     movff	0xaac, 0           	MOVFF	_LCDi, r0x00
00406e   f000
004070   6a01     clrf	0x1, 0              	CLRF	r0x01
004072   0e00     movlw	0                  	MOVLW	0x00
004074   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004076   e102     bnz	0x407c               	BNZ	_00170_DS_
004078   0e03     movlw	0x3                	MOVLW	0x03
00407a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00170_DS_:
00407c   e303     bnc	0x4084               	BNC	_00153_DS_
                                           ;	.line	247; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_DEFAULTFUNC2;
00407e   0e03     movlw	0x3                	MOVLW	0x03
004080   010a     movlb	0xa                	BANKSEL	_st_init
004082   6fae     movwf	0xae, 0x1          	MOVWF	_st_init, B
                                           _00153_DS_:
                                           ;	.line	249; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
004084   0e01     movlw	0x1                	MOVLW	0x01
004086   010a     movlb	0xa                	BANKSEL	_LCDWaiting
004088   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	250; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 66)	& 0xff;
00408a   0ebe     movlw	0xbe               	MOVLW	0xbe
00408c   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	251; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 66)	>> 8;
00408e   0eff     movlw	0xff               	MOVLW	0xff
004090   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	252; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
004092   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	253; TCPIP_Stack/LCDNonBlocking.c	break;
004094   d054     bra	0x413e               	BRA	_00161_DS_
                                           _00154_DS_:
                                           ;	.line	278; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x38);
004096   0e38     movlw	0x38               	MOVLW	0x38
004098   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00409a   0e00     movlw	0                  	MOVLW	0x00
00409c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00409e   ec96     call	0x772c, 0           	CALL	_LCDWrite
0040a0   f03b
0040a2   0e02     movlw	0x2                	MOVLW	0x02
0040a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	281; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
0040a6   0e01     movlw	0x1                	MOVLW	0x01
0040a8   010a     movlb	0xa                	BANKSEL	_LCDWaiting
0040aa   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	282; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
0040ac   0efe     movlw	0xfe               	MOVLW	0xfe
0040ae   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	283; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
0040b0   0eff     movlw	0xff               	MOVLW	0xff
0040b2   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	284; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
0040b4   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	286; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_ENTRYMODE;
0040b6   0e04     movlw	0x4                	MOVLW	0x04
0040b8   010a     movlb	0xa                	BANKSEL	_st_init
0040ba   6fae     movwf	0xae, 0x1          	MOVWF	_st_init, B
                                           ;	.line	287; TCPIP_Stack/LCDNonBlocking.c	break;
0040bc   d040     bra	0x413e               	BRA	_00161_DS_
                                           _00155_DS_:
                                           ;	.line	290; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
0040be   0e06     movlw	0x6                	MOVLW	0x06
0040c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040c2   0e00     movlw	0                  	MOVLW	0x00
0040c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040c6   ec96     call	0x772c, 0           	CALL	_LCDWrite
0040c8   f03b
0040ca   0e02     movlw	0x2                	MOVLW	0x02
0040cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	292; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
0040ce   0e01     movlw	0x1                	MOVLW	0x01
0040d0   010a     movlb	0xa                	BANKSEL	_LCDWaiting
0040d2   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	293; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
0040d4   0efe     movlw	0xfe               	MOVLW	0xfe
0040d6   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	294; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
0040d8   0eff     movlw	0xff               	MOVLW	0xff
0040da   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	295; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
0040dc   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	297; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_DISPLAYCONTROL;
0040de   0e05     movlw	0x5                	MOVLW	0x05
0040e0   010a     movlb	0xa                	BANKSEL	_st_init
0040e2   6fae     movwf	0xae, 0x1          	MOVWF	_st_init, B
                                           ;	.line	298; TCPIP_Stack/LCDNonBlocking.c	break;
0040e4   d02c     bra	0x413e               	BRA	_00161_DS_
                                           _00156_DS_:
                                           ;	.line	301; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x0C);		// Turn display on, no cusor, no cursor blink
0040e6   0e0c     movlw	0xc                	MOVLW	0x0c
0040e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040ea   0e00     movlw	0                  	MOVLW	0x00
0040ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040ee   ec96     call	0x772c, 0           	CALL	_LCDWrite
0040f0   f03b
0040f2   0e02     movlw	0x2                	MOVLW	0x02
0040f4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	303; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
0040f6   0e01     movlw	0x1                	MOVLW	0x01
0040f8   010a     movlb	0xa                	BANKSEL	_LCDWaiting
0040fa   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	304; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
0040fc   0efe     movlw	0xfe               	MOVLW	0xfe
0040fe   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	305; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
004100   0eff     movlw	0xff               	MOVLW	0xff
004102   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	306; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
004104   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	308; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_CLEAR;
004106   0e06     movlw	0x6                	MOVLW	0x06
004108   010a     movlb	0xa                	BANKSEL	_st_init
00410a   6fae     movwf	0xae, 0x1          	MOVWF	_st_init, B
                                           ;	.line	309; TCPIP_Stack/LCDNonBlocking.c	break;
00410c   d018     bra	0x413e               	BRA	_00161_DS_
                                           _00157_DS_:
                                           ;	.line	312; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x01);	
00410e   0e01     movlw	0x1                	MOVLW	0x01
004110   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004112   0e00     movlw	0                  	MOVLW	0x00
004114   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004116   ec96     call	0x772c, 0           	CALL	_LCDWrite
004118   f03b
00411a   0e02     movlw	0x2                	MOVLW	0x02
00411c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	314; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
00411e   0e01     movlw	0x1                	MOVLW	0x01
004120   010a     movlb	0xa                	BANKSEL	_LCDWaiting
004122   6fb1     movwf	0xb1, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	315; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 66)	& 0xff;
004124   0ebe     movlw	0xbe               	MOVLW	0xbe
004126   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	316; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 66)	>> 8;
004128   0eff     movlw	0xff               	MOVLW	0xff
00412a   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	317; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
00412c   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	319; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_ENDINIT;
00412e   0e07     movlw	0x7                	MOVLW	0x07
004130   010a     movlb	0xa                	BANKSEL	_st_init
004132   6fae     movwf	0xae, 0x1          	MOVWF	_st_init, B
                                           ;	.line	320; TCPIP_Stack/LCDNonBlocking.c	break;
004134   d004     bra	0x413e               	BRA	_00161_DS_
                                           _00158_DS_:
004136   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	324; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 0;
004138   6bb2     clrf	0xb2, 0x1           	CLRF	_LCDOpInProgress, B
00413a   010a     movlb	0xa                	BANKSEL	_st_init
                                           ;	.line	326; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_RESET;
00413c   6bae     clrf	0xae, 0x1           	CLRF	_st_init, B
                                           _00161_DS_:
                                           ;	.line	332; TCPIP_Stack/LCDNonBlocking.c	}
00413e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004140   f007
004142   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004144   f006
004146   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004148   f005
00414a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00414c   f004
00414e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004150   f003
004152   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004154   f002
004156   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004158   f001
00415a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00415c   f000
00415e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004160   ffd9
004162   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	78; TCPIP_Stack/LCDNonBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
00772c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00772e   ffe5
007730   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007732   ffd9
007734   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007736   ffe5
007738   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00773a   ffe5
00773c   0e02     movlw	0x2                	MOVLW	0x02
00773e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007740   f000
007742   0e03     movlw	0x3                	MOVLW	0x03
007744   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007746   f001
                                           ;	.line	81; TCPIP_Stack/LCDNonBlocking.c	LCD_DATA_TRIS = 0x00;
007748   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	94; TCPIP_Stack/LCDNonBlocking.c	LCD_RS_TRIS = 0;
00774a   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	95; TCPIP_Stack/LCDNonBlocking.c	LCD_RD_WR_TRIS = 0;
00774c   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	96; TCPIP_Stack/LCDNonBlocking.c	LCD_RD_WR_IO = 0;
00774e   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	97; TCPIP_Stack/LCDNonBlocking.c	LCD_RS_IO = RS;
007750   5000     movf	0, 0, 0             	MOVF	r0x00, W
007752   0b01     andlw	0x1                	ANDLW	0x01
007754   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
007756   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
007758   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00775a   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
00775c   0bfb     andlw	0xfb               	ANDLW	0xfb
00775e   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
007760   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	124; TCPIP_Stack/LCDNonBlocking.c	LCD_DATA_IO = Data;
007762   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
007764   ff8d
007766   0000     nop                      	nop 
007768   0000     nop                      	nop 
                                           ;	.line	139; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 1;
00776a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
00776c   0000     nop                      	nop 
00776e   0000     nop                      	nop 
007770   0000     nop                      	nop 
007772   0000     nop                      	nop 
007774   0000     nop                      	nop 
007776   0000     nop                      	nop 
007778   0000     nop                      	nop 
00777a   0000     nop                      	nop 
00777c   0000     nop                      	nop 
                                           ;	.line	149; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 0;
00777e   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
007780   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007782   f001
007784   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007786   f000
007788   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00778a   ffd9
00778c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
00778e   0000     nop                      	DB	0x00
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1842 (0x0732) bytes ( 1.41%)
                                           ;           	  921 (0x0399) words
                                           ; udata size:	  107 (0x006b) bytes ( 2.79%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _StackInit
                                           	global _StackTask
                                           	global _StackApplications
                                           	global _remoteNode
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _GenerateRandomDWORD
                                           	extern _MACInit
                                           	extern _MACIsLinked
                                           	extern _MACGetHeader
                                           	extern _IPGetHeader
                                           	extern _ARPInit
                                           	extern _ARPProcess
                                           	extern _UDPInit
                                           	extern _UDPTask
                                           	extern _UDPProcess
                                           	extern _UDPDiscard
                                           	extern _DHCPInit
                                           	extern _DHCPTask
                                           	extern _DHCPDisable
                                           	extern _DHCPIsBound
                                           	extern _ICMPProcess
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _StackTask_bLastLinkState_2_2	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           
                                           udata_StackTsk_0	udata
                                           _smStack	res	1
                                           
                                           udata_StackTsk_1	udata
                                           _StackTask_tempLocalIP_1_1	res	4
                                           
                                           udata_StackTsk_2	udata
                                           _remoteNode	res	10
                                           
                                           udata_StackTsk_3	udata
                                           _StackTask_cFrameType_1_1	res	1
                                           
                                           udata_StackTsk_4	udata
                                           _StackTask_cIPFrameType_1_1	res	1
                                           
                                           udata_StackTsk_5	udata
                                           _StackTask_dataCount_1_1	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_StackTsk__StackApplications	code
                                           _StackApplications:
                                           ;	.line	378; TCPIP_Stack/StackTsk.c	void StackApplications(void)
00819a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00819c   ffe5
00819e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0081a0   ffd9
                                           ;	.line	435; TCPIP_Stack/StackTsk.c	}
0081a2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0081a4   ffd9
0081a6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackTask	code
                                           _StackTask:
                                           ;	.line	209; TCPIP_Stack/StackTsk.c	void StackTask(void)
001bca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001bcc   ffe5
001bce   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001bd0   ffd9
001bd2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001bd4   ffe5
001bd6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001bd8   ffe5
001bda   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001bdc   ffe5
001bde   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001be0   ffe5
001be2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001be4   ffe5
001be6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001be8   ffe5
001bea   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001bec   ffe5
001bee   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001bf0   ffe5
001bf2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001bf4   ffe5
001bf6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001bf8   ffe5
001bfa   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001bfc   ffe5
001bfe   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001c00   ffe5
001c02   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001c04   ffe5
001c06   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001c08   ffe5
001c0a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	229; TCPIP_Stack/StackTsk.c	if(AppConfig.Flags.bIsDHCPEnabled)
001c0c   ad2c     btfss	0x2c, 0x6, 0x1     	BTFSS	(_AppConfig + 44), 6, B
001c0e   d047     bra	0x1c9e               	BRA	_00119_DS_
                                           ;	.line	234; TCPIP_Stack/StackTsk.c	bCurrentLinkState = MACIsLinked();
001c10   ec5b     call	0x7cb6, 0           	CALL	_MACIsLinked
001c12   f03e
001c14   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	235; TCPIP_Stack/StackTsk.c	if(bCurrentLinkState != bLastLinkState)
001c16   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c18   0108     movlb	0x8                	BANKSEL	_StackTask_bLastLinkState_2_2
001c1a   1982     xorwf	0x82, 0, 0x1       	XORWF	_StackTask_bLastLinkState_2_2, W, B
001c1c   e101     bnz	0x1c20               	BNZ	_00157_DS_
001c1e   d033     bra	0x1c86               	BRA	_00115_DS_
                                           _00157_DS_:
                                           ;	.line	237; TCPIP_Stack/StackTsk.c	bLastLinkState = bCurrentLinkState;
001c20   c000     movff	0, 0x882           	MOVFF	r0x00, _StackTask_bLastLinkState_2_2
001c22   f882
                                           ;	.line	238; TCPIP_Stack/StackTsk.c	if(!bCurrentLinkState) //we lost the MAC link
001c24   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c26   e12f     bnz	0x1c86               	BNZ	_00115_DS_
                                           ;	.line	240; TCPIP_Stack/StackTsk.c	AppConfig.MyIPAddr.Val = AppConfig.DefaultIPAddr.Val;
001c28   ce14     movff	0xe14, 0           	MOVFF	(_AppConfig + 20), r0x00
001c2a   f000
001c2c   ce15     movff	0xe15, 0x1         	MOVFF	(_AppConfig + 21), r0x01
001c2e   f001
001c30   ce16     movff	0xe16, 0x2         	MOVFF	(_AppConfig + 22), r0x02
001c32   f002
001c34   ce17     movff	0xe17, 0x3         	MOVFF	(_AppConfig + 23), r0x03
001c36   f003
001c38   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c3a   010e     movlb	0xe                	BANKSEL	_AppConfig
001c3c   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
001c3e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c40   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
001c42   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
001c44   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c46   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
001c48   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
001c4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c4c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
001c4e   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
                                           ;	.line	241; TCPIP_Stack/StackTsk.c	AppConfig.MyMask.Val = AppConfig.DefaultMask.Val;
001c50   ce18     movff	0xe18, 0           	MOVFF	(_AppConfig + 24), r0x00
001c52   f000
001c54   ce19     movff	0xe19, 0x1         	MOVFF	(_AppConfig + 25), r0x01
001c56   f001
001c58   ce1a     movff	0xe1a, 0x2         	MOVFF	(_AppConfig + 26), r0x02
001c5a   f002
001c5c   ce1b     movff	0xe1b, 0x3         	MOVFF	(_AppConfig + 27), r0x03
001c5e   f003
001c60   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c62   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
001c64   6f04     movwf	0x4, 0x1           	MOVWF	(_AppConfig + 4), B
001c66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c68   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
001c6a   6f05     movwf	0x5, 0x1           	MOVWF	(_AppConfig + 5), B
001c6c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c6e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
001c70   6f06     movwf	0x6, 0x1           	MOVWF	(_AppConfig + 6), B
001c72   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c74   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
001c76   6f07     movwf	0x7, 0x1           	MOVWF	(_AppConfig + 7), B
001c78   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	242; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
001c7a   8f2c     bsf	0x2c, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	243; TCPIP_Stack/StackTsk.c	DHCPInit(0);
001c7c   0e00     movlw	0                  	MOVLW	0x00
001c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c80   ec33     call	0x7266, 0           	CALL	_DHCPInit
001c82   f039
001c84   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00115_DS_:
                                           ;	.line	251; TCPIP_Stack/StackTsk.c	DHCPTask();
001c86   ec83     call	0x706, 0            	CALL	_DHCPTask
001c88   f003
                                           ;	.line	253; TCPIP_Stack/StackTsk.c	if(DHCPIsBound(0))
001c8a   0e00     movlw	0                  	MOVLW	0x00
001c8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8e   ec19     call	0x8032, 0           	CALL	_DHCPIsBound
001c90   f040
001c92   6e00     movwf	0, 0               	MOVWF	r0x00
001c94   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001c96   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c98   e002     bz	0x1c9e                	BZ	_00119_DS_
001c9a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	254; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = FALSE;
001c9c   9f2c     bcf	0x2c, 0x7, 0x1       	BCF	(_AppConfig + 44), 7, B
                                           _00119_DS_:
                                           ;	.line	270; TCPIP_Stack/StackTsk.c	UDPTask();
001c9e   ecb1     call	0x8162, 0           	CALL	_UDPTask
001ca0   f040
                                           _00138_DS_:
                                           ;	.line	285; TCPIP_Stack/StackTsk.c	UDPDiscard();
001ca2   ecac     call	0x7f58, 0           	CALL	_UDPDiscard
001ca4   f03f
                                           ;	.line	290; TCPIP_Stack/StackTsk.c	if(!MACGetHeader(&remoteNode.MACAddr, &cFrameType))
001ca6   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode + 4)
001ca8   6e01     movwf	0x1, 0             	MOVWF	r0x01
001caa   0ef0     movlw	0xf0               	MOVLW	LOW(_remoteNode + 4)
001cac   6e00     movwf	0, 0               	MOVWF	r0x00
001cae   0e80     movlw	0x80               	MOVLW	0x80
001cb0   6e02     movwf	0x2, 0             	MOVWF	r0x02
001cb2   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_cFrameType_1_1)
001cb4   6e04     movwf	0x4, 0             	MOVWF	r0x04
001cb6   0eb5     movlw	0xb5               	MOVLW	LOW(_StackTask_cFrameType_1_1)
001cb8   6e03     movwf	0x3, 0             	MOVWF	r0x03
001cba   0e80     movlw	0x80               	MOVLW	0x80
001cbc   6e05     movwf	0x5, 0             	MOVWF	r0x05
001cbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001cc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cc2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cc6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001cc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ccc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cd2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cd6   ecb0     call	0x3960, 0           	CALL	_MACGetHeader
001cd8   f01c
001cda   6e00     movwf	0, 0               	MOVWF	r0x00
001cdc   0e06     movlw	0x6                	MOVLW	0x06
001cde   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001ce0   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ce2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001ce4   d0ea     bra	0x1eba               	BRA	_00140_DS_
                                           ;	.line	294; TCPIP_Stack/StackTsk.c	switch(cFrameType)
001ce6   cab5     movff	0xab5, 0           	MOVFF	_StackTask_cFrameType_1_1, r0x00
001ce8   f000
001cea   6a01     clrf	0x1, 0              	CLRF	r0x01
001cec   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cee   e102     bnz	0x1cf4               	BNZ	_00159_DS_
001cf0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cf2   e009     bz	0x1d06                	BZ	_00123_DS_
                                           _00159_DS_:
001cf4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cf6   0a06     xorlw	0x6                	XORLW	0x06
001cf8   e102     bnz	0x1cfe               	BNZ	_00160_DS_
001cfa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cfc   e001     bz	0x1d00                	BZ	_00161_DS_
                                           _00160_DS_:
001cfe   d7d1     bra	0x1ca2               	BRA	_00138_DS_
                                           _00161_DS_:
                                           ;	.line	298; TCPIP_Stack/StackTsk.c	ARPProcess();
001d00   ecf9     call	0x2df2, 0           	CALL	_ARPProcess
001d02   f016
                                           ;	.line	299; TCPIP_Stack/StackTsk.c	break;
001d04   d7ce     bra	0x1ca2               	BRA	_00138_DS_
                                           _00123_DS_:
                                           ;	.line	303; TCPIP_Stack/StackTsk.c	if(!IPGetHeader(&tempLocalIP, &remoteNode, &cIPFrameType, &dataCount))
001d06   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_tempLocalIP_1_1)
001d08   6e01     movwf	0x1, 0             	MOVWF	r0x01
001d0a   0e40     movlw	0x40               	MOVLW	LOW(_StackTask_tempLocalIP_1_1)
001d0c   6e00     movwf	0, 0               	MOVWF	r0x00
001d0e   0e80     movlw	0x80               	MOVLW	0x80
001d10   6e02     movwf	0x2, 0             	MOVWF	r0x02
001d12   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode)
001d14   6e04     movwf	0x4, 0             	MOVWF	r0x04
001d16   0eec     movlw	0xec               	MOVLW	LOW(_remoteNode)
001d18   6e03     movwf	0x3, 0             	MOVWF	r0x03
001d1a   0e80     movlw	0x80               	MOVLW	0x80
001d1c   6e05     movwf	0x5, 0             	MOVWF	r0x05
001d1e   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_cIPFrameType_1_1)
001d20   6e07     movwf	0x7, 0             	MOVWF	r0x07
001d22   0eb6     movlw	0xb6               	MOVLW	LOW(_StackTask_cIPFrameType_1_1)
001d24   6e06     movwf	0x6, 0             	MOVWF	r0x06
001d26   0e80     movlw	0x80               	MOVLW	0x80
001d28   6e08     movwf	0x8, 0             	MOVWF	r0x08
001d2a   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_dataCount_1_1)
001d2c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001d2e   0e91     movlw	0x91               	MOVLW	LOW(_StackTask_dataCount_1_1)
001d30   6e09     movwf	0x9, 0             	MOVWF	r0x09
001d32   0e80     movlw	0x80               	MOVLW	0x80
001d34   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001d36   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001d38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d3a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001d3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d3e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001d40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d42   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001d44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d46   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001d48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d4a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d4e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001d54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d62   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d66   ec6a     call	0x32d4, 0           	CALL	_IPGetHeader
001d68   f019
001d6a   6e00     movwf	0, 0               	MOVWF	r0x00
001d6c   0e0c     movlw	0xc                	MOVLW	0x0c
001d6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001d70   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d72   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001d74   d796     bra	0x1ca2               	BRA	_00138_DS_
                                           ;	.line	307; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_ICMP)
001d76   cab6     movff	0xab6, 0           	MOVFF	_StackTask_cIPFrameType_1_1, r0x00
001d78   f000
001d7a   6a01     clrf	0x1, 0              	CLRF	r0x01
001d7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d7e   0a01     xorlw	0x1                	XORLW	0x01
001d80   e102     bnz	0x1d86               	BNZ	_00162_DS_
001d82   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d84   e001     bz	0x1d88                	BZ	_00163_DS_
                                           _00162_DS_:
001d86   d06d     bra	0x1e62               	BRA	_00131_DS_
                                           _00163_DS_:
                                           ;	.line	328; TCPIP_Stack/StackTsk.c	if( (tempLocalIP.Val == AppConfig.MyIPAddr.Val) ||
001d88   ca40     movff	0xa40, 0x2         	MOVFF	_StackTask_tempLocalIP_1_1, r0x02
001d8a   f002
001d8c   ca41     movff	0xa41, 0x3         	MOVFF	(_StackTask_tempLocalIP_1_1 + 1), r0x03
001d8e   f003
001d90   ca42     movff	0xa42, 0x4         	MOVFF	(_StackTask_tempLocalIP_1_1 + 2), r0x04
001d92   f004
001d94   ca43     movff	0xa43, 0x5         	MOVFF	(_StackTask_tempLocalIP_1_1 + 3), r0x05
001d96   f005
001d98   ce00     movff	0xe00, 0x6         	MOVFF	_AppConfig, r0x06
001d9a   f006
001d9c   ce01     movff	0xe01, 0x7         	MOVFF	(_AppConfig + 1), r0x07
001d9e   f007
001da0   ce02     movff	0xe02, 0x8         	MOVFF	(_AppConfig + 2), r0x08
001da2   f008
001da4   ce03     movff	0xe03, 0x9         	MOVFF	(_AppConfig + 3), r0x09
001da6   f009
001da8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001daa   1806     xorwf	0x6, 0, 0          	XORWF	r0x06, W
001dac   e10a     bnz	0x1dc2               	BNZ	_00165_DS_
001dae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001db0   1807     xorwf	0x7, 0, 0          	XORWF	r0x07, W
001db2   e107     bnz	0x1dc2               	BNZ	_00165_DS_
001db4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001db6   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001db8   e104     bnz	0x1dc2               	BNZ	_00165_DS_
001dba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001dbc   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001dbe   e101     bnz	0x1dc2               	BNZ	_00165_DS_
001dc0   d039     bra	0x1e34               	BRA	_00126_DS_
                                           _00165_DS_:
                                           ;	.line	329; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == 0xFFFFFFFF) ||
001dc2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001dc4   0aff     xorlw	0xff               	XORLW	0xff
001dc6   e109     bnz	0x1dda               	BNZ	_00167_DS_
001dc8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dca   0aff     xorlw	0xff               	XORLW	0xff
001dcc   e106     bnz	0x1dda               	BNZ	_00167_DS_
001dce   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001dd0   0aff     xorlw	0xff               	XORLW	0xff
001dd2   e103     bnz	0x1dda               	BNZ	_00167_DS_
001dd4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001dd6   0aff     xorlw	0xff               	XORLW	0xff
001dd8   e02d     bz	0x1e34                	BZ	_00126_DS_
                                           _00167_DS_:
001dda   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	330; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == ((AppConfig.MyIPAddr.Val & AppConfig.MyMask.Val) | ~AppConfig.MyMask.Val)))
001ddc   5104     movf	0x4, 0, 0x1         	MOVF	(_AppConfig + 4), W, B
001dde   1606     andwf	0x6, 0x1, 0        	ANDWF	r0x06, F
001de0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
001de2   5105     movf	0x5, 0, 0x1         	MOVF	(_AppConfig + 5), W, B
001de4   1607     andwf	0x7, 0x1, 0        	ANDWF	r0x07, F
001de6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
001de8   5106     movf	0x6, 0, 0x1         	MOVF	(_AppConfig + 6), W, B
001dea   1608     andwf	0x8, 0x1, 0        	ANDWF	r0x08, F
001dec   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
001dee   5107     movf	0x7, 0, 0x1         	MOVF	(_AppConfig + 7), W, B
001df0   1609     andwf	0x9, 0x1, 0        	ANDWF	r0x09, F
001df2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
001df4   1d04     comf	0x4, 0, 0x1         	COMF	(_AppConfig + 4), W, B
001df6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001df8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
001dfa   1d05     comf	0x5, 0, 0x1         	COMF	(_AppConfig + 5), W, B
001dfc   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001dfe   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
001e00   1d06     comf	0x6, 0, 0x1         	COMF	(_AppConfig + 6), W, B
001e02   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001e04   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
001e06   1d07     comf	0x7, 0, 0x1         	COMF	(_AppConfig + 7), W, B
001e08   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001e0a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001e0c   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
001e0e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001e10   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
001e12   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001e14   1208     iorwf	0x8, 0x1, 0        	IORWF	r0x08, F
001e16   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001e18   1209     iorwf	0x9, 0x1, 0        	IORWF	r0x09, F
001e1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e1c   1806     xorwf	0x6, 0, 0          	XORWF	r0x06, W
001e1e   e109     bnz	0x1e32               	BNZ	_00170_DS_
001e20   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e22   1807     xorwf	0x7, 0, 0          	XORWF	r0x07, W
001e24   e106     bnz	0x1e32               	BNZ	_00170_DS_
001e26   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e28   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001e2a   e103     bnz	0x1e32               	BNZ	_00170_DS_
001e2c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e2e   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001e30   e001     bz	0x1e34                	BZ	_00126_DS_
                                           _00170_DS_:
001e32   d737     bra	0x1ca2               	BRA	_00138_DS_
                                           _00126_DS_:
                                           ;	.line	332; TCPIP_Stack/StackTsk.c	ICMPProcess(&remoteNode, dataCount);
001e34   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode)
001e36   6e03     movwf	0x3, 0             	MOVWF	r0x03
001e38   0eec     movlw	0xec               	MOVLW	LOW(_remoteNode)
001e3a   6e02     movwf	0x2, 0             	MOVWF	r0x02
001e3c   0e80     movlw	0x80               	MOVLW	0x80
001e3e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e40   010a     movlb	0xa                	BANKSEL	(_StackTask_dataCount_1_1 + 1)
001e42   5192     movf	0x92, 0, 0x1        	MOVF	(_StackTask_dataCount_1_1 + 1), W, B
001e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e46   010a     movlb	0xa                	BANKSEL	_StackTask_dataCount_1_1
001e48   5191     movf	0x91, 0, 0x1        	MOVF	_StackTask_dataCount_1_1, W, B
001e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e4c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e50   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e58   ec58     call	0x48b0, 0           	CALL	_ICMPProcess
001e5a   f024
001e5c   0e05     movlw	0x5                	MOVLW	0x05
001e5e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	335; TCPIP_Stack/StackTsk.c	break;
001e60   d720     bra	0x1ca2               	BRA	_00138_DS_
                                           _00131_DS_:
                                           ;	.line	349; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_UDP)
001e62   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e64   0a11     xorlw	0x11               	XORLW	0x11
001e66   e102     bnz	0x1e6c               	BNZ	_00172_DS_
001e68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e6a   e001     bz	0x1e6e                	BZ	_00173_DS_
                                           _00172_DS_:
001e6c   d71a     bra	0x1ca2               	BRA	_00138_DS_
                                           _00173_DS_:
                                           ;	.line	353; TCPIP_Stack/StackTsk.c	if(UDPProcess(&remoteNode, &tempLocalIP, dataCount))
001e6e   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode)
001e70   6e01     movwf	0x1, 0             	MOVWF	r0x01
001e72   0eec     movlw	0xec               	MOVLW	LOW(_remoteNode)
001e74   6e00     movwf	0, 0               	MOVWF	r0x00
001e76   0e80     movlw	0x80               	MOVLW	0x80
001e78   6e02     movwf	0x2, 0             	MOVWF	r0x02
001e7a   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_tempLocalIP_1_1)
001e7c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e7e   0e40     movlw	0x40               	MOVLW	LOW(_StackTask_tempLocalIP_1_1)
001e80   6e03     movwf	0x3, 0             	MOVWF	r0x03
001e82   0e80     movlw	0x80               	MOVLW	0x80
001e84   6e05     movwf	0x5, 0             	MOVWF	r0x05
001e86   010a     movlb	0xa                	BANKSEL	(_StackTask_dataCount_1_1 + 1)
001e88   5192     movf	0x92, 0, 0x1        	MOVF	(_StackTask_dataCount_1_1 + 1), W, B
001e8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e8c   010a     movlb	0xa                	BANKSEL	_StackTask_dataCount_1_1
001e8e   5191     movf	0x91, 0, 0x1        	MOVF	_StackTask_dataCount_1_1, W, B
001e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e92   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e96   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e9a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e9e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ea0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ea2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001ea4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ea6   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ea8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eaa   eca0     call	0x2540, 0           	CALL	_UDPProcess
001eac   f012
001eae   6e00     movwf	0, 0               	MOVWF	r0x00
001eb0   0e08     movlw	0x8                	MOVLW	0x08
001eb2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001eb4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001eb6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001eb8   d6f4     bra	0x1ca2               	BRA	_00138_DS_
                                           _00140_DS_:
                                           ;	.line	359; TCPIP_Stack/StackTsk.c	}
001eba   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001ebc   f00d
001ebe   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001ec0   f00c
001ec2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001ec4   f00b
001ec6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001ec8   f00a
001eca   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001ecc   f009
001ece   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001ed0   f008
001ed2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ed4   f007
001ed6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ed8   f006
001eda   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001edc   f005
001ede   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001ee0   f004
001ee2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ee4   f003
001ee6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ee8   f002
001eea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001eec   f001
001eee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001ef0   f000
001ef2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ef4   ffd9
001ef6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackInit	code
                                           _StackInit:
                                           ;	.line	115; TCPIP_Stack/StackTsk.c	void StackInit(void)
00715a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00715c   ffe5
00715e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007160   ffd9
007162   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007164   ffe5
007166   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007168   ffe5
00716a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00716c   ffe5
00716e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007170   ffe5
007172   010a     movlb	0xa                	BANKSEL	_smStack
                                           ;	.line	117; TCPIP_Stack/StackTsk.c	smStack                     = SM_STACK_IDLE;
007174   6bb4     clrf	0xb4, 0x1           	CLRF	_smStack, B
007176   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	124; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
007178   8f2c     bsf	0x2c, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	128; TCPIP_Stack/StackTsk.c	srand(GenerateRandomDWORD());
00717a   ec8a     call	0x2b14, 0           	CALL	_GenerateRandomDWORD
00717c   f015
00717e   6e00     movwf	0, 0               	MOVWF	r0x00
007180   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
007182   f001
007184   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
007186   f002
007188   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00718a   f003
00718c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00718e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007190   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007192   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007194   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007196   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007198   5000     movf	0, 0, 0             	MOVF	r0x00, W
00719a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00719c   ecd4     call	0x7fa8, 0           	CALL	_srand
00719e   f03f
0071a0   0e04     movlw	0x4                	MOVLW	0x04
0071a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	130; TCPIP_Stack/StackTsk.c	MACInit();
0071a4   ec50     call	0x5aa0, 0           	CALL	_MACInit
0071a6   f02d
                                           ;	.line	139; TCPIP_Stack/StackTsk.c	ARPInit();
0071a8   ec3a     call	0x7e74, 0           	CALL	_ARPInit
0071aa   f03f
                                           ;	.line	142; TCPIP_Stack/StackTsk.c	UDPInit();
0071ac   eccb     call	0x7b96, 0           	CALL	_UDPInit
0071ae   f03d
                                           ;	.line	174; TCPIP_Stack/StackTsk.c	DHCPInit(0);
0071b0   0e00     movlw	0                  	MOVLW	0x00
0071b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071b4   ec33     call	0x7266, 0           	CALL	_DHCPInit
0071b6   f039
0071b8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0071ba   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	176; TCPIP_Stack/StackTsk.c	if(!AppConfig.Flags.bIsDHCPEnabled)
0071bc   bd2c     btfsc	0x2c, 0x6, 0x1     	BTFSC	(_AppConfig + 44), 6, B
0071be   d005     bra	0x71ca               	BRA	_00107_DS_
                                           ;	.line	178; TCPIP_Stack/StackTsk.c	DHCPDisable(0);  
0071c0   0e00     movlw	0                  	MOVLW	0x00
0071c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0071c4   eca5     call	0x7b4a, 0           	CALL	_DHCPDisable
0071c6   f03d
0071c8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00107_DS_:
0071ca   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0071cc   f003
0071ce   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0071d0   f002
0071d2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0071d4   f001
0071d6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0071d8   f000
0071da   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0071dc   ffd9
0071de   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  962 (0x03c2) bytes ( 0.73%)
                                           ;           	  481 (0x01e1) words
                                           ; udata size:	   19 (0x0013) bytes ( 0.49%)
                                           ; access size:	   14 (0x000e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _TickInit
                                           	global _TickGet
                                           	global _TickGetDiv256
                                           	global _TickGetDiv64K
                                           	global _TickConvertToMilliseconds
                                           	global _TickUpdate
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern __divulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _dwInternalTicks	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           udata_Tick_0	udata
                                           _vTickReading	res	6
                                           
                                           udata_Tick_1	udata
                                           _TickGetDiv256_ret_1_1	res	4
                                           
                                           udata_Tick_2	udata
                                           _TickGetDiv64K_ret_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Tick__TickUpdate	code
                                           _TickUpdate:
                                           ;	.line	356; TCPIP_Stack/Tick.c	void TickUpdate(void)
007f2e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007f30   ffe5
007f32   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007f34   ffd9
                                           ;	.line	358; TCPIP_Stack/Tick.c	if(INTCONbits.TMR0IF)
007f36   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
007f38   d00c     bra	0x7f52               	BRA	_00143_DS_
007f3a   0108     movlb	0x8                	BANKSEL	_dwInternalTicks
                                           ;	.line	361; TCPIP_Stack/Tick.c	dwInternalTicks++;
007f3c   2b83     incf	0x83, 0x1, 0x1      	INCF	_dwInternalTicks, F, B
007f3e   e302     bnc	0x7f44               	BNC	_10141_DS_
007f40   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 1)
007f42   2b84     incf	0x84, 0x1, 0x1      	INCF	(_dwInternalTicks + 1), F, B
                                           _10141_DS_:
007f44   e302     bnc	0x7f4a               	BNC	_20142_DS_
007f46   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 2)
007f48   2b85     incf	0x85, 0x1, 0x1      	INCF	(_dwInternalTicks + 2), F, B
                                           _20142_DS_:
007f4a   e302     bnc	0x7f50               	BNC	_30143_DS_
007f4c   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 3)
007f4e   2b86     incf	0x86, 0x1, 0x1      	INCF	(_dwInternalTicks + 3), F, B
                                           _30143_DS_:
                                           ;	.line	364; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;
007f50   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00143_DS_:
007f52   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007f54   ffd9
007f56   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickConvertToMilliseconds	code
                                           _TickConvertToMilliseconds:
                                           ;	.line	333; TCPIP_Stack/Tick.c	DWORD TickConvertToMilliseconds(DWORD dwTickValue)
006c20   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006c22   ffe5
006c24   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006c26   ffd9
006c28   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006c2a   ffe5
006c2c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006c2e   ffe5
006c30   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006c32   ffe5
006c34   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006c36   ffe5
006c38   0e02     movlw	0x2                	MOVLW	0x02
006c3a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006c3c   f000
006c3e   0e03     movlw	0x3                	MOVLW	0x03
006c40   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006c42   f001
006c44   0e04     movlw	0x4                	MOVLW	0x04
006c46   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006c48   f002
006c4a   0e05     movlw	0x5                	MOVLW	0x05
006c4c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006c4e   f003
                                           ;	.line	335; TCPIP_Stack/Tick.c	return (dwTickValue+(TICKS_PER_SECOND/2000ul))/((DWORD)(TICKS_PER_SECOND/1000ul));
006c50   0e14     movlw	0x14               	MOVLW	0x14
006c52   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006c54   0e00     movlw	0                  	MOVLW	0x00
006c56   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006c58   0e00     movlw	0                  	MOVLW	0x00
006c5a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
006c5c   0e00     movlw	0                  	MOVLW	0x00
006c5e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
006c60   0e00     movlw	0                  	MOVLW	0x00
006c62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c64   0e00     movlw	0                  	MOVLW	0x00
006c66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c68   0e00     movlw	0                  	MOVLW	0x00
006c6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c6c   0e28     movlw	0x28               	MOVLW	0x28
006c6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c70   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006c76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c78   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006c7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
006c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c80   ecc3     call	0x5986, 0           	CALL	__divulong
006c82   f02c
006c84   6e00     movwf	0, 0               	MOVWF	r0x00
006c86   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
006c88   f001
006c8a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
006c8c   f002
006c8e   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
006c90   f003
006c92   0e08     movlw	0x8                	MOVLW	0x08
006c94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006c96   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
006c98   ffe9
006c9a   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
006c9c   fff4
006c9e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006ca0   fff3
006ca2   5000     movf	0, 0, 0             	MOVF	r0x00, W
006ca4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006ca6   f003
006ca8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006caa   f002
006cac   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006cae   f001
006cb0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006cb2   f000
006cb4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006cb6   ffd9
006cb8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv64K	code
                                           _TickGetDiv64K:
                                           ;	.line	292; TCPIP_Stack/Tick.c	DWORD TickGetDiv64K(void)
007d3c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007d3e   ffe5
007d40   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007d42   ffd9
                                           ;	.line	296; TCPIP_Stack/Tick.c	GetTickCopy();
007d44   ec16     call	0x7c2c, 0           	CALL	_GetTickCopy
007d46   f03e
007d48   010a     movlb	0xa                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	297; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[2];	// Note: This copy must be done one 
007d4a   5118     movf	0x18, 0, 0x1        	MOVF	(_vTickReading + 2), W, B
007d4c   010a     movlb	0xa                	BANKSEL	_TickGetDiv64K_ret_1_1
007d4e   6f48     movwf	0x48, 0x1          	MOVWF	_TickGetDiv64K_ret_1_1, B
007d50   010a     movlb	0xa                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	298; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[3];	// byte at a time to prevent misaligned 
007d52   5119     movf	0x19, 0, 0x1        	MOVF	(_vTickReading + 3), W, B
007d54   010a     movlb	0xa                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 1)
007d56   6f49     movwf	0x49, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 1), B
007d58   010a     movlb	0xa                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	299; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[4];	// memory reads, which will reset the PIC.
007d5a   511a     movf	0x1a, 0, 0x1        	MOVF	(_vTickReading + 4), W, B
007d5c   010a     movlb	0xa                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 2)
007d5e   6f4a     movwf	0x4a, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 2), B
007d60   010a     movlb	0xa                	BANKSEL	(_vTickReading + 5)
                                           ;	.line	300; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[5];
007d62   511b     movf	0x1b, 0, 0x1        	MOVF	(_vTickReading + 5), W, B
007d64   010a     movlb	0xa                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 3)
007d66   6f4b     movwf	0x4b, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 3), B
                                           ;	.line	302; TCPIP_Stack/Tick.c	return ret.Val;
007d68   ca4b     movff	0xa4b, 0xfe9       	MOVFF	(_TickGetDiv64K_ret_1_1 + 3), FSR0L
007d6a   ffe9
007d6c   ca4a     movff	0xa4a, 0xff4       	MOVFF	(_TickGetDiv64K_ret_1_1 + 2), PRODH
007d6e   fff4
007d70   ca49     movff	0xa49, 0xff3       	MOVFF	(_TickGetDiv64K_ret_1_1 + 1), PRODL
007d72   fff3
007d74   010a     movlb	0xa                	BANKSEL	_TickGetDiv64K_ret_1_1
007d76   5148     movf	0x48, 0, 0x1        	MOVF	_TickGetDiv64K_ret_1_1, W, B
007d78   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007d7a   ffd9
007d7c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv256	code
                                           _TickGetDiv256:
                                           ;	.line	255; TCPIP_Stack/Tick.c	DWORD TickGetDiv256(void)
007d7e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007d80   ffe5
007d82   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007d84   ffd9
                                           ;	.line	259; TCPIP_Stack/Tick.c	GetTickCopy();
007d86   ec16     call	0x7c2c, 0           	CALL	_GetTickCopy
007d88   f03e
007d8a   010a     movlb	0xa                	BANKSEL	(_vTickReading + 1)
                                           ;	.line	260; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[1];	// Note: This copy must be done one 
007d8c   5117     movf	0x17, 0, 0x1        	MOVF	(_vTickReading + 1), W, B
007d8e   010a     movlb	0xa                	BANKSEL	_TickGetDiv256_ret_1_1
007d90   6f44     movwf	0x44, 0x1          	MOVWF	_TickGetDiv256_ret_1_1, B
007d92   010a     movlb	0xa                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	261; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[2];	// byte at a time to prevent misaligned 
007d94   5118     movf	0x18, 0, 0x1        	MOVF	(_vTickReading + 2), W, B
007d96   010a     movlb	0xa                	BANKSEL	(_TickGetDiv256_ret_1_1 + 1)
007d98   6f45     movwf	0x45, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 1), B
007d9a   010a     movlb	0xa                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	262; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[3];	// memory reads, which will reset the PIC.
007d9c   5119     movf	0x19, 0, 0x1        	MOVF	(_vTickReading + 3), W, B
007d9e   010a     movlb	0xa                	BANKSEL	(_TickGetDiv256_ret_1_1 + 2)
007da0   6f46     movwf	0x46, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 2), B
007da2   010a     movlb	0xa                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	263; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[4];
007da4   511a     movf	0x1a, 0, 0x1        	MOVF	(_vTickReading + 4), W, B
007da6   010a     movlb	0xa                	BANKSEL	(_TickGetDiv256_ret_1_1 + 3)
007da8   6f47     movwf	0x47, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 3), B
                                           ;	.line	265; TCPIP_Stack/Tick.c	return ret.Val;
007daa   ca47     movff	0xa47, 0xfe9       	MOVFF	(_TickGetDiv256_ret_1_1 + 3), FSR0L
007dac   ffe9
007dae   ca46     movff	0xa46, 0xff4       	MOVFF	(_TickGetDiv256_ret_1_1 + 2), PRODH
007db0   fff4
007db2   ca45     movff	0xa45, 0xff3       	MOVFF	(_TickGetDiv256_ret_1_1 + 1), PRODL
007db4   fff3
007db6   010a     movlb	0xa                	BANKSEL	_TickGetDiv256_ret_1_1
007db8   5144     movf	0x44, 0, 0x1        	MOVF	_TickGetDiv256_ret_1_1, W, B
007dba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007dbc   ffd9
007dbe   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGet	code
                                           _TickGet:
                                           ;	.line	225; TCPIP_Stack/Tick.c	DWORD TickGet(void)
007fce   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007fd0   ffe5
007fd2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007fd4   ffd9
                                           ;	.line	227; TCPIP_Stack/Tick.c	GetTickCopy();
007fd6   ec16     call	0x7c2c, 0           	CALL	_GetTickCopy
007fd8   f03e
                                           ;	.line	228; TCPIP_Stack/Tick.c	return *((DWORD*)&vTickReading[0]);
007fda   ca19     movff	0xa19, 0xfe9       	MOVFF	(_vTickReading + 3), FSR0L
007fdc   ffe9
007fde   ca18     movff	0xa18, 0xff4       	MOVFF	(_vTickReading + 2), PRODH
007fe0   fff4
007fe2   ca17     movff	0xa17, 0xff3       	MOVFF	(_vTickReading + 1), PRODL
007fe4   fff3
007fe6   010a     movlb	0xa                	BANKSEL	_vTickReading
007fe8   5116     movf	0x16, 0, 0x1        	MOVF	_vTickReading, W, B
007fea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007fec   ffd9
007fee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__GetTickCopy	code
                                           _GetTickCopy:
                                           ;	.line	157; TCPIP_Stack/Tick.c	static void GetTickCopy(void)
007c2c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007c2e   ffe5
007c30   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007c32   ffd9
                                           _00113_DS_:
                                           ;	.line	164; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
007c34   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
007c36   0000     nop                      	nop 
                                           ;	.line	166; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 0;		// Disable interrupt
007c38   9af2     bcf	0xf2, 0x5, 0         	BCF	_INTCONbits, 5
                                           ;	.line	167; TCPIP_Stack/Tick.c	vTickReading[0] = TMR0L;
007c3a   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
007c3c   010a     movlb	0xa                	BANKSEL	_vTickReading
007c3e   6f16     movwf	0x16, 0x1          	MOVWF	_vTickReading, B
                                           ;	.line	168; TCPIP_Stack/Tick.c	vTickReading[1] = TMR0H;
007c40   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
007c42   010a     movlb	0xa                	BANKSEL	(_vTickReading + 1)
007c44   6f17     movwf	0x17, 0x1          	MOVWF	(_vTickReading + 1), B
007c46   0108     movlb	0x8                	BANKSEL	_dwInternalTicks
                                           ;	.line	169; TCPIP_Stack/Tick.c	*((DWORD*)&vTickReading[2]) = dwInternalTicks;
007c48   5183     movf	0x83, 0, 0x1        	MOVF	_dwInternalTicks, W, B
007c4a   010a     movlb	0xa                	BANKSEL	(_vTickReading + 2)
007c4c   6f18     movwf	0x18, 0x1          	MOVWF	(_vTickReading + 2), B
007c4e   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 1)
007c50   5184     movf	0x84, 0, 0x1        	MOVF	(_dwInternalTicks + 1), W, B
007c52   010a     movlb	0xa                	BANKSEL	(_vTickReading + 3)
007c54   6f19     movwf	0x19, 0x1          	MOVWF	(_vTickReading + 3), B
007c56   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 2)
007c58   5185     movf	0x85, 0, 0x1        	MOVF	(_dwInternalTicks + 2), W, B
007c5a   010a     movlb	0xa                	BANKSEL	(_vTickReading + 4)
007c5c   6f1a     movwf	0x1a, 0x1          	MOVWF	(_vTickReading + 4), B
007c5e   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 3)
007c60   5186     movf	0x86, 0, 0x1        	MOVF	(_dwInternalTicks + 3), W, B
007c62   010a     movlb	0xa                	BANKSEL	(_vTickReading + 5)
007c64   6f1b     movwf	0x1b, 0x1          	MOVWF	(_vTickReading + 5), B
                                           ;	.line	170; TCPIP_Stack/Tick.c	} while(INTCONbits.TMR0IF);
007c66   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
007c68   d7e5     bra	0x7c34               	BRA	_00113_DS_
                                           ;	.line	171; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;			// Enable interrupt
007c6a   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
007c6c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007c6e   ffd9
007c70   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickInit	code
                                           _TickInit:
                                           ;	.line	97; TCPIP_Stack/Tick.c	void TickInit(void)
0080e8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0080ea   ffe5
0080ec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0080ee   ffd9
                                           ;	.line	102; TCPIP_Stack/Tick.c	TMR0H = 0;
0080f0   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	103; TCPIP_Stack/Tick.c	TMR0L = 0;
0080f2   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	106; TCPIP_Stack/Tick.c	INTCON2bits.TMR0IP = 0;		// Low priority
0080f4   94f1     bcf	0xf1, 0x2, 0         	BCF	_INTCON2bits, 2
                                           ;	.line	107; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;          //reset overflow indicator
0080f6   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	108; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
0080f8   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	111; TCPIP_Stack/Tick.c	T0CON = 0x87;
0080fa   0e87     movlw	0x87               	MOVLW	0x87
0080fc   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
0080fe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008100   ffd9
008102   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  460 (0x01cc) bytes ( 0.35%)
                                           ;           	  230 (0x00e6) words
                                           ; udata size:	   14 (0x000e) bytes ( 0.36%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _UDPInit
                                           	global _UDPTask
                                           	global _UDPOpen
                                           	global _UDPClose
                                           	global _UDPSetTxBuffer
                                           	global _UDPSetRxBuffer
                                           	global _UDPIsPutReady
                                           	global _UDPPut
                                           	global _UDPPutArray
                                           	global _UDPPutString
                                           	global _UDPFlush
                                           	global _UDPIsGetReady
                                           	global _UDPGet
                                           	global _UDPGetArray
                                           	global _UDPDiscard
                                           	global _UDPProcess
                                           	global _UDPSocketInfo
                                           	global _activeUDPSocket
                                           	global _UDPTxCount
                                           	global _UDPRxCount
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _strlen
                                           	extern _memcpy
                                           	extern _memset
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _CalcIPBufferChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACSetReadPtr
                                           	extern _MACGet
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACIsTxReady
                                           	extern _MACPut
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           	extern _IPSetRxBuffer
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _LastPutSocket	db	0xff
                                           _SocketWithRxData	db	0xff
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           
                                           udata_UDP_0	udata
                                           _wPutOffset	res	2
                                           
                                           udata_UDP_1	udata
                                           _wGetOffset	res	2
                                           
                                           udata_UDP_2	udata
                                           _Flags	res	1
                                           
                                           udata_UDP_3	udata
                                           _UDPOpen_NextPort_1_1	res	2
                                           
                                           udata_UDP_4	udata
                                           _activeUDPSocket	res	1
                                           
                                           udata_UDP_5	udata
                                           _UDPSocketInfo	res	140
                                           
                                           udata_UDP_6	udata
                                           _UDPTxCount	res	2
                                           
                                           udata_UDP_7	udata
                                           _UDPFlush_wChecksum_1_1	res	2
                                           
                                           udata_UDP_8	udata
                                           _UDPFlush_h_1_1	res	8
                                           
                                           udata_UDP_9	udata
                                           _UDPFlush_pseudoHeader_2_2	res	12
                                           
                                           udata_UDP_10	udata
                                           _UDPRxCount	res	2
                                           
                                           udata_UDP_11	udata
                                           _UDPProcess_h_1_1	res	8
                                           
                                           udata_UDP_12	udata
                                           _UDPProcess_pseudoHeader_1_1	res	12
                                           
                                           udata_UDP_13	udata
                                           _UDPProcess_checksums_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_UDP__FindMatchingSocket	code
                                           _FindMatchingSocket:
                                           ;	.line	1017; TCPIP_Stack/UDP.c	static UDP_SOCKET FindMatchingSocket(UDP_HEADER *h,
001196   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001198   ffe5
00119a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00119c   ffd9
00119e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0011a0   ffe5
0011a2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0011a4   ffe5
0011a6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0011a8   ffe5
0011aa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0011ac   ffe5
0011ae   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0011b0   ffe5
0011b2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0011b4   ffe5
0011b6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0011b8   ffe5
0011ba   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0011bc   ffe5
0011be   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0011c0   ffe5
0011c2   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0011c4   ffe5
0011c6   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0011c8   ffe5
0011ca   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0011cc   ffe5
0011ce   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0011d0   ffe5
0011d2   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0011d4   ffe5
0011d6   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0011d8   ffe5
0011da   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0011dc   ffe5
0011de   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0011e0   ffe5
0011e2   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0011e4   ffe5
0011e6   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0011e8   ffe5
0011ea   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0011ec   ffe5
0011ee   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
0011f0   ffe5
0011f2   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0011f4   ffe5
0011f6   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
0011f8   ffe5
0011fa   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
0011fc   ffe5
0011fe   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
001200   ffe5
001202   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
001204   ffe5
001206   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
001208   ffe5
00120a   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
00120c   ffe5
00120e   0e02     movlw	0x2                	MOVLW	0x02
001210   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001212   f000
001214   0e03     movlw	0x3                	MOVLW	0x03
001216   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001218   f001
00121a   0e04     movlw	0x4                	MOVLW	0x04
00121c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00121e   f002
001220   0e05     movlw	0x5                	MOVLW	0x05
001222   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001224   f003
001226   0e06     movlw	0x6                	MOVLW	0x06
001228   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00122a   f004
00122c   0e07     movlw	0x7                	MOVLW	0x07
00122e   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001230   f005
001232   0e08     movlw	0x8                	MOVLW	0x08
001234   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
001236   f006
001238   0e09     movlw	0x9                	MOVLW	0x09
00123a   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
00123c   f007
00123e   0e0a     movlw	0xa                	MOVLW	0x0a
001240   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
001242   f008
                                           ;	.line	1025; TCPIP_Stack/UDP.c	partialMatch = INVALID_UDP_SOCKET;
001244   0eff     movlw	0xff               	MOVLW	0xff
001246   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	1027; TCPIP_Stack/UDP.c	p = UDPSocketInfo;
001248   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00124a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00124c   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00124e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001250   0e80     movlw	0x80               	MOVLW	0x80
001252   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
001254   6a0d     clrf	0xd, 0              	CLRF	r0x0d
001256   5000     movf	0, 0, 0             	MOVF	r0x00, W
001258   0f02     addlw	0x2                	ADDLW	0x02
00125a   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00125c   0e00     movlw	0                  	MOVLW	0x00
00125e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001260   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
001262   0e00     movlw	0                  	MOVLW	0x00
001264   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001266   6e10     movwf	0x10, 0            	MOVWF	r0x10
001268   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
00126a   ffe9
00126c   c00f     movff	0xf, 0xff3         	MOVFF	r0x0f, PRODL
00126e   fff3
001270   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
001272   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
001274   f03f
001276   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001278   cff3     movff	0xff3, 0xf         	MOVFF	PRODL, r0x0f
00127a   f00f
00127c   c00a     movff	0xa, 0x10          	MOVFF	r0x0a, r0x10
00127e   f010
001280   c00b     movff	0xb, 0x11          	MOVFF	r0x0b, r0x11
001282   f011
001284   c00c     movff	0xc, 0x12          	MOVFF	r0x0c, r0x12
001286   f012
001288   6a13     clrf	0x13, 0             	CLRF	r0x13
                                           _00306_DS_:
00128a   c013     movff	0x13, 0x14         	MOVFF	r0x13, r0x14
00128c   f014
00128e   6a15     clrf	0x15, 0             	CLRF	r0x15
001290   0e00     movlw	0                  	MOVLW	0x00
001292   5c15     subwf	0x15, 0, 0         	SUBWF	r0x15, W
001294   e102     bnz	0x129a               	BNZ	_00319_DS_
001296   0e0a     movlw	0xa                	MOVLW	0x0a
001298   5c14     subwf	0x14, 0, 0         	SUBWF	r0x14, W
                                           _00319_DS_:
00129a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00129c   d0b4     bra	0x1406               	BRA	_00309_DS_
                                           ;	.line	1035; TCPIP_Stack/UDP.c	if ( p->localPort == h->DestinationPort )
00129e   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0012a0   0f0c     addlw	0xc                	ADDLW	0x0c
0012a2   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012a4   0e00     movlw	0                  	MOVLW	0x00
0012a6   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
0012a8   6e15     movwf	0x15, 0            	MOVWF	r0x15
0012aa   0e00     movlw	0                  	MOVLW	0x00
0012ac   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
0012ae   6e16     movwf	0x16, 0            	MOVWF	r0x16
0012b0   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
0012b2   ffe9
0012b4   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
0012b6   fff3
0012b8   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0012ba   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
0012bc   f03f
0012be   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012c0   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0012c2   f015
0012c4   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0012c6   180e     xorwf	0xe, 0, 0          	XORWF	r0x0e, W
0012c8   e103     bnz	0x12d0               	BNZ	_00320_DS_
0012ca   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0012cc   180f     xorwf	0xf, 0, 0          	XORWF	r0x0f, W
0012ce   e001     bz	0x12d2                	BZ	_00321_DS_
                                           _00320_DS_:
0012d0   d090     bra	0x13f2               	BRA	_00303_DS_
                                           _00321_DS_:
                                           ;	.line	1037; TCPIP_Stack/UDP.c	if(p->remotePort == h->SourcePort)
0012d2   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0012d4   0f0a     addlw	0xa                	ADDLW	0x0a
0012d6   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012d8   0e00     movlw	0                  	MOVLW	0x00
0012da   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
0012dc   6e15     movwf	0x15, 0            	MOVWF	r0x15
0012de   0e00     movlw	0                  	MOVLW	0x00
0012e0   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
0012e2   6e16     movwf	0x16, 0            	MOVWF	r0x16
0012e4   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
0012e6   ffe9
0012e8   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
0012ea   fff3
0012ec   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0012ee   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
0012f0   f03f
0012f2   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012f4   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0012f6   f015
0012f8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0012fa   ffe9
0012fc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0012fe   fff3
001300   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001302   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
001304   f03f
001306   6e16     movwf	0x16, 0            	MOVWF	r0x16
001308   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
00130a   f017
00130c   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00130e   1816     xorwf	0x16, 0, 0         	XORWF	r0x16, W
001310   e103     bnz	0x1318               	BNZ	_00322_DS_
001312   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
001314   1817     xorwf	0x17, 0, 0         	XORWF	r0x17, W
001316   e001     bz	0x131a                	BZ	_00323_DS_
                                           _00322_DS_:
001318   d06a     bra	0x13ee               	BRA	_00301_DS_
                                           _00323_DS_:
                                           ;	.line	1039; TCPIP_Stack/UDP.c	if( (p->remoteNode.IPAddr.Val == remoteNode->IPAddr.Val) ||
00131a   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
00131c   ffe9
00131e   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
001320   fff3
001322   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
001324   ece0     call	0x7dc0, 0           	CALL	__gptrget4
001326   f03e
001328   6e14     movwf	0x14, 0            	MOVWF	r0x14
00132a   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
00132c   f015
00132e   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
001330   f016
001332   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
001334   f017
001336   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001338   ffe9
00133a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00133c   fff3
00133e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001340   ece0     call	0x7dc0, 0           	CALL	__gptrget4
001342   f03e
001344   6e18     movwf	0x18, 0            	MOVWF	r0x18
001346   cff3     movff	0xff3, 0x19        	MOVFF	PRODL, r0x19
001348   f019
00134a   cff4     movff	0xff4, 0x1a        	MOVFF	PRODH, r0x1a
00134c   f01a
00134e   cfe9     movff	0xfe9, 0x1b        	MOVFF	FSR0L, r0x1b
001350   f01b
001352   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
001354   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
001356   e10a     bnz	0x136c               	BNZ	_00325_DS_
001358   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00135a   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
00135c   e107     bnz	0x136c               	BNZ	_00325_DS_
00135e   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
001360   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
001362   e104     bnz	0x136c               	BNZ	_00325_DS_
001364   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
001366   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
001368   e101     bnz	0x136c               	BNZ	_00325_DS_
00136a   d03f     bra	0x13ea               	BRA	_00296_DS_
                                           _00325_DS_:
                                           ;	.line	1040; TCPIP_Stack/UDP.c	(localIP->Val == 0xFFFFFFFFul) || (localIP->Val == 
00136c   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00136e   ffe9
001370   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001372   fff3
001374   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001376   ece0     call	0x7dc0, 0           	CALL	__gptrget4
001378   f03e
00137a   6e14     movwf	0x14, 0            	MOVWF	r0x14
00137c   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
00137e   f015
001380   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
001382   f016
001384   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
001386   f017
001388   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00138a   0aff     xorlw	0xff               	XORLW	0xff
00138c   e109     bnz	0x13a0               	BNZ	_00327_DS_
00138e   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
001390   0aff     xorlw	0xff               	XORLW	0xff
001392   e106     bnz	0x13a0               	BNZ	_00327_DS_
001394   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
001396   0aff     xorlw	0xff               	XORLW	0xff
001398   e103     bnz	0x13a0               	BNZ	_00327_DS_
00139a   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
00139c   0aff     xorlw	0xff               	XORLW	0xff
00139e   e025     bz	0x13ea                	BZ	_00296_DS_
                                           _00327_DS_:
0013a0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	1041; TCPIP_Stack/UDP.c	(AppConfig.MyIPAddr.Val | (~AppConfig.MyMask.Val))))
0013a2   1d04     comf	0x4, 0, 0x1         	COMF	(_AppConfig + 4), W, B
0013a4   6e18     movwf	0x18, 0            	MOVWF	r0x18
0013a6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
0013a8   1d05     comf	0x5, 0, 0x1         	COMF	(_AppConfig + 5), W, B
0013aa   6e19     movwf	0x19, 0            	MOVWF	r0x19
0013ac   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
0013ae   1d06     comf	0x6, 0, 0x1         	COMF	(_AppConfig + 6), W, B
0013b0   6e1a     movwf	0x1a, 0            	MOVWF	r0x1a
0013b2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
0013b4   1d07     comf	0x7, 0, 0x1         	COMF	(_AppConfig + 7), W, B
0013b6   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
0013b8   010e     movlb	0xe                	BANKSEL	_AppConfig
0013ba   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
0013bc   1218     iorwf	0x18, 0x1, 0       	IORWF	r0x18, F
0013be   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
0013c0   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
0013c2   1219     iorwf	0x19, 0x1, 0       	IORWF	r0x19, F
0013c4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
0013c6   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
0013c8   121a     iorwf	0x1a, 0x1, 0       	IORWF	r0x1a, F
0013ca   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
0013cc   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
0013ce   121b     iorwf	0x1b, 0x1, 0       	IORWF	r0x1b, F
0013d0   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0013d2   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
0013d4   e109     bnz	0x13e8               	BNZ	_00329_DS_
0013d6   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0013d8   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
0013da   e106     bnz	0x13e8               	BNZ	_00329_DS_
0013dc   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0013de   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
0013e0   e103     bnz	0x13e8               	BNZ	_00329_DS_
0013e2   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
0013e4   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
0013e6   e001     bz	0x13ea                	BZ	_00296_DS_
                                           _00329_DS_:
0013e8   d002     bra	0x13ee               	BRA	_00301_DS_
                                           _00296_DS_:
                                           ;	.line	1043; TCPIP_Stack/UDP.c	return s;
0013ea   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0013ec   d054     bra	0x1496               	BRA	_00310_DS_
                                           _00301_DS_:
                                           ;	.line	1047; TCPIP_Stack/UDP.c	partialMatch = s;
0013ee   c013     movff	0x13, 0x9          	MOVFF	r0x13, r0x09
0013f0   f009
                                           _00303_DS_:
                                           ;	.line	1049; TCPIP_Stack/UDP.c	p++;
0013f2   0e0e     movlw	0xe                	MOVLW	0x0e
0013f4   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
0013f6   0e00     movlw	0                  	MOVLW	0x00
0013f8   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
0013fa   0e00     movlw	0                  	MOVLW	0x00
0013fc   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x12, F
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
0013fe   2a13     incf	0x13, 0x1, 0        	INCF	r0x13, F
001400   c013     movff	0x13, 0xd          	MOVFF	r0x13, r0x0d
001402   f00d
001404   d742     bra	0x128a               	BRA	_00306_DS_
                                           _00309_DS_:
                                           ;	.line	1052; TCPIP_Stack/UDP.c	if ( partialMatch != INVALID_UDP_SOCKET )
001406   c009     movff	0x9, 0x6           	MOVFF	r0x09, r0x06
001408   f006
00140a   6a07     clrf	0x7, 0              	CLRF	r0x07
00140c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00140e   0aff     xorlw	0xff               	XORLW	0xff
001410   e103     bnz	0x1418               	BNZ	_00332_DS_
001412   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001414   e101     bnz	0x1418               	BNZ	_00332_DS_
001416   d03e     bra	0x1494               	BRA	_00305_DS_
                                           ; ;multiply lit val:0x0e by variable r0x09 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00332_DS_:
                                           ;	.line	1054; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[partialMatch];
001418   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00141a   0d0e     mullw	0xe                	MULLW	0x0e
00141c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00141e   f006
001420   6a07     clrf	0x7, 0              	CLRF	r0x07
001422   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
001424   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
001426   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
001428   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
00142a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00142c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00142e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001430   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001432   0e80     movlw	0x80               	MOVLW	0x80
001434   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1057; TCPIP_Stack/UDP.c	(void*)remoteNode, sizeof(p->remoteNode) );
001436   0e00     movlw	0                  	MOVLW	0x00
001438   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143a   0e0a     movlw	0xa                	MOVLW	0x0a
00143c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001442   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001446   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001448   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00144a   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00144c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00144e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001450   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001452   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001454   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001456   ec7a     call	0x5ef4, 0           	CALL	_memcpy
001458   f02f
00145a   0e08     movlw	0x8                	MOVLW	0x08
00145c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1059; TCPIP_Stack/UDP.c	p->remotePort = h->SourcePort;
00145e   0e0a     movlw	0xa                	MOVLW	0x0a
001460   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
001462   0e00     movlw	0                  	MOVLW	0x00
001464   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
001466   0e00     movlw	0                  	MOVLW	0x00
001468   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
00146a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00146c   ffe9
00146e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001470   fff3
001472   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001474   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
001476   f03f
001478   6e00     movwf	0, 0               	MOVWF	r0x00
00147a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00147c   f001
00147e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001480   ffe5
001482   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
001484   fff4
001486   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
001488   ffe9
00148a   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
00148c   fff3
00148e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001490   ec9b     call	0x8136, 0           	CALL	__gptrput2
001492   f040
                                           _00305_DS_:
                                           ;	.line	1061; TCPIP_Stack/UDP.c	return partialMatch;
001494   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
                                           _00310_DS_:
001496   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
001498   f01b
00149a   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
00149c   f01a
00149e   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
0014a0   f019
0014a2   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
0014a4   f018
0014a6   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
0014a8   f017
0014aa   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
0014ac   f016
0014ae   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
0014b0   f015
0014b2   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0014b4   f014
0014b6   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0014b8   f013
0014ba   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0014bc   f012
0014be   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0014c0   f011
0014c2   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0014c4   f010
0014c6   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0014c8   f00f
0014ca   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0014cc   f00e
0014ce   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0014d0   f00d
0014d2   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0014d4   f00c
0014d6   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0014d8   f00b
0014da   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0014dc   f00a
0014de   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0014e0   f009
0014e2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0014e4   f008
0014e6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0014e8   f007
0014ea   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0014ec   f006
0014ee   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0014f0   f005
0014f2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0014f4   f004
0014f6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0014f8   f003
0014fa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0014fc   f002
0014fe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001500   f001
001502   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001504   f000
001506   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001508   ffd9
00150a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPProcess	code
                                           _UDPProcess:
                                           ;	.line	929; TCPIP_Stack/UDP.c	BOOL UDPProcess(NODE_INFO *remoteNode, IP_ADDR *localIP, WORD len)
002540   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002542   ffe5
002544   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002546   ffd9
002548   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00254a   ffe5
00254c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00254e   ffe5
002550   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002552   ffe5
002554   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002556   ffe5
002558   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00255a   ffe5
00255c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00255e   ffe5
002560   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002562   ffe5
002564   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002566   ffe5
002568   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00256a   ffe5
00256c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00256e   ffe5
002570   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002572   ffe5
002574   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002576   ffe5
002578   0e02     movlw	0x2                	MOVLW	0x02
00257a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00257c   f000
00257e   0e03     movlw	0x3                	MOVLW	0x03
002580   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002582   f001
002584   0e04     movlw	0x4                	MOVLW	0x04
002586   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002588   f002
00258a   0e05     movlw	0x5                	MOVLW	0x05
00258c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00258e   f003
002590   0e06     movlw	0x6                	MOVLW	0x06
002592   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002594   f004
002596   0e07     movlw	0x7                	MOVLW	0x07
002598   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00259a   f005
00259c   0e08     movlw	0x8                	MOVLW	0x08
00259e   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0025a0   f006
0025a2   0e09     movlw	0x9                	MOVLW	0x09
0025a4   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0025a6   f007
0025a8   010a     movlb	0xa                	BANKSEL	_UDPRxCount
                                           ;	.line	936; TCPIP_Stack/UDP.c	UDPRxCount = 0;
0025aa   6b9d     clrf	0x9d, 0x1           	CLRF	_UDPRxCount, B
0025ac   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
0025ae   6b9e     clrf	0x9e, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	939; TCPIP_Stack/UDP.c	MACGetArray((BYTE*)&h, sizeof(h));
0025b0   0e0a     movlw	0xa                	MOVLW	HIGH(_UDPProcess_h_1_1)
0025b2   6e09     movwf	0x9, 0             	MOVWF	r0x09
0025b4   0e08     movlw	0x8                	MOVLW	LOW(_UDPProcess_h_1_1)
0025b6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0025b8   0e80     movlw	0x80               	MOVLW	0x80
0025ba   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0025bc   0e00     movlw	0                  	MOVLW	0x00
0025be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c0   0e08     movlw	0x8                	MOVLW	0x08
0025c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0025c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0025ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025cc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0025ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025d0   ecda     call	0x63b4, 0           	CALL	_MACGetArray
0025d2   f031
0025d4   0e05     movlw	0x5                	MOVLW	0x05
0025d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025d8   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 1)
                                           ;	.line	941; TCPIP_Stack/UDP.c	h.SourcePort        = swaps(h.SourcePort);
0025da   5109     movf	0x9, 0, 0x1         	MOVF	(_UDPProcess_h_1_1 + 1), W, B
0025dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025de   010a     movlb	0xa                	BANKSEL	_UDPProcess_h_1_1
0025e0   5108     movf	0x8, 0, 0x1         	MOVF	_UDPProcess_h_1_1, W, B
0025e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e4   ec03     call	0x7a06, 0           	CALL	_swaps
0025e6   f03d
0025e8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0025ea   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0025ec   f009
0025ee   0e02     movlw	0x2                	MOVLW	0x02
0025f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025f2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0025f4   010a     movlb	0xa                	BANKSEL	_UDPProcess_h_1_1
0025f6   6f08     movwf	0x8, 0x1           	MOVWF	_UDPProcess_h_1_1, B
0025f8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0025fa   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 1)
0025fc   6f09     movwf	0x9, 0x1           	MOVWF	(_UDPProcess_h_1_1 + 1), B
0025fe   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 3)
                                           ;	.line	942; TCPIP_Stack/UDP.c	h.DestinationPort   = swaps(h.DestinationPort);
002600   510b     movf	0xb, 0, 0x1         	MOVF	(_UDPProcess_h_1_1 + 3), W, B
002602   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002604   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 2)
002606   510a     movf	0xa, 0, 0x1         	MOVF	(_UDPProcess_h_1_1 + 2), W, B
002608   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00260a   ec03     call	0x7a06, 0           	CALL	_swaps
00260c   f03d
00260e   6e08     movwf	0x8, 0             	MOVWF	r0x08
002610   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002612   f009
002614   0e02     movlw	0x2                	MOVLW	0x02
002616   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002618   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00261a   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 2)
00261c   6f0a     movwf	0xa, 0x1           	MOVWF	(_UDPProcess_h_1_1 + 2), B
00261e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002620   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 3)
002622   6f0b     movwf	0xb, 0x1           	MOVWF	(_UDPProcess_h_1_1 + 3), B
002624   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 5)
                                           ;	.line	943; TCPIP_Stack/UDP.c	h.Length            = swaps(h.Length) - sizeof(UDP_HEADER);
002626   510d     movf	0xd, 0, 0x1         	MOVF	(_UDPProcess_h_1_1 + 5), W, B
002628   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00262a   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 4)
00262c   510c     movf	0xc, 0, 0x1         	MOVF	(_UDPProcess_h_1_1 + 4), W, B
00262e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002630   ec03     call	0x7a06, 0           	CALL	_swaps
002632   f03d
002634   6e08     movwf	0x8, 0             	MOVWF	r0x08
002636   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002638   f009
00263a   0e02     movlw	0x2                	MOVLW	0x02
00263c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00263e   0ef8     movlw	0xf8               	MOVLW	0xf8
002640   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
002642   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002644   0609     decf	0x9, 0x1, 0         	DECF	r0x09, F
002646   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002648   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 4)
00264a   6f0c     movwf	0xc, 0x1           	MOVWF	(_UDPProcess_h_1_1 + 4), B
00264c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00264e   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 5)
002650   6f0d     movwf	0xd, 0x1           	MOVWF	(_UDPProcess_h_1_1 + 5), B
002652   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 6)
                                           ;	.line	946; TCPIP_Stack/UDP.c	if(h.Checksum)
002654   510e     movf	0xe, 0, 0x1         	MOVF	(_UDPProcess_h_1_1 + 6), W, B
002656   010a     movlb	0xa                	BANKSEL	(_UDPProcess_h_1_1 + 7)
002658   110f     iorwf	0xf, 0, 0x1        	IORWF	(_UDPProcess_h_1_1 + 7), W, B
00265a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00265c   d096     bra	0x278a               	BRA	_00279_DS_
                                           ;	.line	949; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val	= remoteNode->IPAddr.Val;
00265e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002660   ffe9
002662   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002664   fff3
002666   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002668   ece0     call	0x7dc0, 0           	CALL	__gptrget4
00266a   f03e
00266c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00266e   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002670   f009
002672   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
002674   f00a
002676   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
002678   f00b
00267a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00267c   0108     movlb	0x8                	BANKSEL	_UDPProcess_pseudoHeader_1_1
00267e   6fd6     movwf	0xd6, 0x1          	MOVWF	_UDPProcess_pseudoHeader_1_1, B
002680   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002682   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 1)
002684   6fd7     movwf	0xd7, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 1), B
002686   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002688   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 2)
00268a   6fd8     movwf	0xd8, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 2), B
00268c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00268e   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 3)
002690   6fd9     movwf	0xd9, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 3), B
                                           ;	.line	950; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val	= localIP->Val;
002692   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002694   ffe9
002696   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002698   fff3
00269a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00269c   ece0     call	0x7dc0, 0           	CALL	__gptrget4
00269e   f03e
0026a0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0026a2   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0026a4   f009
0026a6   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
0026a8   f00a
0026aa   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
0026ac   f00b
0026ae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0026b0   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 4)
0026b2   6fda     movwf	0xda, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 4), B
0026b4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0026b6   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 5)
0026b8   6fdb     movwf	0xdb, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 5), B
0026ba   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0026bc   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 6)
0026be   6fdc     movwf	0xdc, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 6), B
0026c0   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0026c2   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 7)
0026c4   6fdd     movwf	0xdd, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 7), B
0026c6   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 8)
                                           ;	.line	951; TCPIP_Stack/UDP.c	pseudoHeader.Zero		= 0x0;
0026c8   6bde     clrf	0xde, 0x1           	CLRF	(_UDPProcess_pseudoHeader_1_1 + 8), B
                                           ;	.line	952; TCPIP_Stack/UDP.c	pseudoHeader.Protocol		= IP_PROT_UDP;
0026ca   0e11     movlw	0x11               	MOVLW	0x11
0026cc   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 9)
0026ce   6fdf     movwf	0xdf, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 9), B
                                           ;	.line	953; TCPIP_Stack/UDP.c	pseudoHeader.Length		= len;
0026d0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0026d2   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0026d4   6fe0     movwf	0xe0, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0026d6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0026d8   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0026da   6fe1     movwf	0xe1, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	955; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
0026dc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0026de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0026e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e4   ec03     call	0x7a06, 0           	CALL	_swaps
0026e6   f03d
0026e8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0026ea   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0026ec   f009
0026ee   0e02     movlw	0x2                	MOVLW	0x02
0026f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0026f2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0026f4   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0026f6   6fe0     movwf	0xe0, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0026f8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0026fa   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0026fc   6fe1     movwf	0xe1, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	957; TCPIP_Stack/UDP.c	checksums.w[0] = ~CalcIPChecksum((BYTE*)&pseudoHeader,
0026fe   0e08     movlw	0x8                	MOVLW	HIGH(_UDPProcess_pseudoHeader_1_1)
002700   6e09     movwf	0x9, 0             	MOVWF	r0x09
002702   0ed6     movlw	0xd6               	MOVLW	LOW(_UDPProcess_pseudoHeader_1_1)
002704   6e08     movwf	0x8, 0             	MOVWF	r0x08
002706   0e80     movlw	0x80               	MOVLW	0x80
002708   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
                                           ;	.line	958; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
00270a   0e00     movlw	0                  	MOVLW	0x00
00270c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00270e   0e0c     movlw	0xc                	MOVLW	0x0c
002710   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002712   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002714   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002716   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002718   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00271a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00271c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00271e   ec7c     call	0x1ef8, 0           	CALL	_CalcIPChecksum
002720   f00f
002722   6e08     movwf	0x8, 0             	MOVWF	r0x08
002724   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002726   f009
002728   0e05     movlw	0x5                	MOVLW	0x05
00272a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00272c   1e08     comf	0x8, 0x1, 0         	COMF	r0x08, F
00272e   1e09     comf	0x9, 0x1, 0         	COMF	r0x09, F
002730   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002732   010a     movlb	0xa                	BANKSEL	_UDPProcess_checksums_1_1
002734   6f4c     movwf	0x4c, 0x1          	MOVWF	_UDPProcess_checksums_1_1, B
002736   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002738   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
00273a   6f4d     movwf	0x4d, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 1), B
                                           ;	.line	963; TCPIP_Stack/UDP.c	IPSetRxBuffer(0);
00273c   0e00     movlw	0                  	MOVLW	0x00
00273e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002740   0e00     movlw	0                  	MOVLW	0x00
002742   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002744   ec56     call	0x78ac, 0           	CALL	_IPSetRxBuffer
002746   f03c
002748   0e02     movlw	0x2                	MOVLW	0x02
00274a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/UDP.c	checksums.w[1] = CalcIPBufferChecksum(len);
00274c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00274e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002750   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002752   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002754   ecf8     call	0xdf0, 0            	CALL	_CalcIPBufferChecksum
002756   f006
002758   6e06     movwf	0x6, 0             	MOVWF	r0x06
00275a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00275c   f007
00275e   0e02     movlw	0x2                	MOVLW	0x02
002760   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002762   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002764   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
002766   6f4e     movwf	0x4e, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 2), B
002768   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00276a   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
00276c   6f4f     movwf	0x4f, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 3), B
00276e   010a     movlb	0xa                	BANKSEL	_UDPProcess_checksums_1_1
                                           ;	.line	966; TCPIP_Stack/UDP.c	if(checksums.w[0] != checksums.w[1])
002770   514c     movf	0x4c, 0, 0x1        	MOVF	_UDPProcess_checksums_1_1, W, B
002772   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
002774   194e     xorwf	0x4e, 0, 0x1       	XORWF	(_UDPProcess_checksums_1_1 + 2), W, B
002776   e105     bnz	0x2782               	BNZ	_00289_DS_
002778   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
00277a   514d     movf	0x4d, 0, 0x1        	MOVF	(_UDPProcess_checksums_1_1 + 1), W, B
00277c   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
00277e   194f     xorwf	0x4f, 0, 0x1       	XORWF	(_UDPProcess_checksums_1_1 + 3), W, B
002780   e004     bz	0x278a                	BZ	_00279_DS_
                                           _00289_DS_:
                                           ;	.line	968; TCPIP_Stack/UDP.c	MACDiscardRx();
002782   ec8c     call	0x6f18, 0           	CALL	_MACDiscardRx
002784   f037
                                           ;	.line	969; TCPIP_Stack/UDP.c	return FALSE;
002786   6ae8     clrf	0xe8, 0             	CLRF	WREG
002788   d035     bra	0x27f4               	BRA	_00283_DS_
                                           _00279_DS_:
                                           ;	.line	973; TCPIP_Stack/UDP.c	s = FindMatchingSocket(&h, remoteNode, localIP);
00278a   0e0a     movlw	0xa                	MOVLW	HIGH(_UDPProcess_h_1_1)
00278c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00278e   0e08     movlw	0x8                	MOVLW	LOW(_UDPProcess_h_1_1)
002790   6e06     movwf	0x6, 0             	MOVWF	r0x06
002792   0e80     movlw	0x80               	MOVLW	0x80
002794   6e08     movwf	0x8, 0             	MOVWF	r0x08
002796   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002798   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00279c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0027a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0027a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0027ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0027b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027b2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0027b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027b6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0027b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ba   eccb     call	0x1196, 0           	CALL	_FindMatchingSocket
0027bc   f008
0027be   6e00     movwf	0, 0               	MOVWF	r0x00
0027c0   0e09     movlw	0x9                	MOVLW	0x09
0027c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	974; TCPIP_Stack/UDP.c	if(s == INVALID_UDP_SOCKET)
0027c4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0027c6   f001
0027c8   6a02     clrf	0x2, 0              	CLRF	r0x02
0027ca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0027cc   0aff     xorlw	0xff               	XORLW	0xff
0027ce   e102     bnz	0x27d4               	BNZ	_00290_DS_
0027d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027d2   e001     bz	0x27d6                	BZ	_00291_DS_
                                           _00290_DS_:
0027d4   d004     bra	0x27de               	BRA	_00281_DS_
                                           _00291_DS_:
                                           ;	.line	978; TCPIP_Stack/UDP.c	MACDiscardRx();
0027d6   ec8c     call	0x6f18, 0           	CALL	_MACDiscardRx
0027d8   f037
                                           ;	.line	979; TCPIP_Stack/UDP.c	return FALSE;
0027da   6ae8     clrf	0xe8, 0             	CLRF	WREG
0027dc   d00b     bra	0x27f4               	BRA	_00283_DS_
                                           _00281_DS_:
                                           ;	.line	983; TCPIP_Stack/UDP.c	SocketWithRxData = s;
0027de   c000     movff	0, 0x888           	MOVFF	r0x00, _SocketWithRxData
0027e0   f888
                                           ;	.line	984; TCPIP_Stack/UDP.c	UDPRxCount = h.Length;
0027e2   ca0c     movff	0xa0c, 0xa9d       	MOVFF	(_UDPProcess_h_1_1 + 4), _UDPRxCount
0027e4   fa9d
0027e6   ca0d     movff	0xa0d, 0xa9e       	MOVFF	(_UDPProcess_h_1_1 + 5), (_UDPRxCount + 1)
0027e8   fa9e
0027ea   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	985; TCPIP_Stack/UDP.c	Flags.bFirstRead = 1;
0027ec   81b7     bsf	0xb7, 0, 0x1         	BSF	_Flags, 0, B
0027ee   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	986; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 0;
0027f0   93b7     bcf	0xb7, 0x1, 0x1       	BCF	_Flags, 1, B
                                           ;	.line	990; TCPIP_Stack/UDP.c	return TRUE;
0027f2   0e01     movlw	0x1                	MOVLW	0x01
                                           _00283_DS_:
0027f4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0027f6   f00b
0027f8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0027fa   f00a
0027fc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0027fe   f009
002800   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002802   f008
002804   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002806   f007
002808   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00280a   f006
00280c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00280e   f005
002810   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002812   f004
002814   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002816   f003
002818   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00281a   f002
00281c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00281e   f001
002820   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002822   f000
002824   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002826   ffd9
002828   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPDiscard	code
                                           _UDPDiscard:
                                           ;	.line	886; TCPIP_Stack/UDP.c	void UDPDiscard(void)
007f58   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007f5a   ffe5
007f5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007f5e   ffd9
007f60   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	888; TCPIP_Stack/UDP.c	if(!Flags.bWasDiscarded)
007f62   b3b7     btfsc	0xb7, 0x1, 0x1     	BTFSC	_Flags, 1, B
007f64   d00b     bra	0x7f7c               	BRA	_00271_DS_
                                           ;	.line	890; TCPIP_Stack/UDP.c	MACDiscardRx();
007f66   ec8c     call	0x6f18, 0           	CALL	_MACDiscardRx
007f68   f037
007f6a   010a     movlb	0xa                	BANKSEL	_UDPRxCount
                                           ;	.line	891; TCPIP_Stack/UDP.c	UDPRxCount = 0;
007f6c   6b9d     clrf	0x9d, 0x1           	CLRF	_UDPRxCount, B
007f6e   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
007f70   6b9e     clrf	0x9e, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	892; TCPIP_Stack/UDP.c	SocketWithRxData = INVALID_UDP_SOCKET;
007f72   0eff     movlw	0xff               	MOVLW	0xff
007f74   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
007f76   6f88     movwf	0x88, 0x1          	MOVWF	_SocketWithRxData, B
007f78   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	893; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
007f7a   83b7     bsf	0xb7, 0x1, 0x1       	BSF	_Flags, 1, B
                                           _00271_DS_:
007f7c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007f7e   ffd9
007f80   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGetArray	code
                                           _UDPGetArray:
                                           ;	.line	843; TCPIP_Stack/UDP.c	WORD UDPGetArray(BYTE *cData, WORD wDataLen)
0062d0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0062d2   ffe5
0062d4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0062d6   ffd9
0062d8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0062da   ffe5
0062dc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0062de   ffe5
0062e0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0062e2   ffe5
0062e4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0062e6   ffe5
0062e8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0062ea   ffe5
0062ec   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0062ee   ffe5
0062f0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0062f2   ffe5
0062f4   0e02     movlw	0x2                	MOVLW	0x02
0062f6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0062f8   f000
0062fa   0e03     movlw	0x3                	MOVLW	0x03
0062fc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0062fe   f001
006300   0e04     movlw	0x4                	MOVLW	0x04
006302   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006304   f002
006306   0e05     movlw	0x5                	MOVLW	0x05
006308   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00630a   f003
00630c   0e06     movlw	0x6                	MOVLW	0x06
00630e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006310   f004
006312   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	848; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
006314   519e     movf	0x9e, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
006316   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
006318   5d96     subwf	0x96, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
00631a   e104     bnz	0x6324               	BNZ	_00261_DS_
00631c   010a     movlb	0xa                	BANKSEL	_UDPRxCount
00631e   519d     movf	0x9d, 0, 0x1        	MOVF	_UDPRxCount, W, B
006320   010a     movlb	0xa                	BANKSEL	_wGetOffset
006322   5d95     subwf	0x95, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00261_DS_:
006324   e205     bc	0x6330                	BC	_00252_DS_
006326   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
006328   5188     movf	0x88, 0, 0x1        	MOVF	_SocketWithRxData, W, B
00632a   010a     movlb	0xa                	BANKSEL	_activeUDPSocket
00632c   19b8     xorwf	0xb8, 0, 0x1       	XORWF	_activeUDPSocket, W, B
00632e   e003     bz	0x6336                	BZ	_00253_DS_
                                           _00252_DS_:
                                           ;	.line	849; TCPIP_Stack/UDP.c	return 0;
006330   6af3     clrf	0xf3, 0             	CLRF	PRODL
006332   6ae8     clrf	0xe8, 0             	CLRF	WREG
006334   d02e     bra	0x6392               	BRA	_00257_DS_
                                           _00253_DS_:
006336   010a     movlb	0xa                	BANKSEL	_wGetOffset
                                           ;	.line	852; TCPIP_Stack/UDP.c	wBytesAvailable = UDPRxCount - wGetOffset;
006338   5195     movf	0x95, 0, 0x1        	MOVF	_wGetOffset, W, B
00633a   010a     movlb	0xa                	BANKSEL	_UDPRxCount
00633c   5d9d     subwf	0x9d, 0, 0x1       	SUBWF	_UDPRxCount, W, B
00633e   6e05     movwf	0x5, 0             	MOVWF	r0x05
006340   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
006342   5196     movf	0x96, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
006344   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
006346   599e     subwfb	0x9e, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
006348   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/UDP.c	if(wBytesAvailable < wDataLen) wDataLen = wBytesAvailable;
00634a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00634c   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
00634e   e102     bnz	0x6354               	BNZ	_00264_DS_
006350   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006352   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00264_DS_:
006354   e204     bc	0x635e                	BC	_00256_DS_
006356   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
006358   f003
00635a   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
00635c   f004
                                           _00256_DS_:
                                           ;	.line	855; TCPIP_Stack/UDP.c	wDataLen = MACGetArray(cData, wDataLen);
00635e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006360   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006362   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006364   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006366   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006368   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00636a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00636c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00636e   5000     movf	0, 0, 0             	MOVF	r0x00, W
006370   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006372   ecda     call	0x63b4, 0           	CALL	_MACGetArray
006374   f031
006376   6e03     movwf	0x3, 0             	MOVWF	r0x03
006378   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
00637a   f004
00637c   0e05     movlw	0x5                	MOVLW	0x05
00637e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	856; TCPIP_Stack/UDP.c	wGetOffset += wDataLen;
006380   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006382   010a     movlb	0xa                	BANKSEL	_wGetOffset
006384   2795     addwf	0x95, 0x1, 0x1     	ADDWF	_wGetOffset, F, B
006386   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006388   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
00638a   2396     addwfc	0x96, 0x1, 0x1    	ADDWFC	(_wGetOffset + 1), F, B
                                           ;	.line	858; TCPIP_Stack/UDP.c	return wDataLen;
00638c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00638e   fff3
006390   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           _00257_DS_:
006392   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006394   f006
006396   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006398   f005
00639a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00639c   f004
00639e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0063a0   f003
0063a2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0063a4   f002
0063a6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0063a8   f001
0063aa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0063ac   f000
0063ae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0063b0   ffd9
0063b2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGet	code
                                           _UDPGet:
                                           ;	.line	805; TCPIP_Stack/UDP.c	BOOL UDPGet(BYTE *v)
0071e0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0071e2   ffe5
0071e4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0071e6   ffd9
0071e8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0071ea   ffe5
0071ec   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0071ee   ffe5
0071f0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0071f2   ffe5
0071f4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0071f6   ffe5
0071f8   0e02     movlw	0x2                	MOVLW	0x02
0071fa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0071fc   f000
0071fe   0e03     movlw	0x3                	MOVLW	0x03
007200   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007202   f001
007204   0e04     movlw	0x4                	MOVLW	0x04
007206   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007208   f002
00720a   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	808; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
00720c   519e     movf	0x9e, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
00720e   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
007210   5d96     subwf	0x96, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
007212   e104     bnz	0x721c               	BNZ	_00245_DS_
007214   010a     movlb	0xa                	BANKSEL	_UDPRxCount
007216   519d     movf	0x9d, 0, 0x1        	MOVF	_UDPRxCount, W, B
007218   010a     movlb	0xa                	BANKSEL	_wGetOffset
00721a   5d95     subwf	0x95, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00245_DS_:
00721c   e205     bc	0x7228                	BC	_00239_DS_
00721e   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
007220   5188     movf	0x88, 0, 0x1        	MOVF	_SocketWithRxData, W, B
007222   010a     movlb	0xa                	BANKSEL	_activeUDPSocket
007224   19b8     xorwf	0xb8, 0, 0x1       	XORWF	_activeUDPSocket, W, B
007226   e002     bz	0x722c                	BZ	_00240_DS_
                                           _00239_DS_:
                                           ;	.line	809; TCPIP_Stack/UDP.c	return FALSE;
007228   6ae8     clrf	0xe8, 0             	CLRF	WREG
00722a   d012     bra	0x7250               	BRA	_00242_DS_
                                           _00240_DS_:
                                           ;	.line	811; TCPIP_Stack/UDP.c	*v = MACGet();
00722c   ecc5     call	0x818a, 0           	CALL	_MACGet
00722e   f040
007230   6e03     movwf	0x3, 0             	MOVWF	r0x03
007232   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007234   ffe5
007236   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007238   ffe9
00723a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00723c   fff3
00723e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007240   ecbb     call	0x8176, 0           	CALL	__gptrput1
007242   f040
007244   010a     movlb	0xa                	BANKSEL	_wGetOffset
                                           ;	.line	812; TCPIP_Stack/UDP.c	wGetOffset++;
007246   2b95     incf	0x95, 0x1, 0x1      	INCF	_wGetOffset, F, B
007248   e302     bnc	0x724e               	BNC	_10296_DS_
00724a   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
00724c   2b96     incf	0x96, 0x1, 0x1      	INCF	(_wGetOffset + 1), F, B
                                           _10296_DS_:
                                           ;	.line	814; TCPIP_Stack/UDP.c	return TRUE;
00724e   0e01     movlw	0x1                	MOVLW	0x01
                                           _00242_DS_:
007250   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007252   f003
007254   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007256   f002
007258   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00725a   f001
00725c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00725e   f000
007260   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007262   ffd9
007264   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsGetReady	code
                                           _UDPIsGetReady:
                                           ;	.line	766; TCPIP_Stack/UDP.c	WORD UDPIsGetReady(UDP_SOCKET s)
00765c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00765e   ffe5
007660   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007662   ffd9
007664   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007666   ffe5
007668   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00766a   ffe5
00766c   0e02     movlw	0x2                	MOVLW	0x02
00766e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007670   f000
                                           ;	.line	768; TCPIP_Stack/UDP.c	activeUDPSocket = s;
007672   c000     movff	0, 0xab8           	MOVFF	r0x00, _activeUDPSocket
007674   fab8
007676   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
                                           ;	.line	769; TCPIP_Stack/UDP.c	if(SocketWithRxData != s) return 0;
007678   5188     movf	0x88, 0, 0x1        	MOVF	_SocketWithRxData, W, B
00767a   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
00767c   e003     bz	0x7684                	BZ	_00226_DS_
00767e   6af3     clrf	0xf3, 0             	CLRF	PRODL
007680   6ae8     clrf	0xe8, 0             	CLRF	WREG
007682   d01a     bra	0x76b8               	BRA	_00229_DS_
                                           _00226_DS_:
007684   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	773; TCPIP_Stack/UDP.c	if(Flags.bFirstRead)
007686   a1b7     btfss	0xb7, 0, 0x1       	BTFSS	_Flags, 0, B
007688   d00a     bra	0x769e               	BRA	_00228_DS_
00768a   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	775; TCPIP_Stack/UDP.c	Flags.bFirstRead = 0;
00768c   91b7     bcf	0xb7, 0, 0x1         	BCF	_Flags, 0, B
                                           ;	.line	776; TCPIP_Stack/UDP.c	UDPSetRxBuffer(0);
00768e   0e00     movlw	0                  	MOVLW	0x00
007690   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007692   0e00     movlw	0                  	MOVLW	0x00
007694   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007696   ecf9     call	0x77f2, 0           	CALL	_UDPSetRxBuffer
007698   f03b
00769a   0e02     movlw	0x2                	MOVLW	0x02
00769c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00228_DS_:
00769e   010a     movlb	0xa                	BANKSEL	_wGetOffset
                                           ;	.line	779; TCPIP_Stack/UDP.c	return UDPRxCount - wGetOffset;
0076a0   5195     movf	0x95, 0, 0x1        	MOVF	_wGetOffset, W, B
0076a2   010a     movlb	0xa                	BANKSEL	_UDPRxCount
0076a4   5d9d     subwf	0x9d, 0, 0x1       	SUBWF	_UDPRxCount, W, B
0076a6   6e00     movwf	0, 0               	MOVWF	r0x00
0076a8   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
0076aa   5196     movf	0x96, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
0076ac   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
0076ae   599e     subwfb	0x9e, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
0076b0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0076b2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0076b4   fff3
0076b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00229_DS_:
0076b8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0076ba   f001
0076bc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0076be   f000
0076c0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0076c2   ffd9
0076c4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPFlush	code
                                           _UDPFlush:
                                           ;	.line	671; TCPIP_Stack/UDP.c	void UDPFlush(void)
00282a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00282c   ffe5
00282e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002830   ffd9
002832   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002834   ffe5
002836   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002838   ffe5
00283a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00283c   ffe5
00283e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002840   ffe5
002842   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002844   ffe5
002846   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002848   ffe5
00284a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00284c   ffe5
00284e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002850   ffe5
002852   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002854   ffe5
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
002856   010a     movlb	0xa                	BANKSEL	_activeUDPSocket
                                           ;	.line	679; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[activeUDPSocket];
002858   51b8     movf	0xb8, 0, 0x1        	MOVF	_activeUDPSocket, W, B
00285a   0d0e     mullw	0xe                	MULLW	0x0e
00285c   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00285e   f000
002860   6a01     clrf	0x1, 0              	CLRF	r0x01
002862   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
002864   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002866   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
002868   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00286a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00286c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00286e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002870   6e00     movwf	0, 0               	MOVWF	r0x00
002872   0e80     movlw	0x80               	MOVLW	0x80
002874   6e02     movwf	0x2, 0             	MOVWF	r0x02
002876   010a     movlb	0xa                	BANKSEL	_UDPTxCount
                                           ;	.line	681; TCPIP_Stack/UDP.c	wUDPLength = UDPTxCount + sizeof(UDP_HEADER);
002878   5199     movf	0x99, 0, 0x1        	MOVF	_UDPTxCount, W, B
00287a   0f08     addlw	0x8                	ADDLW	0x08
00287c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00287e   0e00     movlw	0                  	MOVLW	0x00
002880   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
002882   219a     addwfc	0x9a, 0, 0x1      	ADDWFC	(_UDPTxCount + 1), W, B
002884   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	684; TCPIP_Stack/UDP.c	h.SourcePort = swaps(p->localPort);
002886   5000     movf	0, 0, 0             	MOVF	r0x00, W
002888   0f0c     addlw	0xc                	ADDLW	0x0c
00288a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00288c   0e00     movlw	0                  	MOVLW	0x00
00288e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002890   6e06     movwf	0x6, 0             	MOVWF	r0x06
002892   0e00     movlw	0                  	MOVLW	0x00
002894   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002896   6e07     movwf	0x7, 0             	MOVWF	r0x07
002898   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00289a   ffe9
00289c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00289e   fff3
0028a0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0028a2   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
0028a4   f03f
0028a6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028a8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028aa   f006
0028ac   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b4   ec03     call	0x7a06, 0           	CALL	_swaps
0028b6   f03d
0028b8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028ba   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028bc   f006
0028be   0e02     movlw	0x2                	MOVLW	0x02
0028c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0028c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028c4   010a     movlb	0xa                	BANKSEL	_UDPFlush_h_1_1
0028c6   6f00     movwf	0, 0x1             	MOVWF	_UDPFlush_h_1_1, B
0028c8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028ca   010a     movlb	0xa                	BANKSEL	(_UDPFlush_h_1_1 + 1)
0028cc   6f01     movwf	0x1, 0x1           	MOVWF	(_UDPFlush_h_1_1 + 1), B
                                           ;	.line	685; TCPIP_Stack/UDP.c	h.DestinationPort = swaps(p->remotePort);
0028ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028d0   0f0a     addlw	0xa                	ADDLW	0x0a
0028d2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028d4   0e00     movlw	0                  	MOVLW	0x00
0028d6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0028d8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0028da   0e00     movlw	0                  	MOVLW	0x00
0028dc   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0028de   6e07     movwf	0x7, 0             	MOVWF	r0x07
0028e0   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0028e2   ffe9
0028e4   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0028e6   fff3
0028e8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0028ea   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
0028ec   f03f
0028ee   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028f0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028f2   f006
0028f4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028f8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028fc   ec03     call	0x7a06, 0           	CALL	_swaps
0028fe   f03d
002900   6e05     movwf	0x5, 0             	MOVWF	r0x05
002902   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002904   f006
002906   0e02     movlw	0x2                	MOVLW	0x02
002908   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00290a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00290c   010a     movlb	0xa                	BANKSEL	(_UDPFlush_h_1_1 + 2)
00290e   6f02     movwf	0x2, 0x1           	MOVWF	(_UDPFlush_h_1_1 + 2), B
002910   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002912   010a     movlb	0xa                	BANKSEL	(_UDPFlush_h_1_1 + 3)
002914   6f03     movwf	0x3, 0x1           	MOVWF	(_UDPFlush_h_1_1 + 3), B
                                           ;	.line	686; TCPIP_Stack/UDP.c	h.Length = swaps(wUDPLength);
002916   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00291a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00291c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00291e   ec03     call	0x7a06, 0           	CALL	_swaps
002920   f03d
002922   6e05     movwf	0x5, 0             	MOVWF	r0x05
002924   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002926   f006
002928   0e02     movlw	0x2                	MOVLW	0x02
00292a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00292c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00292e   010a     movlb	0xa                	BANKSEL	(_UDPFlush_h_1_1 + 4)
002930   6f04     movwf	0x4, 0x1           	MOVWF	(_UDPFlush_h_1_1 + 4), B
002932   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002934   010a     movlb	0xa                	BANKSEL	(_UDPFlush_h_1_1 + 5)
002936   6f05     movwf	0x5, 0x1           	MOVWF	(_UDPFlush_h_1_1 + 5), B
002938   010a     movlb	0xa                	BANKSEL	(_UDPFlush_h_1_1 + 6)
                                           ;	.line	687; TCPIP_Stack/UDP.c	h.Checksum = 0x0000;
00293a   6b06     clrf	0x6, 0x1            	CLRF	(_UDPFlush_h_1_1 + 6), B
00293c   010a     movlb	0xa                	BANKSEL	(_UDPFlush_h_1_1 + 7)
00293e   6b07     clrf	0x7, 0x1            	CLRF	(_UDPFlush_h_1_1 + 7), B
002940   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	695; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val = AppConfig.MyIPAddr.Val;
002942   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
002944   0108     movlb	0x8                	BANKSEL	_UDPFlush_pseudoHeader_2_2
002946   6fca     movwf	0xca, 0x1          	MOVWF	_UDPFlush_pseudoHeader_2_2, B
002948   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
00294a   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
00294c   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 1)
00294e   6fcb     movwf	0xcb, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 1), B
002950   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
002952   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
002954   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 2)
002956   6fcc     movwf	0xcc, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 2), B
002958   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
00295a   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
00295c   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 3)
00295e   6fcd     movwf	0xcd, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 3), B
                                           ;	.line	696; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val = p->remoteNode.IPAddr.Val;
002960   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002962   ffe9
002964   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002966   fff3
002968   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00296a   ece0     call	0x7dc0, 0           	CALL	__gptrget4
00296c   f03e
00296e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002970   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002972   f006
002974   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
002976   f007
002978   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
00297a   f008
00297c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00297e   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 4)
002980   6fce     movwf	0xce, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 4), B
002982   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002984   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 5)
002986   6fcf     movwf	0xcf, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 5), B
002988   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00298a   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 6)
00298c   6fd0     movwf	0xd0, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 6), B
00298e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002990   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 7)
002992   6fd1     movwf	0xd1, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 7), B
002994   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 8)
                                           ;	.line	697; TCPIP_Stack/UDP.c	pseudoHeader.Zero = 0x0;
002996   6bd2     clrf	0xd2, 0x1           	CLRF	(_UDPFlush_pseudoHeader_2_2 + 8), B
                                           ;	.line	698; TCPIP_Stack/UDP.c	pseudoHeader.Protocol = IP_PROT_UDP;
002998   0e11     movlw	0x11               	MOVLW	0x11
00299a   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 9)
00299c   6fd3     movwf	0xd3, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 9), B
                                           ;	.line	699; TCPIP_Stack/UDP.c	pseudoHeader.Length = wUDPLength;
00299e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029a0   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
0029a2   6fd4     movwf	0xd4, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
0029a4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029a6   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
0029a8   6fd5     movwf	0xd5, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	700; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
0029aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029b2   ec03     call	0x7a06, 0           	CALL	_swaps
0029b4   f03d
0029b6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029b8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0029ba   f006
0029bc   0e02     movlw	0x2                	MOVLW	0x02
0029be   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029c0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029c2   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
0029c4   6fd4     movwf	0xd4, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
0029c6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029c8   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
0029ca   6fd5     movwf	0xd5, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	701; TCPIP_Stack/UDP.c	h.Checksum = ~CalcIPChecksum((BYTE*)&pseudoHeader, 
0029cc   0e08     movlw	0x8                	MOVLW	HIGH(_UDPFlush_pseudoHeader_2_2)
0029ce   6e06     movwf	0x6, 0             	MOVWF	r0x06
0029d0   0eca     movlw	0xca               	MOVLW	LOW(_UDPFlush_pseudoHeader_2_2)
0029d2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029d4   0e80     movlw	0x80               	MOVLW	0x80
0029d6   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	702; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
0029d8   0e00     movlw	0                  	MOVLW	0x00
0029da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029dc   0e0c     movlw	0xc                	MOVLW	0x0c
0029de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0029e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ec   ec7c     call	0x1ef8, 0           	CALL	_CalcIPChecksum
0029ee   f00f
0029f0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029f2   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0029f4   f006
0029f6   0e05     movlw	0x5                	MOVLW	0x05
0029f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029fa   1e05     comf	0x5, 0x1, 0         	COMF	r0x05, F
0029fc   1e06     comf	0x6, 0x1, 0         	COMF	r0x06, F
0029fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002a00   010a     movlb	0xa                	BANKSEL	(_UDPFlush_h_1_1 + 6)
002a02   6f06     movwf	0x6, 0x1           	MOVWF	(_UDPFlush_h_1_1 + 6), B
002a04   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002a06   010a     movlb	0xa                	BANKSEL	(_UDPFlush_h_1_1 + 7)
002a08   6f07     movwf	0x7, 0x1           	MOVWF	(_UDPFlush_h_1_1 + 7), B
                                           ;	.line	708; TCPIP_Stack/UDP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
002a0a   0e1a     movlw	0x1a               	MOVLW	0x1a
002a0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a0e   0e19     movlw	0x19               	MOVLW	0x19
002a10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a12   ec75     call	0x72ea, 0           	CALL	_MACSetWritePtr
002a14   f039
002a16   0e02     movlw	0x2                	MOVLW	0x02
002a18   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	711; TCPIP_Stack/UDP.c	IPPutHeader(&p->remoteNode, IP_PROT_UDP, wUDPLength);
002a1a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a22   0e11     movlw	0x11               	MOVLW	0x11
002a24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a26   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a2a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a2e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a32   eca4     call	0x4348, 0           	CALL	_IPPutHeader
002a34   f021
002a36   0e06     movlw	0x6                	MOVLW	0x06
002a38   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	714; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&h, sizeof(h));
002a3a   0e0a     movlw	0xa                	MOVLW	HIGH(_UDPFlush_h_1_1)
002a3c   6e01     movwf	0x1, 0             	MOVWF	r0x01
002a3e   0e00     movlw	0                  	MOVLW	LOW(_UDPFlush_h_1_1)
002a40   6e00     movwf	0, 0               	MOVWF	r0x00
002a42   0e80     movlw	0x80               	MOVLW	0x80
002a44   6e02     movwf	0x2, 0             	MOVWF	r0x02
002a46   0e00     movlw	0                  	MOVLW	0x00
002a48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4a   0e08     movlw	0x8                	MOVLW	0x08
002a4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a52   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a56   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a5a   ecf6     call	0x6dec, 0           	CALL	_MACPutArray
002a5c   f036
002a5e   0e05     movlw	0x5                	MOVLW	0x05
002a60   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	720; TCPIP_Stack/UDP.c	sizeof(IP_HEADER));
002a62   0e1a     movlw	0x1a               	MOVLW	0x1a
002a64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a66   0e2d     movlw	0x2d               	MOVLW	0x2d
002a68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a6a   ecf9     call	0x73f2, 0           	CALL	_MACSetReadPtr
002a6c   f039
002a6e   6e00     movwf	0, 0               	MOVWF	r0x00
002a70   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002a72   f001
002a74   0e02     movlw	0x2                	MOVLW	0x02
002a76   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	721; TCPIP_Stack/UDP.c	wChecksum = CalcIPBufferChecksum(wUDPLength);
002a78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a7c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a80   ecf8     call	0xdf0, 0            	CALL	_CalcIPBufferChecksum
002a82   f006
002a84   010a     movlb	0xa                	BANKSEL	_UDPFlush_wChecksum_1_1
002a86   6f9b     movwf	0x9b, 0x1          	MOVWF	_UDPFlush_wChecksum_1_1, B
002a88   cff3     movff	0xff3, 0xa9c       	MOVFF	PRODL, (_UDPFlush_wChecksum_1_1 + 1)
002a8a   fa9c
002a8c   0e02     movlw	0x2                	MOVLW	0x02
002a8e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	722; TCPIP_Stack/UDP.c	MACSetReadPtr(wReadPtrSave);
002a90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a94   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a98   ecf9     call	0x73f2, 0           	CALL	_MACSetReadPtr
002a9a   f039
002a9c   0e02     movlw	0x2                	MOVLW	0x02
002a9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	724; TCPIP_Stack/UDP.c	+ 6);    // 6 is the offset to the Checksum field in UDP_HEADER
002aa0   0e1a     movlw	0x1a               	MOVLW	0x1a
002aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aa4   0e33     movlw	0x33               	MOVLW	0x33
002aa6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aa8   ec75     call	0x72ea, 0           	CALL	_MACSetWritePtr
002aaa   f039
002aac   0e02     movlw	0x2                	MOVLW	0x02
002aae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	725; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&wChecksum, sizeof(wChecksum));
002ab0   0e0a     movlw	0xa                	MOVLW	HIGH(_UDPFlush_wChecksum_1_1)
002ab2   6e01     movwf	0x1, 0             	MOVWF	r0x01
002ab4   0e9b     movlw	0x9b               	MOVLW	LOW(_UDPFlush_wChecksum_1_1)
002ab6   6e00     movwf	0, 0               	MOVWF	r0x00
002ab8   0e80     movlw	0x80               	MOVLW	0x80
002aba   6e02     movwf	0x2, 0             	MOVWF	r0x02
002abc   0e00     movlw	0                  	MOVLW	0x00
002abe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac0   0e02     movlw	0x2                	MOVLW	0x02
002ac2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ac6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002aca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002acc   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ace   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ad0   ecf6     call	0x6dec, 0           	CALL	_MACPutArray
002ad2   f036
002ad4   0e05     movlw	0x5                	MOVLW	0x05
002ad6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	730; TCPIP_Stack/UDP.c	MACFlush();
002ad8   ec63     call	0x76c6, 0           	CALL	_MACFlush
002ada   f03b
002adc   010a     movlb	0xa                	BANKSEL	_UDPTxCount
                                           ;	.line	733; TCPIP_Stack/UDP.c	UDPTxCount = 0;
002ade   6b99     clrf	0x99, 0x1           	CLRF	_UDPTxCount, B
002ae0   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
002ae2   6b9a     clrf	0x9a, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	734; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
002ae4   0eff     movlw	0xff               	MOVLW	0xff
002ae6   0108     movlb	0x8                	BANKSEL	_LastPutSocket
002ae8   6f87     movwf	0x87, 0x1          	MOVWF	_LastPutSocket, B
002aea   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002aec   f008
002aee   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002af0   f007
002af2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002af4   f006
002af6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002af8   f005
002afa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002afc   f004
002afe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002b00   f003
002b02   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002b04   f002
002b06   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b08   f001
002b0a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b0c   f000
002b0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b10   ffd9
002b12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutString	code
                                           _UDPPutString:
                                           ;	.line	601; TCPIP_Stack/UDP.c	BYTE* UDPPutString(BYTE *strData)
006cba   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006cbc   ffe5
006cbe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006cc0   ffd9
006cc2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006cc4   ffe5
006cc6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006cc8   ffe5
006cca   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006ccc   ffe5
006cce   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006cd0   ffe5
006cd2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006cd4   ffe5
006cd6   0e02     movlw	0x2                	MOVLW	0x02
006cd8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006cda   f000
006cdc   0e03     movlw	0x3                	MOVLW	0x03
006cde   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006ce0   f001
006ce2   0e04     movlw	0x4                	MOVLW	0x04
006ce4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006ce6   f002
                                           ;	.line	603; TCPIP_Stack/UDP.c	return strData + UDPPutArray(strData, strlen((char*)strData));
006ce8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006cee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cf0   5000     movf	0, 0, 0             	MOVF	r0x00, W
006cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cf4   ec39     call	0x7472, 0           	CALL	_strlen
006cf6   f03a
006cf8   6e03     movwf	0x3, 0             	MOVWF	r0x03
006cfa   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
006cfc   f004
006cfe   0e03     movlw	0x3                	MOVLW	0x03
006d00   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006d02   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006d04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d06   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006d08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d0a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006d0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d0e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006d10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d12   5000     movf	0, 0, 0             	MOVF	r0x00, W
006d14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d16   ec7d     call	0x60fa, 0           	CALL	_UDPPutArray
006d18   f030
006d1a   6e03     movwf	0x3, 0             	MOVWF	r0x03
006d1c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
006d1e   f004
006d20   0e05     movlw	0x5                	MOVLW	0x05
006d22   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006d24   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006d26   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006d28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006d2a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006d2c   6ae8     clrf	0xe8, 0             	CLRF	WREG
006d2e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
006d30   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
006d32   fff4
006d34   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006d36   fff3
006d38   5000     movf	0, 0, 0             	MOVF	r0x00, W
006d3a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006d3c   f004
006d3e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006d40   f003
006d42   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006d44   f002
006d46   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006d48   f001
006d4a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006d4c   f000
006d4e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006d50   ffd9
006d52   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutArray	code
                                           _UDPPutArray:
                                           ;	.line	514; TCPIP_Stack/UDP.c	WORD UDPPutArray(BYTE *cData, WORD wDataLen)
0060fa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0060fc   ffe5
0060fe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006100   ffd9
006102   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006104   ffe5
006106   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006108   ffe5
00610a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00610c   ffe5
00610e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006110   ffe5
006112   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006114   ffe5
006116   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006118   ffe5
00611a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00611c   ffe5
00611e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006120   ffe5
006122   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006124   ffe5
006126   0e02     movlw	0x2                	MOVLW	0x02
006128   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00612a   f000
00612c   0e03     movlw	0x3                	MOVLW	0x03
00612e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006130   f001
006132   0e04     movlw	0x4                	MOVLW	0x04
006134   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006136   f002
006138   0e05     movlw	0x5                	MOVLW	0x05
00613a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00613c   f003
00613e   0e06     movlw	0x6                	MOVLW	0x06
006140   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006142   f004
                                           ;	.line	518; TCPIP_Stack/UDP.c	wTemp=(MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER))-wPutOffset;
006144   ca93     movff	0xa93, 0x5         	MOVFF	_wPutOffset, r0x05
006146   f005
006148   ca94     movff	0xa94, 0x6         	MOVFF	(_wPutOffset + 1), r0x06
00614a   f006
00614c   6a07     clrf	0x7, 0              	CLRF	r0x07
00614e   6a08     clrf	0x8, 0              	CLRF	r0x08
006150   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006152   08c0     sublw	0xc0               	SUBLW	0xc0
006154   6e05     movwf	0x5, 0             	MOVWF	r0x05
006156   0e05     movlw	0x5                	MOVLW	0x05
006158   5606     subfwb	0x6, 0x1, 0       	SUBFWB	r0x06, F
00615a   0e00     movlw	0                  	MOVLW	0x00
00615c   5607     subfwb	0x7, 0x1, 0       	SUBFWB	r0x07, F
00615e   0e00     movlw	0                  	MOVLW	0x00
006160   5608     subfwb	0x8, 0x1, 0       	SUBFWB	r0x08, F
                                           ;	.line	519; TCPIP_Stack/UDP.c	if(wTemp < wDataLen) wDataLen = wTemp;
006162   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006164   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
006166   e102     bnz	0x616c               	BNZ	_00209_DS_
006168   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00616a   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00209_DS_:
00616c   e204     bc	0x6176                	BC	_00202_DS_
00616e   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
006170   f003
006172   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
006174   f004
                                           _00202_DS_:
                                           ;	.line	521; TCPIP_Stack/UDP.c	wPutOffset += wDataLen;
006176   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006178   010a     movlb	0xa                	BANKSEL	_wPutOffset
00617a   2793     addwf	0x93, 0x1, 0x1     	ADDWF	_wPutOffset, F, B
00617c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00617e   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
006180   2394     addwfc	0x94, 0x1, 0x1    	ADDWFC	(_wPutOffset + 1), F, B
006182   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	522; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount) UDPTxCount = wPutOffset;
006184   5194     movf	0x94, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
006186   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
006188   5d9a     subwf	0x9a, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
00618a   e104     bnz	0x6194               	BNZ	_00210_DS_
00618c   010a     movlb	0xa                	BANKSEL	_wPutOffset
00618e   5193     movf	0x93, 0, 0x1        	MOVF	_wPutOffset, W, B
006190   010a     movlb	0xa                	BANKSEL	_UDPTxCount
006192   5d99     subwf	0x99, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00210_DS_:
006194   e204     bc	0x619e                	BC	_00204_DS_
006196   ca93     movff	0xa93, 0xa99       	MOVFF	_wPutOffset, _UDPTxCount
006198   fa99
00619a   ca94     movff	0xa94, 0xa9a       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
00619c   fa9a
                                           _00204_DS_:
                                           ;	.line	525; TCPIP_Stack/UDP.c	MACPutArray(cData, wDataLen);
00619e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0061a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0061a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0061a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0061a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0061a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0061aa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0061ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0061ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0061b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0061b2   ecf6     call	0x6dec, 0           	CALL	_MACPutArray
0061b4   f036
0061b6   0e05     movlw	0x5                	MOVLW	0x05
0061b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	527; TCPIP_Stack/UDP.c	return wDataLen;
0061ba   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0061bc   fff3
0061be   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0061c0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0061c2   f008
0061c4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0061c6   f007
0061c8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0061ca   f006
0061cc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0061ce   f005
0061d0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0061d2   f004
0061d4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0061d6   f003
0061d8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0061da   f002
0061dc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0061de   f001
0061e0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0061e2   f000
0061e4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0061e6   ffd9
0061e8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPut	code
                                           _UDPPut:
                                           ;	.line	472; TCPIP_Stack/UDP.c	BOOL UDPPut(BYTE v)
006e82   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006e84   ffe5
006e86   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006e88   ffd9
006e8a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006e8c   ffe5
006e8e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006e90   ffe5
006e92   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006e94   ffe5
006e96   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006e98   ffe5
006e9a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006e9c   ffe5
006e9e   0e02     movlw	0x2                	MOVLW	0x02
006ea0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006ea2   f000
                                           ;	.line	475; TCPIP_Stack/UDP.c	if(wPutOffset >= (MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)))
006ea4   ca93     movff	0xa93, 0x1         	MOVFF	_wPutOffset, r0x01
006ea6   f001
006ea8   ca94     movff	0xa94, 0x2         	MOVFF	(_wPutOffset + 1), r0x02
006eaa   f002
006eac   6a03     clrf	0x3, 0              	CLRF	r0x03
006eae   6a04     clrf	0x4, 0              	CLRF	r0x04
006eb0   0e00     movlw	0                  	MOVLW	0x00
006eb2   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
006eb4   e108     bnz	0x6ec6               	BNZ	_00195_DS_
006eb6   0e00     movlw	0                  	MOVLW	0x00
006eb8   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
006eba   e105     bnz	0x6ec6               	BNZ	_00195_DS_
006ebc   0e05     movlw	0x5                	MOVLW	0x05
006ebe   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
006ec0   e102     bnz	0x6ec6               	BNZ	_00195_DS_
006ec2   0ec0     movlw	0xc0               	MOVLW	0xc0
006ec4   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00195_DS_:
006ec6   e302     bnc	0x6ecc               	BNC	_00188_DS_
                                           ;	.line	477; TCPIP_Stack/UDP.c	return FALSE;
006ec8   6ae8     clrf	0xe8, 0             	CLRF	WREG
006eca   d019     bra	0x6efe               	BRA	_00191_DS_
                                           _00188_DS_:
                                           ;	.line	481; TCPIP_Stack/UDP.c	MACPut(v);
006ecc   5000     movf	0, 0, 0             	MOVF	r0x00, W
006ece   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ed0   eca7     call	0x814e, 0           	CALL	_MACPut
006ed2   f040
006ed4   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
006ed6   010a     movlb	0xa                	BANKSEL	_wPutOffset
                                           ;	.line	482; TCPIP_Stack/UDP.c	wPutOffset++;
006ed8   2b93     incf	0x93, 0x1, 0x1      	INCF	_wPutOffset, F, B
006eda   e302     bnc	0x6ee0               	BNC	_20297_DS_
006edc   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
006ede   2b94     incf	0x94, 0x1, 0x1      	INCF	(_wPutOffset + 1), F, B
                                           _20297_DS_:
006ee0   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	483; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount)
006ee2   5194     movf	0x94, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
006ee4   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
006ee6   5d9a     subwf	0x9a, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
006ee8   e104     bnz	0x6ef2               	BNZ	_00196_DS_
006eea   010a     movlb	0xa                	BANKSEL	_wPutOffset
006eec   5193     movf	0x93, 0, 0x1        	MOVF	_wPutOffset, W, B
006eee   010a     movlb	0xa                	BANKSEL	_UDPTxCount
006ef0   5d99     subwf	0x99, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00196_DS_:
006ef2   e204     bc	0x6efc                	BC	_00190_DS_
                                           ;	.line	484; TCPIP_Stack/UDP.c	UDPTxCount = wPutOffset;
006ef4   ca93     movff	0xa93, 0xa99       	MOVFF	_wPutOffset, _UDPTxCount
006ef6   fa99
006ef8   ca94     movff	0xa94, 0xa9a       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
006efa   fa9a
                                           _00190_DS_:
                                           ;	.line	486; TCPIP_Stack/UDP.c	return TRUE;
006efc   0e01     movlw	0x1                	MOVLW	0x01
                                           _00191_DS_:
006efe   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006f00   f004
006f02   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006f04   f003
006f06   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006f08   f002
006f0a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006f0c   f001
006f0e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006f10   f000
006f12   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006f14   ffd9
006f16   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsPutReady	code
                                           _UDPIsPutReady:
                                           ;	.line	434; TCPIP_Stack/UDP.c	WORD UDPIsPutReady(UDP_SOCKET s)
00703e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007040   ffe5
007042   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007044   ffd9
007046   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007048   ffe5
00704a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00704c   ffe5
00704e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007050   ffe5
007052   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007054   ffe5
007056   0e02     movlw	0x2                	MOVLW	0x02
007058   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00705a   f000
                                           ;	.line	436; TCPIP_Stack/UDP.c	if(!MACIsTxReady())
00705c   ecb8     call	0x7570, 0           	CALL	_MACIsTxReady
00705e   f03a
007060   6e01     movwf	0x1, 0             	MOVWF	r0x01
007062   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007064   e103     bnz	0x706c               	BNZ	_00174_DS_
                                           ;	.line	437; TCPIP_Stack/UDP.c	return 0;
007066   6af3     clrf	0xf3, 0             	CLRF	PRODL
007068   6ae8     clrf	0xe8, 0             	CLRF	WREG
00706a   d026     bra	0x70b8               	BRA	_00177_DS_
                                           _00174_DS_:
00706c   0108     movlb	0x8                	BANKSEL	_LastPutSocket
                                           ;	.line	439; TCPIP_Stack/UDP.c	if(LastPutSocket != s)
00706e   5187     movf	0x87, 0, 0x1        	MOVF	_LastPutSocket, W, B
007070   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
007072   e00e     bz	0x7090                	BZ	_00176_DS_
                                           ;	.line	441; TCPIP_Stack/UDP.c	LastPutSocket = s;
007074   c000     movff	0, 0x887           	MOVFF	r0x00, _LastPutSocket
007076   f887
007078   010a     movlb	0xa                	BANKSEL	_UDPTxCount
                                           ;	.line	442; TCPIP_Stack/UDP.c	UDPTxCount = 0;
00707a   6b99     clrf	0x99, 0x1           	CLRF	_UDPTxCount, B
00707c   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
00707e   6b9a     clrf	0x9a, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	443; TCPIP_Stack/UDP.c	UDPSetTxBuffer(0);
007080   0e00     movlw	0                  	MOVLW	0x00
007082   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007084   0e00     movlw	0                  	MOVLW	0x00
007086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007088   ec79     call	0x74f2, 0           	CALL	_UDPSetTxBuffer
00708a   f03a
00708c   0e02     movlw	0x2                	MOVLW	0x02
00708e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00176_DS_:
                                           ;	.line	445; TCPIP_Stack/UDP.c	activeUDPSocket = s;
007090   c000     movff	0, 0xab8           	MOVFF	r0x00, _activeUDPSocket
007092   fab8
                                           ;	.line	447; TCPIP_Stack/UDP.c	return MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)-UDPTxCount;
007094   ca99     movff	0xa99, 0           	MOVFF	_UDPTxCount, r0x00
007096   f000
007098   ca9a     movff	0xa9a, 0x1         	MOVFF	(_UDPTxCount + 1), r0x01
00709a   f001
00709c   6a02     clrf	0x2, 0              	CLRF	r0x02
00709e   6a03     clrf	0x3, 0              	CLRF	r0x03
0070a0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0070a2   08c0     sublw	0xc0               	SUBLW	0xc0
0070a4   6e00     movwf	0, 0               	MOVWF	r0x00
0070a6   0e05     movlw	0x5                	MOVLW	0x05
0070a8   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
0070aa   0e00     movlw	0                  	MOVLW	0x00
0070ac   5602     subfwb	0x2, 0x1, 0       	SUBFWB	r0x02, F
0070ae   0e00     movlw	0                  	MOVLW	0x00
0070b0   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
0070b2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0070b4   fff3
0070b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00177_DS_:
0070b8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0070ba   f003
0070bc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0070be   f002
0070c0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0070c2   f001
0070c4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0070c6   f000
0070c8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0070ca   ffd9
0070cc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetRxBuffer	code
                                           _UDPSetRxBuffer:
                                           ;	.line	400; TCPIP_Stack/UDP.c	void UDPSetRxBuffer(WORD wOffset)
0077f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0077f4   ffe5
0077f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0077f8   ffd9
0077fa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0077fc   ffe5
0077fe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007800   ffe5
007802   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007804   ffe5
007806   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007808   ffe5
00780a   0e02     movlw	0x2                	MOVLW	0x02
00780c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00780e   f000
007810   0e03     movlw	0x3                	MOVLW	0x03
007812   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007814   f001
                                           ;	.line	402; TCPIP_Stack/UDP.c	IPSetRxBuffer(wOffset+sizeof(UDP_HEADER));
007816   5000     movf	0, 0, 0             	MOVF	r0x00, W
007818   0f08     addlw	0x8                	ADDLW	0x08
00781a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00781c   0e00     movlw	0                  	MOVLW	0x00
00781e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
007820   6e03     movwf	0x3, 0             	MOVWF	r0x03
007822   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007824   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007826   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007828   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00782a   ec56     call	0x78ac, 0           	CALL	_IPSetRxBuffer
00782c   f03c
00782e   0e02     movlw	0x2                	MOVLW	0x02
007830   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	403; TCPIP_Stack/UDP.c	wGetOffset = wOffset;
007832   c000     movff	0, 0xa95           	MOVFF	r0x00, _wGetOffset
007834   fa95
007836   c001     movff	0x1, 0xa96         	MOVFF	r0x01, (_wGetOffset + 1)
007838   fa96
00783a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00783c   f003
00783e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007840   f002
007842   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007844   f001
007846   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007848   f000
00784a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00784c   ffd9
00784e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetTxBuffer	code
                                           _UDPSetTxBuffer:
                                           ;	.line	370; TCPIP_Stack/UDP.c	void UDPSetTxBuffer(WORD wOffset)
0074f2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0074f4   ffe5
0074f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0074f8   ffd9
0074fa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0074fc   ffe5
0074fe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007500   ffe5
007502   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007504   ffe5
007506   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007508   ffe5
00750a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00750c   ffe5
00750e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007510   ffe5
007512   0e02     movlw	0x2                	MOVLW	0x02
007514   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007516   f000
007518   0e03     movlw	0x3                	MOVLW	0x03
00751a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00751c   f001
                                           ;	.line	372; TCPIP_Stack/UDP.c	IPSetTxBuffer(wOffset+sizeof(UDP_HEADER));
00751e   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
007520   f002
007522   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
007524   f003
007526   6a04     clrf	0x4, 0              	CLRF	r0x04
007528   6a05     clrf	0x5, 0              	CLRF	r0x05
00752a   0e35     movlw	0x35               	MOVLW	0x35
00752c   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00752e   0e1a     movlw	0x1a               	MOVLW	0x1a
007530   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
007532   0e00     movlw	0                  	MOVLW	0x00
007534   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
007536   0e00     movlw	0                  	MOVLW	0x00
007538   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00753a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00753c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00753e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007540   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007542   ec75     call	0x72ea, 0           	CALL	_MACSetWritePtr
007544   f039
007546   0e02     movlw	0x2                	MOVLW	0x02
007548   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/UDP.c	wPutOffset = wOffset;
00754a   c000     movff	0, 0xa93           	MOVFF	r0x00, _wPutOffset
00754c   fa93
00754e   c001     movff	0x1, 0xa94         	MOVFF	r0x01, (_wPutOffset + 1)
007550   fa94
007552   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
007554   f005
007556   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
007558   f004
00755a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00755c   f003
00755e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007560   f002
007562   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007564   f001
007566   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007568   f000
00756a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00756c   ffd9
00756e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPClose	code
                                           _UDPClose:
                                           ;	.line	339; TCPIP_Stack/UDP.c	void UDPClose(UDP_SOCKET s)
0070ce   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0070d0   ffe5
0070d2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0070d4   ffd9
0070d6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0070d8   ffe5
0070da   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0070dc   ffe5
0070de   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0070e0   ffe5
0070e2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0070e4   ffe5
0070e6   0e02     movlw	0x2                	MOVLW	0x02
0070e8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0070ea   f000
                                           ;	.line	341; TCPIP_Stack/UDP.c	if(s >= MAX_UDP_SOCKETS) return;
0070ec   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0070ee   f001
0070f0   6a02     clrf	0x2, 0              	CLRF	r0x02
0070f2   0e00     movlw	0                  	MOVLW	0x00
0070f4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0070f6   e102     bnz	0x70fc               	BNZ	_00158_DS_
0070f8   0e0a     movlw	0xa                	MOVLW	0x0a
0070fa   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00158_DS_:
0070fc   e223     bc	0x7144                	BC	_00155_DS_
                                           ; ;multiply lit val:0x0e by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	342; TCPIP_Stack/UDP.c	UDPSocketInfo[s].localPort = INVALID_UDP_PORT;
0070fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
007100   0d0e     mullw	0xe                	MULLW	0x0e
007102   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
007104   f000
007106   6a01     clrf	0x1, 0              	CLRF	r0x01
007108   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00710a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00710c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00710e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
007110   5000     movf	0, 0, 0             	MOVF	r0x00, W
007112   0f0c     addlw	0xc                	ADDLW	0x0c
007114   6e02     movwf	0x2, 0             	MOVWF	r0x02
007116   0e00     movlw	0                  	MOVLW	0x00
007118   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00711a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00711c   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00711e   ffe9
007120   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
007122   ffea
007124   0e00     movlw	0                  	MOVLW	0x00
007126   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
007128   0e00     movlw	0                  	MOVLW	0x00
00712a   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	343; TCPIP_Stack/UDP.c	UDPSocketInfo[s].remoteNode.IPAddr.Val = 0x00000000;
00712c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00712e   ffe9
007130   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
007132   ffea
007134   0e00     movlw	0                  	MOVLW	0x00
007136   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
007138   0e00     movlw	0                  	MOVLW	0x00
00713a   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
00713c   0e00     movlw	0                  	MOVLW	0x00
00713e   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
007140   0e00     movlw	0                  	MOVLW	0x00
007142   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00155_DS_:
007144   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007146   f003
007148   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00714a   f002
00714c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00714e   f001
007150   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007152   f000
007154   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007156   ffd9
007158   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPOpen	code
                                           _UDPOpen:
                                           ;	.line	258; TCPIP_Stack/UDP.c	UDP_SOCKET UDPOpen(UDP_PORT this_localPort,
003072   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003074   ffe5
003076   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003078   ffd9
00307a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00307c   ffe5
00307e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003080   ffe5
003082   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003084   ffe5
003086   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003088   ffe5
00308a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00308c   ffe5
00308e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003090   ffe5
003092   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003094   ffe5
003096   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003098   ffe5
00309a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00309c   ffe5
00309e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0030a0   ffe5
0030a2   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0030a4   ffe5
0030a6   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0030a8   ffe5
0030aa   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0030ac   ffe5
0030ae   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0030b0   ffe5
0030b2   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0030b4   ffe5
0030b6   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0030b8   ffe5
0030ba   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0030bc   ffe5
0030be   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0030c0   ffe5
0030c2   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0030c4   ffe5
0030c6   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0030c8   ffe5
0030ca   0e02     movlw	0x2                	MOVLW	0x02
0030cc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0030ce   f000
0030d0   0e03     movlw	0x3                	MOVLW	0x03
0030d2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0030d4   f001
0030d6   0e04     movlw	0x4                	MOVLW	0x04
0030d8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0030da   f002
0030dc   0e05     movlw	0x5                	MOVLW	0x05
0030de   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0030e0   f003
0030e2   0e06     movlw	0x6                	MOVLW	0x06
0030e4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0030e6   f004
0030e8   0e07     movlw	0x7                	MOVLW	0x07
0030ea   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0030ec   f005
0030ee   0e08     movlw	0x8                	MOVLW	0x08
0030f0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0030f2   f006
                                           ;	.line	269; TCPIP_Stack/UDP.c	p = UDPSocketInfo; //pointer to the table of UDP sockets
0030f4   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0030f6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0030f8   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0030fa   6e07     movwf	0x7, 0             	MOVWF	r0x07
0030fc   0e80     movlw	0x80               	MOVLW	0x80
0030fe   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
003100   6a0a     clrf	0xa, 0              	CLRF	r0x0a
003102   c007     movff	0x7, 0xb           	MOVFF	r0x07, r0x0b
003104   f00b
003106   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
003108   f00c
00310a   c009     movff	0x9, 0xd           	MOVFF	r0x09, r0x0d
00310c   f00d
00310e   6a0e     clrf	0xe, 0              	CLRF	r0x0e
                                           _00134_DS_:
003110   c00e     movff	0xe, 0xf           	MOVFF	r0x0e, r0x0f
003112   f00f
003114   6a10     clrf	0x10, 0             	CLRF	r0x10
003116   0e00     movlw	0                  	MOVLW	0x00
003118   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
00311a   e102     bnz	0x3120               	BNZ	_00146_DS_
00311c   0e0a     movlw	0xa                	MOVLW	0x0a
00311e   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
                                           _00146_DS_:
003120   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003122   d0ac     bra	0x327c               	BRA	_00137_DS_
                                           ;	.line	272; TCPIP_Stack/UDP.c	if(p->localPort == INVALID_UDP_PORT)
003124   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003126   0f0c     addlw	0xc                	ADDLW	0x0c
003128   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00312a   0e00     movlw	0                  	MOVLW	0x00
00312c   200c     addwfc	0xc, 0, 0         	ADDWFC	r0x0c, W
00312e   6e10     movwf	0x10, 0            	MOVWF	r0x10
003130   0e00     movlw	0                  	MOVLW	0x00
003132   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
003134   6e11     movwf	0x11, 0            	MOVWF	r0x11
003136   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
003138   ffe9
00313a   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
00313c   fff3
00313e   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
003140   ec6c     call	0x7ed8, 0           	CALL	__gptrget2
003142   f03f
003144   6e12     movwf	0x12, 0            	MOVWF	r0x12
003146   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
003148   f013
00314a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00314c   1013     iorwf	0x13, 0, 0         	IORWF	r0x13, W
00314e   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
003150   d085     bra	0x325c               	BRA	_00133_DS_
                                           ;	.line	274; TCPIP_Stack/UDP.c	p->localPort = this_localPort;	
003152   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003154   ffe5
003156   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
003158   fff4
00315a   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
00315c   ffe9
00315e   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
003160   fff3
003162   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
003164   ec9b     call	0x8136, 0           	CALL	__gptrput2
003166   f040
                                           ;	.line	276; TCPIP_Stack/UDP.c	if(this_localPort == 0x0000u) //select any free port
003168   5000     movf	0, 0, 0             	MOVF	r0x00, W
00316a   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
00316c   e132     bnz	0x31d2               	BNZ	_00128_DS_
                                           ;	.line	278; TCPIP_Stack/UDP.c	if(NextPort > LOCAL_UDP_PORT_END_NUMBER || 
00316e   0e20     movlw	0x20               	MOVLW	0x20
003170   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
003172   5d98     subwf	0x98, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
003174   e103     bnz	0x317c               	BNZ	_00147_DS_
003176   0e01     movlw	0x1                	MOVLW	0x01
003178   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
00317a   5d97     subwf	0x97, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00147_DS_:
00317c   e208     bc	0x318e                	BC	_00124_DS_
                                           ;	.line	279; TCPIP_Stack/UDP.c	NextPort < LOCAL_UDP_PORT_START_NUMBER)
00317e   0e10     movlw	0x10               	MOVLW	0x10
003180   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
003182   5d98     subwf	0x98, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
003184   e103     bnz	0x318c               	BNZ	_00148_DS_
003186   0e00     movlw	0                  	MOVLW	0x00
003188   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
00318a   5d97     subwf	0x97, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00148_DS_:
00318c   e205     bc	0x3198                	BC	_00125_DS_
                                           _00124_DS_:
00318e   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
                                           ;	.line	280; TCPIP_Stack/UDP.c	NextPort = LOCAL_UDP_PORT_START_NUMBER;
003190   6b97     clrf	0x97, 0x1           	CLRF	_UDPOpen_NextPort_1_1, B
003192   0e10     movlw	0x10               	MOVLW	0x10
003194   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
003196   6f98     movwf	0x98, 0x1          	MOVWF	(_UDPOpen_NextPort_1_1 + 1), B
                                           _00125_DS_:
                                           ;	.line	282; TCPIP_Stack/UDP.c	p->localPort    = NextPort++;
003198   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00319a   0f0c     addlw	0xc                	ADDLW	0x0c
00319c   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00319e   0e00     movlw	0                  	MOVLW	0x00
0031a0   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0031a2   6e10     movwf	0x10, 0            	MOVWF	r0x10
0031a4   0e00     movlw	0                  	MOVLW	0x00
0031a6   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0031a8   6e11     movwf	0x11, 0            	MOVWF	r0x11
0031aa   ca97     movff	0xa97, 0x12        	MOVFF	_UDPOpen_NextPort_1_1, r0x12
0031ac   f012
0031ae   ca98     movff	0xa98, 0x13        	MOVFF	(_UDPOpen_NextPort_1_1 + 1), r0x13
0031b0   f013
0031b2   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
0031b4   2b97     incf	0x97, 0x1, 0x1      	INCF	_UDPOpen_NextPort_1_1, F, B
0031b6   e302     bnc	0x31bc               	BNC	_30298_DS_
0031b8   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
0031ba   2b98     incf	0x98, 0x1, 0x1      	INCF	(_UDPOpen_NextPort_1_1 + 1), F, B
                                           _30298_DS_:
0031bc   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0031be   ffe5
0031c0   c013     movff	0x13, 0xff4        	MOVFF	r0x13, PRODH
0031c2   fff4
0031c4   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
0031c6   ffe9
0031c8   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0031ca   fff3
0031cc   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0031ce   ec9b     call	0x8136, 0           	CALL	__gptrput2
0031d0   f040
                                           _00128_DS_:
                                           ;	.line	286; TCPIP_Stack/UDP.c	if(this_remoteNode)
0031d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031d4   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0031d6   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0031d8   e015     bz	0x3204                	BZ	_00130_DS_
                                           ;	.line	289; TCPIP_Stack/UDP.c	sizeof(p->remoteNode));
0031da   0e00     movlw	0                  	MOVLW	0x00
0031dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031de   0e0a     movlw	0xa                	MOVLW	0x0a
0031e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0031e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031e6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0031e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ee   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0031f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031f2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0031f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031f6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0031f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031fa   ec7a     call	0x5ef4, 0           	CALL	_memcpy
0031fc   f02f
0031fe   0e08     movlw	0x8                	MOVLW	0x08
003200   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003202   d014     bra	0x322c               	BRA	_00131_DS_
                                           _00130_DS_:
                                           ;	.line	294; TCPIP_Stack/UDP.c	memset((void*)&(p->remoteNode), 0xFF, sizeof(p->remoteNode));
003204   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
003206   f00f
003208   c008     movff	0x8, 0x10          	MOVFF	r0x08, r0x10
00320a   f010
00320c   c009     movff	0x9, 0x11          	MOVFF	r0x09, r0x11
00320e   f011
003210   0e00     movlw	0                  	MOVLW	0x00
003212   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003214   0e0a     movlw	0xa                	MOVLW	0x0a
003216   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003218   0eff     movlw	0xff               	MOVLW	0xff
00321a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00321c   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00321e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003220   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
003222   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003224   ec95     call	0x672a, 0           	CALL	_memset
003226   f033
003228   0e05     movlw	0x5                	MOVLW	0x05
00322a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00131_DS_:
                                           ;	.line	297; TCPIP_Stack/UDP.c	p->remotePort = this_remotePort;
00322c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00322e   0f0a     addlw	0xa                	ADDLW	0x0a
003230   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
003232   0e00     movlw	0                  	MOVLW	0x00
003234   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
003236   6e10     movwf	0x10, 0            	MOVWF	r0x10
003238   0e00     movlw	0                  	MOVLW	0x00
00323a   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
00323c   6e11     movwf	0x11, 0            	MOVWF	r0x11
00323e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003240   ffe5
003242   c006     movff	0x6, 0xff4         	MOVFF	r0x06, PRODH
003244   fff4
003246   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
003248   ffe9
00324a   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
00324c   fff3
00324e   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
003250   ec9b     call	0x8136, 0           	CALL	__gptrput2
003252   f040
                                           ;	.line	302; TCPIP_Stack/UDP.c	activeUDPSocket = s;
003254   c00a     movff	0xa, 0xab8         	MOVFF	r0x0a, _activeUDPSocket
003256   fab8
                                           ;	.line	303; TCPIP_Stack/UDP.c	return s;
003258   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00325a   d011     bra	0x327e               	BRA	_00138_DS_
                                           _00133_DS_:
                                           ;	.line	305; TCPIP_Stack/UDP.c	p++;
00325c   0e0e     movlw	0xe                	MOVLW	0x0e
00325e   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
003260   0e00     movlw	0                  	MOVLW	0x00
003262   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
003264   0e00     movlw	0                  	MOVLW	0x00
003266   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
003268   c00b     movff	0xb, 0x7           	MOVFF	r0x0b, r0x07
00326a   f007
00326c   c00c     movff	0xc, 0x8           	MOVFF	r0x0c, r0x08
00326e   f008
003270   c00d     movff	0xd, 0x9           	MOVFF	r0x0d, r0x09
003272   f009
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
003274   2a0e     incf	0xe, 0x1, 0         	INCF	r0x0e, F
003276   c00e     movff	0xe, 0xa           	MOVFF	r0x0e, r0x0a
003278   f00a
00327a   d74a     bra	0x3110               	BRA	_00134_DS_
                                           _00137_DS_:
                                           ;	.line	308; TCPIP_Stack/UDP.c	return (UDP_SOCKET)INVALID_UDP_SOCKET;
00327c   68e8     setf	0xe8, 0             	SETF	WREG
                                           _00138_DS_:
00327e   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
003280   f013
003282   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
003284   f012
003286   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
003288   f011
00328a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00328c   f010
00328e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003290   f00f
003292   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003294   f00e
003296   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003298   f00d
00329a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00329c   f00c
00329e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0032a0   f00b
0032a2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0032a4   f00a
0032a6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0032a8   f009
0032aa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0032ac   f008
0032ae   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0032b0   f007
0032b2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0032b4   f006
0032b6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0032b8   f005
0032ba   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0032bc   f004
0032be   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0032c0   f003
0032c2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0032c4   f002
0032c6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0032c8   f001
0032ca   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0032cc   f000
0032ce   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0032d0   ffd9
0032d2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPTask	code
                                           _UDPTask:
                                           ;	.line	215; TCPIP_Stack/UDP.c	void UDPTask(void)
008162   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008164   ffe5
008166   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008168   ffd9
                                           ;	.line	217; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
00816a   0eff     movlw	0xff               	MOVLW	0xff
00816c   0108     movlb	0x8                	BANKSEL	_LastPutSocket
00816e   6f87     movwf	0x87, 0x1          	MOVWF	_LastPutSocket, B
008170   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008172   ffd9
008174   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPInit	code
                                           _UDPInit:
                                           ;	.line	177; TCPIP_Stack/UDP.c	void UDPInit(void)
007b96   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007b98   ffe5
007b9a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007b9c   ffd9
007b9e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007ba0   ffe5
007ba2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007ba4   ffe5
007ba6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007ba8   ffe5
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
007baa   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00105_DS_:
007bac   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
007bae   f001
007bb0   6a02     clrf	0x2, 0              	CLRF	r0x02
007bb2   0e00     movlw	0                  	MOVLW	0x00
007bb4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
007bb6   e102     bnz	0x7bbc               	BNZ	_00114_DS_
007bb8   0e0a     movlw	0xa                	MOVLW	0x0a
007bba   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00114_DS_:
007bbc   e207     bc	0x7bcc                	BC	_00108_DS_
                                           ;	.line	184; TCPIP_Stack/UDP.c	UDPClose(s);
007bbe   5000     movf	0, 0, 0             	MOVF	r0x00, W
007bc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007bc2   ec67     call	0x70ce, 0           	CALL	_UDPClose
007bc4   f038
007bc6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
007bc8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007bca   d7f0     bra	0x7bac               	BRA	_00105_DS_
                                           _00108_DS_:
007bcc   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	186; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
007bce   83b7     bsf	0xb7, 0x1, 0x1       	BSF	_Flags, 1, B
007bd0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007bd2   f002
007bd4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007bd6   f001
007bd8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007bda   f000
007bdc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007bde   ffd9
007be0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4642 (0x1222) bytes ( 3.54%)
                                           ;           	 2321 (0x0911) words
                                           ; udata size:	  198 (0x00c6) bytes ( 5.16%)
                                           ; access size:	   28 (0x001c) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _strlcpy
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_strlcpy__strlcpy	code
                                           _strlcpy:
                                           ;	.line	43; TCPIP_Stack/strlcpy.c	strlcpy(char *dst, const char *src, size_t siz)
003b72   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003b74   ffe5
003b76   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003b78   ffd9
003b7a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003b7c   ffe5
003b7e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003b80   ffe5
003b82   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003b84   ffe5
003b86   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003b88   ffe5
003b8a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003b8c   ffe5
003b8e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003b90   ffe5
003b92   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003b94   ffe5
003b96   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003b98   ffe5
003b9a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003b9c   ffe5
003b9e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003ba0   ffe5
003ba2   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003ba4   ffe5
003ba6   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003ba8   ffe5
003baa   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003bac   ffe5
003bae   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003bb0   ffe5
003bb2   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003bb4   ffe5
003bb6   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
003bb8   ffe5
003bba   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
003bbc   ffe5
003bbe   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
003bc0   ffe5
003bc2   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
003bc4   ffe5
003bc6   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
003bc8   ffe5
003bca   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
003bcc   ffe5
003bce   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
003bd0   ffe5
003bd2   0e02     movlw	0x2                	MOVLW	0x02
003bd4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003bd6   f000
003bd8   0e03     movlw	0x3                	MOVLW	0x03
003bda   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003bdc   f001
003bde   0e04     movlw	0x4                	MOVLW	0x04
003be0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003be2   f002
003be4   0e05     movlw	0x5                	MOVLW	0x05
003be6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003be8   f003
003bea   0e06     movlw	0x6                	MOVLW	0x06
003bec   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003bee   f004
003bf0   0e07     movlw	0x7                	MOVLW	0x07
003bf2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003bf4   f005
003bf6   0e08     movlw	0x8                	MOVLW	0x08
003bf8   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
003bfa   f006
003bfc   0e09     movlw	0x9                	MOVLW	0x09
003bfe   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
003c00   f007
                                           ;	.line	45; TCPIP_Stack/strlcpy.c	char       *d = dst;
003c02   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
003c04   f008
003c06   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
003c08   f009
003c0a   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
003c0c   f00a
                                           ;	.line	46; TCPIP_Stack/strlcpy.c	const char *s = src;
003c0e   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
003c10   f00b
003c12   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
003c14   f00c
003c16   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
003c18   f00d
                                           ;	.line	47; TCPIP_Stack/strlcpy.c	size_t      n = siz;
003c1a   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
003c1c   f00e
003c1e   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
003c20   f00f
                                           ;	.line	50; TCPIP_Stack/strlcpy.c	if (n != 0)
003c22   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003c24   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003c26   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003c28   d03e     bra	0x3ca6               	BRA	_00111_DS_
                                           ;	.line	52; TCPIP_Stack/strlcpy.c	while (--n != 0)
003c2a   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
003c2c   f010
003c2e   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
003c30   f011
003c32   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
003c34   f012
003c36   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
003c38   f013
003c3a   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
003c3c   f014
                                           _00107_DS_:
003c3e   0eff     movlw	0xff               	MOVLW	0xff
003c40   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
003c42   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003c44   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
003c46   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
003c48   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
003c4a   e01d     bz	0x3c86                	BZ	_00126_DS_
                                           ;	.line	54; TCPIP_Stack/strlcpy.c	if ((*d++ = *s++) == '\0')
003c4c   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
003c4e   ffe9
003c50   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
003c52   fff3
003c54   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
003c56   ecf8     call	0x7ff0, 0           	CALL	__gptrget1
003c58   f03f
003c5a   6e15     movwf	0x15, 0            	MOVWF	r0x15
003c5c   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
003c5e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003c60   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
003c62   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003c64   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
003c66   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
003c68   ffe5
003c6a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003c6c   ffe9
003c6e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003c70   fff3
003c72   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003c74   ecbb     call	0x8176, 0           	CALL	__gptrput1
003c76   f040
003c78   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003c7a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003c7c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003c7e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003c80   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
003c82   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
003c84   e1dc     bnz	0x3c3e               	BNZ	_00107_DS_
                                           _00126_DS_:
                                           ;	.line	55; TCPIP_Stack/strlcpy.c	break;
003c86   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
003c88   f00b
003c8a   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
003c8c   f00c
003c8e   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
003c90   f00d
003c92   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
003c94   f008
003c96   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
003c98   f009
003c9a   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
003c9c   f00a
003c9e   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
003ca0   f00e
003ca2   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
003ca4   f00f
                                           _00111_DS_:
                                           ;	.line	60; TCPIP_Stack/strlcpy.c	if (n == 0)
003ca6   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
003ca8   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
003caa   e127     bnz	0x3cfa               	BNZ	_00118_DS_
                                           ;	.line	62; TCPIP_Stack/strlcpy.c	if (siz != 0)
003cac   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003cae   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003cb0   e009     bz	0x3cc4                	BZ	_00125_DS_
                                           ;	.line	63; TCPIP_Stack/strlcpy.c	*d = '\0';          /* NUL-terminate dst */
003cb2   0e00     movlw	0                  	MOVLW	0x00
003cb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003cb6   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
003cb8   ffe9
003cba   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
003cbc   fff3
003cbe   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003cc0   ecbb     call	0x8176, 0           	CALL	__gptrput1
003cc2   f040
                                           _00125_DS_:
                                           ;	.line	64; TCPIP_Stack/strlcpy.c	while (*s++)
003cc4   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
003cc6   f000
003cc8   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
003cca   f001
003ccc   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
003cce   f002
                                           _00114_DS_:
003cd0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003cd2   ffe9
003cd4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003cd6   fff3
003cd8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003cda   ecf8     call	0x7ff0, 0           	CALL	__gptrget1
003cdc   f03f
003cde   6e06     movwf	0x6, 0             	MOVWF	r0x06
003ce0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003ce2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ce4   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003ce6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ce8   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
003cea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003cec   e1f1     bnz	0x3cd0               	BNZ	_00114_DS_
003cee   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
003cf0   f00b
003cf2   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
003cf4   f00c
003cf6   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
003cf8   f00d
                                           _00118_DS_:
                                           ;	.line	68; TCPIP_Stack/strlcpy.c	return (s - src - 1);       /* count does not include NUL */
003cfa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003cfc   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
003cfe   6e03     movwf	0x3, 0             	MOVWF	r0x03
003d00   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003d02   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
003d04   6e04     movwf	0x4, 0             	MOVWF	r0x04
003d06   0eff     movlw	0xff               	MOVLW	0xff
003d08   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
003d0a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003d0c   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
003d0e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003d10   fff3
003d12   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003d14   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
003d16   f015
003d18   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
003d1a   f014
003d1c   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
003d1e   f013
003d20   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
003d22   f012
003d24   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
003d26   f011
003d28   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
003d2a   f010
003d2c   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003d2e   f00f
003d30   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003d32   f00e
003d34   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003d36   f00d
003d38   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003d3a   f00c
003d3c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003d3e   f00b
003d40   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003d42   f00a
003d44   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003d46   f009
003d48   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003d4a   f008
003d4c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003d4e   f007
003d50   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003d52   f006
003d54   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003d56   f005
003d58   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003d5a   f004
003d5c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003d5e   f003
003d60   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003d62   f002
003d64   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003d66   f001
003d68   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003d6a   f000
003d6c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003d6e   ffd9
003d70   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  512 (0x0200) bytes ( 0.39%)
                                           ;           	  256 (0x0100) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Tue Dec 12 02:14:58 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
