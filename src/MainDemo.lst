gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 12-11-2017  01:24:42
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 23:45:13 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _message
                                           	global _AN0String
                                           	global _DisplayWORD
                                           	global _DisplayString
                                           	global _DisplayIPValue
                                           	global _AppConfig
                                           	global _LowISR
                                           	global _HighISR
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _uitoa
                                           	extern _ultoa
                                           	extern _strlen
                                           	extern _StackInit
                                           	extern _StackTask
                                           	extern _TickInit
                                           	extern _TickGetDiv256
                                           	extern _TickUpdate
                                           	extern _LCDTaskInit
                                           	extern _LCDTask
                                           	extern _LCDInit
                                           	extern _LCDUpdate
                                           	extern _strlcpy
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _main_t_1_1	db	0x00, 0x00, 0x00, 0x00
                                           _main_dwLastIP_1_1	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           
                                           udata_MainDemo_0	udata
                                           _AN0String	res	8
                                           
                                           udata_MainDemo_1	udata
                                           _message	res	3
                                           
                                           udata_MainDemo_2	udata
                                           _AppConfig	res	51
                                           
                                           udata_MainDemo_3	udata
                                           _DisplayWORD_WDigit_1_1	res	6
                                           
                                           udata_MainDemo_4	udata
                                           _DisplayIPValue_IPDigit_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x2_LowISR	code	0X000018
                                           ivec_0x2_LowISR:
000018   efa6     goto	0x774c              	GOTO	_LowISR
00001a   f03b
                                           
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_MainDemo_ivec_0x1_HighISR	code	0X000008
                                           ivec_0x1_HighISR:
000008   ef32     goto	0x7864              	GOTO	_HighISR
00000a   f03c
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_MainDemo__main	code
                                           _main:
                                           ;	.line	113; MainDemo.c	InitializeBoard();
004e1e   ec63     call	0x7cc6, 0           	CALL	_InitializeBoard
004e20   f03e
                                           ;	.line	116; MainDemo.c	TickInit();
004e22   ec09     call	0x8012, 0           	CALL	_TickInit
004e24   f040
                                           ;	.line	119; MainDemo.c	InitAppConfig();
004e26   ec95     call	0x5d2a, 0           	CALL	_InitAppConfig
004e28   f02e
                                           ;	.line	123; MainDemo.c	StackInit();
004e2a   ec51     call	0x70a2, 0           	CALL	_StackInit
004e2c   f038
                                           ;	.line	126; MainDemo.c	LCDTaskInit();
004e2e   ec81     call	0x7d02, 0           	CALL	_LCDTaskInit
004e30   f03e
                                           ;	.line	130; MainDemo.c	LCDInit();
004e32   ec56     call	0x7eac, 0           	CALL	_LCDInit
004e34   f03f
                                           ;	.line	131; MainDemo.c	DelayMs(100);
004e36   0e10     movlw	0x10               	MOVLW	0x10
004e38   6e00     movwf	0, 0               	MOVWF	r0x00
004e3a   0e98     movlw	0x98               	MOVLW	0x98
004e3c   6e01     movwf	0x1, 0             	MOVWF	r0x01
004e3e   0e02     movlw	0x2                	MOVLW	0x02
004e40   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e42   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00115_DS_:
004e44   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
004e46   f004
004e48   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
004e4a   f005
004e4c   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
004e4e   f006
004e50   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
004e52   f007
004e54   0eff     movlw	0xff               	MOVLW	0xff
004e56   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004e58   0eff     movlw	0xff               	MOVLW	0xff
004e5a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004e5c   0eff     movlw	0xff               	MOVLW	0xff
004e5e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004e60   0eff     movlw	0xff               	MOVLW	0xff
004e62   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
004e64   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004e66   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
004e68   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
004e6a   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
004e6c   e1eb     bnz	0x4e44               	BNZ	_00115_DS_
                                           ;	.line	132; MainDemo.c	DisplayString (0,"Olimex"); //first arg is start position on 32 pos LCD
004e6e   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
004e70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e72   0e77     movlw	0x77               	MOVLW	HIGH(__str_0)
004e74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e76   0ea6     movlw	0xa6               	MOVLW	LOW(__str_0)
004e78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e7a   0e00     movlw	0                  	MOVLW	0x00
004e7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004e7e   eccd     call	0x659a, 0           	CALL	_DisplayString
004e80   f032
004e82   0e04     movlw	0x4                	MOVLW	0x04
004e84   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00129_DS_:
                                           ;	.line	152; MainDemo.c	nt =  TickGetDiv256();
004e86   ec22     call	0x7c44, 0           	CALL	_TickGetDiv256
004e88   f03e
004e8a   6e00     movwf	0, 0               	MOVWF	r0x00
004e8c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
004e8e   f001
004e90   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
004e92   f002
004e94   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
004e96   f003
004e98   0108     movlb	0x8                	BANKSEL	_main_t_1_1
                                           ;	.line	153; MainDemo.c	if((nt - t) >= (DWORD)(TICK_SECOND/1024ul))
004e9a   5154     movf	0x54, 0, 0x1        	MOVF	_main_t_1_1, W, B
004e9c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
004e9e   6e04     movwf	0x4, 0             	MOVWF	r0x04
004ea0   0108     movlb	0x8                	BANKSEL	(_main_t_1_1 + 1)
004ea2   5155     movf	0x55, 0, 0x1        	MOVF	(_main_t_1_1 + 1), W, B
004ea4   5801     subwfb	0x1, 0, 0         	SUBWFB	r0x01, W
004ea6   6e05     movwf	0x5, 0             	MOVWF	r0x05
004ea8   0108     movlb	0x8                	BANKSEL	(_main_t_1_1 + 2)
004eaa   5156     movf	0x56, 0, 0x1        	MOVF	(_main_t_1_1 + 2), W, B
004eac   5802     subwfb	0x2, 0, 0         	SUBWFB	r0x02, W
004eae   6e06     movwf	0x6, 0             	MOVWF	r0x06
004eb0   0108     movlb	0x8                	BANKSEL	(_main_t_1_1 + 3)
004eb2   5157     movf	0x57, 0, 0x1        	MOVF	(_main_t_1_1 + 3), W, B
004eb4   5803     subwfb	0x3, 0, 0         	SUBWFB	r0x03, W
004eb6   6e07     movwf	0x7, 0             	MOVWF	r0x07
004eb8   0e00     movlw	0                  	MOVLW	0x00
004eba   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
004ebc   e108     bnz	0x4ece               	BNZ	_00139_DS_
004ebe   0e00     movlw	0                  	MOVLW	0x00
004ec0   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
004ec2   e105     bnz	0x4ece               	BNZ	_00139_DS_
004ec4   0e00     movlw	0                  	MOVLW	0x00
004ec6   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
004ec8   e102     bnz	0x4ece               	BNZ	_00139_DS_
004eca   0e27     movlw	0x27               	MOVLW	0x27
004ecc   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00139_DS_:
004ece   e315     bnc	0x4efa               	BNC	_00125_DS_
                                           ;	.line	155; MainDemo.c	t = nt;
004ed0   c000     movff	0, 0x854           	MOVFF	r0x00, _main_t_1_1
004ed2   f854
004ed4   c001     movff	0x1, 0x855         	MOVFF	r0x01, (_main_t_1_1 + 1)
004ed6   f855
004ed8   c002     movff	0x2, 0x856         	MOVFF	r0x02, (_main_t_1_1 + 2)
004eda   f856
004edc   c003     movff	0x3, 0x857         	MOVFF	r0x03, (_main_t_1_1 + 3)
004ede   f857
                                           ;	.line	156; MainDemo.c	LED0_IO ^= 1;
004ee0   6a00     clrf	0, 0                	CLRF	r0x00
004ee2   b091     btfsc	0x91, 0, 0         	BTFSC	_LATJbits, 0
004ee4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
004ee6   0e01     movlw	0x1                	MOVLW	0x01
004ee8   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
004eea   5000     movf	0, 0, 0             	MOVF	r0x00, W
004eec   0b01     andlw	0x1                	ANDLW	0x01
004eee   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
004ef0   5091     movf	0x91, 0, 0          	MOVF	_LATJbits, W
004ef2   0bfe     andlw	0xfe               	ANDLW	0xfe
004ef4   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
004ef6   6e91     movwf	0x91, 0            	MOVWF	_LATJbits
004ef8   0004     clrwdt                   	clrwdt 
                                           _00125_DS_:
                                           ;	.line	163; MainDemo.c	StackTask();
004efa   ece5     call	0x1bca, 0           	CALL	_StackTask
004efc   f00d
                                           ;	.line	170; MainDemo.c	LCDTask();
004efe   ecf3     call	0x59e6, 0           	CALL	_LCDTask
004f00   f02c
                                           ;	.line	178; MainDemo.c	if(dwLastIP != AppConfig.MyIPAddr.Val)
004f02   ce00     movff	0xe00, 0           	MOVFF	_AppConfig, r0x00
004f04   f000
004f06   ce01     movff	0xe01, 0x1         	MOVFF	(_AppConfig + 1), r0x01
004f08   f001
004f0a   ce02     movff	0xe02, 0x2         	MOVFF	(_AppConfig + 2), r0x02
004f0c   f002
004f0e   ce03     movff	0xe03, 0x3         	MOVFF	(_AppConfig + 3), r0x03
004f10   f003
004f12   0108     movlb	0x8                	BANKSEL	_main_dwLastIP_1_1
004f14   5158     movf	0x58, 0, 0x1        	MOVF	_main_dwLastIP_1_1, W, B
004f16   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
004f18   e10d     bnz	0x4f34               	BNZ	_00142_DS_
004f1a   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 1)
004f1c   5159     movf	0x59, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 1), W, B
004f1e   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
004f20   e109     bnz	0x4f34               	BNZ	_00142_DS_
004f22   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 2)
004f24   515a     movf	0x5a, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 2), W, B
004f26   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
004f28   e105     bnz	0x4f34               	BNZ	_00142_DS_
004f2a   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 3)
004f2c   515b     movf	0x5b, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 3), W, B
004f2e   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
004f30   e101     bnz	0x4f34               	BNZ	_00142_DS_
004f32   d7a9     bra	0x4e86               	BRA	_00129_DS_
                                           _00142_DS_:
                                           ;	.line	180; MainDemo.c	dwLastIP = AppConfig.MyIPAddr.Val;
004f34   c000     movff	0, 0x858           	MOVFF	r0x00, _main_dwLastIP_1_1
004f36   f858
004f38   c001     movff	0x1, 0x859         	MOVFF	r0x01, (_main_dwLastIP_1_1 + 1)
004f3a   f859
004f3c   c002     movff	0x2, 0x85a         	MOVFF	r0x02, (_main_dwLastIP_1_1 + 2)
004f3e   f85a
004f40   c003     movff	0x3, 0x85b         	MOVFF	r0x03, (_main_dwLastIP_1_1 + 3)
004f42   f85b
004f44   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 3)
                                           ;	.line	182; MainDemo.c	DisplayIPValue(dwLastIP); // must be a WORD: sdcc does not
004f46   515b     movf	0x5b, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 3), W, B
004f48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f4a   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 2)
004f4c   515a     movf	0x5a, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 2), W, B
004f4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f50   0108     movlb	0x8                	BANKSEL	(_main_dwLastIP_1_1 + 1)
004f52   5159     movf	0x59, 0, 0x1        	MOVF	(_main_dwLastIP_1_1 + 1), W, B
004f54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f56   0108     movlb	0x8                	BANKSEL	_main_dwLastIP_1_1
004f58   5158     movf	0x58, 0, 0x1        	MOVF	_main_dwLastIP_1_1, W, B
004f5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004f5c   ec9f     call	0x433e, 0           	CALL	_DisplayIPValue
004f5e   f021
004f60   0e04     movlw	0x4                	MOVLW	0x04
004f62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004f64   d790     bra	0x4e86               	BRA	_00129_DS_
004f66   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitAppConfig	code
                                           _InitAppConfig:
                                           ;	.line	352; MainDemo.c	static void InitAppConfig(void)
005d2a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005d2c   ffe5
005d2e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005d30   ffd9
005d32   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005d34   ffe5
005d36   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005d38   ffe5
005d3a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005d3c   ffe5
005d3e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005d40   ffe5
005d42   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	354; MainDemo.c	AppConfig.Flags.bIsDHCPEnabled = TRUE;
005d44   8d2c     bsf	0x2c, 0x6, 0x1       	BSF	(_AppConfig + 44), 6, B
005d46   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	355; MainDemo.c	AppConfig.Flags.bInConfigMode = TRUE;
005d48   8f2c     bsf	0x2c, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
005d4a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 45)
                                           ;	.line	359; MainDemo.c	AppConfig.MyMACAddr.v[0] = 0;
005d4c   6b2d     clrf	0x2d, 0x1           	CLRF	(_AppConfig + 45), B
                                           ;	.line	360; MainDemo.c	AppConfig.MyMACAddr.v[1] = 0x04;
005d4e   0e04     movlw	0x4                	MOVLW	0x04
005d50   010e     movlb	0xe                	BANKSEL	(_AppConfig + 46)
005d52   6f2e     movwf	0x2e, 0x1          	MOVWF	(_AppConfig + 46), B
                                           ;	.line	361; MainDemo.c	AppConfig.MyMACAddr.v[2] = 0xA3;
005d54   0ea3     movlw	0xa3               	MOVLW	0xa3
005d56   010e     movlb	0xe                	BANKSEL	(_AppConfig + 47)
005d58   6f2f     movwf	0x2f, 0x1          	MOVWF	(_AppConfig + 47), B
                                           ;	.line	362; MainDemo.c	AppConfig.MyMACAddr.v[3] = 0x01;
005d5a   0e01     movlw	0x1                	MOVLW	0x01
005d5c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 48)
005d5e   6f30     movwf	0x30, 0x1          	MOVWF	(_AppConfig + 48), B
                                           ;	.line	363; MainDemo.c	AppConfig.MyMACAddr.v[4] = 0x02;
005d60   0e02     movlw	0x2                	MOVLW	0x02
005d62   010e     movlb	0xe                	BANKSEL	(_AppConfig + 49)
005d64   6f31     movwf	0x31, 0x1          	MOVWF	(_AppConfig + 49), B
                                           ;	.line	364; MainDemo.c	AppConfig.MyMACAddr.v[5] = 0x03;
005d66   0e03     movlw	0x3                	MOVLW	0x03
005d68   010e     movlb	0xe                	BANKSEL	(_AppConfig + 50)
005d6a   6f32     movwf	0x32, 0x1          	MOVWF	(_AppConfig + 50), B
                                           ;	.line	367; MainDemo.c	AppConfig.MyIPAddr.Val = MY_DEFAULT_IP_ADDR_BYTE1 | 
005d6c   0ec0     movlw	0xc0               	MOVLW	0xc0
005d6e   010e     movlb	0xe                	BANKSEL	_AppConfig
005d70   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
005d72   0ea8     movlw	0xa8               	MOVLW	0xa8
005d74   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
005d76   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
005d78   0e61     movlw	0x61               	MOVLW	0x61
005d7a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
005d7c   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
005d7e   0e3c     movlw	0x3c               	MOVLW	0x3c
005d80   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
005d82   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
                                           ;	.line	370; MainDemo.c	AppConfig.DefaultIPAddr.Val = AppConfig.MyIPAddr.Val;
005d84   ce00     movff	0xe00, 0           	MOVFF	_AppConfig, r0x00
005d86   f000
005d88   ce01     movff	0xe01, 0x1         	MOVFF	(_AppConfig + 1), r0x01
005d8a   f001
005d8c   ce02     movff	0xe02, 0x2         	MOVFF	(_AppConfig + 2), r0x02
005d8e   f002
005d90   ce03     movff	0xe03, 0x3         	MOVFF	(_AppConfig + 3), r0x03
005d92   f003
005d94   5000     movf	0, 0, 0             	MOVF	r0x00, W
005d96   010e     movlb	0xe                	BANKSEL	(_AppConfig + 20)
005d98   6f14     movwf	0x14, 0x1          	MOVWF	(_AppConfig + 20), B
005d9a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005d9c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 21)
005d9e   6f15     movwf	0x15, 0x1          	MOVWF	(_AppConfig + 21), B
005da0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005da2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 22)
005da4   6f16     movwf	0x16, 0x1          	MOVWF	(_AppConfig + 22), B
005da6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005da8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 23)
005daa   6f17     movwf	0x17, 0x1          	MOVWF	(_AppConfig + 23), B
005dac   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	371; MainDemo.c	AppConfig.MyMask.Val = MY_DEFAULT_MASK_BYTE1 | 
005dae   6904     setf	0x4, 0x1            	SETF	(_AppConfig + 4), B
005db0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
005db2   6905     setf	0x5, 0x1            	SETF	(_AppConfig + 5), B
005db4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
005db6   6906     setf	0x6, 0x1            	SETF	(_AppConfig + 6), B
005db8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
005dba   6b07     clrf	0x7, 0x1            	CLRF	(_AppConfig + 7), B
                                           ;	.line	374; MainDemo.c	AppConfig.DefaultMask.Val = AppConfig.MyMask.Val;
005dbc   ce04     movff	0xe04, 0           	MOVFF	(_AppConfig + 4), r0x00
005dbe   f000
005dc0   ce05     movff	0xe05, 0x1         	MOVFF	(_AppConfig + 5), r0x01
005dc2   f001
005dc4   ce06     movff	0xe06, 0x2         	MOVFF	(_AppConfig + 6), r0x02
005dc6   f002
005dc8   ce07     movff	0xe07, 0x3         	MOVFF	(_AppConfig + 7), r0x03
005dca   f003
005dcc   5000     movf	0, 0, 0             	MOVF	r0x00, W
005dce   010e     movlb	0xe                	BANKSEL	(_AppConfig + 24)
005dd0   6f18     movwf	0x18, 0x1          	MOVWF	(_AppConfig + 24), B
005dd2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005dd4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 25)
005dd6   6f19     movwf	0x19, 0x1          	MOVWF	(_AppConfig + 25), B
005dd8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005dda   010e     movlb	0xe                	BANKSEL	(_AppConfig + 26)
005ddc   6f1a     movwf	0x1a, 0x1          	MOVWF	(_AppConfig + 26), B
005dde   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005de0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 27)
005de2   6f1b     movwf	0x1b, 0x1          	MOVWF	(_AppConfig + 27), B
                                           ;	.line	375; MainDemo.c	AppConfig.MyGateway.Val = MY_DEFAULT_GATE_BYTE1 | 
005de4   0ec0     movlw	0xc0               	MOVLW	0xc0
005de6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 8)
005de8   6f08     movwf	0x8, 0x1           	MOVWF	(_AppConfig + 8), B
005dea   0ea8     movlw	0xa8               	MOVLW	0xa8
005dec   010e     movlb	0xe                	BANKSEL	(_AppConfig + 9)
005dee   6f09     movwf	0x9, 0x1           	MOVWF	(_AppConfig + 9), B
005df0   0e61     movlw	0x61               	MOVLW	0x61
005df2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 10)
005df4   6f0a     movwf	0xa, 0x1           	MOVWF	(_AppConfig + 10), B
005df6   0e01     movlw	0x1                	MOVLW	0x01
005df8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 11)
005dfa   6f0b     movwf	0xb, 0x1           	MOVWF	(_AppConfig + 11), B
                                           ;	.line	378; MainDemo.c	AppConfig.PrimaryDNSServer.Val = MY_DEFAULT_PRIMARY_DNS_BYTE1 | 
005dfc   0ec0     movlw	0xc0               	MOVLW	0xc0
005dfe   010e     movlb	0xe                	BANKSEL	(_AppConfig + 12)
005e00   6f0c     movwf	0xc, 0x1           	MOVWF	(_AppConfig + 12), B
005e02   0ea8     movlw	0xa8               	MOVLW	0xa8
005e04   010e     movlb	0xe                	BANKSEL	(_AppConfig + 13)
005e06   6f0d     movwf	0xd, 0x1           	MOVWF	(_AppConfig + 13), B
005e08   0e61     movlw	0x61               	MOVLW	0x61
005e0a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 14)
005e0c   6f0e     movwf	0xe, 0x1           	MOVWF	(_AppConfig + 14), B
005e0e   0e01     movlw	0x1                	MOVLW	0x01
005e10   010e     movlb	0xe                	BANKSEL	(_AppConfig + 15)
005e12   6f0f     movwf	0xf, 0x1           	MOVWF	(_AppConfig + 15), B
005e14   010e     movlb	0xe                	BANKSEL	(_AppConfig + 16)
                                           ;	.line	382; MainDemo.c	AppConfig.SecondaryDNSServer.Val = MY_DEFAULT_SECONDARY_DNS_BYTE1 | 
005e16   6b10     clrf	0x10, 0x1           	CLRF	(_AppConfig + 16), B
005e18   010e     movlb	0xe                	BANKSEL	(_AppConfig + 17)
005e1a   6b11     clrf	0x11, 0x1           	CLRF	(_AppConfig + 17), B
005e1c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 18)
005e1e   6b12     clrf	0x12, 0x1           	CLRF	(_AppConfig + 18), B
005e20   010e     movlb	0xe                	BANKSEL	(_AppConfig + 19)
005e22   6b13     clrf	0x13, 0x1           	CLRF	(_AppConfig + 19), B
005e24   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005e26   f003
005e28   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005e2a   f002
005e2c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005e2e   f001
005e30   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005e32   f000
005e34   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005e36   ffd9
005e38   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__InitializeBoard	code
                                           _InitializeBoard:
                                           ;	.line	296; MainDemo.c	static void InitializeBoard(void)
007cc6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007cc8   ffe5
007cca   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007ccc   ffd9
                                           ;	.line	299; MainDemo.c	LED0_TRIS = 0;  //LED0
007cce   909a     bcf	0x9a, 0, 0           	BCF	_TRISJbits, 0
                                           ;	.line	300; MainDemo.c	LED1_TRIS = 0;  //LED1
007cd0   929a     bcf	0x9a, 0x1, 0         	BCF	_TRISJbits, 1
                                           ;	.line	301; MainDemo.c	LED2_TRIS = 0;  //LED2
007cd2   949a     bcf	0x9a, 0x2, 0         	BCF	_TRISJbits, 2
                                           ;	.line	302; MainDemo.c	LED3_TRIS = 0;  //LED_LCD1
007cd4   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	303; MainDemo.c	LED4_TRIS = 0;  //LED_LCD2
007cd6   9a98     bcf	0x98, 0x5, 0         	BCF	_TRISGbits, 5
                                           ;	.line	304; MainDemo.c	LED5_TRIS = 0;  //LED5=RELAY1
007cd8   9e98     bcf	0x98, 0x7, 0         	BCF	_TRISGbits, 7
                                           ;	.line	305; MainDemo.c	LED6_TRIS = 0;  //LED7=RELAY2
007cda   9c98     bcf	0x98, 0x6, 0         	BCF	_TRISGbits, 6
                                           ;	.line	310; MainDemo.c	LED_PUT(0x00);  //turn off LED0 - LED2
007cdc   0ef8     movlw	0xf8               	MOVLW	0xf8
007cde   1691     andwf	0x91, 0x1, 0       	ANDWF	_LATJ, F
                                           ;	.line	311; MainDemo.c	RELAY_PUT(0x00); //turn relays off to save power
007ce0   0e3f     movlw	0x3f               	MOVLW	0x3f
007ce2   168f     andwf	0x8f, 0x1, 0       	ANDWF	_LATG, F
                                           ;	.line	317; MainDemo.c	OSCTUNE = 0x40;
007ce4   0e40     movlw	0x40               	MOVLW	0x40
007ce6   6e9b     movwf	0x9b, 0            	MOVWF	_OSCTUNE
                                           ;	.line	324; MainDemo.c	if(OSCCONbits.IDLEN) //IDLEN = 0x80; 0x02 selects the primary clock
007ce8   aed3     btfss	0xd3, 0x7, 0       	BTFSS	_OSCCONbits, 7
007cea   d003     bra	0x7cf2               	BRA	_00212_DS_
                                           ;	.line	325; MainDemo.c	OSCCON = 0x82;
007cec   0e82     movlw	0x82               	MOVLW	0x82
007cee   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
007cf0   d002     bra	0x7cf6               	BRA	_00213_DS_
                                           _00212_DS_:
                                           ;	.line	327; MainDemo.c	OSCCON = 0x02;
007cf2   0e02     movlw	0x2                	MOVLW	0x02
007cf4   6ed3     movwf	0xd3, 0            	MOVWF	_OSCCON
                                           _00213_DS_:
                                           ;	.line	330; MainDemo.c	RCONbits.IPEN = 1;		// Enable interrupt priorities
007cf6   8ed0     bsf	0xd0, 0x7, 0         	BSF	_RCONbits, 7
                                           ;	.line	331; MainDemo.c	INTCONbits.GIEH = 1;
007cf8   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	332; MainDemo.c	INTCONbits.GIEL = 1;
007cfa   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
007cfc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007cfe   ffd9
007d00   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayIPValue	code
                                           _DisplayIPValue:
                                           ;	.line	238; MainDemo.c	void DisplayIPValue(DWORD IPdw) // 32 bits
00433e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004340   ffe5
004342   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004344   ffd9
004346   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004348   ffe5
00434a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00434c   ffe5
00434e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004350   ffe5
004352   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004354   ffe5
004356   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004358   ffe5
00435a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00435c   ffe5
00435e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004360   ffe5
004362   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004364   ffe5
004366   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004368   ffe5
00436a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00436c   ffe5
00436e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004370   ffe5
004372   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
004374   ffe5
004376   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
004378   ffe5
00437a   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00437c   ffe5
00437e   0e02     movlw	0x2                	MOVLW	0x02
004380   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004382   f000
004384   0e03     movlw	0x3                	MOVLW	0x03
004386   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004388   f001
00438a   0e04     movlw	0x4                	MOVLW	0x04
00438c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00438e   f002
004390   0e05     movlw	0x5                	MOVLW	0x05
004392   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004394   f003
                                           ;	.line	246; MainDemo.c	BYTE LCDPos=16;  //write on second line of LCD
004396   0e10     movlw	0x10               	MOVLW	0x10
004398   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	251; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
00439a   6a05     clrf	0x5, 0              	CLRF	r0x05
00439c   6a06     clrf	0x6, 0              	CLRF	r0x06
00439e   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00177_DS_:
0043a0   0e04     movlw	0x4                	MOVLW	0x04
0043a2   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
0043a4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0043a6   d081     bra	0x44aa               	BRA	_00180_DS_
                                           ;	.line	254; MainDemo.c	IP_field =(WORD)(IPdw>>(i*8))&0xff;      //ML
0043a8   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
0043aa   f008
0043ac   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
0043ae   f009
0043b0   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
0043b2   f00a
0043b4   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
0043b6   f00b
0043b8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0043ba   e011     bz	0x43de                	BZ	_00198_DS_
0043bc   e609     bn	0x43d0                	BN	_00201_DS_
0043be   6ce8     negf	0xe8, 0             	NEGF	WREG
0043c0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00199_DS_:
0043c2   320b     rrcf	0xb, 0x1, 0         	RRCF	r0x0b, F
0043c4   320a     rrcf	0xa, 0x1, 0         	RRCF	r0x0a, F
0043c6   3209     rrcf	0x9, 0x1, 0         	RRCF	r0x09, F
0043c8   3208     rrcf	0x8, 0x1, 0         	RRCF	r0x08, F
0043ca   0f01     addlw	0x1                	ADDLW	0x01
0043cc   e3fa     bnc	0x43c2               	BNC	_00199_DS_
0043ce   d007     bra	0x43de               	BRA	_00198_DS_
                                           _00201_DS_:
0043d0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00200_DS_:
0043d2   3608     rlcf	0x8, 0x1, 0         	RLCF	r0x08, F
0043d4   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
0043d6   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
0043d8   360b     rlcf	0xb, 0x1, 0         	RLCF	r0x0b, F
0043da   0f01     addlw	0x1                	ADDLW	0x01
0043dc   e3fa     bnc	0x43d2               	BNC	_00200_DS_
                                           _00198_DS_:
0043de   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           ;	.line	255; MainDemo.c	uitoa(IP_field, IPDigit, radix);      //ML
0043e0   0e0a     movlw	0xa                	MOVLW	0x0a
0043e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043e4   0e08     movlw	0x8                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
0043e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043e8   0ef9     movlw	0xf9               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
0043ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043ec   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0043ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043f0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0043f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0043f4   ecd2     call	0x75a4, 0           	CALL	_uitoa
0043f6   f03a
0043f8   0e05     movlw	0x5                	MOVLW	0x05
0043fa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	260; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
0043fc   c004     movff	0x4, 0x8           	MOVFF	r0x04, r0x08
0043fe   f008
004400   6a09     clrf	0x9, 0              	CLRF	r0x09
                                           _00183_DS_:
004402   0e08     movlw	0x8                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
004404   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
004406   0ef9     movlw	0xf9               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
004408   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00440a   0e80     movlw	0x80               	MOVLW	0x80
00440c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00440e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
004410   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004412   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
004414   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004416   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
004418   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00441a   ecdd     call	0x73ba, 0           	CALL	_strlen
00441c   f039
00441e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
004420   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
004422   f00b
004424   0e03     movlw	0x3                	MOVLW	0x03
004426   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004428   c009     movff	0x9, 0xc           	MOVFF	r0x09, r0x0c
00442a   f00c
00442c   6a0d     clrf	0xd, 0              	CLRF	r0x0d
00442e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
004430   0f80     addlw	0x80               	ADDLW	0x80
004432   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
004434   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
004436   0f80     addlw	0x80               	ADDLW	0x80
004438   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
00443a   e102     bnz	0x4440               	BNZ	_00203_DS_
00443c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00443e   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
                                           _00203_DS_:
004440   e21c     bc	0x447a                	BC	_00195_DS_
                                           ;	.line	262; MainDemo.c	LCDText[LCDPos++] = IPDigit[j];
004442   c008     movff	0x8, 0xa           	MOVFF	r0x08, r0x0a
004444   f00a
004446   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
004448   6a0b     clrf	0xb, 0              	CLRF	r0x0b
00444a   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
00444c   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
00444e   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004450   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
004452   0ef9     movlw	0xf9               	MOVLW	LOW(_DisplayIPValue_IPDigit_1_1)
004454   2409     addwf	0x9, 0, 0          	ADDWF	r0x09, W
004456   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
004458   6a0d     clrf	0xd, 0              	CLRF	r0x0d
00445a   0e08     movlw	0x8                	MOVLW	HIGH(_DisplayIPValue_IPDigit_1_1)
00445c   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
00445e   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
004460   ffe9
004462   c00d     movff	0xd, 0xfea         	MOVFF	r0x0d, FSR0H
004464   ffea
004466   cfef     movff	0xfef, 0xc         	MOVFF	INDF0, r0x0c
004468   f00c
00446a   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
00446c   ffe9
00446e   c00b     movff	0xb, 0xfea         	MOVFF	r0x0b, FSR0H
004470   ffea
004472   c00c     movff	0xc, 0xfef         	MOVFF	r0x0c, INDF0
004474   ffef
                                           ;	.line	260; MainDemo.c	for(j = 0; j < strlen((char*)IPDigit); j++)
004476   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
004478   d7c4     bra	0x4402               	BRA	_00183_DS_
                                           _00195_DS_:
00447a   c008     movff	0x8, 0x4           	MOVFF	r0x08, r0x04
00447c   f004
                                           ;	.line	264; MainDemo.c	if(i == sizeof(IP_ADDR)-1)
00447e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004480   0a03     xorlw	0x3                	XORLW	0x03
004482   e013     bz	0x44aa                	BZ	_00180_DS_
                                           ;	.line	266; MainDemo.c	LCDText[LCDPos++] = '.';
004484   2808     incf	0x8, 0, 0           	INCF	r0x08, W
004486   6e04     movwf	0x4, 0             	MOVWF	r0x04
004488   6a09     clrf	0x9, 0              	CLRF	r0x09
00448a   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
00448c   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
00448e   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004490   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
004492   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
004494   ffe9
004496   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
004498   ffea
00449a   0e2e     movlw	0x2e               	MOVLW	0x2e
00449c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	251; MainDemo.c	for(i = 0; i < sizeof(IP_ADDR); i++) //sizeof(IP_ADDR) is 4
00449e   0e08     movlw	0x8                	MOVLW	0x08
0044a0   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
0044a2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0044a4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0044a6   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0044a8   d77b     bra	0x43a0               	BRA	_00177_DS_
                                           _00180_DS_:
                                           ;	.line	269; MainDemo.c	if(LCDPos < 32u)
0044aa   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
0044ac   f000
0044ae   6a01     clrf	0x1, 0              	CLRF	r0x01
0044b0   0e00     movlw	0                  	MOVLW	0x00
0044b2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0044b4   e102     bnz	0x44ba               	BNZ	_00206_DS_
0044b6   0e20     movlw	0x20               	MOVLW	0x20
0044b8   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00206_DS_:
0044ba   e20b     bc	0x44d2                	BC	_00182_DS_
                                           ;	.line	270; MainDemo.c	LCDText[LCDPos] = 0;
0044bc   6a00     clrf	0, 0                	CLRF	r0x00
0044be   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
0044c0   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0044c2   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0044c4   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
0044c6   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0044c8   ffe9
0044ca   c000     movff	0, 0xfea           	MOVFF	r0x00, FSR0H
0044cc   ffea
0044ce   0e00     movlw	0                  	MOVLW	0x00
0044d0   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00182_DS_:
                                           ;	.line	271; MainDemo.c	LCDUpdate();
0044d2   ec75     call	0x7aea, 0           	CALL	_LCDUpdate
0044d4   f03d
0044d6   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0044d8   f00d
0044da   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0044dc   f00c
0044de   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0044e0   f00b
0044e2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0044e4   f00a
0044e6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0044e8   f009
0044ea   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0044ec   f008
0044ee   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0044f0   f007
0044f2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0044f4   f006
0044f6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0044f8   f005
0044fa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0044fc   f004
0044fe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004500   f003
004502   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004504   f002
004506   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004508   f001
00450a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00450c   f000
00450e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004510   ffd9
004512   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayString	code
                                           _DisplayString:
                                           ;	.line	223; MainDemo.c	void DisplayString(BYTE pos, char* text)
00659a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00659c   ffe5
00659e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0065a0   ffd9
0065a2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0065a4   ffe5
0065a6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0065a8   ffe5
0065aa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0065ac   ffe5
0065ae   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0065b0   ffe5
0065b2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0065b4   ffe5
0065b6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0065b8   ffe5
0065ba   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0065bc   ffe5
0065be   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0065c0   ffe5
0065c2   0e02     movlw	0x2                	MOVLW	0x02
0065c4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0065c6   f000
0065c8   0e03     movlw	0x3                	MOVLW	0x03
0065ca   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0065cc   f001
0065ce   0e04     movlw	0x4                	MOVLW	0x04
0065d0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0065d2   f002
0065d4   0e05     movlw	0x5                	MOVLW	0x05
0065d6   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0065d8   f003
                                           ;	.line	225; MainDemo.c	BYTE l= strlen(text)+1;
0065da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0065dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0065e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0065e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0065e6   ecdd     call	0x73ba, 0           	CALL	_strlen
0065e8   f039
0065ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0065ec   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0065ee   f005
0065f0   0e03     movlw	0x3                	MOVLW	0x03
0065f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0065f4   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           ;	.line	226; MainDemo.c	BYTE max= 32-pos;
0065f6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0065f8   0820     sublw	0x20               	SUBLW	0x20
0065fa   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	227; MainDemo.c	strlcpy((char*)&LCDText[pos], text,(l<max)?l:max );
0065fc   6a06     clrf	0x6, 0              	CLRF	r0x06
0065fe   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
006600   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006602   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
006604   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
006606   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006608   6e06     movwf	0x6, 0             	MOVWF	r0x06
00660a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00660c   6e00     movwf	0, 0               	MOVWF	r0x00
00660e   0e80     movlw	0x80               	MOVLW	0x80
006610   6e07     movwf	0x7, 0             	MOVWF	r0x07
006612   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006614   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
006616   e302     bnc	0x661c               	BNC	_00168_DS_
006618   c005     movff	0x5, 0x4           	MOVFF	r0x05, r0x04
00661a   f004
                                           _00168_DS_:
00661c   6a05     clrf	0x5, 0              	CLRF	r0x05
00661e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006622   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006626   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006628   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00662a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00662c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00662e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006630   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006632   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006634   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006636   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
006638   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00663a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00663c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00663e   ecb3     call	0x3d66, 0           	CALL	_strlcpy
006640   f01e
006642   0e08     movlw	0x8                	MOVLW	0x08
006644   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	228; MainDemo.c	LCDUpdate();
006646   ec75     call	0x7aea, 0           	CALL	_LCDUpdate
006648   f03d
00664a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00664c   f007
00664e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006650   f006
006652   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006654   f005
006656   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006658   f004
00665a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00665c   f003
00665e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006660   f002
006662   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006664   f001
006666   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006668   f000
00666a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00666c   ffd9
00666e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__DisplayWORD	code
                                           _DisplayWORD:
                                           ;	.line	201; MainDemo.c	void DisplayWORD(BYTE pos, WORD w) //WORD is a 16 bits unsigned
00557a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00557c   ffe5
00557e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005580   ffd9
005582   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005584   ffe5
005586   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005588   ffe5
00558a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00558c   ffe5
00558e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005590   ffe5
005592   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005594   ffe5
005596   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005598   ffe5
00559a   0e02     movlw	0x2                	MOVLW	0x02
00559c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00559e   f000
0055a0   0e03     movlw	0x3                	MOVLW	0x03
0055a2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0055a4   f001
0055a6   0e04     movlw	0x4                	MOVLW	0x04
0055a8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0055aa   f002
                                           ;	.line	209; MainDemo.c	ultoa(w, WDigit, radix);      
0055ac   6a03     clrf	0x3, 0              	CLRF	r0x03
0055ae   6a04     clrf	0x4, 0              	CLRF	r0x04
0055b0   0e0a     movlw	0xa                	MOVLW	0x0a
0055b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055b4   0e08     movlw	0x8                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0055b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055b8   0eed     movlw	0xed               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0055ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055bc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0055be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0055c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055c4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0055c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055c8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0055ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055cc   ec8a     call	0x4514, 0           	CALL	_ultoa
0055ce   f022
0055d0   0e07     movlw	0x7                	MOVLW	0x07
0055d2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	210; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
0055d4   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00149_DS_:
0055d6   0e08     movlw	0x8                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
0055d8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0055da   0eed     movlw	0xed               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
0055dc   6e02     movwf	0x2, 0             	MOVWF	r0x02
0055de   0e80     movlw	0x80               	MOVLW	0x80
0055e0   6e04     movwf	0x4, 0             	MOVWF	r0x04
0055e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0055e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055e6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0055e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0055ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0055ee   ecdd     call	0x73ba, 0           	CALL	_strlen
0055f0   f039
0055f2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0055f4   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0055f6   f003
0055f8   0e03     movlw	0x3                	MOVLW	0x03
0055fa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0055fc   c001     movff	0x1, 0x4           	MOVFF	r0x01, r0x04
0055fe   f004
005600   6a05     clrf	0x5, 0              	CLRF	r0x05
005602   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005604   0f80     addlw	0x80               	ADDLW	0x80
005606   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
005608   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00560a   0f80     addlw	0x80               	ADDLW	0x80
00560c   5cf3     subwf	0xf3, 0, 0         	SUBWF	PRODL, W
00560e   e102     bnz	0x5614               	BNZ	_00159_DS_
005610   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005612   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00159_DS_:
005614   e21c     bc	0x564e                	BC	_00152_DS_
                                           ;	.line	212; MainDemo.c	LCDText[LCDPos++] = WDigit[j];
005616   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
005618   f002
00561a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00561c   6a03     clrf	0x3, 0              	CLRF	r0x03
00561e   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
005620   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
005622   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
005624   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005626   0eed     movlw	0xed               	MOVLW	LOW(_DisplayWORD_WDigit_1_1)
005628   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00562a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00562c   6a05     clrf	0x5, 0              	CLRF	r0x05
00562e   0e08     movlw	0x8                	MOVLW	HIGH(_DisplayWORD_WDigit_1_1)
005630   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
005632   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
005634   ffe9
005636   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
005638   ffea
00563a   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
00563c   f004
00563e   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
005640   ffe9
005642   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
005644   ffea
005646   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
005648   ffef
                                           ;	.line	210; MainDemo.c	for(j = 0; j < strlen((char*)WDigit); j++)
00564a   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00564c   d7c4     bra	0x55d6               	BRA	_00149_DS_
                                           _00152_DS_:
                                           ;	.line	214; MainDemo.c	if(LCDPos < 32u)
00564e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005650   f001
005652   6a02     clrf	0x2, 0              	CLRF	r0x02
005654   0e00     movlw	0                  	MOVLW	0x00
005656   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
005658   e102     bnz	0x565e               	BNZ	_00160_DS_
00565a   0e20     movlw	0x20               	MOVLW	0x20
00565c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00160_DS_:
00565e   e20b     bc	0x5676                	BC	_00148_DS_
                                           ;	.line	215; MainDemo.c	LCDText[LCDPos] = 0;
005660   6a01     clrf	0x1, 0              	CLRF	r0x01
005662   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
005664   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005666   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
005668   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00566a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00566c   ffe9
00566e   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
005670   ffea
005672   0e00     movlw	0                  	MOVLW	0x00
005674   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00148_DS_:
                                           ;	.line	216; MainDemo.c	LCDUpdate();
005676   ec75     call	0x7aea, 0           	CALL	_LCDUpdate
005678   f03d
00567a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00567c   f005
00567e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005680   f004
005682   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005684   f003
005686   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005688   f002
00568a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00568c   f001
00568e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005690   f000
005692   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005694   ffd9
005696   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__HighISR	code
                                           _HighISR:
                                           ;	.line	75; MainDemo.c	void HighISR(void) __interrupt(1) //ML for sdcc        
007864   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
007866   ffe5
007868   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00786a   ffe5
00786c   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
00786e   ffe5
007870   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
007872   ffe5
007874   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
007876   ffe5
007878   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00787a   ffe5
00787c   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
00787e   ffe5
007880   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
007882   ffe5
007884   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
007886   ffe5
007888   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00788a   ffe5
00788c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00788e   ffd9
                                           ;	.line	82; MainDemo.c	}
007890   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007892   ffd9
007894   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
007896   fffb
007898   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
00789a   fffa
00789c   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00789e   ffea
0078a0   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0078a2   ffe9
0078a4   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0078a6   fff4
0078a8   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0078aa   fff3
0078ac   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0078ae   ffe0
0078b0   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0078b2   ffd8
0078b4   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0078b6   ffe8
0078b8   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_MainDemo__LowISR	code
                                           _LowISR:
                                           ;	.line	55; MainDemo.c	void LowISR(void) __interrupt (2) //ML for sdcc
00774c   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00774e   ffe5
007750   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
007752   ffe5
007754   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
007756   ffe5
007758   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
00775a   ffe5
00775c   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00775e   ffe5
007760   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
007762   ffe5
007764   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
007766   ffe5
007768   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
00776a   ffe5
00776c   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00776e   ffe5
007770   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007772   ffe5
007774   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007776   ffd9
                                           ;	.line	61; MainDemo.c	TickUpdate();
007778   ec19     call	0x7e32, 0           	CALL	_TickUpdate
00777a   f03f
00777c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00777e   ffd9
007780   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
007782   fffb
007784   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
007786   fffa
007788   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
00778a   ffea
00778c   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
00778e   ffe9
007790   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
007792   fff4
007794   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
007796   fff3
007798   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
00779a   ffe0
00779c   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
00779e   ffd8
0077a0   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0077a2   ffe8
0077a4   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0077a6   6c4f     negf	0x4f, 0             	DB	0x4f, 0x6c, 0x69, 0x6d, 0x65, 0x78, 0x00
0077a8   6d69     negf	0x69, 0x1           
0077aa   7865     btg	0x65, 0x4, 0         
0077ac   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1814 (0x0716) bytes ( 1.38%)
                                           ;           	  907 (0x038b) words
                                           ; udata size:	   72 (0x0048) bytes ( 1.88%)
                                           ; access size:	   14 (0x000e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:15 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:15 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ARPInit
                                           	global _ARPProcess
                                           	global _ARPResolve
                                           	global _ARPIsResolved
                                           	global _SwapARPPacket
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrput1
                                           	extern __gptrput4
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _swaps
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACPutHeader
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _ARPProcess_smARP_1_1	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_ARP_0	udata
                                           _Cache	res	10
                                           
                                           udata_ARP_1	udata
                                           _ARPProcess_Target_1_1	res	10
                                           
                                           udata_ARP_2	udata
                                           _ARPProcess_packet_1_1	res	28
                                           
                                           udata_ARP_3	udata
                                           _ARPResolve_packet_1_1	res	28
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ARP__SwapARPPacket	code
                                           _SwapARPPacket:
                                           ;	.line	412; TCPIP_Stack/ARP.c	void SwapARPPacket(ARP_PACKET* p)
0050a8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0050aa   ffe5
0050ac   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0050ae   ffd9
0050b0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0050b2   ffe5
0050b4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0050b6   ffe5
0050b8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0050ba   ffe5
0050bc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0050be   ffe5
0050c0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0050c2   ffe5
0050c4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0050c6   ffe5
0050c8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0050ca   ffe5
0050cc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0050ce   ffe5
0050d0   0e02     movlw	0x2                	MOVLW	0x02
0050d2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0050d4   f000
0050d6   0e03     movlw	0x3                	MOVLW	0x03
0050d8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0050da   f001
0050dc   0e04     movlw	0x4                	MOVLW	0x04
0050de   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0050e0   f002
                                           ;	.line	414; TCPIP_Stack/ARP.c	p->HardwareType     = swaps(p->HardwareType);
0050e2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0050e4   ffe9
0050e6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0050e8   fff3
0050ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0050ec   ecee     call	0x7ddc, 0           	CALL	__gptrget2
0050ee   f03e
0050f0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0050f2   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0050f4   f004
0050f6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0050f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0050fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0050fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0050fe   ec87     call	0x790e, 0           	CALL	_swaps
005100   f03c
005102   6e03     movwf	0x3, 0             	MOVWF	r0x03
005104   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
005106   f004
005108   0e02     movlw	0x2                	MOVLW	0x02
00510a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00510c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00510e   ffe5
005110   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
005112   fff4
005114   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005116   ffe9
005118   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00511a   fff3
00511c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00511e   ec30     call	0x8060, 0           	CALL	__gptrput2
005120   f040
                                           ;	.line	415; TCPIP_Stack/ARP.c	p->Protocol         = swaps(p->Protocol);
005122   5000     movf	0, 0, 0             	MOVF	r0x00, W
005124   0f02     addlw	0x2                	ADDLW	0x02
005126   6e03     movwf	0x3, 0             	MOVWF	r0x03
005128   0e00     movlw	0                  	MOVLW	0x00
00512a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00512c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00512e   0e00     movlw	0                  	MOVLW	0x00
005130   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005132   6e05     movwf	0x5, 0             	MOVWF	r0x05
005134   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005136   ffe9
005138   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00513a   fff3
00513c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00513e   ecee     call	0x7ddc, 0           	CALL	__gptrget2
005140   f03e
005142   6e06     movwf	0x6, 0             	MOVWF	r0x06
005144   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
005146   f007
005148   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00514a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00514c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00514e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005150   ec87     call	0x790e, 0           	CALL	_swaps
005152   f03c
005154   6e06     movwf	0x6, 0             	MOVWF	r0x06
005156   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
005158   f007
00515a   0e02     movlw	0x2                	MOVLW	0x02
00515c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00515e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005160   ffe5
005162   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
005164   fff4
005166   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005168   ffe9
00516a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00516c   fff3
00516e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005170   ec30     call	0x8060, 0           	CALL	__gptrput2
005172   f040
                                           ;	.line	416; TCPIP_Stack/ARP.c	p->Operation        = swaps(p->Operation);
005174   0e06     movlw	0x6                	MOVLW	0x06
005176   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005178   0e00     movlw	0                  	MOVLW	0x00
00517a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00517c   0e00     movlw	0                  	MOVLW	0x00
00517e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005180   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005182   ffe9
005184   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005186   fff3
005188   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00518a   ecee     call	0x7ddc, 0           	CALL	__gptrget2
00518c   f03e
00518e   6e03     movwf	0x3, 0             	MOVWF	r0x03
005190   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
005192   f004
005194   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005196   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005198   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00519a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00519c   ec87     call	0x790e, 0           	CALL	_swaps
00519e   f03c
0051a0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0051a2   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0051a4   f004
0051a6   0e02     movlw	0x2                	MOVLW	0x02
0051a8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0051aa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0051ac   ffe5
0051ae   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0051b0   fff4
0051b2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0051b4   ffe9
0051b6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0051b8   fff3
0051ba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0051bc   ec30     call	0x8060, 0           	CALL	__gptrput2
0051be   f040
0051c0   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0051c2   f007
0051c4   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0051c6   f006
0051c8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0051ca   f005
0051cc   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0051ce   f004
0051d0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0051d2   f003
0051d4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0051d6   f002
0051d8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0051da   f001
0051dc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0051de   f000
0051e0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0051e2   ffd9
0051e4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPIsResolved	code
                                           _ARPIsResolved:
                                           ;	.line	377; TCPIP_Stack/ARP.c	BOOL ARPIsResolved(IP_ADDR* IPAddr, MAC_ADDR* MACAddr)
004a1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004a20   ffe5
004a22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004a24   ffd9
004a26   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004a28   ffe5
004a2a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004a2c   ffe5
004a2e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004a30   ffe5
004a32   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004a34   ffe5
004a36   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004a38   ffe5
004a3a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004a3c   ffe5
004a3e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004a40   ffe5
004a42   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004a44   ffe5
004a46   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004a48   ffe5
004a4a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004a4c   ffe5
004a4e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
004a50   ffe5
004a52   0e02     movlw	0x2                	MOVLW	0x02
004a54   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004a56   f000
004a58   0e03     movlw	0x3                	MOVLW	0x03
004a5a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004a5c   f001
004a5e   0e04     movlw	0x4                	MOVLW	0x04
004a60   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004a62   f002
004a64   0e05     movlw	0x5                	MOVLW	0x05
004a66   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004a68   f003
004a6a   0e06     movlw	0x6                	MOVLW	0x06
004a6c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
004a6e   f004
004a70   0e07     movlw	0x7                	MOVLW	0x07
004a72   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
004a74   f005
                                           ;	.line	379; TCPIP_Stack/ARP.c	if((Cache.IPAddr.Val == IPAddr->Val) || 
004a76   ce75     movff	0xe75, 0x6         	MOVFF	_Cache, r0x06
004a78   f006
004a7a   ce76     movff	0xe76, 0x7         	MOVFF	(_Cache + 1), r0x07
004a7c   f007
004a7e   ce77     movff	0xe77, 0x8         	MOVFF	(_Cache + 2), r0x08
004a80   f008
004a82   ce78     movff	0xe78, 0x9         	MOVFF	(_Cache + 3), r0x09
004a84   f009
004a86   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004a88   ffe9
004a8a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004a8c   fff3
004a8e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004a90   ec43     call	0x7c86, 0           	CALL	__gptrget4
004a92   f03e
004a94   6e00     movwf	0, 0               	MOVWF	r0x00
004a96   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
004a98   f001
004a9a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
004a9c   f002
004a9e   cfe9     movff	0xfe9, 0xa         	MOVFF	FSR0L, r0x0a
004aa0   f00a
004aa2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004aa4   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
004aa6   e109     bnz	0x4aba               	BNZ	_00180_DS_
004aa8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004aaa   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
004aac   e106     bnz	0x4aba               	BNZ	_00180_DS_
004aae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004ab0   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
004ab2   e103     bnz	0x4aba               	BNZ	_00180_DS_
004ab4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004ab6   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
004ab8   e02e     bz	0x4b16                	BZ	_00171_DS_
                                           _00180_DS_:
                                           ;	.line	380; TCPIP_Stack/ARP.c	((Cache.IPAddr.Val == AppConfig.MyGateway.Val) && 
004aba   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004abc   010e     movlb	0xe                	BANKSEL	(_AppConfig + 8)
004abe   1908     xorwf	0x8, 0, 0x1        	XORWF	(_AppConfig + 8), W, B
004ac0   e10c     bnz	0x4ada               	BNZ	_00181_DS_
004ac2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004ac4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 9)
004ac6   1909     xorwf	0x9, 0, 0x1        	XORWF	(_AppConfig + 9), W, B
004ac8   e108     bnz	0x4ada               	BNZ	_00181_DS_
004aca   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004acc   010e     movlb	0xe                	BANKSEL	(_AppConfig + 10)
004ace   190a     xorwf	0xa, 0, 0x1        	XORWF	(_AppConfig + 10), W, B
004ad0   e104     bnz	0x4ada               	BNZ	_00181_DS_
004ad2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
004ad4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 11)
004ad6   190b     xorwf	0xb, 0, 0x1        	XORWF	(_AppConfig + 11), W, B
004ad8   e001     bz	0x4adc                	BZ	_00182_DS_
                                           _00181_DS_:
004ada   d039     bra	0x4b4e               	BRA	_00172_DS_
                                           _00182_DS_:
004adc   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	381; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val)))
004ade   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
004ae0   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
004ae2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
004ae4   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
004ae6   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
004ae8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
004aea   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
004aec   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
004aee   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
004af0   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
004af2   1a0a     xorwf	0xa, 0x1, 0        	XORWF	r0x0a, F
004af4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
004af6   5104     movf	0x4, 0, 0x1         	MOVF	(_AppConfig + 4), W, B
004af8   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
004afa   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
004afc   5105     movf	0x5, 0, 0x1         	MOVF	(_AppConfig + 5), W, B
004afe   1601     andwf	0x1, 0x1, 0        	ANDWF	r0x01, F
004b00   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
004b02   5106     movf	0x6, 0, 0x1         	MOVF	(_AppConfig + 6), W, B
004b04   1602     andwf	0x2, 0x1, 0        	ANDWF	r0x02, F
004b06   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
004b08   5107     movf	0x7, 0, 0x1         	MOVF	(_AppConfig + 7), W, B
004b0a   160a     andwf	0xa, 0x1, 0        	ANDWF	r0x0a, F
004b0c   5000     movf	0, 0, 0             	MOVF	r0x00, W
004b0e   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
004b10   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
004b12   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
004b14   e01c     bz	0x4b4e                	BZ	_00172_DS_
                                           _00171_DS_:
                                           ;	.line	384; TCPIP_Stack/ARP.c	memcpy((void*)MACAddr, (void*)&Cache.MACAddr, sizeof(Cache.MACAddr));
004b16   0e0e     movlw	0xe                	MOVLW	HIGH(_Cache + 4)
004b18   6e01     movwf	0x1, 0             	MOVWF	r0x01
004b1a   0e79     movlw	0x79               	MOVLW	LOW(_Cache + 4)
004b1c   6e00     movwf	0, 0               	MOVWF	r0x00
004b1e   0e80     movlw	0x80               	MOVLW	0x80
004b20   6e02     movwf	0x2, 0             	MOVWF	r0x02
004b22   0e00     movlw	0                  	MOVLW	0x00
004b24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b26   0e06     movlw	0x6                	MOVLW	0x06
004b28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b2a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004b2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b2e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004b30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b32   5000     movf	0, 0, 0             	MOVF	r0x00, W
004b34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b36   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004b38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b3a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004b3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b3e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004b40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004b42   ec1d     call	0x5e3a, 0           	CALL	_memcpy
004b44   f02f
004b46   0e08     movlw	0x8                	MOVLW	0x08
004b48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	388; TCPIP_Stack/ARP.c	return TRUE;
004b4a   0e01     movlw	0x1                	MOVLW	0x01
004b4c   d001     bra	0x4b50               	BRA	_00175_DS_
                                           _00172_DS_:
                                           ;	.line	390; TCPIP_Stack/ARP.c	return FALSE;
004b4e   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00175_DS_:
004b50   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
004b52   f00a
004b54   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004b56   f009
004b58   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004b5a   f008
004b5c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004b5e   f007
004b60   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004b62   f006
004b64   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004b66   f005
004b68   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004b6a   f004
004b6c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004b6e   f003
004b70   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004b72   f002
004b74   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004b76   f001
004b78   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004b7a   f000
004b7c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004b7e   ffd9
004b80   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPResolve	code
                                           _ARPResolve:
                                           ;	.line	324; TCPIP_Stack/ARP.c	void ARPResolve(IP_ADDR* IPAddr)
0051e6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0051e8   ffe5
0051ea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0051ec   ffd9
0051ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0051f0   ffe5
0051f2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0051f4   ffe5
0051f6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0051f8   ffe5
0051fa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0051fc   ffe5
0051fe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005200   ffe5
005202   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005204   ffe5
005206   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005208   ffe5
00520a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00520c   ffe5
00520e   0e02     movlw	0x2                	MOVLW	0x02
005210   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005212   f000
005214   0e03     movlw	0x3                	MOVLW	0x03
005216   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005218   f001
00521a   0e04     movlw	0x4                	MOVLW	0x04
00521c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00521e   f002
                                           ;	.line	328; TCPIP_Stack/ARP.c	packet.Operation            = ARP_OPERATION_REQ;
005220   0e01     movlw	0x1                	MOVLW	0x01
005222   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 6)
005224   6f22     movwf	0x22, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 6), B
005226   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 7)
005228   6b23     clrf	0x23, 0x1           	CLRF	(_ARPResolve_packet_1_1 + 7), B
00522a   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 18)
                                           ;	.line	329; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[0]   = 0xff;
00522c   692e     setf	0x2e, 0x1           	SETF	(_ARPResolve_packet_1_1 + 18), B
00522e   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 19)
                                           ;	.line	330; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[1]   = 0xff;
005230   692f     setf	0x2f, 0x1           	SETF	(_ARPResolve_packet_1_1 + 19), B
005232   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 20)
                                           ;	.line	331; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[2]   = 0xff;
005234   6930     setf	0x30, 0x1           	SETF	(_ARPResolve_packet_1_1 + 20), B
005236   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 21)
                                           ;	.line	332; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[3]   = 0xff;
005238   6931     setf	0x31, 0x1           	SETF	(_ARPResolve_packet_1_1 + 21), B
00523a   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 22)
                                           ;	.line	333; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[4]   = 0xff;
00523c   6932     setf	0x32, 0x1           	SETF	(_ARPResolve_packet_1_1 + 22), B
00523e   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 23)
                                           ;	.line	334; TCPIP_Stack/ARP.c	packet.TargetMACAddr.v[5]   = 0xff;
005240   6933     setf	0x33, 0x1           	SETF	(_ARPResolve_packet_1_1 + 23), B
                                           ;	.line	340; TCPIP_Stack/ARP.c	((AppConfig.MyIPAddr.Val ^ IPAddr->Val) & AppConfig.MyMask.Val) 
005242   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005244   ffe9
005246   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005248   fff3
00524a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00524c   ec43     call	0x7c86, 0           	CALL	__gptrget4
00524e   f03e
005250   6e00     movwf	0, 0               	MOVWF	r0x00
005252   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
005254   f001
005256   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
005258   f002
00525a   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
00525c   f003
00525e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005260   010e     movlb	0xe                	BANKSEL	_AppConfig
005262   1900     xorwf	0, 0, 0x1          	XORWF	_AppConfig, W, B
005264   6e04     movwf	0x4, 0             	MOVWF	r0x04
005266   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005268   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
00526a   1901     xorwf	0x1, 0, 0x1        	XORWF	(_AppConfig + 1), W, B
00526c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00526e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005270   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
005272   1902     xorwf	0x2, 0, 0x1        	XORWF	(_AppConfig + 2), W, B
005274   6e06     movwf	0x6, 0             	MOVWF	r0x06
005276   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005278   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
00527a   1903     xorwf	0x3, 0, 0x1        	XORWF	(_AppConfig + 3), W, B
00527c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00527e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
005280   5104     movf	0x4, 0, 0x1         	MOVF	(_AppConfig + 4), W, B
005282   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
005284   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
005286   5105     movf	0x5, 0, 0x1         	MOVF	(_AppConfig + 5), W, B
005288   1605     andwf	0x5, 0x1, 0        	ANDWF	r0x05, F
00528a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
00528c   5106     movf	0x6, 0, 0x1         	MOVF	(_AppConfig + 6), W, B
00528e   1606     andwf	0x6, 0x1, 0        	ANDWF	r0x06, F
005290   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
005292   5107     movf	0x7, 0, 0x1         	MOVF	(_AppConfig + 7), W, B
005294   1607     andwf	0x7, 0x1, 0        	ANDWF	r0x07, F
005296   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005298   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00529a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00529c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00529e   e009     bz	0x52b2                	BZ	_00165_DS_
                                           ;	.line	341; TCPIP_Stack/ARP.c	? AppConfig.MyGateway.Val 
0052a0   ce08     movff	0xe08, 0x4         	MOVFF	(_AppConfig + 8), r0x04
0052a2   f004
0052a4   ce09     movff	0xe09, 0x5         	MOVFF	(_AppConfig + 9), r0x05
0052a6   f005
0052a8   ce0a     movff	0xe0a, 0x6         	MOVFF	(_AppConfig + 10), r0x06
0052aa   f006
0052ac   ce0b     movff	0xe0b, 0x7         	MOVFF	(_AppConfig + 11), r0x07
0052ae   f007
0052b0   d008     bra	0x52c2               	BRA	_00166_DS_
                                           _00165_DS_:
                                           ;	.line	342; TCPIP_Stack/ARP.c	: (*IPAddr).Val;
0052b2   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0052b4   f004
0052b6   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0052b8   f005
0052ba   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
0052bc   f006
0052be   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
0052c0   f007
                                           _00166_DS_:
0052c2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0052c4   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 24)
0052c6   6f34     movwf	0x34, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 24), B
0052c8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0052ca   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 25)
0052cc   6f35     movwf	0x35, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 25), B
0052ce   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0052d0   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 26)
0052d2   6f36     movwf	0x36, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 26), B
0052d4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0052d6   0108     movlb	0x8                	BANKSEL	(_ARPResolve_packet_1_1 + 27)
0052d8   6f37     movwf	0x37, 0x1          	MOVWF	(_ARPResolve_packet_1_1 + 27), B
                                           ;	.line	343; TCPIP_Stack/ARP.c	ARPPut(&packet);
0052da   0e08     movlw	0x8                	MOVLW	HIGH(_ARPResolve_packet_1_1)
0052dc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0052de   0e1c     movlw	0x1c               	MOVLW	LOW(_ARPResolve_packet_1_1)
0052e0   6e00     movwf	0, 0               	MOVWF	r0x00
0052e2   0e80     movlw	0x80               	MOVLW	0x80
0052e4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0052e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0052e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0052ea   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0052ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0052ee   5000     movf	0, 0, 0             	MOVF	r0x00, W
0052f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0052f2   ecb3     call	0x3f66, 0           	CALL	_ARPPut
0052f4   f01f
0052f6   0e03     movlw	0x3                	MOVLW	0x03
0052f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0052fa   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0052fc   f007
0052fe   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005300   f006
005302   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005304   f005
005306   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005308   f004
00530a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00530c   f003
00530e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005310   f002
005312   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005314   f001
005316   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005318   f000
00531a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00531c   ffd9
00531e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPProcess	code
                                           _ARPProcess:
                                           ;	.line	204; TCPIP_Stack/ARP.c	BOOL ARPProcess(void)
002df2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002df4   ffe5
002df6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002df8   ffd9
002dfa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002dfc   ffe5
002dfe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002e00   ffe5
002e02   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002e04   ffe5
002e06   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002e08   ffe5
002e0a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002e0c   ffe5
002e0e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002e10   ffe5
002e12   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002e14   ffe5
002e16   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002e18   ffe5
002e1a   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	214; TCPIP_Stack/ARP.c	switch(smARP)
002e1c   515c     movf	0x5c, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
002e1e   e006     bz	0x2e2c                	BZ	_00118_DS_
                                           _00144_DS_:
002e20   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
002e22   515c     movf	0x5c, 0, 0x1        	MOVF	_ARPProcess_smARP_1_1, W, B
002e24   0a01     xorlw	0x1                	XORLW	0x01
002e26   e101     bnz	0x2e2a               	BNZ	_00146_DS_
002e28   d0c4     bra	0x2fb2               	BRA	_00129_DS_
                                           _00146_DS_:
002e2a   d10f     bra	0x304a               	BRA	_00132_DS_
                                           _00118_DS_:
                                           ;	.line	218; TCPIP_Stack/ARP.c	MACGetArray((BYTE*)&packet, sizeof(packet));
002e2c   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1)
002e2e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e30   0e00     movlw	0                  	MOVLW	LOW(_ARPProcess_packet_1_1)
002e32   6e00     movwf	0, 0               	MOVWF	r0x00
002e34   0e80     movlw	0x80               	MOVLW	0x80
002e36   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e38   0e00     movlw	0                  	MOVLW	0x00
002e3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e3c   0e1c     movlw	0x1c               	MOVLW	0x1c
002e3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e40   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e44   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e48   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e4c   ec7d     call	0x62fa, 0           	CALL	_MACGetArray
002e4e   f031
002e50   0e05     movlw	0x5                	MOVLW	0x05
002e52   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	219; TCPIP_Stack/ARP.c	MACDiscardRx();
002e54   ec30     call	0x6e60, 0           	CALL	_MACDiscardRx
002e56   f037
                                           ;	.line	220; TCPIP_Stack/ARP.c	SwapARPPacket(&packet);
002e58   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1)
002e5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
002e5c   0e00     movlw	0                  	MOVLW	LOW(_ARPProcess_packet_1_1)
002e5e   6e00     movwf	0, 0               	MOVWF	r0x00
002e60   0e80     movlw	0x80               	MOVLW	0x80
002e62   6e02     movwf	0x2, 0             	MOVWF	r0x02
002e64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002e6a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e6e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002e70   ec54     call	0x50a8, 0           	CALL	_SwapARPPacket
002e72   f028
002e74   0e03     movlw	0x3                	MOVLW	0x03
002e76   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002e78   0108     movlb	0x8                	BANKSEL	_ARPProcess_packet_1_1
                                           ;	.line	223; TCPIP_Stack/ARP.c	if ( packet.HardwareType != HW_ETHERNET     ||
002e7a   5100     movf	0, 0, 0x1           	MOVF	_ARPProcess_packet_1_1, W, B
002e7c   0a01     xorlw	0x1                	XORLW	0x01
002e7e   e103     bnz	0x2e86               	BNZ	_00147_DS_
002e80   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 1)
002e82   5101     movf	0x1, 0, 0x1         	MOVF	(_ARPProcess_packet_1_1 + 1), W, B
002e84   e001     bz	0x2e88                	BZ	_00148_DS_
                                           _00147_DS_:
002e86   d008     bra	0x2e98               	BRA	_00119_DS_
                                           _00148_DS_:
002e88   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 4)
                                           ;	.line	224; TCPIP_Stack/ARP.c	packet.MACAddrLen != sizeof(MAC_ADDR)  ||
002e8a   5104     movf	0x4, 0, 0x1         	MOVF	(_ARPProcess_packet_1_1 + 4), W, B
002e8c   0a06     xorlw	0x6                	XORLW	0x06
002e8e   e104     bnz	0x2e98               	BNZ	_00119_DS_
                                           _00150_DS_:
002e90   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 5)
                                           ;	.line	225; TCPIP_Stack/ARP.c	packet.ProtocolLen != sizeof(IP_ADDR) )
002e92   5105     movf	0x5, 0, 0x1         	MOVF	(_ARPProcess_packet_1_1 + 5), W, B
002e94   0a04     xorlw	0x4                	XORLW	0x04
002e96   e002     bz	0x2e9c                	BZ	_00120_DS_
                                           _00119_DS_:
                                           ;	.line	227; TCPIP_Stack/ARP.c	return TRUE;
002e98   0e01     movlw	0x1                	MOVLW	0x01
002e9a   d0d8     bra	0x304c               	BRA	_00133_DS_
                                           _00120_DS_:
                                           ;	.line	232; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_RESP)
002e9c   c806     movff	0x806, 0           	MOVFF	(_ARPProcess_packet_1_1 + 6), r0x00
002e9e   f000
002ea0   c807     movff	0x807, 0x1         	MOVFF	(_ARPProcess_packet_1_1 + 7), r0x01
002ea2   f001
002ea4   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ea6   0a02     xorlw	0x2                	XORLW	0x02
002ea8   e102     bnz	0x2eae               	BNZ	_00153_DS_
002eaa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002eac   e001     bz	0x2eb0                	BZ	_00154_DS_
                                           _00153_DS_:
002eae   d032     bra	0x2f14               	BRA	_00124_DS_
                                           _00154_DS_:
                                           ;	.line	238; TCPIP_Stack/ARP.c	memcpy((void*)&Cache.MACAddr, (void*)&packet.SenderMACAddr, 
002eb0   0e0e     movlw	0xe                	MOVLW	HIGH(_Cache + 4)
002eb2   6e03     movwf	0x3, 0             	MOVWF	r0x03
002eb4   0e79     movlw	0x79               	MOVLW	LOW(_Cache + 4)
002eb6   6e02     movwf	0x2, 0             	MOVWF	r0x02
002eb8   0e80     movlw	0x80               	MOVLW	0x80
002eba   6e04     movwf	0x4, 0             	MOVWF	r0x04
002ebc   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
002ebe   6e06     movwf	0x6, 0             	MOVWF	r0x06
002ec0   0e08     movlw	0x8                	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
002ec2   6e05     movwf	0x5, 0             	MOVWF	r0x05
002ec4   0e80     movlw	0x80               	MOVLW	0x80
002ec6   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	239; TCPIP_Stack/ARP.c	sizeof(packet.SenderMACAddr));  
002ec8   0e00     movlw	0                  	MOVLW	0x00
002eca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ecc   0e06     movlw	0x6                	MOVLW	0x06
002ece   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002ed2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002ed6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ed8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002eda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002edc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002ede   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002ee2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ee6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ee8   ec1d     call	0x5e3a, 0           	CALL	_memcpy
002eea   f02f
002eec   0e08     movlw	0x8                	MOVLW	0x08
002eee   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002ef0   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	243; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = packet.SenderIPAddr.Val;
002ef2   510e     movf	0xe, 0, 0x1         	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
002ef4   010e     movlb	0xe                	BANKSEL	_Cache
002ef6   6f75     movwf	0x75, 0x1          	MOVWF	_Cache, B
002ef8   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
002efa   510f     movf	0xf, 0, 0x1         	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
002efc   010e     movlb	0xe                	BANKSEL	(_Cache + 1)
002efe   6f76     movwf	0x76, 0x1          	MOVWF	(_Cache + 1), B
002f00   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
002f02   5110     movf	0x10, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
002f04   010e     movlb	0xe                	BANKSEL	(_Cache + 2)
002f06   6f77     movwf	0x77, 0x1          	MOVWF	(_Cache + 2), B
002f08   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
002f0a   5111     movf	0x11, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
002f0c   010e     movlb	0xe                	BANKSEL	(_Cache + 3)
002f0e   6f78     movwf	0x78, 0x1          	MOVWF	(_Cache + 3), B
                                           ;	.line	244; TCPIP_Stack/ARP.c	return TRUE;
002f10   0e01     movlw	0x1                	MOVLW	0x01
002f12   d09c     bra	0x304c               	BRA	_00133_DS_
                                           _00124_DS_:
                                           ;	.line	249; TCPIP_Stack/ARP.c	if(packet.Operation == ARP_OPERATION_REQ)
002f14   5000     movf	0, 0, 0             	MOVF	r0x00, W
002f16   0a01     xorlw	0x1                	XORLW	0x01
002f18   e102     bnz	0x2f1e               	BNZ	_00155_DS_
002f1a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f1c   e001     bz	0x2f20                	BZ	_00156_DS_
                                           _00155_DS_:
002f1e   d049     bra	0x2fb2               	BRA	_00129_DS_
                                           _00156_DS_:
002f20   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
                                           ;	.line	251; TCPIP_Stack/ARP.c	if(packet.TargetIPAddr.Val != AppConfig.MyIPAddr.Val)
002f22   5118     movf	0x18, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 24), W, B
002f24   010e     movlb	0xe                	BANKSEL	_AppConfig
002f26   1900     xorwf	0, 0, 0x1          	XORWF	_AppConfig, W, B
002f28   e10f     bnz	0x2f48               	BNZ	_00158_DS_
002f2a   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
002f2c   5119     movf	0x19, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 25), W, B
002f2e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
002f30   1901     xorwf	0x1, 0, 0x1        	XORWF	(_AppConfig + 1), W, B
002f32   e10a     bnz	0x2f48               	BNZ	_00158_DS_
002f34   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
002f36   511a     movf	0x1a, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 26), W, B
002f38   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
002f3a   1902     xorwf	0x2, 0, 0x1        	XORWF	(_AppConfig + 2), W, B
002f3c   e105     bnz	0x2f48               	BNZ	_00158_DS_
002f3e   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
002f40   511b     movf	0x1b, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 27), W, B
002f42   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
002f44   1903     xorwf	0x3, 0, 0x1        	XORWF	(_AppConfig + 3), W, B
002f46   e002     bz	0x2f4c                	BZ	_00126_DS_
                                           _00158_DS_:
                                           ;	.line	253; TCPIP_Stack/ARP.c	return TRUE;
002f48   0e01     movlw	0x1                	MOVLW	0x01
002f4a   d080     bra	0x304c               	BRA	_00133_DS_
                                           _00126_DS_:
002f4c   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 14)
                                           ;	.line	262; TCPIP_Stack/ARP.c	Target.IPAddr.Val = packet.SenderIPAddr.Val;
002f4e   510e     movf	0xe, 0, 0x1         	MOVF	(_ARPProcess_packet_1_1 + 14), W, B
002f50   0108     movlb	0x8                	BANKSEL	_ARPProcess_Target_1_1
002f52   6fc1     movwf	0xc1, 0x1          	MOVWF	_ARPProcess_Target_1_1, B
002f54   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 15)
002f56   510f     movf	0xf, 0, 0x1         	MOVF	(_ARPProcess_packet_1_1 + 15), W, B
002f58   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
002f5a   6fc2     movwf	0xc2, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 1), B
002f5c   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 16)
002f5e   5110     movf	0x10, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 16), W, B
002f60   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
002f62   6fc3     movwf	0xc3, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 2), B
002f64   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 17)
002f66   5111     movf	0x11, 0, 0x1        	MOVF	(_ARPProcess_packet_1_1 + 17), W, B
002f68   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
002f6a   6fc4     movwf	0xc4, 0x1          	MOVWF	(_ARPProcess_Target_1_1 + 3), B
                                           ;	.line	264; TCPIP_Stack/ARP.c	memcpy((void*)&Target.MACAddr, 
002f6c   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
002f6e   6e01     movwf	0x1, 0             	MOVWF	r0x01
002f70   0ec5     movlw	0xc5               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
002f72   6e00     movwf	0, 0               	MOVWF	r0x00
002f74   0e80     movlw	0x80               	MOVLW	0x80
002f76   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	265; TCPIP_Stack/ARP.c	(void*)&packet.SenderMACAddr, sizeof(packet.SenderMACAddr));
002f78   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 8)
002f7a   6e04     movwf	0x4, 0             	MOVWF	r0x04
002f7c   0e08     movlw	0x8                	MOVLW	LOW(_ARPProcess_packet_1_1 + 8)
002f7e   6e03     movwf	0x3, 0             	MOVWF	r0x03
002f80   0e80     movlw	0x80               	MOVLW	0x80
002f82   6e05     movwf	0x5, 0             	MOVWF	r0x05
002f84   0e00     movlw	0                  	MOVLW	0x00
002f86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f88   0e06     movlw	0x6                	MOVLW	0x06
002f8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f8c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002f8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f90   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002f92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f94   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002f96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f9a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f9c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002f9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fa0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002fa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fa4   ec1d     call	0x5e3a, 0           	CALL	_memcpy
002fa6   f02f
002fa8   0e08     movlw	0x8                	MOVLW	0x08
002faa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	269; TCPIP_Stack/ARP.c	smARP = SM_ARP_REPLY;
002fac   0e01     movlw	0x1                	MOVLW	0x01
002fae   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
002fb0   6f5c     movwf	0x5c, 0x1          	MOVWF	_ARPProcess_smARP_1_1, B
                                           _00129_DS_:
                                           ;	.line	274; TCPIP_Stack/ARP.c	packet.Operation  = ARP_OPERATION_RESP;
002fb2   0e02     movlw	0x2                	MOVLW	0x02
002fb4   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 6)
002fb6   6f06     movwf	0x6, 0x1           	MOVWF	(_ARPProcess_packet_1_1 + 6), B
002fb8   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 7)
002fba   6b07     clrf	0x7, 0x1            	CLRF	(_ARPProcess_packet_1_1 + 7), B
                                           ;	.line	276; TCPIP_Stack/ARP.c	memcpy(&packet.TargetMACAddr, (void*)&Target.MACAddr, 
002fbc   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1 + 18)
002fbe   6e01     movwf	0x1, 0             	MOVWF	r0x01
002fc0   0e12     movlw	0x12               	MOVLW	LOW(_ARPProcess_packet_1_1 + 18)
002fc2   6e00     movwf	0, 0               	MOVWF	r0x00
002fc4   0e80     movlw	0x80               	MOVLW	0x80
002fc6   6e02     movwf	0x2, 0             	MOVWF	r0x02
002fc8   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_Target_1_1 + 4)
002fca   6e04     movwf	0x4, 0             	MOVWF	r0x04
002fcc   0ec5     movlw	0xc5               	MOVLW	LOW(_ARPProcess_Target_1_1 + 4)
002fce   6e03     movwf	0x3, 0             	MOVWF	r0x03
002fd0   0e80     movlw	0x80               	MOVLW	0x80
002fd2   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	277; TCPIP_Stack/ARP.c	sizeof(Target.MACAddr));
002fd4   0e00     movlw	0                  	MOVLW	0x00
002fd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fd8   0e06     movlw	0x6                	MOVLW	0x06
002fda   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fdc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002fe2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002fe6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fe8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002fea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002fec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002fee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ff2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ff4   ec1d     call	0x5e3a, 0           	CALL	_memcpy
002ff6   f02f
002ff8   0e08     movlw	0x8                	MOVLW	0x08
002ffa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002ffc   0108     movlb	0x8                	BANKSEL	_ARPProcess_Target_1_1
                                           ;	.line	281; TCPIP_Stack/ARP.c	packet.TargetIPAddr.Val	= Target.IPAddr.Val;
002ffe   51c1     movf	0xc1, 0, 0x1        	MOVF	_ARPProcess_Target_1_1, W, B
003000   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 24)
003002   6f18     movwf	0x18, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 24), B
003004   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 1)
003006   51c2     movf	0xc2, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 1), W, B
003008   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 25)
00300a   6f19     movwf	0x19, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 25), B
00300c   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 2)
00300e   51c3     movf	0xc3, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 2), W, B
003010   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 26)
003012   6f1a     movwf	0x1a, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 26), B
003014   0108     movlb	0x8                	BANKSEL	(_ARPProcess_Target_1_1 + 3)
003016   51c4     movf	0xc4, 0, 0x1        	MOVF	(_ARPProcess_Target_1_1 + 3), W, B
003018   0108     movlb	0x8                	BANKSEL	(_ARPProcess_packet_1_1 + 27)
00301a   6f1b     movwf	0x1b, 0x1          	MOVWF	(_ARPProcess_packet_1_1 + 27), B
                                           ;	.line	284; TCPIP_Stack/ARP.c	if(!ARPPut(&packet))
00301c   0e08     movlw	0x8                	MOVLW	HIGH(_ARPProcess_packet_1_1)
00301e   6e01     movwf	0x1, 0             	MOVWF	r0x01
003020   0e00     movlw	0                  	MOVLW	LOW(_ARPProcess_packet_1_1)
003022   6e00     movwf	0, 0               	MOVWF	r0x00
003024   0e80     movlw	0x80               	MOVLW	0x80
003026   6e02     movwf	0x2, 0             	MOVWF	r0x02
003028   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00302a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00302c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00302e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003030   5000     movf	0, 0, 0             	MOVF	r0x00, W
003032   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003034   ecb3     call	0x3f66, 0           	CALL	_ARPPut
003036   f01f
003038   6e00     movwf	0, 0               	MOVWF	r0x00
00303a   0e03     movlw	0x3                	MOVLW	0x03
00303c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00303e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003040   e102     bnz	0x3046               	BNZ	_00131_DS_
                                           ;	.line	286; TCPIP_Stack/ARP.c	return FALSE;
003042   6ae8     clrf	0xe8, 0             	CLRF	WREG
003044   d003     bra	0x304c               	BRA	_00133_DS_
                                           _00131_DS_:
003046   0108     movlb	0x8                	BANKSEL	_ARPProcess_smARP_1_1
                                           ;	.line	290; TCPIP_Stack/ARP.c	smARP = SM_ARP_IDLE;
003048   6b5c     clrf	0x5c, 0x1           	CLRF	_ARPProcess_smARP_1_1, B
                                           _00132_DS_:
                                           ;	.line	294; TCPIP_Stack/ARP.c	return TRUE;
00304a   0e01     movlw	0x1                	MOVLW	0x01
                                           _00133_DS_:
00304c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00304e   f007
003050   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003052   f006
003054   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003056   f005
003058   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00305a   f004
00305c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00305e   f003
003060   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003062   f002
003064   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003066   f001
003068   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00306a   f000
00306c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00306e   ffd9
003070   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPInit	code
                                           _ARPInit:
                                           ;	.line	165; TCPIP_Stack/ARP.c	void ARPInit(void)
007d78   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007d7a   ffe5
007d7c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007d7e   ffd9
007d80   010e     movlb	0xe                	BANKSEL	(_Cache + 4)
                                           ;	.line	167; TCPIP_Stack/ARP.c	Cache.MACAddr.v[0] = 0xff;
007d82   6979     setf	0x79, 0x1           	SETF	(_Cache + 4), B
007d84   010e     movlb	0xe                	BANKSEL	(_Cache + 5)
                                           ;	.line	168; TCPIP_Stack/ARP.c	Cache.MACAddr.v[1] = 0xff;
007d86   697a     setf	0x7a, 0x1           	SETF	(_Cache + 5), B
007d88   010e     movlb	0xe                	BANKSEL	(_Cache + 6)
                                           ;	.line	169; TCPIP_Stack/ARP.c	Cache.MACAddr.v[2] = 0xff;
007d8a   697b     setf	0x7b, 0x1           	SETF	(_Cache + 6), B
007d8c   010e     movlb	0xe                	BANKSEL	(_Cache + 7)
                                           ;	.line	170; TCPIP_Stack/ARP.c	Cache.MACAddr.v[3] = 0xff;
007d8e   697c     setf	0x7c, 0x1           	SETF	(_Cache + 7), B
007d90   010e     movlb	0xe                	BANKSEL	(_Cache + 8)
                                           ;	.line	171; TCPIP_Stack/ARP.c	Cache.MACAddr.v[4] = 0xff;
007d92   697d     setf	0x7d, 0x1           	SETF	(_Cache + 8), B
007d94   010e     movlb	0xe                	BANKSEL	(_Cache + 9)
                                           ;	.line	172; TCPIP_Stack/ARP.c	Cache.MACAddr.v[5] = 0xff;
007d96   697e     setf	0x7e, 0x1           	SETF	(_Cache + 9), B
007d98   010e     movlb	0xe                	BANKSEL	_Cache
                                           ;	.line	174; TCPIP_Stack/ARP.c	Cache.IPAddr.Val = 0x0;
007d9a   6b75     clrf	0x75, 0x1           	CLRF	_Cache, B
007d9c   010e     movlb	0xe                	BANKSEL	(_Cache + 1)
007d9e   6b76     clrf	0x76, 0x1           	CLRF	(_Cache + 1), B
007da0   010e     movlb	0xe                	BANKSEL	(_Cache + 2)
007da2   6b77     clrf	0x77, 0x1           	CLRF	(_Cache + 2), B
007da4   010e     movlb	0xe                	BANKSEL	(_Cache + 3)
007da6   6b78     clrf	0x78, 0x1           	CLRF	(_Cache + 3), B
007da8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007daa   ffd9
007dac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ARP__ARPPut	code
                                           _ARPPut:
                                           ;	.line	111; TCPIP_Stack/ARP.c	static BOOL ARPPut(ARP_PACKET* packet)
003f66   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003f68   ffe5
003f6a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003f6c   ffd9
003f6e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003f70   ffe5
003f72   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003f74   ffe5
003f76   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003f78   ffe5
003f7a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003f7c   ffe5
003f7e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003f80   ffe5
003f82   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003f84   ffe5
003f86   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003f88   ffe5
003f8a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003f8c   ffe5
003f8e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003f90   ffe5
003f92   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003f94   ffe5
003f96   0e02     movlw	0x2                	MOVLW	0x02
003f98   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003f9a   f000
003f9c   0e03     movlw	0x3                	MOVLW	0x03
003f9e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003fa0   f001
003fa2   0e04     movlw	0x4                	MOVLW	0x04
003fa4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003fa6   f002
                                           _00105_DS_:
                                           ;	.line	113; TCPIP_Stack/ARP.c	while(!MACIsTxReady());
003fa8   ec5c     call	0x74b8, 0           	CALL	_MACIsTxReady
003faa   f03a
003fac   6e03     movwf	0x3, 0             	MOVWF	r0x03
003fae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003fb0   e0fb     bz	0x3fa8                	BZ	_00105_DS_
                                           ;	.line	114; TCPIP_Stack/ARP.c	MACSetWritePtr(BASE_TX_ADDR);
003fb2   0e1a     movlw	0x1a               	MOVLW	0x1a
003fb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fb6   0e0b     movlw	0xb                	MOVLW	0x0b
003fb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fba   ec19     call	0x7232, 0           	CALL	_MACSetWritePtr
003fbc   f039
003fbe   0e02     movlw	0x2                	MOVLW	0x02
003fc0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	117; TCPIP_Stack/ARP.c	packet->HardwareType  = HW_ETHERNET;
003fc2   0e01     movlw	0x1                	MOVLW	0x01
003fc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fc6   0e00     movlw	0                  	MOVLW	0x00
003fc8   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003fca   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003fcc   ffe9
003fce   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003fd0   fff3
003fd2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003fd4   ec30     call	0x8060, 0           	CALL	__gptrput2
003fd6   f040
                                           ;	.line	118; TCPIP_Stack/ARP.c	packet->Protocol      = ARP_IP;
003fd8   5000     movf	0, 0, 0             	MOVF	r0x00, W
003fda   0f02     addlw	0x2                	ADDLW	0x02
003fdc   6e03     movwf	0x3, 0             	MOVWF	r0x03
003fde   0e00     movlw	0                  	MOVLW	0x00
003fe0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003fe2   6e04     movwf	0x4, 0             	MOVWF	r0x04
003fe4   0e00     movlw	0                  	MOVLW	0x00
003fe6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003fe8   6e05     movwf	0x5, 0             	MOVWF	r0x05
003fea   0e00     movlw	0                  	MOVLW	0x00
003fec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fee   0e08     movlw	0x8                	MOVLW	0x08
003ff0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003ff2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003ff4   ffe9
003ff6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003ff8   fff3
003ffa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003ffc   ec30     call	0x8060, 0           	CALL	__gptrput2
003ffe   f040
                                           ;	.line	119; TCPIP_Stack/ARP.c	packet->MACAddrLen    = sizeof(MAC_ADDR);
004000   5000     movf	0, 0, 0             	MOVF	r0x00, W
004002   0f04     addlw	0x4                	ADDLW	0x04
004004   6e03     movwf	0x3, 0             	MOVWF	r0x03
004006   0e00     movlw	0                  	MOVLW	0x00
004008   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00400a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00400c   0e00     movlw	0                  	MOVLW	0x00
00400e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004010   6e05     movwf	0x5, 0             	MOVWF	r0x05
004012   0e06     movlw	0x6                	MOVLW	0x06
004014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004016   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004018   ffe9
00401a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00401c   fff3
00401e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004020   ec50     call	0x80a0, 0           	CALL	__gptrput1
004022   f040
                                           ;	.line	120; TCPIP_Stack/ARP.c	packet->ProtocolLen   = sizeof(IP_ADDR);
004024   5000     movf	0, 0, 0             	MOVF	r0x00, W
004026   0f05     addlw	0x5                	ADDLW	0x05
004028   6e03     movwf	0x3, 0             	MOVWF	r0x03
00402a   0e00     movlw	0                  	MOVLW	0x00
00402c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00402e   6e04     movwf	0x4, 0             	MOVWF	r0x04
004030   0e00     movlw	0                  	MOVLW	0x00
004032   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004034   6e05     movwf	0x5, 0             	MOVWF	r0x05
004036   0e04     movlw	0x4                	MOVLW	0x04
004038   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00403a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00403c   ffe9
00403e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004040   fff3
004042   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004044   ec50     call	0x80a0, 0           	CALL	__gptrput1
004046   f040
                                           ;	.line	122; TCPIP_Stack/ARP.c	memcpy(&packet->SenderMACAddr, (void*)&AppConfig.MyMACAddr, 
004048   5000     movf	0, 0, 0             	MOVF	r0x00, W
00404a   0f08     addlw	0x8                	ADDLW	0x08
00404c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00404e   0e00     movlw	0                  	MOVLW	0x00
004050   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004052   6e04     movwf	0x4, 0             	MOVWF	r0x04
004054   0e00     movlw	0                  	MOVLW	0x00
004056   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004058   6e05     movwf	0x5, 0             	MOVWF	r0x05
00405a   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
00405c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00405e   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
004060   6e06     movwf	0x6, 0             	MOVWF	r0x06
004062   0e80     movlw	0x80               	MOVLW	0x80
004064   6e08     movwf	0x8, 0             	MOVWF	r0x08
                                           ;	.line	123; TCPIP_Stack/ARP.c	sizeof(packet->SenderMACAddr));
004066   0e00     movlw	0                  	MOVLW	0x00
004068   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00406a   0e06     movlw	0x6                	MOVLW	0x06
00406c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00406e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004070   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004072   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004074   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004076   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004078   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00407a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00407c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00407e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004080   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004082   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004084   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004086   ec1d     call	0x5e3a, 0           	CALL	_memcpy
004088   f02f
00408a   0e08     movlw	0x8                	MOVLW	0x08
00408c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	127; TCPIP_Stack/ARP.c	packet->SenderIPAddr.Val  = AppConfig.MyIPAddr.Val;
00408e   5000     movf	0, 0, 0             	MOVF	r0x00, W
004090   0f0e     addlw	0xe                	ADDLW	0x0e
004092   6e03     movwf	0x3, 0             	MOVWF	r0x03
004094   0e00     movlw	0                  	MOVLW	0x00
004096   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004098   6e04     movwf	0x4, 0             	MOVWF	r0x04
00409a   0e00     movlw	0                  	MOVLW	0x00
00409c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00409e   6e05     movwf	0x5, 0             	MOVWF	r0x05
0040a0   ce00     movff	0xe00, 0x6         	MOVFF	_AppConfig, r0x06
0040a2   f006
0040a4   ce01     movff	0xe01, 0x7         	MOVFF	(_AppConfig + 1), r0x07
0040a6   f007
0040a8   ce02     movff	0xe02, 0x8         	MOVFF	(_AppConfig + 2), r0x08
0040aa   f008
0040ac   ce03     movff	0xe03, 0x9         	MOVFF	(_AppConfig + 3), r0x09
0040ae   f009
0040b0   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0040b2   ffe5
0040b4   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
0040b6   fff4
0040b8   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
0040ba   fff6
0040bc   c009     movff	0x9, 0xff7         	MOVFF	r0x09, TBLPTRH
0040be   fff7
0040c0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0040c2   ffe9
0040c4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0040c6   fff3
0040c8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0040ca   ecbe     call	0x7f7c, 0           	CALL	__gptrput4
0040cc   f03f
                                           ;	.line	129; TCPIP_Stack/ARP.c	SwapARPPacket(packet);
0040ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0040d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040d2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0040d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040da   ec54     call	0x50a8, 0           	CALL	_SwapARPPacket
0040dc   f028
0040de   0e03     movlw	0x3                	MOVLW	0x03
0040e0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	131; TCPIP_Stack/ARP.c	MACPutHeader(&packet->TargetMACAddr, MAC_ARP, sizeof(*packet));
0040e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040e4   0f12     addlw	0x12               	ADDLW	0x12
0040e6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0040e8   0e00     movlw	0                  	MOVLW	0x00
0040ea   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0040ec   6e04     movwf	0x4, 0             	MOVWF	r0x04
0040ee   0e00     movlw	0                  	MOVLW	0x00
0040f0   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0040f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0040f4   0e00     movlw	0                  	MOVLW	0x00
0040f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040f8   0e1c     movlw	0x1c               	MOVLW	0x1c
0040fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040fc   0e06     movlw	0x6                	MOVLW	0x06
0040fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004100   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004102   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004104   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004106   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004108   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00410a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00410c   ecb4     call	0x4f68, 0           	CALL	_MACPutHeader
00410e   f027
004110   0e06     movlw	0x6                	MOVLW	0x06
004112   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	132; TCPIP_Stack/ARP.c	MACPutArray((BYTE*)packet, sizeof(*packet));
004114   0e00     movlw	0                  	MOVLW	0x00
004116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004118   0e1c     movlw	0x1c               	MOVLW	0x1c
00411a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00411c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00411e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004120   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004122   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004124   5000     movf	0, 0, 0             	MOVF	r0x00, W
004126   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004128   ec9a     call	0x6d34, 0           	CALL	_MACPutArray
00412a   f036
00412c   0e05     movlw	0x5                	MOVLW	0x05
00412e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	133; TCPIP_Stack/ARP.c	MACFlush();
004130   ec41     call	0x7682, 0           	CALL	_MACFlush
004132   f03b
                                           ;	.line	135; TCPIP_Stack/ARP.c	return TRUE;
004134   0e01     movlw	0x1                	MOVLW	0x01
004136   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004138   f009
00413a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00413c   f008
00413e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004140   f007
004142   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004144   f006
004146   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004148   f005
00414a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00414c   f004
00414e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004150   f003
004152   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004154   f002
004156   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004158   f001
00415a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00415c   f000
00415e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004160   ffd9
004162   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2192 (0x0890) bytes ( 1.67%)
                                           ;           	 1096 (0x0448) words
                                           ; udata size:	   76 (0x004c) bytes ( 1.98%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:15 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:15 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _DHCPInit
                                           	global _DHCPDisable
                                           	global _DHCPEnable
                                           	global _DHCPIsEnabled
                                           	global _DHCPIsBound
                                           	global _DHCPStateChanged
                                           	global _DHCPIsServerDetected
                                           	global _DHCPTask
                                           	global _DHCPClientInitializedOnce
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           	extern _TickGet
                                           	extern _MACIsLinked
                                           	extern _UDPOpen
                                           	extern _UDPClose
                                           	extern _UDPIsPutReady
                                           	extern _UDPPut
                                           	extern _UDPPutArray
                                           	extern _UDPFlush
                                           	extern _UDPIsGetReady
                                           	extern _UDPGet
                                           	extern _UDPGetArray
                                           	extern _UDPDiscard
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _DHCPClientInitializedOnce	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           
                                           udata_DHCP_0	udata
                                           _DHCPClient	res	28
                                           
                                           udata_DHCP_1	udata
                                           __DHCPReceive_type_1_1	res	1
                                           
                                           udata_DHCP_2	udata
                                           __DHCPReceive_j_1_1	res	1
                                           
                                           udata_DHCP_3	udata
                                           __DHCPReceive_v_1_1	res	1
                                           
                                           udata_DHCP_4	udata
                                           __DHCPReceive_tempServerID_1_1	res	4
                                           
                                           udata_DHCP_5	udata
                                           __DHCPSend_MyIP_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPSend	code
                                           __DHCPSend:
                                           ;	.line	1039; TCPIP_Stack/DHCP.c	static void _DHCPSend(BYTE messageType, BOOL bRenewing)
00150c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00150e   ffe5
001510   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001512   ffd9
001514   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001516   ffe5
001518   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00151a   ffe5
00151c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00151e   ffe5
001520   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001522   ffe5
001524   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001526   ffe5
001528   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00152a   ffe5
00152c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00152e   ffe5
001530   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001532   ffe5
001534   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001536   ffe5
001538   0e02     movlw	0x2                	MOVLW	0x02
00153a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00153c   f000
00153e   0e03     movlw	0x3                	MOVLW	0x03
001540   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001542   f001
                                           ;	.line	1045; TCPIP_Stack/DHCP.c	UDPPut(BOOT_REQUEST);                       // op
001544   0e01     movlw	0x1                	MOVLW	0x01
001546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001548   ece5     call	0x6dca, 0           	CALL	_UDPPut
00154a   f036
00154c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1046; TCPIP_Stack/DHCP.c	UDPPut(BOOT_HW_TYPE);                       // htype
00154e   0e01     movlw	0x1                	MOVLW	0x01
001550   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001552   ece5     call	0x6dca, 0           	CALL	_UDPPut
001554   f036
001556   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1047; TCPIP_Stack/DHCP.c	UDPPut(BOOT_LEN_OF_HW_TYPE);                // hlen
001558   0e06     movlw	0x6                	MOVLW	0x06
00155a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00155c   ece5     call	0x6dca, 0           	CALL	_UDPPut
00155e   f036
001560   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1048; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // hops
001562   0e00     movlw	0                  	MOVLW	0x00
001564   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001566   ece5     call	0x6dca, 0           	CALL	_UDPPut
001568   f036
00156a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1049; TCPIP_Stack/DHCP.c	UDPPut(0x12);                               // xid[0]
00156c   0e12     movlw	0x12               	MOVLW	0x12
00156e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001570   ece5     call	0x6dca, 0           	CALL	_UDPPut
001572   f036
001574   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1050; TCPIP_Stack/DHCP.c	UDPPut(0x23);                               // xid[1]
001576   0e23     movlw	0x23               	MOVLW	0x23
001578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00157a   ece5     call	0x6dca, 0           	CALL	_UDPPut
00157c   f036
00157e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1051; TCPIP_Stack/DHCP.c	UDPPut(0x34);                               // xid[2]
001580   0e34     movlw	0x34               	MOVLW	0x34
001582   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001584   ece5     call	0x6dca, 0           	CALL	_UDPPut
001586   f036
001588   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1052; TCPIP_Stack/DHCP.c	UDPPut(0x56);                               // xid[3]
00158a   0e56     movlw	0x56               	MOVLW	0x56
00158c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00158e   ece5     call	0x6dca, 0           	CALL	_UDPPut
001590   f036
001592   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1053; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[0]
001594   0e00     movlw	0                  	MOVLW	0x00
001596   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001598   ece5     call	0x6dca, 0           	CALL	_UDPPut
00159a   f036
00159c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1054; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // secs[1]
00159e   0e00     movlw	0                  	MOVLW	0x00
0015a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015a2   ece5     call	0x6dca, 0           	CALL	_UDPPut
0015a4   f036
0015a6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0015a8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1055; TCPIP_Stack/DHCP.c	UDPPut(DHCPClient.flags.bits.bUseUnicastMode ? 0x00: 0x80);
0015aa   a93a     btfss	0x3a, 0x4, 0x1     	BTFSS	(_DHCPClient + 2), 4, B
0015ac   d002     bra	0x15b2               	BRA	_00489_DS_
0015ae   6a02     clrf	0x2, 0              	CLRF	r0x02
0015b0   d002     bra	0x15b6               	BRA	_00490_DS_
                                           _00489_DS_:
0015b2   0e80     movlw	0x80               	MOVLW	0x80
0015b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           _00490_DS_:
0015b6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015ba   ece5     call	0x6dca, 0           	CALL	_UDPPut
0015bc   f036
0015be   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1057; TCPIP_Stack/DHCP.c	UDPPut(0);                                  // flags[1]
0015c0   0e00     movlw	0                  	MOVLW	0x00
0015c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c4   ece5     call	0x6dca, 0           	CALL	_UDPPut
0015c6   f036
0015c8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1060; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && bRenewing)
0015ca   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0015cc   f002
0015ce   6a03     clrf	0x3, 0              	CLRF	r0x03
0015d0   6a04     clrf	0x4, 0              	CLRF	r0x04
0015d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0015d4   0a03     xorlw	0x3                	XORLW	0x03
0015d6   e103     bnz	0x15de               	BNZ	_00507_DS_
0015d8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0015da   e101     bnz	0x15de               	BNZ	_00507_DS_
0015dc   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
                                           _00507_DS_:
0015de   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0015e0   e017     bz	0x1610                	BZ	_00463_DS_
0015e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0015e4   e015     bz	0x1610                	BZ	_00463_DS_
                                           ;	.line	1062; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
0015e6   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 15)
0015e8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0015ea   0e47     movlw	0x47               	MOVLW	LOW(_DHCPClient + 15)
0015ec   6e05     movwf	0x5, 0             	MOVWF	r0x05
0015ee   0e80     movlw	0x80               	MOVLW	0x80
0015f0   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	1063; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
0015f2   0e00     movlw	0                  	MOVLW	0x00
0015f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015f6   0e04     movlw	0x4                	MOVLW	0x04
0015f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015fa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0015fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015fe   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001600   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001602   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001604   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001606   ec20     call	0x6040, 0           	CALL	_UDPPutArray
001608   f030
00160a   0e05     movlw	0x5                	MOVLW	0x05
00160c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00160e   d014     bra	0x1638               	BRA	_00464_DS_
                                           _00463_DS_:
                                           ;	.line	1067; TCPIP_Stack/DHCP.c	UDPPut(0x00);
001610   0e00     movlw	0                  	MOVLW	0x00
001612   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001614   ece5     call	0x6dca, 0           	CALL	_UDPPut
001616   f036
001618   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1068; TCPIP_Stack/DHCP.c	UDPPut(0x00);
00161a   0e00     movlw	0                  	MOVLW	0x00
00161c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00161e   ece5     call	0x6dca, 0           	CALL	_UDPPut
001620   f036
001622   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1069; TCPIP_Stack/DHCP.c	UDPPut(0x00);
001624   0e00     movlw	0                  	MOVLW	0x00
001626   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001628   ece5     call	0x6dca, 0           	CALL	_UDPPut
00162a   f036
00162c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1070; TCPIP_Stack/DHCP.c	UDPPut(0x00);
00162e   0e00     movlw	0                  	MOVLW	0x00
001630   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001632   ece5     call	0x6dca, 0           	CALL	_UDPPut
001634   f036
001636   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00464_DS_:
                                           ;	.line	1074; TCPIP_Stack/DHCP.c	for ( i = 0; i < 12u; i++ )	UDPPut(0x00);
001638   0e0c     movlw	0xc                	MOVLW	0x0c
00163a   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00483_DS_:
00163c   0e00     movlw	0                  	MOVLW	0x00
00163e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001640   ece5     call	0x6dca, 0           	CALL	_UDPPut
001642   f036
001644   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001646   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
001648   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00164a   e1f8     bnz	0x163c               	BNZ	_00483_DS_
                                           ;	.line	1077; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
00164c   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
00164e   6e07     movwf	0x7, 0             	MOVWF	r0x07
001650   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
001652   6e06     movwf	0x6, 0             	MOVWF	r0x06
001654   0e80     movlw	0x80               	MOVLW	0x80
001656   6e08     movwf	0x8, 0             	MOVWF	r0x08
001658   0e00     movlw	0                  	MOVLW	0x00
00165a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00165c   0e06     movlw	0x6                	MOVLW	0x06
00165e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001660   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001662   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001664   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001666   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001668   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00166a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00166c   ec20     call	0x6040, 0           	CALL	_UDPPutArray
00166e   f030
001670   0e05     movlw	0x5                	MOVLW	0x05
001672   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1080; TCPIP_Stack/DHCP.c	for ( i = 0; i < 202u; i++ ) UDPPut(0);
001674   0eca     movlw	0xca               	MOVLW	0xca
001676   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           _00486_DS_:
001678   0e00     movlw	0                  	MOVLW	0x00
00167a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00167c   ece5     call	0x6dca, 0           	CALL	_UDPPut
00167e   f036
001680   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001682   2e05     decfsz	0x5, 0x1, 0       	DECFSZ	r0x05, F
001684   d7f9     bra	0x1678               	BRA	_00486_DS_
                                           ;	.line	1083; TCPIP_Stack/DHCP.c	UDPPut(99);
001686   0e63     movlw	0x63               	MOVLW	0x63
001688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168a   ece5     call	0x6dca, 0           	CALL	_UDPPut
00168c   f036
00168e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1084; TCPIP_Stack/DHCP.c	UDPPut(130);
001690   0e82     movlw	0x82               	MOVLW	0x82
001692   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001694   ece5     call	0x6dca, 0           	CALL	_UDPPut
001696   f036
001698   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1085; TCPIP_Stack/DHCP.c	UDPPut(83);
00169a   0e53     movlw	0x53               	MOVLW	0x53
00169c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00169e   ece5     call	0x6dca, 0           	CALL	_UDPPut
0016a0   f036
0016a2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1086; TCPIP_Stack/DHCP.c	UDPPut(99);
0016a4   0e63     movlw	0x63               	MOVLW	0x63
0016a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a8   ece5     call	0x6dca, 0           	CALL	_UDPPut
0016aa   f036
0016ac   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1089; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE);
0016ae   0e35     movlw	0x35               	MOVLW	0x35
0016b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016b2   ece5     call	0x6dca, 0           	CALL	_UDPPut
0016b4   f036
0016b6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1090; TCPIP_Stack/DHCP.c	UDPPut(DHCP_MESSAGE_TYPE_LEN);
0016b8   0e01     movlw	0x1                	MOVLW	0x01
0016ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016bc   ece5     call	0x6dca, 0           	CALL	_UDPPut
0016be   f036
0016c0   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1091; TCPIP_Stack/DHCP.c	UDPPut(messageType);
0016c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016c6   ece5     call	0x6dca, 0           	CALL	_UDPPut
0016c8   f036
0016ca   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1093; TCPIP_Stack/DHCP.c	if(messageType == DHCP_DISCOVER_MESSAGE)
0016cc   6a00     clrf	0, 0                	CLRF	r0x00
0016ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0016d0   0a01     xorlw	0x1                	XORLW	0x01
0016d2   e103     bnz	0x16da               	BNZ	_00511_DS_
0016d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0016d6   e101     bnz	0x16da               	BNZ	_00511_DS_
0016d8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00511_DS_:
0016da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016dc   e002     bz	0x16e2                	BZ	_00467_DS_
0016de   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1096; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
0016e0   953a     bcf	0x3a, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           _00467_DS_:
                                           ;	.line	1100; TCPIP_Stack/DHCP.c	if((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing)
0016e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0016e4   e024     bz	0x172e                	BZ	_00469_DS_
0016e6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0016e8   e122     bnz	0x172e               	BNZ	_00469_DS_
                                           ;	.line	1108; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER);
0016ea   0e36     movlw	0x36               	MOVLW	0x36
0016ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016ee   ece5     call	0x6dca, 0           	CALL	_UDPPut
0016f0   f036
0016f2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1109; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SERVER_IDENTIFIER_LEN);
0016f4   0e04     movlw	0x4                	MOVLW	0x04
0016f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016f8   ece5     call	0x6dca, 0           	CALL	_UDPPut
0016fa   f036
0016fc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0016fe   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 14)
                                           ;	.line	1110; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[3]);
001700   5146     movf	0x46, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
001702   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001704   ece5     call	0x6dca, 0           	CALL	_UDPPut
001706   f036
001708   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00170a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 13)
                                           ;	.line	1111; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[2]);
00170c   5145     movf	0x45, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
00170e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001710   ece5     call	0x6dca, 0           	CALL	_UDPPut
001712   f036
001714   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001716   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 12)
                                           ;	.line	1112; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[1]);
001718   5144     movf	0x44, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
00171a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00171c   ece5     call	0x6dca, 0           	CALL	_UDPPut
00171e   f036
001720   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001722   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1113; TCPIP_Stack/DHCP.c	UDPPut(((BYTE*)(&DHCPClient.dwServerID))[0]);
001724   5143     movf	0x43, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
001726   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001728   ece5     call	0x6dca, 0           	CALL	_UDPPut
00172a   f036
00172c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00469_DS_:
                                           ;	.line	1119; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST);
00172e   0e37     movlw	0x37               	MOVLW	0x37
001730   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001732   ece5     call	0x6dca, 0           	CALL	_UDPPut
001734   f036
001736   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1120; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_LIST_LEN);
001738   0e04     movlw	0x4                	MOVLW	0x04
00173a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00173c   ece5     call	0x6dca, 0           	CALL	_UDPPut
00173e   f036
001740   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1121; TCPIP_Stack/DHCP.c	UDPPut(DHCP_SUBNET_MASK);
001742   0e01     movlw	0x1                	MOVLW	0x01
001744   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001746   ece5     call	0x6dca, 0           	CALL	_UDPPut
001748   f036
00174a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1122; TCPIP_Stack/DHCP.c	UDPPut(DHCP_ROUTER);
00174c   0e03     movlw	0x3                	MOVLW	0x03
00174e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001750   ece5     call	0x6dca, 0           	CALL	_UDPPut
001752   f036
001754   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1123; TCPIP_Stack/DHCP.c	UDPPut(DHCP_DNS);
001756   0e06     movlw	0x6                	MOVLW	0x06
001758   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00175a   ece5     call	0x6dca, 0           	CALL	_UDPPut
00175c   f036
00175e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1124; TCPIP_Stack/DHCP.c	UDPPut(DHCP_HOST_NAME);
001760   0e0c     movlw	0xc                	MOVLW	0x0c
001762   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001764   ece5     call	0x6dca, 0           	CALL	_UDPPut
001766   f036
001768   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1127; TCPIP_Stack/DHCP.c	if( ((messageType == DHCP_REQUEST_MESSAGE) && !bRenewing) || 
00176a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00176c   e002     bz	0x1772                	BZ	_00475_DS_
00176e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001770   e00b     bz	0x1788                	BZ	_00471_DS_
                                           _00475_DS_:
                                           ;	.line	1128; TCPIP_Stack/DHCP.c	((messageType == DHCP_DISCOVER_MESSAGE) && 
001772   5000     movf	0, 0, 0             	MOVF	r0x00, W
001774   e027     bz	0x17c4                	BZ	_00472_DS_
001776   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	1129; TCPIP_Stack/DHCP.c	DHCPClient.tempIPAddress.Val))
001778   5147     movf	0x47, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
00177a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 16)
00177c   1148     iorwf	0x48, 0, 0x1       	IORWF	(_DHCPClient + 16), W, B
00177e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 17)
001780   1149     iorwf	0x49, 0, 0x1       	IORWF	(_DHCPClient + 17), W, B
001782   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 18)
001784   114a     iorwf	0x4a, 0, 0x1       	IORWF	(_DHCPClient + 18), W, B
001786   e01e     bz	0x17c4                	BZ	_00472_DS_
                                           _00471_DS_:
                                           ;	.line	1131; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS);
001788   0e32     movlw	0x32               	MOVLW	0x32
00178a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00178c   ece5     call	0x6dca, 0           	CALL	_UDPPut
00178e   f036
001790   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1132; TCPIP_Stack/DHCP.c	UDPPut(DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
001792   0e04     movlw	0x4                	MOVLW	0x04
001794   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001796   ece5     call	0x6dca, 0           	CALL	_UDPPut
001798   f036
00179a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	1133; TCPIP_Stack/DHCP.c	UDPPutArray((BYTE*)&DHCPClient.tempIPAddress, 
00179c   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 15)
00179e   6e02     movwf	0x2, 0             	MOVWF	r0x02
0017a0   0e47     movlw	0x47               	MOVLW	LOW(_DHCPClient + 15)
0017a2   6e00     movwf	0, 0               	MOVWF	r0x00
0017a4   0e80     movlw	0x80               	MOVLW	0x80
0017a6   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	1134; TCPIP_Stack/DHCP.c	DHCP_PARAM_REQUEST_IP_ADDRESS_LEN);
0017a8   0e00     movlw	0                  	MOVLW	0x00
0017aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017ac   0e04     movlw	0x4                	MOVLW	0x04
0017ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0017b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0017b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017bc   ec20     call	0x6040, 0           	CALL	_UDPPutArray
0017be   f030
0017c0   0e05     movlw	0x5                	MOVLW	0x05
0017c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00472_DS_:
                                           ;	.line	1140; TCPIP_Stack/DHCP.c	UDPPut(DHCP_END_OPTION);
0017c4   0eff     movlw	0xff               	MOVLW	0xff
0017c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017c8   ece5     call	0x6dca, 0           	CALL	_UDPPut
0017ca   f036
0017cc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00476_DS_:
                                           ;	.line	1144; TCPIP_Stack/DHCP.c	while(UDPTxCount < 300u) UDPPut(0); 
0017ce   0e01     movlw	0x1                	MOVLW	0x01
0017d0   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
0017d2   5d79     subwf	0x79, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
0017d4   e103     bnz	0x17dc               	BNZ	_00512_DS_
0017d6   0e2c     movlw	0x2c               	MOVLW	0x2c
0017d8   010a     movlb	0xa                	BANKSEL	_UDPTxCount
0017da   5d78     subwf	0x78, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00512_DS_:
0017dc   e206     bc	0x17ea                	BC	_00478_DS_
0017de   0e00     movlw	0                  	MOVLW	0x00
0017e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017e2   ece5     call	0x6dca, 0           	CALL	_UDPPut
0017e4   f036
0017e6   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0017e8   d7f2     bra	0x17ce               	BRA	_00476_DS_
                                           _00478_DS_:
0017ea   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	1149; TCPIP_Stack/DHCP.c	MyIP.Val = AppConfig.MyIPAddr.Val;
0017ec   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
0017ee   010a     movlb	0xa                	BANKSEL	__DHCPSend_MyIP_1_1
0017f0   6f04     movwf	0x4, 0x1           	MOVWF	__DHCPSend_MyIP_1_1, B
0017f2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
0017f4   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
0017f6   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
0017f8   6f05     movwf	0x5, 0x1           	MOVWF	(__DHCPSend_MyIP_1_1 + 1), B
0017fa   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
0017fc   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
0017fe   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
001800   6f06     movwf	0x6, 0x1           	MOVWF	(__DHCPSend_MyIP_1_1 + 2), B
001802   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
001804   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
001806   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
001808   6f07     movwf	0x7, 0x1           	MOVWF	(__DHCPSend_MyIP_1_1 + 3), B
                                           ;	.line	1150; TCPIP_Stack/DHCP.c	if(!bRenewing) AppConfig.MyIPAddr.Val = 0x00000000;
00180a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00180c   e108     bnz	0x181e               	BNZ	_00480_DS_
00180e   010e     movlb	0xe                	BANKSEL	_AppConfig
001810   6b00     clrf	0, 0x1              	CLRF	_AppConfig, B
001812   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
001814   6b01     clrf	0x1, 0x1            	CLRF	(_AppConfig + 1), B
001816   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
001818   6b02     clrf	0x2, 0x1            	CLRF	(_AppConfig + 2), B
00181a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
00181c   6b03     clrf	0x3, 0x1            	CLRF	(_AppConfig + 3), B
                                           _00480_DS_:
                                           ;	.line	1151; TCPIP_Stack/DHCP.c	UDPFlush();
00181e   ec15     call	0x282a, 0           	CALL	_UDPFlush
001820   f014
001822   010a     movlb	0xa                	BANKSEL	__DHCPSend_MyIP_1_1
                                           ;	.line	1152; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = MyIP.Val;
001824   5104     movf	0x4, 0, 0x1         	MOVF	__DHCPSend_MyIP_1_1, W, B
001826   010e     movlb	0xe                	BANKSEL	_AppConfig
001828   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
00182a   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 1)
00182c   5105     movf	0x5, 0, 0x1         	MOVF	(__DHCPSend_MyIP_1_1 + 1), W, B
00182e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
001830   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
001832   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 2)
001834   5106     movf	0x6, 0, 0x1         	MOVF	(__DHCPSend_MyIP_1_1 + 2), W, B
001836   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
001838   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
00183a   010a     movlb	0xa                	BANKSEL	(__DHCPSend_MyIP_1_1 + 3)
00183c   5107     movf	0x7, 0, 0x1         	MOVF	(__DHCPSend_MyIP_1_1 + 3), W, B
00183e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
001840   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
001842   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001844   f008
001846   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001848   f007
00184a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00184c   f006
00184e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001850   f005
001852   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001854   f004
001856   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001858   f003
00185a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00185c   f002
00185e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001860   f001
001862   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001864   f000
001866   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001868   ffd9
00186a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP___DHCPReceive	code
                                           __DHCPReceive:
                                           ;	.line	720; TCPIP_Stack/DHCP.c	static BYTE _DHCPReceive(void)
00001c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00001e   ffe5
000020   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000022   ffd9
000024   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000026   ffe5
000028   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00002a   ffe5
00002c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00002e   ffe5
000030   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000032   ffe5
000034   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000036   ffe5
000038   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00003a   ffe5
00003c   010a     movlb	0xa                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	766; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
00003e   6b84     clrf	0x84, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           ;	.line	768; TCPIP_Stack/DHCP.c	UDPGet(&v);                             // op
000040   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000042   6e01     movwf	0x1, 0             	MOVWF	r0x01
000044   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
000046   6e00     movwf	0, 0               	MOVWF	r0x00
000048   0e80     movlw	0x80               	MOVLW	0x80
00004a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00004c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00004e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000050   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000052   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000054   5000     movf	0, 0, 0             	MOVF	r0x00, W
000056   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000058   ec94     call	0x7128, 0           	CALL	_UDPGet
00005a   f038
00005c   0e03     movlw	0x3                	MOVLW	0x03
00005e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	771; TCPIP_Stack/DHCP.c	if ( v == BOOT_REPLY )
000060   ca86     movff	0xa86, 0           	MOVFF	__DHCPReceive_v_1_1, r0x00
000062   f000
000064   6a01     clrf	0x1, 0              	CLRF	r0x01
000066   5000     movf	0, 0, 0             	MOVF	r0x00, W
000068   0a02     xorlw	0x2                	XORLW	0x02
00006a   e102     bnz	0x70                 	BNZ	_00424_DS_
00006c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00006e   e002     bz	0x74                  	BZ	_00425_DS_
                                           _00424_DS_:
000070   ef3a     goto	0x674               	GOTO	_00345_DS_
000072   f003
                                           _00425_DS_:
                                           ;	.line	774; TCPIP_Stack/DHCP.c	for ( i = 0; i < 15u; i++ ) UDPGet(&v);
000074   0e0f     movlw	0xf                	MOVLW	0x0f
000076   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00354_DS_:
000078   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00007a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00007c   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
00007e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000080   0e80     movlw	0x80               	MOVLW	0x80
000082   6e03     movwf	0x3, 0             	MOVWF	r0x03
000084   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000086   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000088   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00008a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00008c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00008e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000090   ec94     call	0x7128, 0           	CALL	_UDPGet
000092   f038
000094   0e03     movlw	0x3                	MOVLW	0x03
000096   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000098   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00009a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00009c   e1ed     bnz	0x78                 	BNZ	_00354_DS_
00009e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	777; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0000a0   a53a     btfss	0x3a, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0000a2   d016     bra	0xd0                 	BRA	_00294_DS_
                                           ;	.line	780; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0000a4   0e04     movlw	0x4                	MOVLW	0x04
0000a6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00357_DS_:
0000a8   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0000aa   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000ac   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
0000ae   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000b0   0e80     movlw	0x80               	MOVLW	0x80
0000b2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0000b4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000b8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000bc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000c0   ec94     call	0x7128, 0           	CALL	_UDPGet
0000c2   f038
0000c4   0e03     movlw	0x3                	MOVLW	0x03
0000c6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000c8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0000ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000cc   e1ed     bnz	0xa8                 	BNZ	_00357_DS_
0000ce   d016     bra	0xfc                 	BRA	_00295_DS_
                                           _00294_DS_:
                                           ;	.line	785; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempIPAddress, 
0000d0   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 15)
0000d2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0000d4   0e47     movlw	0x47               	MOVLW	LOW(_DHCPClient + 15)
0000d6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0000d8   0e80     movlw	0x80               	MOVLW	0x80
0000da   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	786; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempIPAddress));
0000dc   0e00     movlw	0                  	MOVLW	0x00
0000de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e0   0e04     movlw	0x4                	MOVLW	0x04
0000e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0000e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000e8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0000ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0000ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0000f0   ec0b     call	0x6216, 0           	CALL	_UDPGetArray
0000f2   f031
0000f4   0e05     movlw	0x5                	MOVLW	0x05
0000f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0000f8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	787; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.IPAddress = 1;
0000fa   8153     bsf	0x53, 0, 0x1         	BSF	(_DHCPClient + 27), 0, B
                                           _00295_DS_:
                                           ;	.line	791; TCPIP_Stack/DHCP.c	for ( i = 0; i < 8u; i++ ) UDPGet(&v);
0000fc   0e08     movlw	0x8                	MOVLW	0x08
0000fe   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00360_DS_:
000100   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000102   6e02     movwf	0x2, 0             	MOVWF	r0x02
000104   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
000106   6e01     movwf	0x1, 0             	MOVWF	r0x01
000108   0e80     movlw	0x80               	MOVLW	0x80
00010a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00010c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00010e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000110   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000112   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000114   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000118   ec94     call	0x7128, 0           	CALL	_UDPGet
00011a   f038
00011c   0e03     movlw	0x3                	MOVLW	0x03
00011e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000120   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000122   5000     movf	0, 0, 0             	MOVF	r0x00, W
000124   e1ed     bnz	0x100                	BNZ	_00360_DS_
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
000126   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00361_DS_:
000128   c001     movff	0x1, 0x2           	MOVFF	r0x01, r0x02
00012a   f002
00012c   6a03     clrf	0x3, 0              	CLRF	r0x03
00012e   0e00     movlw	0                  	MOVLW	0x00
000130   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000132   e102     bnz	0x138                	BNZ	_00426_DS_
000134   0e06     movlw	0x6                	MOVLW	0x06
000136   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00426_DS_:
000138   e224     bc	0x182                 	BC	_00364_DS_
                                           ;	.line	796; TCPIP_Stack/DHCP.c	UDPGet(&v);
00013a   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00013c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00013e   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
000140   6e02     movwf	0x2, 0             	MOVWF	r0x02
000142   0e80     movlw	0x80               	MOVLW	0x80
000144   6e04     movwf	0x4, 0             	MOVWF	r0x04
000146   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00014c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00014e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000150   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000152   ec94     call	0x7128, 0           	CALL	_UDPGet
000154   f038
000156   0e03     movlw	0x3                	MOVLW	0x03
000158   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	797; TCPIP_Stack/DHCP.c	if ( v != AppConfig.MyMACAddr.v[i])	goto UDPInvalid;
00015a   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
00015c   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
00015e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000160   6a03     clrf	0x3, 0              	CLRF	r0x03
000162   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
000164   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000166   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
000168   ffe9
00016a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00016c   ffea
00016e   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
000170   f002
000172   010a     movlb	0xa                	BANKSEL	__DHCPReceive_v_1_1
000174   5186     movf	0x86, 0, 0x1        	MOVF	__DHCPReceive_v_1_1, W, B
000176   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
000178   e002     bz	0x17e                 	BZ	_00428_DS_
00017a   ef71     goto	0x6e2               	GOTO	_00351_DS_
00017c   f003
                                           _00428_DS_:
                                           ;	.line	794; TCPIP_Stack/DHCP.c	for ( i = 0; i < 6u; i++ )
00017e   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000180   d7d3     bra	0x128                	BRA	_00361_DS_
                                           _00364_DS_:
                                           ;	.line	802; TCPIP_Stack/DHCP.c	for ( i = 0; i < 206u; i++ ) UDPGet(&v);
000182   0ece     movlw	0xce               	MOVLW	0xce
000184   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00367_DS_:
000186   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000188   6e02     movwf	0x2, 0             	MOVWF	r0x02
00018a   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
00018c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00018e   0e80     movlw	0x80               	MOVLW	0x80
000190   6e03     movwf	0x3, 0             	MOVWF	r0x03
000192   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000194   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000196   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000198   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00019c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00019e   ec94     call	0x7128, 0           	CALL	_UDPGet
0001a0   f038
0001a2   0e03     movlw	0x3                	MOVLW	0x03
0001a4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001a6   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0001a8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0001aa   e1ed     bnz	0x186                	BNZ	_00367_DS_
                                           ;	.line	804; TCPIP_Stack/DHCP.c	lbDone = FALSE;
0001ac   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00341_DS_:
                                           ;	.line	810; TCPIP_Stack/DHCP.c	if(!UDPGet(&v))
0001ae   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0001b0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0001b2   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
0001b4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001b6   0e80     movlw	0x80               	MOVLW	0x80
0001b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0001ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0001bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001be   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0001c6   ec94     call	0x7128, 0           	CALL	_UDPGet
0001c8   f038
0001ca   6e02     movwf	0x2, 0             	MOVWF	r0x02
0001cc   0e03     movlw	0x3                	MOVLW	0x03
0001ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0001d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001d2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0001d4   ef3a     goto	0x674               	GOTO	_00345_DS_
0001d6   f003
                                           ;	.line	816; TCPIP_Stack/DHCP.c	switch(v)
0001d8   ca86     movff	0xa86, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0001da   f002
0001dc   6a03     clrf	0x3, 0              	CLRF	r0x03
0001de   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001e0   0a01     xorlw	0x1                	XORLW	0x01
0001e2   e103     bnz	0x1ea                	BNZ	_00430_DS_
0001e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001e6   e101     bnz	0x1ea                	BNZ	_00430_DS_
0001e8   d058     bra	0x29a                	BRA	_00307_DS_
                                           _00430_DS_:
0001ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001ec   0a03     xorlw	0x3                	XORLW	0x03
0001ee   e103     bnz	0x1f6                	BNZ	_00432_DS_
0001f0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001f2   e101     bnz	0x1f6                	BNZ	_00432_DS_
0001f4   d09c     bra	0x32e                	BRA	_00314_DS_
                                           _00432_DS_:
0001f6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001f8   0a33     xorlw	0x33               	XORLW	0x33
0001fa   e103     bnz	0x202                	BNZ	_00434_DS_
0001fc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0001fe   e101     bnz	0x202                	BNZ	_00434_DS_
000200   d15a     bra	0x4b6                	BRA	_00329_DS_
                                           _00434_DS_:
000202   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000204   0a35     xorlw	0x35               	XORLW	0x35
000206   e102     bnz	0x20c                	BNZ	_00436_DS_
000208   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00020a   e00e     bz	0x228                 	BZ	_00300_DS_
                                           _00436_DS_:
00020c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00020e   0a36     xorlw	0x36               	XORLW	0x36
000210   e103     bnz	0x218                	BNZ	_00438_DS_
000212   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000214   e101     bnz	0x218                	BNZ	_00438_DS_
000216   d0f2     bra	0x3fc                	BRA	_00324_DS_
                                           _00438_DS_:
000218   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00021a   0aff     xorlw	0xff               	XORLW	0xff
00021c   e103     bnz	0x224                	BNZ	_00440_DS_
00021e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000220   e101     bnz	0x224                	BNZ	_00440_DS_
000222   d146     bra	0x4b0                	BRA	_00328_DS_
                                           _00440_DS_:
000224   ef07     goto	0x60e               	GOTO	_00336_DS_
000226   f003
                                           _00300_DS_:
                                           ;	.line	819; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
000228   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00022a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00022c   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
00022e   6e02     movwf	0x2, 0             	MOVWF	r0x02
000230   0e80     movlw	0x80               	MOVLW	0x80
000232   6e04     movwf	0x4, 0             	MOVWF	r0x04
000234   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000236   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000238   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00023a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00023c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00023e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000240   ec94     call	0x7128, 0           	CALL	_UDPGet
000242   f038
000244   0e03     movlw	0x3                	MOVLW	0x03
000246   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	821; TCPIP_Stack/DHCP.c	if ( v == 1u )
000248   ca86     movff	0xa86, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
00024a   f002
00024c   6a03     clrf	0x3, 0              	CLRF	r0x03
00024e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000250   0a01     xorlw	0x1                	XORLW	0x01
000252   e102     bnz	0x258                	BNZ	_00441_DS_
000254   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000256   e002     bz	0x25c                 	BZ	_00442_DS_
                                           _00441_DS_:
000258   ef71     goto	0x6e2               	GOTO	_00351_DS_
00025a   f003
                                           _00442_DS_:
                                           ;	.line	823; TCPIP_Stack/DHCP.c	UDPGet(&type);                  // Get type
00025c   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_type_1_1)
00025e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000260   0e84     movlw	0x84               	MOVLW	LOW(__DHCPReceive_type_1_1)
000262   6e02     movwf	0x2, 0             	MOVWF	r0x02
000264   0e80     movlw	0x80               	MOVLW	0x80
000266   6e04     movwf	0x4, 0             	MOVWF	r0x04
000268   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00026a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00026c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00026e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000270   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000272   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000274   ec94     call	0x7128, 0           	CALL	_UDPGet
000276   f038
000278   0e03     movlw	0x3                	MOVLW	0x03
00027a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00027c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	827; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived && 
00027e   a53a     btfss	0x3a, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000280   ef36     goto	0x66c               	GOTO	_00342_DS_
000282   f003
                                           ;	.line	828; TCPIP_Stack/DHCP.c	(type == DHCP_OFFER_MESSAGE))
000284   ca84     movff	0xa84, 0x2         	MOVFF	__DHCPReceive_type_1_1, r0x02
000286   f002
000288   6a03     clrf	0x3, 0              	CLRF	r0x03
00028a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00028c   0a02     xorlw	0x2                	XORLW	0x02
00028e   e104     bnz	0x298                	BNZ	_00444_DS_
000290   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000292   e102     bnz	0x298                	BNZ	_00444_DS_
000294   ef71     goto	0x6e2               	GOTO	_00351_DS_
000296   f003
                                           _00444_DS_:
                                           ;	.line	835; TCPIP_Stack/DHCP.c	break;
000298   d1e9     bra	0x66c                	BRA	_00342_DS_
                                           _00307_DS_:
                                           ;	.line	838; TCPIP_Stack/DHCP.c	UDPGet(&v);     // Skip len
00029a   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00029c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00029e   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002a0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002a2   0e80     movlw	0x80               	MOVLW	0x80
0002a4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002a6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002aa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002b2   ec94     call	0x7128, 0           	CALL	_UDPGet
0002b4   f038
0002b6   0e03     movlw	0x3                	MOVLW	0x03
0002b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	840; TCPIP_Stack/DHCP.c	if ( v == 4u )
0002ba   ca86     movff	0xa86, 0x2         	MOVFF	__DHCPReceive_v_1_1, r0x02
0002bc   f002
0002be   6a03     clrf	0x3, 0              	CLRF	r0x03
0002c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002c2   0a04     xorlw	0x4                	XORLW	0x04
0002c4   e102     bnz	0x2ca                	BNZ	_00445_DS_
0002c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002c8   e002     bz	0x2ce                 	BZ	_00446_DS_
                                           _00445_DS_:
0002ca   ef71     goto	0x6e2               	GOTO	_00351_DS_
0002cc   f003
                                           _00446_DS_:
0002ce   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	843; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0002d0   a53a     btfss	0x3a, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0002d2   d016     bra	0x300                	BRA	_00309_DS_
                                           ;	.line	847; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0002d4   0e04     movlw	0x4                	MOVLW	0x04
0002d6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00370_DS_:
0002d8   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0002da   6e03     movwf	0x3, 0             	MOVWF	r0x03
0002dc   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
0002de   6e02     movwf	0x2, 0             	MOVWF	r0x02
0002e0   0e80     movlw	0x80               	MOVLW	0x80
0002e2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0002e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0002e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0002ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0002f0   ec94     call	0x7128, 0           	CALL	_UDPGet
0002f2   f038
0002f4   0e03     movlw	0x3                	MOVLW	0x03
0002f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0002f8   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0002fa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0002fc   e1ed     bnz	0x2d8                	BNZ	_00370_DS_
0002fe   d1b6     bra	0x66c                	BRA	_00342_DS_
                                           _00309_DS_:
                                           ;	.line	851; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempMask, 
000300   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 23)
000302   6e03     movwf	0x3, 0             	MOVWF	r0x03
000304   0e4f     movlw	0x4f               	MOVLW	LOW(_DHCPClient + 23)
000306   6e02     movwf	0x2, 0             	MOVWF	r0x02
000308   0e80     movlw	0x80               	MOVLW	0x80
00030a   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	852; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempMask));
00030c   0e00     movlw	0                  	MOVLW	0x00
00030e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000310   0e04     movlw	0x4                	MOVLW	0x04
000312   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000314   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000316   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000318   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00031a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00031c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00031e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000320   ec0b     call	0x6216, 0           	CALL	_UDPGetArray
000322   f031
000324   0e05     movlw	0x5                	MOVLW	0x05
000326   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000328   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	853; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Mask = 1;
00032a   8553     bsf	0x53, 0x2, 0x1       	BSF	(_DHCPClient + 27), 2, B
00032c   d19f     bra	0x66c                	BRA	_00342_DS_
                                           _00314_DS_:
                                           ;	.line	861; TCPIP_Stack/DHCP.c	UDPGet(&j);
00032e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000330   6e03     movwf	0x3, 0             	MOVWF	r0x03
000332   0e85     movlw	0x85               	MOVLW	LOW(__DHCPReceive_j_1_1)
000334   6e02     movwf	0x2, 0             	MOVWF	r0x02
000336   0e80     movlw	0x80               	MOVLW	0x80
000338   6e04     movwf	0x4, 0             	MOVWF	r0x04
00033a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00033c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00033e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000340   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000342   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000344   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000346   ec94     call	0x7128, 0           	CALL	_UDPGet
000348   f038
00034a   0e03     movlw	0x3                	MOVLW	0x03
00034c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	863; TCPIP_Stack/DHCP.c	if ( j >= 4u )
00034e   ca85     movff	0xa85, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
000350   f002
000352   6a03     clrf	0x3, 0              	CLRF	r0x03
000354   0e00     movlw	0                  	MOVLW	0x00
000356   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000358   e102     bnz	0x35e                	BNZ	_00447_DS_
00035a   0e04     movlw	0x4                	MOVLW	0x04
00035c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00447_DS_:
00035e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000360   d1c0     bra	0x6e2                	BRA	_00351_DS_
000362   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	866; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
000364   a53a     btfss	0x3a, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
000366   d016     bra	0x394                	BRA	_00316_DS_
                                           ;	.line	870; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
000368   0e04     movlw	0x4                	MOVLW	0x04
00036a   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00373_DS_:
00036c   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
00036e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000370   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
000372   6e02     movwf	0x2, 0             	MOVWF	r0x02
000374   0e80     movlw	0x80               	MOVLW	0x80
000376   6e04     movwf	0x4, 0             	MOVWF	r0x04
000378   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00037a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00037c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00037e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000380   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000384   ec94     call	0x7128, 0           	CALL	_UDPGet
000386   f038
000388   0e03     movlw	0x3                	MOVLW	0x03
00038a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00038c   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00038e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000390   e1ed     bnz	0x36c                	BNZ	_00373_DS_
000392   d016     bra	0x3c0                	BRA	_00320_DS_
                                           _00316_DS_:
                                           ;	.line	874; TCPIP_Stack/DHCP.c	UDPGetArray((BYTE*)&DHCPClient.tempGateway, 
000394   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 19)
000396   6e03     movwf	0x3, 0             	MOVWF	r0x03
000398   0e4b     movlw	0x4b               	MOVLW	LOW(_DHCPClient + 19)
00039a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00039c   0e80     movlw	0x80               	MOVLW	0x80
00039e   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	875; TCPIP_Stack/DHCP.c	sizeof(DHCPClient.tempGateway));
0003a0   0e00     movlw	0                  	MOVLW	0x00
0003a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a4   0e04     movlw	0x4                	MOVLW	0x04
0003a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ac   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0003b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003b4   ec0b     call	0x6216, 0           	CALL	_UDPGetArray
0003b6   f031
0003b8   0e05     movlw	0x5                	MOVLW	0x05
0003ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003bc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	876; TCPIP_Stack/DHCP.c	DHCPClient.validValues.bits.Gateway = 1;
0003be   8353     bsf	0x53, 0x1, 0x1       	BSF	(_DHCPClient + 27), 1, B
                                           _00320_DS_:
                                           ;	.line	882; TCPIP_Stack/DHCP.c	j -= 4;
0003c0   0efc     movlw	0xfc               	MOVLW	0xfc
0003c2   010a     movlb	0xa                	BANKSEL	__DHCPReceive_j_1_1
0003c4   2785     addwf	0x85, 0x1, 0x1     	ADDWF	__DHCPReceive_j_1_1, F, B
                                           ;	.line	883; TCPIP_Stack/DHCP.c	while(j--) UDPGet(&v);
0003c6   ca85     movff	0xa85, 0x2         	MOVFF	__DHCPReceive_j_1_1, r0x02
0003c8   f002
                                           _00321_DS_:
0003ca   c002     movff	0x2, 0x3           	MOVFF	r0x02, r0x03
0003cc   f003
0003ce   0602     decf	0x2, 0x1, 0         	DECF	r0x02, F
0003d0   c002     movff	0x2, 0xa85         	MOVFF	r0x02, __DHCPReceive_j_1_1
0003d2   fa85
0003d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003d6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0003d8   d144     bra	0x662                	BRA	_00422_DS_
0003da   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003dc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0003de   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
0003e0   6e03     movwf	0x3, 0             	MOVWF	r0x03
0003e2   0e80     movlw	0x80               	MOVLW	0x80
0003e4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0003e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0003e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ea   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0003ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0003f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0003f2   ec94     call	0x7128, 0           	CALL	_UDPGet
0003f4   f038
0003f6   0e03     movlw	0x3                	MOVLW	0x03
0003f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0003fa   d7e7     bra	0x3ca                	BRA	_00321_DS_
                                           _00324_DS_:
                                           ;	.line	945; TCPIP_Stack/DHCP.c	UDPGet(&v);    // Get len
0003fc   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0003fe   6e04     movwf	0x4, 0             	MOVWF	r0x04
000400   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
000402   6e03     movwf	0x3, 0             	MOVWF	r0x03
000404   0e80     movlw	0x80               	MOVLW	0x80
000406   6e05     movwf	0x5, 0             	MOVWF	r0x05
000408   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00040a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00040c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00040e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000410   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000414   ec94     call	0x7128, 0           	CALL	_UDPGet
000416   f038
000418   0e03     movlw	0x3                	MOVLW	0x03
00041a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	947; TCPIP_Stack/DHCP.c	if ( v == 4u )
00041c   ca86     movff	0xa86, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
00041e   f003
000420   6a04     clrf	0x4, 0              	CLRF	r0x04
000422   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000424   0a04     xorlw	0x4                	XORLW	0x04
000426   e102     bnz	0x42c                	BNZ	_00448_DS_
000428   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00042a   e001     bz	0x42e                 	BZ	_00449_DS_
                                           _00448_DS_:
00042c   d15a     bra	0x6e2                	BRA	_00351_DS_
                                           _00449_DS_:
                                           ;	.line	949; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[3]);   // Get the id
00042e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 3)
000430   6e04     movwf	0x4, 0             	MOVWF	r0x04
000432   0e03     movlw	0x3                	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 3)
000434   6e03     movwf	0x3, 0             	MOVWF	r0x03
000436   0e80     movlw	0x80               	MOVLW	0x80
000438   6e05     movwf	0x5, 0             	MOVWF	r0x05
00043a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00043c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00043e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000442   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000446   ec94     call	0x7128, 0           	CALL	_UDPGet
000448   f038
00044a   0e03     movlw	0x3                	MOVLW	0x03
00044c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	950; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[2]);
00044e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 2)
000450   6e04     movwf	0x4, 0             	MOVWF	r0x04
000452   0e02     movlw	0x2                	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 2)
000454   6e03     movwf	0x3, 0             	MOVWF	r0x03
000456   0e80     movlw	0x80               	MOVLW	0x80
000458   6e05     movwf	0x5, 0             	MOVWF	r0x05
00045a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00045c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00045e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000460   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000462   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000464   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000466   ec94     call	0x7128, 0           	CALL	_UDPGet
000468   f038
00046a   0e03     movlw	0x3                	MOVLW	0x03
00046c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	951; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[1]);
00046e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1 + 1)
000470   6e04     movwf	0x4, 0             	MOVWF	r0x04
000472   0e01     movlw	0x1                	MOVLW	LOW(__DHCPReceive_tempServerID_1_1 + 1)
000474   6e03     movwf	0x3, 0             	MOVWF	r0x03
000476   0e80     movlw	0x80               	MOVLW	0x80
000478   6e05     movwf	0x5, 0             	MOVWF	r0x05
00047a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00047c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00047e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000480   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000482   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000486   ec94     call	0x7128, 0           	CALL	_UDPGet
000488   f038
00048a   0e03     movlw	0x3                	MOVLW	0x03
00048c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	952; TCPIP_Stack/DHCP.c	UDPGet(&tempServerID.v[0]);
00048e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_tempServerID_1_1)
000490   6e04     movwf	0x4, 0             	MOVWF	r0x04
000492   0e00     movlw	0                  	MOVLW	LOW(__DHCPReceive_tempServerID_1_1)
000494   6e03     movwf	0x3, 0             	MOVWF	r0x03
000496   0e80     movlw	0x80               	MOVLW	0x80
000498   6e05     movwf	0x5, 0             	MOVWF	r0x05
00049a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00049c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00049e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004a6   ec94     call	0x7128, 0           	CALL	_UDPGet
0004a8   f038
0004aa   0e03     movlw	0x3                	MOVLW	0x03
0004ac   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0004ae   d0de     bra	0x66c                	BRA	_00342_DS_
                                           _00328_DS_:
                                           ;	.line	958; TCPIP_Stack/DHCP.c	lbDone = TRUE;
0004b0   0e01     movlw	0x1                	MOVLW	0x01
0004b2   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ;	.line	959; TCPIP_Stack/DHCP.c	break;
0004b4   d0db     bra	0x66c                	BRA	_00342_DS_
                                           _00329_DS_:
                                           ;	.line	962; TCPIP_Stack/DHCP.c	UDPGet(&v);            // Get len
0004b6   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004ba   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004be   0e80     movlw	0x80               	MOVLW	0x80
0004c0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0004c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004c6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ca   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ce   ec94     call	0x7128, 0           	CALL	_UDPGet
0004d0   f038
0004d2   0e03     movlw	0x3                	MOVLW	0x03
0004d4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/DHCP.c	if ( v == 4u )
0004d6   ca86     movff	0xa86, 0x3         	MOVFF	__DHCPReceive_v_1_1, r0x03
0004d8   f003
0004da   6a04     clrf	0x4, 0              	CLRF	r0x04
0004dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0004de   0a04     xorlw	0x4                	XORLW	0x04
0004e0   e102     bnz	0x4e6                	BNZ	_00450_DS_
0004e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0004e4   e001     bz	0x4e8                 	BZ	_00451_DS_
                                           _00450_DS_:
0004e6   d0fd     bra	0x6e2                	BRA	_00351_DS_
                                           _00451_DS_:
0004e8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	967; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bOfferReceived)
0004ea   a53a     btfss	0x3a, 0x2, 0x1     	BTFSS	(_DHCPClient + 2), 2, B
0004ec   d015     bra	0x518                	BRA	_00331_DS_
                                           ;	.line	970; TCPIP_Stack/DHCP.c	for ( i = 0; i < 4u; i++ ) UDPGet(&v);
0004ee   0e04     movlw	0x4                	MOVLW	0x04
0004f0   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00376_DS_:
0004f2   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
0004f4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0004f6   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
0004f8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0004fa   0e80     movlw	0x80               	MOVLW	0x80
0004fc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0004fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000502   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000504   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000506   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000508   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00050a   ec94     call	0x7128, 0           	CALL	_UDPGet
00050c   f038
00050e   0e03     movlw	0x3                	MOVLW	0x03
000510   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000512   2e00     decfsz	0, 0x1, 0         	DECFSZ	r0x00, F
000514   d7ee     bra	0x4f2                	BRA	_00376_DS_
000516   d0aa     bra	0x66c                	BRA	_00342_DS_
                                           _00331_DS_:
                                           ;	.line	974; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[3]));
000518   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 10)
00051a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00051c   0e42     movlw	0x42               	MOVLW	LOW(_DHCPClient + 10)
00051e   6e00     movwf	0, 0               	MOVWF	r0x00
000520   0e80     movlw	0x80               	MOVLW	0x80
000522   6e04     movwf	0x4, 0             	MOVWF	r0x04
000524   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000528   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00052a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00052c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00052e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000530   ec94     call	0x7128, 0           	CALL	_UDPGet
000532   f038
000534   0e03     movlw	0x3                	MOVLW	0x03
000536   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	975; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[2]));
000538   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 9)
00053a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00053c   0e41     movlw	0x41               	MOVLW	LOW(_DHCPClient + 9)
00053e   6e00     movwf	0, 0               	MOVWF	r0x00
000540   0e80     movlw	0x80               	MOVLW	0x80
000542   6e04     movwf	0x4, 0             	MOVWF	r0x04
000544   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000546   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000548   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00054a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00054c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00054e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000550   ec94     call	0x7128, 0           	CALL	_UDPGet
000552   f038
000554   0e03     movlw	0x3                	MOVLW	0x03
000556   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	976; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[1]));
000558   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 8)
00055a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00055c   0e40     movlw	0x40               	MOVLW	LOW(_DHCPClient + 8)
00055e   6e00     movwf	0, 0               	MOVWF	r0x00
000560   0e80     movlw	0x80               	MOVLW	0x80
000562   6e04     movwf	0x4, 0             	MOVWF	r0x04
000564   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000568   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00056a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00056c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00056e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000570   ec94     call	0x7128, 0           	CALL	_UDPGet
000572   f038
000574   0e03     movlw	0x3                	MOVLW	0x03
000576   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	977; TCPIP_Stack/DHCP.c	UDPGet(&(((BYTE*)(&DHCPClient.dwLeaseTime))[0]));
000578   0e08     movlw	0x8                	MOVLW	HIGH(_DHCPClient + 7)
00057a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00057c   0e3f     movlw	0x3f               	MOVLW	LOW(_DHCPClient + 7)
00057e   6e00     movwf	0, 0               	MOVWF	r0x00
000580   0e80     movlw	0x80               	MOVLW	0x80
000582   6e04     movwf	0x4, 0             	MOVWF	r0x04
000584   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000586   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000588   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00058a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00058c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00058e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000590   ec94     call	0x7128, 0           	CALL	_UDPGet
000592   f038
000594   0e03     movlw	0x3                	MOVLW	0x03
000596   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000598   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
                                           ;	.line	981; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime -= DHCPClient.dwLeaseTime>>5;
00059a   393f     swapf	0x3f, 0, 0x1       	SWAPF	(_DHCPClient + 7), W, B
00059c   0b0f     andlw	0xf                	ANDLW	0x0f
00059e   6e00     movwf	0, 0               	MOVWF	r0x00
0005a0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
0005a2   3940     swapf	0x40, 0, 0x1       	SWAPF	(_DHCPClient + 8), W, B
0005a4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005a6   0bf0     andlw	0xf0               	ANDLW	0xf0
0005a8   1a03     xorwf	0x3, 0x1, 0        	XORWF	r0x03, F
0005aa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0005ac   3203     rrcf	0x3, 0x1, 0         	RRCF	r0x03, F
0005ae   3200     rrcf	0, 0x1, 0           	RRCF	r0x00, F
0005b0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
0005b2   5141     movf	0x41, 0, 0x1        	MOVF	(_DHCPClient + 9), W, B
0005b4   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0005b6   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
0005b8   0bf8     andlw	0xf8               	ANDLW	0xf8
0005ba   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
0005bc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
0005be   3941     swapf	0x41, 0, 0x1       	SWAPF	(_DHCPClient + 9), W, B
0005c0   0b0f     andlw	0xf                	ANDLW	0x0f
0005c2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005c4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
0005c6   3942     swapf	0x42, 0, 0x1       	SWAPF	(_DHCPClient + 10), W, B
0005c8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005ca   0bf0     andlw	0xf0               	ANDLW	0xf0
0005cc   1a05     xorwf	0x5, 0x1, 0        	XORWF	r0x05, F
0005ce   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0005d0   3205     rrcf	0x5, 0x1, 0         	RRCF	r0x05, F
0005d2   3204     rrcf	0x4, 0x1, 0         	RRCF	r0x04, F
0005d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005d6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
0005d8   5d3f     subwf	0x3f, 0, 0x1       	SUBWF	(_DHCPClient + 7), W, B
0005da   6e00     movwf	0, 0               	MOVWF	r0x00
0005dc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005de   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
0005e0   5940     subwfb	0x40, 0, 0x1      	SUBWFB	(_DHCPClient + 8), W, B
0005e2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0005e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0005e6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
0005e8   5941     subwfb	0x41, 0, 0x1      	SUBWFB	(_DHCPClient + 9), W, B
0005ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0005ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0005ee   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
0005f0   5942     subwfb	0x42, 0, 0x1      	SUBWFB	(_DHCPClient + 10), W, B
0005f2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0005f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005f6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
0005f8   6f3f     movwf	0x3f, 0x1          	MOVWF	(_DHCPClient + 7), B
0005fa   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0005fc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
0005fe   6f40     movwf	0x40, 0x1          	MOVWF	(_DHCPClient + 8), B
000600   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000602   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
000604   6f41     movwf	0x41, 0x1          	MOVWF	(_DHCPClient + 9), B
000606   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000608   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
00060a   6f42     movwf	0x42, 0x1          	MOVWF	(_DHCPClient + 10), B
00060c   d02f     bra	0x66c                	BRA	_00342_DS_
                                           _00336_DS_:
                                           ;	.line	989; TCPIP_Stack/DHCP.c	UDPGet(&j);       // Get option len
00060e   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_j_1_1)
000610   6e03     movwf	0x3, 0             	MOVWF	r0x03
000612   0e85     movlw	0x85               	MOVLW	LOW(__DHCPReceive_j_1_1)
000614   6e00     movwf	0, 0               	MOVWF	r0x00
000616   0e80     movlw	0x80               	MOVLW	0x80
000618   6e04     movwf	0x4, 0             	MOVWF	r0x04
00061a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00061c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00061e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000620   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000622   5000     movf	0, 0, 0             	MOVF	r0x00, W
000624   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000626   ec94     call	0x7128, 0           	CALL	_UDPGet
000628   f038
00062a   0e03     movlw	0x3                	MOVLW	0x03
00062c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	990; TCPIP_Stack/DHCP.c	while( j-- )      // Ignore option values
00062e   ca85     movff	0xa85, 0           	MOVFF	__DHCPReceive_j_1_1, r0x00
000630   f000
                                           _00337_DS_:
000632   c000     movff	0, 0x3             	MOVFF	r0x00, r0x03
000634   f003
000636   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000638   c000     movff	0, 0xa85           	MOVFF	r0x00, __DHCPReceive_j_1_1
00063a   fa85
00063c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00063e   e014     bz	0x668                 	BZ	_00423_DS_
                                           ;	.line	991; TCPIP_Stack/DHCP.c	UDPGet(&v);
000640   0e0a     movlw	0xa                	MOVLW	HIGH(__DHCPReceive_v_1_1)
000642   6e04     movwf	0x4, 0             	MOVWF	r0x04
000644   0e86     movlw	0x86               	MOVLW	LOW(__DHCPReceive_v_1_1)
000646   6e03     movwf	0x3, 0             	MOVWF	r0x03
000648   0e80     movlw	0x80               	MOVLW	0x80
00064a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00064c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00064e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000650   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000652   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000654   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000656   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000658   ec94     call	0x7128, 0           	CALL	_UDPGet
00065a   f038
00065c   0e03     movlw	0x3                	MOVLW	0x03
00065e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000660   d7e8     bra	0x632                	BRA	_00337_DS_
                                           _00422_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000662   c002     movff	0x2, 0xa85         	MOVFF	r0x02, __DHCPReceive_j_1_1
000664   fa85
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
000666   d002     bra	0x66c                	BRA	_00342_DS_
                                           _00423_DS_:
                                           ;	.line	992; TCPIP_Stack/DHCP.c	}
000668   c000     movff	0, 0xa85           	MOVFF	r0x00, __DHCPReceive_j_1_1
00066a   fa85
                                           _00342_DS_:
                                           ;	.line	993; TCPIP_Stack/DHCP.c	} while( !lbDone );
00066c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00066e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000670   efd7     goto	0x1ae               	GOTO	_00341_DS_
000672   f000
                                           _00345_DS_:
                                           ;	.line	997; TCPIP_Stack/DHCP.c	if ( type == DHCP_OFFER_MESSAGE )
000674   ca84     movff	0xa84, 0           	MOVFF	__DHCPReceive_type_1_1, r0x00
000676   f000
000678   6a01     clrf	0x1, 0              	CLRF	r0x01
00067a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00067c   0a02     xorlw	0x2                	XORLW	0x02
00067e   e116     bnz	0x6ac                	BNZ	_00349_DS_
000680   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000682   e001     bz	0x686                 	BZ	_00455_DS_
                                           _00454_DS_:
000684   d013     bra	0x6ac                	BRA	_00349_DS_
                                           _00455_DS_:
000686   010a     movlb	0xa                	BANKSEL	__DHCPReceive_tempServerID_1_1
                                           ;	.line	999; TCPIP_Stack/DHCP.c	DHCPClient.dwServerID = tempServerID.Val;
000688   5100     movf	0, 0, 0x1           	MOVF	__DHCPReceive_tempServerID_1_1, W, B
00068a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 11)
00068c   6f43     movwf	0x43, 0x1          	MOVWF	(_DHCPClient + 11), B
00068e   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
000690   5101     movf	0x1, 0, 0x1         	MOVF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
000692   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 12)
000694   6f44     movwf	0x44, 0x1          	MOVWF	(_DHCPClient + 12), B
000696   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
000698   5102     movf	0x2, 0, 0x1         	MOVF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
00069a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 13)
00069c   6f45     movwf	0x45, 0x1          	MOVWF	(_DHCPClient + 13), B
00069e   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006a0   5103     movf	0x3, 0, 0x1         	MOVF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006a2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 14)
0006a4   6f46     movwf	0x46, 0x1          	MOVWF	(_DHCPClient + 14), B
0006a6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	1000; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = TRUE;
0006a8   853a     bsf	0x3a, 0x2, 0x1       	BSF	(_DHCPClient + 2), 2, B
0006aa   d016     bra	0x6d8                	BRA	_00350_DS_
                                           _00349_DS_:
0006ac   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 11)
                                           ;	.line	1006; TCPIP_Stack/DHCP.c	if ( DHCPClient.dwServerID != tempServerID.Val )
0006ae   5143     movf	0x43, 0, 0x1        	MOVF	(_DHCPClient + 11), W, B
0006b0   010a     movlb	0xa                	BANKSEL	__DHCPReceive_tempServerID_1_1
0006b2   1900     xorwf	0, 0, 0x1          	XORWF	__DHCPReceive_tempServerID_1_1, W, B
0006b4   e10f     bnz	0x6d4                	BNZ	_00457_DS_
0006b6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 12)
0006b8   5144     movf	0x44, 0, 0x1        	MOVF	(_DHCPClient + 12), W, B
0006ba   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 1)
0006bc   1901     xorwf	0x1, 0, 0x1        	XORWF	(__DHCPReceive_tempServerID_1_1 + 1), W, B
0006be   e10a     bnz	0x6d4                	BNZ	_00457_DS_
0006c0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 13)
0006c2   5145     movf	0x45, 0, 0x1        	MOVF	(_DHCPClient + 13), W, B
0006c4   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 2)
0006c6   1902     xorwf	0x2, 0, 0x1        	XORWF	(__DHCPReceive_tempServerID_1_1 + 2), W, B
0006c8   e105     bnz	0x6d4                	BNZ	_00457_DS_
0006ca   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 14)
0006cc   5146     movf	0x46, 0, 0x1        	MOVF	(_DHCPClient + 14), W, B
0006ce   010a     movlb	0xa                	BANKSEL	(__DHCPReceive_tempServerID_1_1 + 3)
0006d0   1903     xorwf	0x3, 0, 0x1        	XORWF	(__DHCPReceive_tempServerID_1_1 + 3), W, B
0006d2   e002     bz	0x6d8                 	BZ	_00350_DS_
                                           _00457_DS_:
0006d4   010a     movlb	0xa                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1007; TCPIP_Stack/DHCP.c	type = DHCP_UNKNOWN_MESSAGE;
0006d6   6b84     clrf	0x84, 0x1           	CLRF	__DHCPReceive_type_1_1, B
                                           _00350_DS_:
                                           ;	.line	1010; TCPIP_Stack/DHCP.c	UDPDiscard();  // We are done with this packet
0006d8   ec2e     call	0x7e5c, 0           	CALL	_UDPDiscard
0006da   f03f
0006dc   010a     movlb	0xa                	BANKSEL	__DHCPReceive_type_1_1
                                           ;	.line	1011; TCPIP_Stack/DHCP.c	return type;
0006de   5184     movf	0x84, 0, 0x1        	MOVF	__DHCPReceive_type_1_1, W, B
0006e0   d003     bra	0x6e8                	BRA	_00377_DS_
                                           _00351_DS_:
                                           ;	.line	1014; TCPIP_Stack/DHCP.c	UDPDiscard();
0006e2   ec2e     call	0x7e5c, 0           	CALL	_UDPDiscard
0006e4   f03f
                                           ;	.line	1015; TCPIP_Stack/DHCP.c	return DHCP_UNKNOWN_MESSAGE;
0006e6   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00377_DS_:
0006e8   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0006ea   f005
0006ec   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0006ee   f004
0006f0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0006f2   f003
0006f4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0006f6   f002
0006f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0006fa   f001
0006fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0006fe   f000
000700   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000702   ffd9
000704   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPTask	code
                                           _DHCPTask:
                                           ;	.line	485; TCPIP_Stack/DHCP.c	void DHCPTask(void)
000706   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000708   ffe5
00070a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00070c   ffd9
00070e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000710   ffe5
000712   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000714   ffe5
000716   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000718   ffe5
00071a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00071c   ffe5
00071e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000720   ffe5
000722   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000724   ffe5
000726   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000728   ffe5
00072a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00072c   ffe5
00072e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000730   ffe5
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000732   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00227_DS_:
000734   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
000736   f001
000738   6a02     clrf	0x2, 0              	CLRF	r0x02
00073a   0e00     movlw	0                  	MOVLW	0x00
00073c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00073e   e102     bnz	0x744                	BNZ	_00259_DS_
000740   0e01     movlw	0x1                	MOVLW	0x01
000742   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
000744   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000746   efe3     goto	0xdc6               	GOTO	_00231_DS_
000748   f006
                                           ;	.line	491; TCPIP_Stack/DHCP.c	LoadState(i);
00074a   6a00     clrf	0, 0                	CLRF	r0x00
                                           ;	.line	492; TCPIP_Stack/DHCP.c	switch(DHCPClient.smState)
00074c   c839     movff	0x839, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
00074e   f001
000750   0e0d     movlw	0xd                	MOVLW	0x0d
000752   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000754   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000756   efe0     goto	0xdc0               	GOTO	_00229_DS_
000758   f006
00075a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00075c   ffe5
00075e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000760   ffe5
000762   6a0a     clrf	0xa, 0              	CLRF	r0x0a
000764   3401     rlcf	0x1, 0, 0           	RLCF	r0x01, W
000766   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
000768   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00076a   360a     rlcf	0xa, 0x1, 0         	RLCF	r0x0a, F
00076c   0bfc     andlw	0xfc               	ANDLW	0xfc
00076e   6e09     movwf	0x9, 0             	MOVWF	r0x09
000770   0e00     movlw	0                  	MOVLW	UPPER(_00261_DS_)
000772   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000774   0e07     movlw	0x7                	MOVLW	HIGH(_00261_DS_)
000776   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000778   0e90     movlw	0x90               	MOVLW	LOW(_00261_DS_)
00077a   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
00077c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00077e   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000780   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000782   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000784   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000786   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000788   f00a
00078a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00078c   f009
00078e   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00261_DS_:
000790   efe2     goto	0x7c4               	GOTO	_00169_DS_
000792   f003
000794   efe4     goto	0x7c8               	GOTO	_00170_DS_
000796   f003
000798   ef07     goto	0x80e               	GOTO	_00173_DS_
00079a   f004
00079c   ef78     goto	0x8f0               	GOTO	_00178_DS_
00079e   f004
0007a0   efbf     goto	0x97e               	GOTO	_00185_DS_
0007a2   f004
0007a4   ef0a     goto	0xa14               	GOTO	_00188_DS_
0007a6   f005
0007a8   efb1     goto	0xb62               	GOTO	_00202_DS_
0007aa   f005
0007ac   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007ae   f006
0007b0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007b2   f006
0007b4   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007b6   f006
0007b8   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007ba   f006
0007bc   ef36     goto	0xc6c               	GOTO	_00211_DS_
0007be   f006
0007c0   ef6c     goto	0xcd8               	GOTO	_00216_DS_
0007c2   f006
                                           _00169_DS_:
                                           ;	.line	496; TCPIP_Stack/DHCP.c	break;
0007c4   efe0     goto	0xdc0               	GOTO	_00229_DS_
0007c6   f006
                                           _00170_DS_:
                                           ;	.line	501; TCPIP_Stack/DHCP.c	UDPOpen(DHCP_CLIENT_PORT, NULL, DHCP_SERVER_PORT);
0007c8   0e00     movlw	0                  	MOVLW	0x00
0007ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007cc   0e43     movlw	0x43               	MOVLW	0x43
0007ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d0   0e00     movlw	0                  	MOVLW	0x00
0007d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d4   0e00     movlw	0                  	MOVLW	0x00
0007d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007d8   0e00     movlw	0                  	MOVLW	0x00
0007da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007dc   0e00     movlw	0                  	MOVLW	0x00
0007de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e0   0e44     movlw	0x44               	MOVLW	0x44
0007e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0007e4   ec39     call	0x3072, 0           	CALL	_UDPOpen
0007e6   f018
0007e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0007ea   0e07     movlw	0x7                	MOVLW	0x07
0007ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0007ee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007f0   0108     movlb	0x8                	BANKSEL	_DHCPClient
0007f2   6f38     movwf	0x38, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	502; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
0007f4   c838     movff	0x838, 0x1         	MOVFF	_DHCPClient, r0x01
0007f6   f001
0007f8   6a02     clrf	0x2, 0              	CLRF	r0x02
0007fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0007fc   0aff     xorlw	0xff               	XORLW	0xff
0007fe   e104     bnz	0x808                	BNZ	_00263_DS_
000800   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000802   e102     bnz	0x808                	BNZ	_00263_DS_
000804   efe0     goto	0xdc0               	GOTO	_00229_DS_
000806   f006
                                           _00263_DS_:
                                           ;	.line	504; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000808   0e02     movlw	0x2                	MOVLW	0x02
00080a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
00080c   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00173_DS_:
                                           ;	.line	512; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime = 60;
00080e   0e3c     movlw	0x3c               	MOVLW	0x3c
000810   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
000812   6f3f     movwf	0x3f, 0x1          	MOVWF	(_DHCPClient + 7), B
000814   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
000816   6b40     clrf	0x40, 0x1           	CLRF	(_DHCPClient + 8), B
000818   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
00081a   6b41     clrf	0x41, 0x1           	CLRF	(_DHCPClient + 9), B
00081c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
00081e   6b42     clrf	0x42, 0x1           	CLRF	(_DHCPClient + 10), B
000820   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	513; TCPIP_Stack/DHCP.c	DHCPClient.validValues.val = 0x00;
000822   6b53     clrf	0x53, 0x1           	CLRF	(_DHCPClient + 27), B
000824   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	514; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;	
000826   913a     bcf	0x3a, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
000828   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	515; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
00082a   953a     bcf	0x3a, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	519; TCPIP_Stack/DHCP.c	if(!MACIsLinked()) break;
00082c   ecdf     call	0x7bbe, 0           	CALL	_MACIsLinked
00082e   f03d
000830   6e01     movwf	0x1, 0             	MOVWF	r0x01
000832   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000834   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000836   efe0     goto	0xdc0               	GOTO	_00229_DS_
000838   f006
00083a   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	522; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 300u) break;
00083c   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
00083e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000840   ecc3     call	0x6f86, 0           	CALL	_UDPIsPutReady
000842   f037
000844   6e01     movwf	0x1, 0             	MOVWF	r0x01
000846   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000848   f002
00084a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00084c   0e01     movlw	0x1                	MOVLW	0x01
00084e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000850   e102     bnz	0x856                	BNZ	_00264_DS_
000852   0e2c     movlw	0x2c               	MOVLW	0x2c
000854   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00264_DS_:
000856   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000858   efe0     goto	0xdc0               	GOTO	_00229_DS_
00085a   f006
                                           ;	.line	528; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode ^= 1;
00085c   6a01     clrf	0x1, 0              	CLRF	r0x01
00085e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
000860   b93a     btfsc	0x3a, 0x4, 0x1     	BTFSC	(_DHCPClient + 2), 4, B
000862   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000864   0e01     movlw	0x1                	MOVLW	0x01
000866   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
000868   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00086a   0b01     andlw	0x1                	ANDLW	0x01
00086c   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
00086e   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000870   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
000872   513a     movf	0x3a, 0, 0x1        	MOVF	(_DHCPClient + 2), W, B
000874   0bef     andlw	0xef               	ANDLW	0xef
000876   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
000878   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
00087a   6f3a     movwf	0x3a, 0x1          	MOVWF	(_DHCPClient + 2), B
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00087c   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	533; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
00087e   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
000880   0d0e     mullw	0xe                	MULLW	0x0e
000882   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000884   f001
000886   6a02     clrf	0x2, 0              	CLRF	r0x02
000888   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00088a   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
00088c   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00088e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	534; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
000890   0e00     movlw	0                  	MOVLW	0x00
000892   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000894   0e0a     movlw	0xa                	MOVLW	0x0a
000896   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000898   0eff     movlw	0xff               	MOVLW	0xff
00089a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00089c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00089e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008a4   ec38     call	0x6670, 0           	CALL	_memset
0008a6   f033
0008a8   0e05     movlw	0x5                	MOVLW	0x05
0008aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_DISCOVER_MESSAGE, FALSE);
0008ac   0e00     movlw	0                  	MOVLW	0x00
0008ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b0   0e01     movlw	0x1                	MOVLW	0x01
0008b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008b4   ec86     call	0x150c, 0           	CALL	__DHCPSend
0008b6   f00a
0008b8   0e02     movlw	0x2                	MOVLW	0x02
0008ba   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	540; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0008bc   ec7c     call	0x7ef8, 0           	CALL	_TickGet
0008be   f03f
0008c0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008c2   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008c4   f002
0008c6   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0008c8   f003
0008ca   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0008cc   f004
0008ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0008d0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
0008d2   6f3b     movwf	0x3b, 0x1          	MOVWF	(_DHCPClient + 3), B
0008d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008d6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
0008d8   6f3c     movwf	0x3c, 0x1          	MOVWF	(_DHCPClient + 4), B
0008da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0008dc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
0008de   6f3d     movwf	0x3d, 0x1          	MOVWF	(_DHCPClient + 5), B
0008e0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0008e2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
0008e4   6f3e     movwf	0x3e, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	541; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_OFFER;
0008e6   0e03     movlw	0x3                	MOVLW	0x03
0008e8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
0008ea   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	542; TCPIP_Stack/DHCP.c	break;
0008ec   efe0     goto	0xdc0               	GOTO	_00229_DS_
0008ee   f006
                                           _00178_DS_:
0008f0   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	546; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
0008f2   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
0008f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0008f6   ec0c     call	0x7618, 0           	CALL	_UDPIsGetReady
0008f8   f03b
0008fa   6e01     movwf	0x1, 0             	MOVWF	r0x01
0008fc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0008fe   f002
000900   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000902   0e00     movlw	0                  	MOVLW	0x00
000904   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000906   e102     bnz	0x90c                	BNZ	_00266_DS_
000908   0efa     movlw	0xfa               	MOVLW	0xfa
00090a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00266_DS_:
00090c   e228     bc	0x95e                 	BC	_00182_DS_
                                           ;	.line	550; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
00090e   ec7c     call	0x7ef8, 0           	CALL	_TickGet
000910   f03f
000912   6e01     movwf	0x1, 0             	MOVWF	r0x01
000914   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000916   f002
000918   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
00091a   f003
00091c   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
00091e   f004
000920   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000922   513b     movf	0x3b, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000924   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000926   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000928   513c     movf	0x3c, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
00092a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
00092c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
00092e   513d     movf	0x3d, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000930   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000932   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000934   513e     movf	0x3e, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000936   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000938   0e00     movlw	0                  	MOVLW	0x00
00093a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00093c   e108     bnz	0x94e                	BNZ	_00267_DS_
00093e   0e01     movlw	0x1                	MOVLW	0x01
000940   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000942   e105     bnz	0x94e                	BNZ	_00267_DS_
000944   0e3d     movlw	0x3d               	MOVLW	0x3d
000946   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000948   e102     bnz	0x94e                	BNZ	_00267_DS_
00094a   0ee4     movlw	0xe4               	MOVLW	0xe4
00094c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00267_DS_:
00094e   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000950   efe0     goto	0xdc0               	GOTO	_00229_DS_
000952   f006
                                           ;	.line	551; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000954   0e02     movlw	0x2                	MOVLW	0x02
000956   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000958   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	552; TCPIP_Stack/DHCP.c	break;
00095a   efe0     goto	0xdc0               	GOTO	_00229_DS_
00095c   f006
                                           _00182_DS_:
00095e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	557; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bDHCPServerDetected = TRUE;
000960   873a     bsf	0x3a, 0x3, 0x1       	BSF	(_DHCPClient + 2), 3, B
                                           ;	.line	560; TCPIP_Stack/DHCP.c	if(_DHCPReceive() != DHCP_OFFER_MESSAGE) break;
000962   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000964   f000
000966   6e01     movwf	0x1, 0             	MOVWF	r0x01
000968   6a02     clrf	0x2, 0              	CLRF	r0x02
00096a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00096c   0a02     xorlw	0x2                	XORLW	0x02
00096e   e102     bnz	0x974                	BNZ	_00268_DS_
000970   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000972   e002     bz	0x978                 	BZ	_00269_DS_
                                           _00268_DS_:
000974   efe0     goto	0xdc0               	GOTO	_00229_DS_
000976   f006
                                           _00269_DS_:
                                           ;	.line	561; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_REQUEST;
000978   0e04     movlw	0x4                	MOVLW	0x04
00097a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
00097c   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00185_DS_:
00097e   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	565; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000980   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
000982   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000984   ecc3     call	0x6f86, 0           	CALL	_UDPIsPutReady
000986   f037
000988   6e01     movwf	0x1, 0             	MOVWF	r0x01
00098a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00098c   f002
00098e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000990   0e01     movlw	0x1                	MOVLW	0x01
000992   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000994   e102     bnz	0x99a                	BNZ	_00270_DS_
000996   0e02     movlw	0x2                	MOVLW	0x02
000998   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00270_DS_:
00099a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00099c   efe0     goto	0xdc0               	GOTO	_00229_DS_
00099e   f006
                                           ; ;multiply lit val:0x0e by variable _DHCPClient and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0009a0   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	572; TCPIP_Stack/DHCP.c	memset((void*)&UDPSocketInfo[DHCPClient.hDHCPSocket].remoteNode,
0009a2   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
0009a4   0d0e     mullw	0xe                	MULLW	0x0e
0009a6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0009a8   f001
0009aa   6a02     clrf	0x2, 0              	CLRF	r0x02
0009ac   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0009ae   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0009b0   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0009b2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
                                           ;	.line	573; TCPIP_Stack/DHCP.c	0xFF, sizeof(UDPSocketInfo[0].remoteNode));
0009b4   0e00     movlw	0                  	MOVLW	0x00
0009b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009b8   0e0a     movlw	0xa                	MOVLW	0x0a
0009ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009bc   0eff     movlw	0xff               	MOVLW	0xff
0009be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009c8   ec38     call	0x6670, 0           	CALL	_memset
0009ca   f033
0009cc   0e05     movlw	0x5                	MOVLW	0x05
0009ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	576; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, FALSE);	
0009d0   0e00     movlw	0                  	MOVLW	0x00
0009d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d4   0e03     movlw	0x3                	MOVLW	0x03
0009d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0009d8   ec86     call	0x150c, 0           	CALL	__DHCPSend
0009da   f00a
0009dc   0e02     movlw	0x2                	MOVLW	0x02
0009de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	579; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
0009e0   ec7c     call	0x7ef8, 0           	CALL	_TickGet
0009e2   f03f
0009e4   6e01     movwf	0x1, 0             	MOVWF	r0x01
0009e6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0009e8   f002
0009ea   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0009ec   f003
0009ee   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0009f0   f004
0009f2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0009f4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
0009f6   6f3b     movwf	0x3b, 0x1          	MOVWF	(_DHCPClient + 3), B
0009f8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0009fa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
0009fc   6f3c     movwf	0x3c, 0x1          	MOVWF	(_DHCPClient + 4), B
0009fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000a00   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000a02   6f3d     movwf	0x3d, 0x1          	MOVWF	(_DHCPClient + 5), B
000a04   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000a06   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000a08   6f3e     movwf	0x3e, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	580; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_REQUEST_ACK;
000a0a   0e05     movlw	0x5                	MOVLW	0x05
000a0c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000a0e   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	581; TCPIP_Stack/DHCP.c	break;
000a10   efe0     goto	0xdc0               	GOTO	_00229_DS_
000a12   f006
                                           _00188_DS_:
000a14   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	585; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000a16   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
000a18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000a1a   ec0c     call	0x7618, 0           	CALL	_UDPIsGetReady
000a1c   f03b
000a1e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a20   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a22   f002
000a24   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000a26   0e00     movlw	0                  	MOVLW	0x00
000a28   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a2a   e102     bnz	0xa30                	BNZ	_00271_DS_
000a2c   0efa     movlw	0xfa               	MOVLW	0xfa
000a2e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00271_DS_:
000a30   e226     bc	0xa7e                 	BC	_00192_DS_
                                           ;	.line	589; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >= DHCP_TIMEOUT)
000a32   ec7c     call	0x7ef8, 0           	CALL	_TickGet
000a34   f03f
000a36   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a38   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000a3a   f002
000a3c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000a3e   f003
000a40   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000a42   f004
000a44   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000a46   513b     movf	0x3b, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000a48   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000a4a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000a4c   513c     movf	0x3c, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000a4e   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000a50   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000a52   513d     movf	0x3d, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000a54   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000a56   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000a58   513e     movf	0x3e, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000a5a   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000a5c   0e00     movlw	0                  	MOVLW	0x00
000a5e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000a60   e108     bnz	0xa72                	BNZ	_00272_DS_
000a62   0e01     movlw	0x1                	MOVLW	0x01
000a64   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000a66   e105     bnz	0xa72                	BNZ	_00272_DS_
000a68   0e3d     movlw	0x3d               	MOVLW	0x3d
000a6a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000a6c   e102     bnz	0xa72                	BNZ	_00272_DS_
000a6e   0ee4     movlw	0xe4               	MOVLW	0xe4
000a70   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00272_DS_:
000a72   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000a74   d1a5     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	590; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000a76   0e02     movlw	0x2                	MOVLW	0x02
000a78   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000a7a   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	591; TCPIP_Stack/DHCP.c	break;
000a7c   d1a1     bra	0xdc0                	BRA	_00229_DS_
                                           _00192_DS_:
                                           ;	.line	595; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000a7e   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000a80   f000
000a82   6e01     movwf	0x1, 0             	MOVWF	r0x01
000a84   6a02     clrf	0x2, 0              	CLRF	r0x02
000a86   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a88   0a05     xorlw	0x5                	XORLW	0x05
000a8a   e102     bnz	0xa90                	BNZ	_00274_DS_
000a8c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a8e   e007     bz	0xa9e                 	BZ	_00193_DS_
                                           _00274_DS_:
000a90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000a92   0a06     xorlw	0x6                	XORLW	0x06
000a94   e103     bnz	0xa9c                	BNZ	_00276_DS_
000a96   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000a98   e101     bnz	0xa9c                	BNZ	_00276_DS_
000a9a   d05f     bra	0xb5a                	BRA	_00200_DS_
                                           _00276_DS_:
000a9c   d191     bra	0xdc0                	BRA	_00229_DS_
                                           _00193_DS_:
000a9e   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	598; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000aa0   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
000aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000aa4   ec0b     call	0x7016, 0           	CALL	_UDPClose
000aa6   f038
000aa8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000aaa   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	599; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000aac   6938     setf	0x38, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	600; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000aae   ec7c     call	0x7ef8, 0           	CALL	_TickGet
000ab0   f03f
000ab2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ab4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ab6   f002
000ab8   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000aba   f003
000abc   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000abe   f004
000ac0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000ac2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000ac4   6f3b     movwf	0x3b, 0x1          	MOVWF	(_DHCPClient + 3), B
000ac6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000ac8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000aca   6f3c     movwf	0x3c, 0x1          	MOVWF	(_DHCPClient + 4), B
000acc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000ace   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000ad0   6f3d     movwf	0x3d, 0x1          	MOVWF	(_DHCPClient + 5), B
000ad2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000ad4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000ad6   6f3e     movwf	0x3e, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	601; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000ad8   0e06     movlw	0x6                	MOVLW	0x06
000ada   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000adc   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
000ade   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	602; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000ae0   833a     bsf	0x3a, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
000ae2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	603; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = TRUE;	
000ae4   813a     bsf	0x3a, 0, 0x1         	BSF	(_DHCPClient + 2), 0, B
000ae6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	605; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.IPAddress)
000ae8   a153     btfss	0x53, 0, 0x1       	BTFSS	(_DHCPClient + 27), 0, B
000aea   d010     bra	0xb0c                	BRA	_00195_DS_
000aec   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 15)
                                           ;	.line	606; TCPIP_Stack/DHCP.c	AppConfig.MyIPAddr.Val = DHCPClient.tempIPAddress.Val;
000aee   5147     movf	0x47, 0, 0x1        	MOVF	(_DHCPClient + 15), W, B
000af0   010e     movlb	0xe                	BANKSEL	_AppConfig
000af2   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
000af4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 16)
000af6   5148     movf	0x48, 0, 0x1        	MOVF	(_DHCPClient + 16), W, B
000af8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
000afa   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
000afc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 17)
000afe   5149     movf	0x49, 0, 0x1        	MOVF	(_DHCPClient + 17), W, B
000b00   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
000b02   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
000b04   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 18)
000b06   514a     movf	0x4a, 0, 0x1        	MOVF	(_DHCPClient + 18), W, B
000b08   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
000b0a   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
                                           _00195_DS_:
000b0c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	607; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Mask)
000b0e   a553     btfss	0x53, 0x2, 0x1     	BTFSS	(_DHCPClient + 27), 2, B
000b10   d010     bra	0xb32                	BRA	_00197_DS_
000b12   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 23)
                                           ;	.line	608; TCPIP_Stack/DHCP.c	AppConfig.MyMask.Val = DHCPClient.tempMask.Val;
000b14   514f     movf	0x4f, 0, 0x1        	MOVF	(_DHCPClient + 23), W, B
000b16   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
000b18   6f04     movwf	0x4, 0x1           	MOVWF	(_AppConfig + 4), B
000b1a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 24)
000b1c   5150     movf	0x50, 0, 0x1        	MOVF	(_DHCPClient + 24), W, B
000b1e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
000b20   6f05     movwf	0x5, 0x1           	MOVWF	(_AppConfig + 5), B
000b22   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 25)
000b24   5151     movf	0x51, 0, 0x1        	MOVF	(_DHCPClient + 25), W, B
000b26   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
000b28   6f06     movwf	0x6, 0x1           	MOVWF	(_AppConfig + 6), B
000b2a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 26)
000b2c   5152     movf	0x52, 0, 0x1        	MOVF	(_DHCPClient + 26), W, B
000b2e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
000b30   6f07     movwf	0x7, 0x1           	MOVWF	(_AppConfig + 7), B
                                           _00197_DS_:
000b32   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 27)
                                           ;	.line	609; TCPIP_Stack/DHCP.c	if(DHCPClient.validValues.bits.Gateway)
000b34   a353     btfss	0x53, 0x1, 0x1     	BTFSS	(_DHCPClient + 27), 1, B
000b36   d144     bra	0xdc0                	BRA	_00229_DS_
000b38   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 19)
                                           ;	.line	610; TCPIP_Stack/DHCP.c	AppConfig.MyGateway.Val = DHCPClient.tempGateway.Val;
000b3a   514b     movf	0x4b, 0, 0x1        	MOVF	(_DHCPClient + 19), W, B
000b3c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 8)
000b3e   6f08     movwf	0x8, 0x1           	MOVWF	(_AppConfig + 8), B
000b40   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 20)
000b42   514c     movf	0x4c, 0, 0x1        	MOVF	(_DHCPClient + 20), W, B
000b44   010e     movlb	0xe                	BANKSEL	(_AppConfig + 9)
000b46   6f09     movwf	0x9, 0x1           	MOVWF	(_AppConfig + 9), B
000b48   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 21)
000b4a   514d     movf	0x4d, 0, 0x1        	MOVF	(_DHCPClient + 21), W, B
000b4c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 10)
000b4e   6f0a     movwf	0xa, 0x1           	MOVWF	(_AppConfig + 10), B
000b50   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 22)
000b52   514e     movf	0x4e, 0, 0x1        	MOVF	(_DHCPClient + 22), W, B
000b54   010e     movlb	0xe                	BANKSEL	(_AppConfig + 11)
000b56   6f0b     movwf	0xb, 0x1           	MOVWF	(_AppConfig + 11), B
                                           ;	.line	624; TCPIP_Stack/DHCP.c	break;
000b58   d133     bra	0xdc0                	BRA	_00229_DS_
                                           _00200_DS_:
                                           ;	.line	627; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000b5a   0e02     movlw	0x2                	MOVLW	0x02
000b5c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000b5e   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	630; TCPIP_Stack/DHCP.c	break;
000b60   d12f     bra	0xdc0                	BRA	_00229_DS_
                                           _00202_DS_:
                                           ;	.line	633; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer < TICK_SECOND) break;
000b62   ec7c     call	0x7ef8, 0           	CALL	_TickGet
000b64   f03f
000b66   6e01     movwf	0x1, 0             	MOVWF	r0x01
000b68   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000b6a   f002
000b6c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000b6e   f003
000b70   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000b72   f004
000b74   c83b     movff	0x83b, 0x5         	MOVFF	(_DHCPClient + 3), r0x05
000b76   f005
000b78   c83c     movff	0x83c, 0x6         	MOVFF	(_DHCPClient + 4), r0x06
000b7a   f006
000b7c   c83d     movff	0x83d, 0x7         	MOVFF	(_DHCPClient + 5), r0x07
000b7e   f007
000b80   c83e     movff	0x83e, 0x8         	MOVFF	(_DHCPClient + 6), r0x08
000b82   f008
000b84   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000b86   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000b88   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000b8a   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000b8c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000b8e   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000b90   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000b92   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000b94   0e00     movlw	0                  	MOVLW	0x00
000b96   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000b98   e108     bnz	0xbaa                	BNZ	_00277_DS_
000b9a   0e00     movlw	0                  	MOVLW	0x00
000b9c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000b9e   e105     bnz	0xbaa                	BNZ	_00277_DS_
000ba0   0e9e     movlw	0x9e               	MOVLW	0x9e
000ba2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000ba4   e102     bnz	0xbaa                	BNZ	_00277_DS_
000ba6   0ef2     movlw	0xf2               	MOVLW	0xf2
000ba8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00277_DS_:
000baa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000bac   d109     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	637; TCPIP_Stack/DHCP.c	if(DHCPClient.dwLeaseTime >= 2ul)
000bae   c83f     movff	0x83f, 0x1         	MOVFF	(_DHCPClient + 7), r0x01
000bb0   f001
000bb2   c840     movff	0x840, 0x2         	MOVFF	(_DHCPClient + 8), r0x02
000bb4   f002
000bb6   c841     movff	0x841, 0x3         	MOVFF	(_DHCPClient + 9), r0x03
000bb8   f003
000bba   c842     movff	0x842, 0x4         	MOVFF	(_DHCPClient + 10), r0x04
000bbc   f004
000bbe   0e00     movlw	0                  	MOVLW	0x00
000bc0   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000bc2   e108     bnz	0xbd4                	BNZ	_00278_DS_
000bc4   0e00     movlw	0                  	MOVLW	0x00
000bc6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000bc8   e105     bnz	0xbd4                	BNZ	_00278_DS_
000bca   0e00     movlw	0                  	MOVLW	0x00
000bcc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000bce   e102     bnz	0xbd4                	BNZ	_00278_DS_
000bd0   0e02     movlw	0x2                	MOVLW	0x02
000bd2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00278_DS_:
000bd4   e329     bnc	0xc28                	BNC	_00206_DS_
                                           ;	.line	639; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer += TICK_SECOND;
000bd6   0ef2     movlw	0xf2               	MOVLW	0xf2
000bd8   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
000bda   0e9e     movlw	0x9e               	MOVLW	0x9e
000bdc   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000bde   0e00     movlw	0                  	MOVLW	0x00
000be0   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
000be2   0e00     movlw	0                  	MOVLW	0x00
000be4   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
000be6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000be8   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000bea   6f3b     movwf	0x3b, 0x1          	MOVWF	(_DHCPClient + 3), B
000bec   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000bee   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000bf0   6f3c     movwf	0x3c, 0x1          	MOVWF	(_DHCPClient + 4), B
000bf2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000bf4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000bf6   6f3d     movwf	0x3d, 0x1          	MOVWF	(_DHCPClient + 5), B
000bf8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000bfa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000bfc   6f3e     movwf	0x3e, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	640; TCPIP_Stack/DHCP.c	DHCPClient.dwLeaseTime--;
000bfe   0eff     movlw	0xff               	MOVLW	0xff
000c00   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000c02   0eff     movlw	0xff               	MOVLW	0xff
000c04   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000c06   0eff     movlw	0xff               	MOVLW	0xff
000c08   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000c0a   0eff     movlw	0xff               	MOVLW	0xff
000c0c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000c0e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c10   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 7)
000c12   6f3f     movwf	0x3f, 0x1          	MOVWF	(_DHCPClient + 7), B
000c14   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c16   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 8)
000c18   6f40     movwf	0x40, 0x1          	MOVWF	(_DHCPClient + 8), B
000c1a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000c1c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 9)
000c1e   6f41     movwf	0x41, 0x1          	MOVWF	(_DHCPClient + 9), B
000c20   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000c22   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 10)
000c24   6f42     movwf	0x42, 0x1          	MOVWF	(_DHCPClient + 10), B
                                           ;	.line	641; TCPIP_Stack/DHCP.c	break;
000c26   d0cc     bra	0xdc0                	BRA	_00229_DS_
                                           _00206_DS_:
                                           ;	.line	646; TCPIP_Stack/DHCP.c	NULL, DHCP_SERVER_PORT);
000c28   0e00     movlw	0                  	MOVLW	0x00
000c2a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c2c   0e43     movlw	0x43               	MOVLW	0x43
000c2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c30   0e00     movlw	0                  	MOVLW	0x00
000c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c34   0e00     movlw	0                  	MOVLW	0x00
000c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c38   0e00     movlw	0                  	MOVLW	0x00
000c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c3c   0e00     movlw	0                  	MOVLW	0x00
000c3e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c40   0e44     movlw	0x44               	MOVLW	0x44
000c42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c44   ec39     call	0x3072, 0           	CALL	_UDPOpen
000c46   f018
000c48   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c4a   0e07     movlw	0x7                	MOVLW	0x07
000c4c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c4e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c50   0108     movlb	0x8                	BANKSEL	_DHCPClient
000c52   6f38     movwf	0x38, 0x1          	MOVWF	_DHCPClient, B
                                           ;	.line	647; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket == INVALID_UDP_SOCKET) break;
000c54   c838     movff	0x838, 0x1         	MOVFF	_DHCPClient, r0x01
000c56   f001
000c58   6a02     clrf	0x2, 0              	CLRF	r0x02
000c5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000c5c   0aff     xorlw	0xff               	XORLW	0xff
000c5e   e103     bnz	0xc66                	BNZ	_00280_DS_
000c60   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000c62   e101     bnz	0xc66                	BNZ	_00280_DS_
000c64   d0ad     bra	0xdc0                	BRA	_00229_DS_
                                           _00280_DS_:
                                           ;	.line	649; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_RENEW;
000c66   0e07     movlw	0x7                	MOVLW	0x07
000c68   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000c6a   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00211_DS_:
000c6c   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	655; TCPIP_Stack/DHCP.c	if(UDPIsPutReady(DHCPClient.hDHCPSocket) < 258u) break;
000c6e   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
000c70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c72   ecc3     call	0x6f86, 0           	CALL	_UDPIsPutReady
000c74   f037
000c76   6e01     movwf	0x1, 0             	MOVWF	r0x01
000c78   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000c7a   f002
000c7c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000c7e   0e01     movlw	0x1                	MOVLW	0x01
000c80   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000c82   e102     bnz	0xc88                	BNZ	_00281_DS_
000c84   0e02     movlw	0x2                	MOVLW	0x02
000c86   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00281_DS_:
000c88   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000c8a   d09a     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	658; TCPIP_Stack/DHCP.c	_DHCPSend(DHCP_REQUEST_MESSAGE, TRUE);
000c8c   0e01     movlw	0x1                	MOVLW	0x01
000c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c90   0e03     movlw	0x3                	MOVLW	0x03
000c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000c94   ec86     call	0x150c, 0           	CALL	__DHCPSend
000c96   f00a
000c98   0e02     movlw	0x2                	MOVLW	0x02
000c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
000c9c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	659; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bOfferReceived = FALSE;
000c9e   953a     bcf	0x3a, 0x2, 0x1       	BCF	(_DHCPClient + 2), 2, B
                                           ;	.line	662; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000ca0   ec7c     call	0x7ef8, 0           	CALL	_TickGet
000ca2   f03f
000ca4   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ca6   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ca8   f002
000caa   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000cac   f003
000cae   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000cb0   f004
000cb2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cb4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000cb6   6f3b     movwf	0x3b, 0x1          	MOVWF	(_DHCPClient + 3), B
000cb8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000cba   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000cbc   6f3c     movwf	0x3c, 0x1          	MOVWF	(_DHCPClient + 4), B
000cbe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000cc0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000cc2   6f3d     movwf	0x3d, 0x1          	MOVWF	(_DHCPClient + 5), B
000cc4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cc6   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000cc8   6f3e     movwf	0x3e, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	663; TCPIP_Stack/DHCP.c	DHCPClient.smState++;
000cca   c839     movff	0x839, 0x1         	MOVFF	(_DHCPClient + 1), r0x01
000ccc   f001
000cce   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
000cd0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000cd2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000cd4   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	664; TCPIP_Stack/DHCP.c	break;
000cd6   d074     bra	0xdc0                	BRA	_00229_DS_
                                           _00216_DS_:
000cd8   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	670; TCPIP_Stack/DHCP.c	if(UDPIsGetReady(DHCPClient.hDHCPSocket) < 250u)
000cda   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
000cdc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cde   ec0c     call	0x7618, 0           	CALL	_UDPIsGetReady
000ce0   f03b
000ce2   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ce4   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000ce6   f002
000ce8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000cea   0e00     movlw	0                  	MOVLW	0x00
000cec   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000cee   e102     bnz	0xcf4                	BNZ	_00282_DS_
000cf0   0efa     movlw	0xfa               	MOVLW	0xfa
000cf2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00282_DS_:
000cf4   e230     bc	0xd56                 	BC	_00222_DS_
                                           ;	.line	674; TCPIP_Stack/DHCP.c	if(TickGet() - DHCPClient.dwTimer >=  DHCP_TIMEOUT)
000cf6   ec7c     call	0x7ef8, 0           	CALL	_TickGet
000cf8   f03f
000cfa   6e01     movwf	0x1, 0             	MOVWF	r0x01
000cfc   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000cfe   f002
000d00   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d02   f003
000d04   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d06   f004
000d08   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000d0a   513b     movf	0x3b, 0, 0x1        	MOVF	(_DHCPClient + 3), W, B
000d0c   5e01     subwf	0x1, 0x1, 0        	SUBWF	r0x01, F
000d0e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000d10   513c     movf	0x3c, 0, 0x1        	MOVF	(_DHCPClient + 4), W, B
000d12   5a02     subwfb	0x2, 0x1, 0       	SUBWFB	r0x02, F
000d14   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000d16   513d     movf	0x3d, 0, 0x1        	MOVF	(_DHCPClient + 5), W, B
000d18   5a03     subwfb	0x3, 0x1, 0       	SUBWFB	r0x03, F
000d1a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000d1c   513e     movf	0x3e, 0, 0x1        	MOVF	(_DHCPClient + 6), W, B
000d1e   5a04     subwfb	0x4, 0x1, 0       	SUBWFB	r0x04, F
000d20   0e00     movlw	0                  	MOVLW	0x00
000d22   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
000d24   e108     bnz	0xd36                	BNZ	_00283_DS_
000d26   0e01     movlw	0x1                	MOVLW	0x01
000d28   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
000d2a   e105     bnz	0xd36                	BNZ	_00283_DS_
000d2c   0e3d     movlw	0x3d               	MOVLW	0x3d
000d2e   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
000d30   e102     bnz	0xd36                	BNZ	_00283_DS_
000d32   0ee4     movlw	0xe4               	MOVLW	0xe4
000d34   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00283_DS_:
000d36   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d38   d043     bra	0xdc0                	BRA	_00229_DS_
000d3a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	676; TCPIP_Stack/DHCP.c	if(++DHCPClient.smState > SM_DHCP_GET_RENEW_ACK3)
000d3c   2939     incf	0x39, 0, 0x1        	INCF	(_DHCPClient + 1), W, B
000d3e   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d40   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d42   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000d44   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
000d46   0e0d     movlw	0xd                	MOVLW	0x0d
000d48   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000d4a   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000d4c   d039     bra	0xdc0                	BRA	_00229_DS_
                                           ;	.line	677; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000d4e   0e02     movlw	0x2                	MOVLW	0x02
000d50   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000d52   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           ;	.line	679; TCPIP_Stack/DHCP.c	break;
000d54   d035     bra	0xdc0                	BRA	_00229_DS_
                                           _00222_DS_:
                                           ;	.line	683; TCPIP_Stack/DHCP.c	switch(_DHCPReceive())
000d56   ec0e     call	0x1c, 0             	CALL	__DHCPReceive
000d58   f000
000d5a   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d5c   6a02     clrf	0x2, 0              	CLRF	r0x02
000d5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d60   0a05     xorlw	0x5                	XORLW	0x05
000d62   e102     bnz	0xd68                	BNZ	_00286_DS_
000d64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d66   e006     bz	0xd74                 	BZ	_00223_DS_
                                           _00286_DS_:
000d68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d6a   0a06     xorlw	0x6                	XORLW	0x06
000d6c   e129     bnz	0xdc0                	BNZ	_00229_DS_
000d6e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d70   e024     bz	0xdba                 	BZ	_00224_DS_
                                           _00288_DS_:
000d72   d026     bra	0xdc0                	BRA	_00229_DS_
                                           _00223_DS_:
000d74   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	686; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
000d76   5138     movf	0x38, 0, 0x1        	MOVF	_DHCPClient, W, B
000d78   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d7a   ec0b     call	0x7016, 0           	CALL	_UDPClose
000d7c   f038
000d7e   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
000d80   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	687; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
000d82   6938     setf	0x38, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	688; TCPIP_Stack/DHCP.c	DHCPClient.dwTimer = TickGet();
000d84   ec7c     call	0x7ef8, 0           	CALL	_TickGet
000d86   f03f
000d88   6e01     movwf	0x1, 0             	MOVWF	r0x01
000d8a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000d8c   f002
000d8e   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000d90   f003
000d92   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
000d94   f004
000d96   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000d98   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 3)
000d9a   6f3b     movwf	0x3b, 0x1          	MOVWF	(_DHCPClient + 3), B
000d9c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000d9e   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 4)
000da0   6f3c     movwf	0x3c, 0x1          	MOVWF	(_DHCPClient + 4), B
000da2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000da4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 5)
000da6   6f3d     movwf	0x3d, 0x1          	MOVWF	(_DHCPClient + 5), B
000da8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000daa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 6)
000dac   6f3e     movwf	0x3e, 0x1          	MOVWF	(_DHCPClient + 6), B
                                           ;	.line	689; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_BOUND;
000dae   0e06     movlw	0x6                	MOVLW	0x06
000db0   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000db2   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
000db4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	690; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 1;
000db6   833a     bsf	0x3a, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
                                           ;	.line	691; TCPIP_Stack/DHCP.c	break;
000db8   d003     bra	0xdc0                	BRA	_00229_DS_
                                           _00224_DS_:
                                           ;	.line	694; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_SEND_DISCOVERY;
000dba   0e02     movlw	0x2                	MOVLW	0x02
000dbc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
000dbe   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
                                           _00229_DS_:
                                           ;	.line	489; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
000dc0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000dc2   ef9a     goto	0x734               	GOTO	_00227_DS_
000dc4   f003
                                           _00231_DS_:
000dc6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000dc8   f008
000dca   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000dcc   f007
000dce   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000dd0   f006
000dd2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000dd4   f005
000dd6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000dd8   f004
000dda   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000ddc   f003
000dde   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000de0   f002
000de2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000de4   f001
000de6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000de8   f000
000dea   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000dec   ffd9
000dee   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsServerDetected	code
                                           _DHCPIsServerDetected:
                                           ;	.line	457; TCPIP_Stack/DHCP.c	BOOL DHCPIsServerDetected(BYTE vInterface)
007f3c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007f3e   ffe5
007f40   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007f42   ffd9
007f44   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007f46   ffe5
                                           ;	.line	460; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bDHCPServerDetected;
007f48   6a00     clrf	0, 0                	CLRF	r0x00
007f4a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
007f4c   b73a     btfsc	0x3a, 0x3, 0x1     	BTFSC	(_DHCPClient + 2), 3, B
007f4e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007f50   5000     movf	0, 0, 0             	MOVF	r0x00, W
007f52   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007f54   f000
007f56   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007f58   ffd9
007f5a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPStateChanged	code
                                           _DHCPStateChanged:
                                           ;	.line	420; TCPIP_Stack/DHCP.c	BOOL DHCPStateChanged(BYTE vInterface)
007f9c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007f9e   ffe5
007fa0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007fa2   ffd9
007fa4   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	423; TCPIP_Stack/DHCP.c	if(DHCPClient.flags.bits.bEvent)
007fa6   a33a     btfss	0x3a, 0x1, 0x1     	BTFSS	(_DHCPClient + 2), 1, B
007fa8   d004     bra	0x7fb2               	BRA	_00158_DS_
007faa   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	425; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = 0;
007fac   933a     bcf	0x3a, 0x1, 0x1       	BCF	(_DHCPClient + 2), 1, B
                                           ;	.line	426; TCPIP_Stack/DHCP.c	return TRUE;
007fae   0e01     movlw	0x1                	MOVLW	0x01
007fb0   d001     bra	0x7fb4               	BRA	_00159_DS_
                                           _00158_DS_:
                                           ;	.line	428; TCPIP_Stack/DHCP.c	return FALSE;
007fb2   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00159_DS_:
007fb4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007fb6   ffd9
007fb8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsBound	code
                                           _DHCPIsBound:
                                           ;	.line	386; TCPIP_Stack/DHCP.c	BOOL DHCPIsBound(BYTE vInterface)
007f5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007f5e   ffe5
007f60   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007f62   ffd9
007f64   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007f66   ffe5
                                           ;	.line	389; TCPIP_Stack/DHCP.c	return DHCPClient.flags.bits.bIsBound;
007f68   6a00     clrf	0, 0                	CLRF	r0x00
007f6a   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
007f6c   b13a     btfsc	0x3a, 0, 0x1       	BTFSC	(_DHCPClient + 2), 0, B
007f6e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007f70   5000     movf	0, 0, 0             	MOVF	r0x00, W
007f72   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007f74   f000
007f76   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007f78   ffd9
007f7a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPIsEnabled	code
                                           _DHCPIsEnabled:
                                           ;	.line	355; TCPIP_Stack/DHCP.c	BOOL DHCPIsEnabled(BYTE vInterface)
007dae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007db0   ffe5
007db2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007db4   ffd9
007db6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007db8   ffe5
                                           ;	.line	358; TCPIP_Stack/DHCP.c	return DHCPClient.smState != SM_DHCP_DISABLED;
007dba   6a00     clrf	0, 0                	CLRF	r0x00
007dbc   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
007dbe   5139     movf	0x39, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
007dc0   e101     bnz	0x7dc4               	BNZ	_00147_DS_
007dc2   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00147_DS_:
007dc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
007dc6   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
007dc8   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
007dca   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
007dcc   6a00     clrf	0, 0                	CLRF	r0x00
007dce   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
007dd0   5000     movf	0, 0, 0             	MOVF	r0x00, W
007dd2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007dd4   f000
007dd6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007dd8   ffd9
007dda   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPEnable	code
                                           _DHCPEnable:
                                           ;	.line	324; TCPIP_Stack/DHCP.c	void DHCPEnable(BYTE vInterface)
007fba   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007fbc   ffe5
007fbe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007fc0   ffd9
007fc2   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	328; TCPIP_Stack/DHCP.c	if(DHCPClient.smState == SM_DHCP_DISABLED)
007fc4   5139     movf	0x39, 0, 0x1        	MOVF	(_DHCPClient + 1), W, B
007fc6   e105     bnz	0x7fd2               	BNZ	_00139_DS_
                                           ;	.line	330; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
007fc8   0e01     movlw	0x1                	MOVLW	0x01
007fca   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
007fcc   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
007fce   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	331; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bIsBound = FALSE;
007fd0   913a     bcf	0x3a, 0, 0x1         	BCF	(_DHCPClient + 2), 0, B
                                           _00139_DS_:
007fd2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007fd4   ffd9
007fd6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPDisable	code
                                           _DHCPDisable:
                                           ;	.line	289; TCPIP_Stack/DHCP.c	void DHCPDisable(BYTE vInterface)
007a52   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007a54   ffe5
007a56   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007a58   ffd9
007a5a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007a5c   ffe5
007a5e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007a60   ffe5
007a62   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007a64   ffe5
                                           ;	.line	293; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
007a66   c838     movff	0x838, 0           	MOVFF	_DHCPClient, r0x00
007a68   f000
007a6a   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
007a6c   f001
007a6e   6a02     clrf	0x2, 0              	CLRF	r0x02
007a70   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007a72   0aff     xorlw	0xff               	XORLW	0xff
007a74   e102     bnz	0x7a7a               	BNZ	_00132_DS_
007a76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007a78   e007     bz	0x7a88                	BZ	_00127_DS_
                                           _00132_DS_:
                                           ;	.line	295; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
007a7a   5000     movf	0, 0, 0             	MOVF	r0x00, W
007a7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007a7e   ec0b     call	0x7016, 0           	CALL	_UDPClose
007a80   f038
007a82   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
007a84   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	296; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
007a86   6938     setf	0x38, 0x1           	SETF	_DHCPClient, B
                                           _00127_DS_:
007a88   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
                                           ;	.line	299; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_DISABLED;
007a8a   6b39     clrf	0x39, 0x1           	CLRF	(_DHCPClient + 1), B
007a8c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007a8e   f002
007a90   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007a92   f001
007a94   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007a96   f000
007a98   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007a9a   ffd9
007a9c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_DHCP__DHCPInit	code
                                           _DHCPInit:
                                           ;	.line	223; TCPIP_Stack/DHCP.c	void DHCPInit(BYTE vInterface)
0071ae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0071b0   ffe5
0071b2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0071b4   ffd9
0071b6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0071b8   ffe5
0071ba   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0071bc   ffe5
0071be   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0071c0   ffe5
0071c2   0108     movlb	0x8                	BANKSEL	_DHCPClientInitializedOnce
                                           ;	.line	229; TCPIP_Stack/DHCP.c	if(!DHCPClientInitializedOnce)
0071c4   515d     movf	0x5d, 0, 0x1        	MOVF	_DHCPClientInitializedOnce, W, B
0071c6   e112     bnz	0x71ec               	BNZ	_00106_DS_
                                           ;	.line	231; TCPIP_Stack/DHCP.c	DHCPClientInitializedOnce = TRUE;
0071c8   0e01     movlw	0x1                	MOVLW	0x01
0071ca   0108     movlb	0x8                	BANKSEL	_DHCPClientInitializedOnce
0071cc   6f5d     movwf	0x5d, 0x1          	MOVWF	_DHCPClientInitializedOnce, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
0071ce   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00109_DS_:
0071d0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0071d2   f001
0071d4   6a02     clrf	0x2, 0              	CLRF	r0x02
0071d6   0e00     movlw	0                  	MOVLW	0x00
0071d8   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0071da   e102     bnz	0x71e0               	BNZ	_00119_DS_
0071dc   0e01     movlw	0x1                	MOVLW	0x01
0071de   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00119_DS_:
0071e0   e205     bc	0x71ec                	BC	_00106_DS_
0071e2   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	235; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
0071e4   6938     setf	0x38, 0x1           	SETF	_DHCPClient, B
                                           ;	.line	232; TCPIP_Stack/DHCP.c	for(i = 0; i < NETWORK_INTERFACES; i++)
0071e6   0e01     movlw	0x1                	MOVLW	0x01
0071e8   6e00     movwf	0, 0               	MOVWF	r0x00
0071ea   d7f2     bra	0x71d0               	BRA	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	242; TCPIP_Stack/DHCP.c	if(DHCPClient.hDHCPSocket != INVALID_UDP_SOCKET)
0071ec   c838     movff	0x838, 0           	MOVFF	_DHCPClient, r0x00
0071ee   f000
0071f0   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0071f2   f001
0071f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0071f6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0071f8   0aff     xorlw	0xff               	XORLW	0xff
0071fa   e102     bnz	0x7200               	BNZ	_00121_DS_
0071fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0071fe   e007     bz	0x720e                	BZ	_00108_DS_
                                           _00121_DS_:
                                           ;	.line	244; TCPIP_Stack/DHCP.c	UDPClose(DHCPClient.hDHCPSocket);
007200   5000     movf	0, 0, 0             	MOVF	r0x00, W
007202   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007204   ec0b     call	0x7016, 0           	CALL	_UDPClose
007206   f038
007208   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00720a   0108     movlb	0x8                	BANKSEL	_DHCPClient
                                           ;	.line	245; TCPIP_Stack/DHCP.c	DHCPClient.hDHCPSocket = INVALID_UDP_SOCKET;
00720c   6938     setf	0x38, 0x1           	SETF	_DHCPClient, B
                                           _00108_DS_:
                                           ;	.line	249; TCPIP_Stack/DHCP.c	DHCPClient.smState = SM_DHCP_GET_SOCKET;
00720e   0e01     movlw	0x1                	MOVLW	0x01
007210   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 1)
007212   6f39     movwf	0x39, 0x1          	MOVWF	(_DHCPClient + 1), B
007214   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	250; TCPIP_Stack/DHCP.c	DHCPClient.flags.val = 0;
007216   6b3a     clrf	0x3a, 0x1           	CLRF	(_DHCPClient + 2), B
007218   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	251; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bUseUnicastMode = TRUE; // This flag toggles before 
00721a   893a     bsf	0x3a, 0x4, 0x1       	BSF	(_DHCPClient + 2), 4, B
00721c   0108     movlb	0x8                	BANKSEL	(_DHCPClient + 2)
                                           ;	.line	255; TCPIP_Stack/DHCP.c	DHCPClient.flags.bits.bEvent = TRUE;
00721e   833a     bsf	0x3a, 0x1, 0x1       	BSF	(_DHCPClient + 2), 1, B
007220   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007222   f002
007224   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007226   f001
007228   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00722a   f000
00722c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00722e   ffd9
007230   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4782 (0x12ae) bytes ( 3.65%)
                                           ;           	 2391 (0x0957) words
                                           ; udata size:	   39 (0x0027) bytes ( 1.02%)
                                           ; access size:	   11 (0x000b) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:15 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:15 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:15 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _MACInit
                                           	global _MACIsLinked
                                           	global _MACIsTxReady
                                           	global _MACDiscardRx
                                           	global _MACGetFreeRxSize
                                           	global _MACGetHeader
                                           	global _MACPutHeader
                                           	global _MACFlush
                                           	global _MACSetReadPtrInRx
                                           	global _MACSetWritePtr
                                           	global _MACSetReadPtr
                                           	global _MACCalcRxChecksum
                                           	global _CalcIPBufferChecksum
                                           	global _MACMemCopyAsync
                                           	global _MACIsMemCopyDone
                                           	global _MACGet
                                           	global _MACGetArray
                                           	global _MACPut
                                           	global _MACPutArray
                                           	global _ReadPHYReg
                                           	global _WritePHYReg
                                           	global _MACPowerDown
                                           	global _MACPowerUp
                                           	global _MACPrintHeader
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern __gptrget1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memcpy
                                           	extern _DisplayString
                                           	extern _swaps
                                           	extern _TickGet
                                           	extern _LCDUpdate
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           
                                           udata_ETH97J60_0	udata
                                           _NextPacketLocation	res	2
                                           
                                           udata_ETH97J60_1	udata
                                           _CurrentPacketLocation	res	2
                                           
                                           udata_ETH97J60_2	udata
                                           _WasDiscarded	res	1
                                           
                                           udata_ETH97J60_3	udata
                                           _wTXWatchdog	res	2
                                           
                                           udata_ETH97J60_4	udata
                                           _MACIsLinked_pr_1_1	res	2
                                           
                                           udata_ETH97J60_5	udata
                                           _MACDiscardRx_NewRXRDLocation_1_1	res	2
                                           
                                           udata_ETH97J60_6	udata
                                           _MACGetFreeRxSize_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_7	udata
                                           _MACGetFreeRxSize_WritePT_1_1	res	2
                                           
                                           udata_ETH97J60_8	udata
                                           _MACGetHeader_header_1_1	res	20
                                           
                                           udata_ETH97J60_9	udata
                                           _MACFlush_i_2_2	res	1
                                           
                                           udata_ETH97J60_10	udata
                                           _MACSetReadPtrInRx_ReadPT_1_1	res	2
                                           
                                           udata_ETH97J60_11	udata
                                           _CalcIPBufferChecksum_ChunkLen_1_1	res	2
                                           
                                           udata_ETH97J60_12	udata
                                           _CalcIPBufferChecksum_Checksum_1_1	res	4
                                           
                                           udata_ETH97J60_13	udata
                                           _CalcIPBufferChecksum_DataBuffer_1_1	res	20
                                           
                                           udata_ETH97J60_14	udata
                                           _MACMemCopyAsync_destAddr_1_1	res	2
                                           
                                           udata_ETH97J60_15	udata
                                           _MACMemCopyAsync_sourceAddr_1_1	res	2
                                           
                                           udata_ETH97J60_16	udata
                                           _MACMemCopyAsync_ReadSave_1_1	res	2
                                           
                                           udata_ETH97J60_17	udata
                                           _MACMemCopyAsync_WriteSave_1_1	res	2
                                           
                                           udata_ETH97J60_18	udata
                                           _MACGetArray_i_1_1	res	1
                                           
                                           udata_ETH97J60_19	udata
                                           _ReadPHYReg_Result_1_1	res	2
                                           
                                           udata_ETH97J60_20	udata
                                           _WritePHYReg_Data_1_1	res	2
                                           
                                           udata_ETH97J60_21	udata
                                           _MACPrintHeader_header_1_1	res	64
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPrintHeader	code
                                           _MACPrintHeader:
                                           ;	.line	1452; TCPIP_Stack/ETH97J60.c	void MACPrintHeader(BYTE woffset)
004cd2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004cd4   ffe5
004cd6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004cd8   ffd9
004cda   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004cdc   ffe5
004cde   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004ce0   ffe5
004ce2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004ce4   ffe5
004ce6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004ce8   ffe5
004cea   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004cec   ffe5
004cee   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004cf0   ffe5
004cf2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004cf4   ffe5
004cf6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004cf8   ffe5
004cfa   0e02     movlw	0x2                	MOVLW	0x02
004cfc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004cfe   f000
                                           ;	.line	1458; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(TXSTART + 1) ;
004d00   0e0b     movlw	0xb                	MOVLW	0x0b
004d02   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	1459; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(TXSTART + 1) ;
004d04   0e1a     movlw	0x1a               	MOVLW	0x1a
004d06   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	1462; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header[0], sizeof(header));
004d08   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
004d0a   6e02     movwf	0x2, 0             	MOVWF	r0x02
004d0c   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
004d0e   6e01     movwf	0x1, 0             	MOVWF	r0x01
004d10   0e80     movlw	0x80               	MOVLW	0x80
004d12   6e03     movwf	0x3, 0             	MOVWF	r0x03
004d14   0e00     movlw	0                  	MOVLW	0x00
004d16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d18   0e40     movlw	0x40               	MOVLW	0x40
004d1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d1c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004d1e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d20   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004d22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d24   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004d26   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d28   ec7d     call	0x62fa, 0           	CALL	_MACGetArray
004d2a   f031
004d2c   0e05     movlw	0x5                	MOVLW	0x05
004d2e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
004d30   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
004d32   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
004d34   6a01     clrf	0x1, 0              	CLRF	r0x01
004d36   6a02     clrf	0x2, 0              	CLRF	r0x02
004d38   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00492_DS_:
004d3a   0e10     movlw	0x10               	MOVLW	0x10
004d3c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004d3e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004d40   d057     bra	0x4df0               	BRA	_00495_DS_
                                           ;	.line	1466; TCPIP_Stack/ETH97J60.c	c = (header[i+2*woffset]>>4)&0x0F;
004d42   5000     movf	0, 0, 0             	MOVF	r0x00, W
004d44   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
004d46   6e04     movwf	0x4, 0             	MOVWF	r0x04
004d48   6a05     clrf	0x5, 0              	CLRF	r0x05
004d4a   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
004d4c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
004d4e   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
004d50   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
004d52   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
004d54   ffe9
004d56   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
004d58   ffea
004d5a   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
004d5c   f004
004d5e   3804     swapf	0x4, 0, 0          	SWAPF	r0x04, W
004d60   0b0f     andlw	0xf                	ANDLW	0x0f
004d62   6e04     movwf	0x4, 0             	MOVWF	r0x04
004d64   0e0f     movlw	0xf                	MOVLW	0x0f
004d66   1604     andwf	0x4, 0x1, 0        	ANDWF	r0x04, F
                                           ;	.line	1467; TCPIP_Stack/ETH97J60.c	LCDText[2*i] = c + (c < 0x0A ? '0' : 'A');
004d68   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
004d6a   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
004d6c   6e05     movwf	0x5, 0             	MOVWF	r0x05
004d6e   6a06     clrf	0x6, 0              	CLRF	r0x06
004d70   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004d72   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
004d74   0e0a     movlw	0xa                	MOVLW	0x0a
004d76   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
004d78   e203     bc	0x4d80                	BC	_00498_DS_
004d7a   0e30     movlw	0x30               	MOVLW	0x30
004d7c   6e07     movwf	0x7, 0             	MOVWF	r0x07
004d7e   d002     bra	0x4d84               	BRA	_00499_DS_
                                           _00498_DS_:
004d80   0e41     movlw	0x41               	MOVLW	0x41
004d82   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00499_DS_:
004d84   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004d86   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
004d88   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
004d8a   ffe9
004d8c   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
004d8e   ffea
004d90   c007     movff	0x7, 0xfef         	MOVFF	r0x07, INDF0
004d92   ffef
                                           ;	.line	1468; TCPIP_Stack/ETH97J60.c	c = header[i+2*woffset]&0x0F;
004d94   5000     movf	0, 0, 0             	MOVF	r0x00, W
004d96   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
004d98   6e05     movwf	0x5, 0             	MOVWF	r0x05
004d9a   6a06     clrf	0x6, 0              	CLRF	r0x06
004d9c   0e00     movlw	0                  	MOVLW	LOW(_MACPrintHeader_header_1_1)
004d9e   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
004da0   0e0f     movlw	0xf                	MOVLW	HIGH(_MACPrintHeader_header_1_1)
004da2   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
004da4   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
004da6   ffe9
004da8   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
004daa   ffea
004dac   cfef     movff	0xfef, 0x5         	MOVFF	INDF0, r0x05
004dae   f005
004db0   0e0f     movlw	0xf                	MOVLW	0x0f
004db2   1405     andwf	0x5, 0, 0          	ANDWF	r0x05, W
004db4   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	1469; TCPIP_Stack/ETH97J60.c	LCDText[2*i+1] = c + (c < 0x0A ? '0' : 'A');
004db6   2803     incf	0x3, 0, 0           	INCF	r0x03, W
004db8   6e05     movwf	0x5, 0             	MOVWF	r0x05
004dba   6a06     clrf	0x6, 0              	CLRF	r0x06
004dbc   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
004dbe   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
004dc0   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
004dc2   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
004dc4   0e0a     movlw	0xa                	MOVLW	0x0a
004dc6   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
004dc8   e203     bc	0x4dd0                	BC	_00500_DS_
004dca   0e30     movlw	0x30               	MOVLW	0x30
004dcc   6e07     movwf	0x7, 0             	MOVWF	r0x07
004dce   d002     bra	0x4dd4               	BRA	_00501_DS_
                                           _00500_DS_:
004dd0   0e41     movlw	0x41               	MOVLW	0x41
004dd2   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           _00501_DS_:
004dd4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004dd6   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
004dd8   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
004dda   ffe9
004ddc   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
004dde   ffea
004de0   c004     movff	0x4, 0xfef         	MOVFF	r0x04, INDF0
004de2   ffef
                                           ;	.line	1464; TCPIP_Stack/ETH97J60.c	for(i=0; i<16; i++)
004de4   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
004de6   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
004de8   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
004dea   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
004dec   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004dee   d7a5     bra	0x4d3a               	BRA	_00492_DS_
                                           _00495_DS_:
004df0   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	1471; TCPIP_Stack/ETH97J60.c	LCDText[32]=0;
004df2   6b53     clrf	0x53, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	1473; TCPIP_Stack/ETH97J60.c	LCDUpdate();
004df4   ec75     call	0x7aea, 0           	CALL	_LCDUpdate
004df6   f03d
004df8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004dfa   f007
004dfc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004dfe   f006
004e00   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004e02   f005
004e04   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004e06   f004
004e08   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004e0a   f003
004e0c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004e0e   f002
004e10   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004e12   f001
004e14   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004e16   f000
004e18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004e1a   ffd9
004e1c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerUp	code
                                           _MACPowerUp:
                                           ;	.line	1357; TCPIP_Stack/ETH97J60.c	void MACPowerUp(void)
007ff6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007ff8   ffe5
007ffa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007ffc   ffd9
007ffe   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1360; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;
008000   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00484_DS_:
008002   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1363; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY)
008004   b1fd     btfsc	0xfd, 0, 0x1       	BTFSC	_ESTATbits, 0, B
008006   d002     bra	0x800c               	BRA	_00487_DS_
                                           ;	.line	1366; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
008008   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
00800a   d7fb     bra	0x8002               	BRA	_00484_DS_
                                           _00487_DS_:
00800c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00800e   ffd9
008010   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPowerDown	code
                                           _MACPowerDown:
                                           ;	.line	1320; TCPIP_Stack/ETH97J60.c	void MACPowerDown(void)
007fd8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007fda   ffe5
007fdc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007fde   ffd9
                                           ;	.line	1323; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 0;
007fe0   94d2     bcf	0xd2, 0x2, 0         	BCF	_ECON1bits, 2
                                           _00473_DS_:
007fe2   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	1327; TCPIP_Stack/ETH97J60.c	while(ESTATbits.RXBUSY);
007fe4   b5fd     btfsc	0xfd, 0x2, 0x1     	BTFSC	_ESTATbits, 2, B
007fe6   d7fd     bra	0x7fe2               	BRA	_00473_DS_
                                           _00476_DS_:
                                           ;	.line	1330; TCPIP_Stack/ETH97J60.c	while(ECON1bits.TXRTS);
007fe8   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
007fea   d7fe     bra	0x7fe8               	BRA	_00476_DS_
007fec   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	1333; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 0;
007fee   9bfe     bcf	0xfe, 0x5, 0x1       	BCF	_ECON2bits, 5, B
007ff0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007ff2   ffd9
007ff4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__WritePHYReg	code
                                           _WritePHYReg:
                                           ;	.line	1251; TCPIP_Stack/ETH97J60.c	void WritePHYReg(BYTE Register, WORD Data)
007a04   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007a06   ffe5
007a08   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007a0a   ffd9
007a0c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007a0e   ffe5
007a10   0e02     movlw	0x2                	MOVLW	0x02
007a12   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
007a14   feb4
007a16   0e03     movlw	0x3                	MOVLW	0x03
007a18   cfdb     movff	0xfdb, 0xa64       	MOVFF	PLUSW2, _WritePHYReg_Data_1_1
007a1a   fa64
007a1c   0e04     movlw	0x4                	MOVLW	0x04
007a1e   cfdb     movff	0xfdb, 0xa65       	MOVFF	PLUSW2, (_WritePHYReg_Data_1_1 + 1)
007a20   fa65
                                           ;	.line	1268; TCPIP_Stack/ETH97J60.c	PRODL = ((WORD_VAL*)&Data)->v[0];
007a22   ca64     movff	0xa64, 0xff3       	MOVFF	_WritePHYReg_Data_1_1, _PRODL
007a24   fff3
                                           ;	.line	1269; TCPIP_Stack/ETH97J60.c	PRODH = ((WORD_VAL*)&Data)->v[1];
007a26   ca65     movff	0xa65, 0xff4       	MOVFF	(_WritePHYReg_Data_1_1 + 1), _PRODH
007a28   fff4
                                           ;	.line	1270; TCPIP_Stack/ETH97J60.c	GIESave = INTCON & 0xC0;	 // Save GIEH and GIEL bits
007a2a   0ec0     movlw	0xc0               	MOVLW	0xc0
007a2c   14f2     andwf	0xf2, 0, 0         	ANDWF	_INTCON, W
007a2e   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	1271; TCPIP_Stack/ETH97J60.c	INTCON &= 0x3F;		 // Clear INTCONbits.GIEH and INTCONbits.GIEL
007a30   0e3f     movlw	0x3f               	MOVLW	0x3f
007a32   16f2     andwf	0xf2, 0x1, 0       	ANDWF	_INTCON, F
007a34   cff3     movff	0xff3, 0xeb6       	movff _PRODL, _MIWRL
007a36   feb6
007a38   0000     nop                      	nop
007a3a   cff4     movff	0xff4, 0xeb7       	movff _PRODH, _MIWRH
007a3c   feb7
                                           	
                                           ;	.line	1289; TCPIP_Stack/ETH97J60.c	INTCON |= GIESave;		       // Restore GIEH and GIEL value
007a3e   5000     movf	0, 0, 0             	MOVF	r0x00, W
007a40   12f2     iorwf	0xf2, 0x1, 0       	IORWF	_INTCON, F
                                           _00465_DS_:
007a42   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1293; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
007a44   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
007a46   d7fd     bra	0x7a42               	BRA	_00465_DS_
007a48   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007a4a   f000
007a4c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007a4e   ffd9
007a50   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__ReadPHYReg	code
                                           _ReadPHYReg:
                                           ;	.line	1208; TCPIP_Stack/ETH97J60.c	WORD ReadPHYReg(BYTE Register)
007b7a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007b7c   ffe5
007b7e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007b80   ffd9
007b82   0e02     movlw	0x2                	MOVLW	0x02
007b84   cfdb     movff	0xfdb, 0xeb4       	MOVFF	PLUSW2, _MIREGADR
007b86   feb4
007b88   0000     nop                      	nop 
                                           ;	.line	1215; TCPIP_Stack/ETH97J60.c	MICMD = MICMD_MIIRD; Nop();
007b8a   0e01     movlw	0x1                	MOVLW	0x01
007b8c   010e     movlb	0xe                	BANKSEL	_MICMD
007b8e   6fb2     movwf	0xb2, 0x1          	MOVWF	_MICMD, B
007b90   0000     nop                      	nop 
                                           _00451_DS_:
007b92   010e     movlb	0xe                	BANKSEL	_MISTATbits
                                           ;	.line	1219; TCPIP_Stack/ETH97J60.c	while(MISTATbits.BUSY);
007b94   b18a     btfsc	0x8a, 0, 0x1       	BTFSC	_MISTATbits, 0, B
007b96   d7fd     bra	0x7b92               	BRA	_00451_DS_
007b98   010e     movlb	0xe                	BANKSEL	_MICMD
                                           ;	.line	1222; TCPIP_Stack/ETH97J60.c	MICMD = 0x00; Nop();
007b9a   6bb2     clrf	0xb2, 0x1           	CLRF	_MICMD, B
007b9c   0000     nop                      	nop 
007b9e   010e     movlb	0xe                	BANKSEL	_MIRDL
                                           ;	.line	1225; TCPIP_Stack/ETH97J60.c	Result.VAL.v[0] = MIRDL;
007ba0   51b8     movf	0xb8, 0, 0x1        	MOVF	_MIRDL, W, B
007ba2   010a     movlb	0xa                	BANKSEL	_ReadPHYReg_Result_1_1
007ba4   6f62     movwf	0x62, 0x1          	MOVWF	_ReadPHYReg_Result_1_1, B
007ba6   0000     nop                      	nop 
007ba8   010e     movlb	0xe                	BANKSEL	_MIRDH
                                           ;	.line	1227; TCPIP_Stack/ETH97J60.c	Result.VAL.v[1] = MIRDH;
007baa   51b9     movf	0xb9, 0, 0x1        	MOVF	_MIRDH, W, B
007bac   010a     movlb	0xa                	BANKSEL	(_ReadPHYReg_Result_1_1 + 1)
007bae   6f63     movwf	0x63, 0x1          	MOVWF	(_ReadPHYReg_Result_1_1 + 1), B
                                           ;	.line	1229; TCPIP_Stack/ETH97J60.c	return Result2;
007bb0   ca63     movff	0xa63, 0xff3       	MOVFF	(_ReadPHYReg_Result_1_1 + 1), PRODL
007bb2   fff3
007bb4   010a     movlb	0xa                	BANKSEL	_ReadPHYReg_Result_1_1
007bb6   5162     movf	0x62, 0, 0x1        	MOVF	_ReadPHYReg_Result_1_1, W, B
007bb8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007bba   ffd9
007bbc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutArray	code
                                           _MACPutArray:
                                           ;	.line	1149; TCPIP_Stack/ETH97J60.c	void MACPutArray(BYTE *val, WORD len)
006d34   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006d36   ffe5
006d38   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006d3a   ffd9
006d3c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006d3e   ffe5
006d40   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006d42   ffe5
006d44   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006d46   ffe5
006d48   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006d4a   ffe5
006d4c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006d4e   ffe5
006d50   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006d52   ffe5
006d54   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006d56   ffe5
006d58   0e02     movlw	0x2                	MOVLW	0x02
006d5a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006d5c   f000
006d5e   0e03     movlw	0x3                	MOVLW	0x03
006d60   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006d62   f001
006d64   0e04     movlw	0x4                	MOVLW	0x04
006d66   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006d68   f002
006d6a   0e05     movlw	0x5                	MOVLW	0x05
006d6c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006d6e   f003
006d70   0e06     movlw	0x6                	MOVLW	0x06
006d72   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006d74   f004
                                           _00437_DS_:
                                           ;	.line	1151; TCPIP_Stack/ETH97J60.c	while(len--)
006d76   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
006d78   f005
006d7a   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
006d7c   f006
006d7e   0eff     movlw	0xff               	MOVLW	0xff
006d80   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
006d82   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
006d84   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
006d86   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006d88   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
006d8a   e00e     bz	0x6da8                	BZ	_00440_DS_
                                           ;	.line	1167; TCPIP_Stack/ETH97J60.c	EDATA = *val++; 
006d8c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006d8e   ffe9
006d90   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006d92   fff3
006d94   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006d96   ec8d     call	0x7f1a, 0           	CALL	__gptrget1
006d98   f03f
006d9a   6e61     movwf	0x61, 0            	MOVWF	_EDATA
006d9c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
006d9e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006da0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
006da2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006da4   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
006da6   d7e7     bra	0x6d76               	BRA	_00437_DS_
                                           _00440_DS_:
006da8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006daa   f006
006dac   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006dae   f005
006db0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006db2   f004
006db4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006db6   f003
006db8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006dba   f002
006dbc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006dbe   f001
006dc0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006dc2   f000
006dc4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006dc6   ffd9
006dc8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPut	code
                                           _MACPut:
                                           ;	.line	1104; TCPIP_Stack/ETH97J60.c	void MACPut(BYTE val)
008078   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00807a   ffe5
00807c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00807e   ffd9
008080   0e02     movlw	0x2                	MOVLW	0x02
008082   cfdb     movff	0xfdb, 0xf61       	MOVFF	PLUSW2, _EDATA
008084   ff61
                                           ;	.line	1121; TCPIP_Stack/ETH97J60.c	EDATA = val;
008086   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
008088   ffd9
00808a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetArray	code
                                           _MACGetArray:
                                           ;	.line	1062; TCPIP_Stack/ETH97J60.c	WORD MACGetArray(BYTE *val, WORD len)
0062fa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0062fc   ffe5
0062fe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006300   ffd9
006302   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006304   ffe5
006306   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006308   ffe5
00630a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00630c   ffe5
00630e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006310   ffe5
006312   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006314   ffe5
006316   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006318   ffe5
00631a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00631c   ffe5
00631e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006320   ffe5
006322   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
006324   ffe5
006326   0e02     movlw	0x2                	MOVLW	0x02
006328   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00632a   f000
00632c   0e03     movlw	0x3                	MOVLW	0x03
00632e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006330   f001
006332   0e04     movlw	0x4                	MOVLW	0x04
006334   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006336   f002
006338   0e05     movlw	0x5                	MOVLW	0x05
00633a   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00633c   f003
00633e   0e06     movlw	0x6                	MOVLW	0x06
006340   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006342   f004
                                           ;	.line	1068; TCPIP_Stack/ETH97J60.c	if(val)
006344   5000     movf	0, 0, 0             	MOVF	r0x00, W
006346   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
006348   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
00634a   e01e     bz	0x6388                	BZ	_00427_DS_
                                           ;	.line	1070; TCPIP_Stack/ETH97J60.c	while(w--)
00634c   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
00634e   f005
006350   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
006352   f006
                                           _00413_DS_:
006354   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
006356   f007
006358   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
00635a   f008
00635c   0eff     movlw	0xff               	MOVLW	0xff
00635e   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
006360   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
006362   0606     decf	0x6, 0x1, 0         	DECF	r0x06, F
006364   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
006366   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
006368   e021     bz	0x63ac                	BZ	_00421_DS_
                                           ;	.line	1072; TCPIP_Stack/ETH97J60.c	*val++ = EDATA;
00636a   cf61     movff	0xf61, 0xfe5       	MOVFF	_EDATA, POSTDEC1
00636c   ffe5
00636e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006370   ffe9
006372   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006374   fff3
006376   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006378   ec50     call	0x80a0, 0           	CALL	__gptrput1
00637a   f040
00637c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00637e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006380   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
006382   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006384   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
006386   d7e6     bra	0x6354               	BRA	_00413_DS_
                                           _00427_DS_:
                                           ;	.line	1077; TCPIP_Stack/ETH97J60.c	while(w--)
006388   c003     movff	0x3, 0             	MOVFF	r0x03, r0x00
00638a   f000
00638c   c004     movff	0x4, 0x1           	MOVFF	r0x04, r0x01
00638e   f001
                                           _00416_DS_:
006390   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
006392   f002
006394   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
006396   f005
006398   0eff     movlw	0xff               	MOVLW	0xff
00639a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00639c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00639e   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
0063a0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0063a2   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
0063a4   e003     bz	0x63ac                	BZ	_00421_DS_
                                           ;	.line	1079; TCPIP_Stack/ETH97J60.c	i = EDATA;
0063a6   cf61     movff	0xf61, 0xa89       	MOVFF	_EDATA, _MACGetArray_i_1_1
0063a8   fa89
0063aa   d7f2     bra	0x6390               	BRA	_00416_DS_
                                           _00421_DS_:
                                           ;	.line	1083; TCPIP_Stack/ETH97J60.c	return len;
0063ac   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0063ae   fff3
0063b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0063b2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0063b4   f008
0063b6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0063b8   f007
0063ba   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0063bc   f006
0063be   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0063c0   f005
0063c2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0063c4   f004
0063c6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0063c8   f003
0063ca   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0063cc   f002
0063ce   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0063d0   f001
0063d2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0063d4   f000
0063d6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0063d8   ffd9
0063da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGet	code
                                           _MACGet:
                                           ;	.line	1037; TCPIP_Stack/ETH97J60.c	BYTE MACGet()
0080b4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0080b6   ffe5
0080b8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0080ba   ffd9
                                           ;	.line	1039; TCPIP_Stack/ETH97J60.c	return EDATA;
0080bc   5061     movf	0x61, 0, 0          	MOVF	_EDATA, W
0080be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0080c0   ffd9
0080c2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsMemCopyDone	code
                                           _MACIsMemCopyDone:
                                           ;	.line	1014; TCPIP_Stack/ETH97J60.c	BOOL MACIsMemCopyDone(void)
007e08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007e0a   ffe5
007e0c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007e0e   ffd9
007e10   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007e12   ffe5
                                           ;	.line	1016; TCPIP_Stack/ETH97J60.c	return !ECON1bits.DMAST;
007e14   6a00     clrf	0, 0                	CLRF	r0x00
007e16   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
007e18   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007e1a   5000     movf	0, 0, 0             	MOVF	r0x00, W
007e1c   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
007e1e   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
007e20   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
007e22   6a00     clrf	0, 0                	CLRF	r0x00
007e24   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
007e26   5000     movf	0, 0, 0             	MOVF	r0x00, W
007e28   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007e2a   f000
007e2c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007e2e   ffd9
007e30   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACMemCopyAsync	code
                                           _MACMemCopyAsync:
                                           ;	.line	899; TCPIP_Stack/ETH97J60.c	void MACMemCopyAsync(WORD destAddr, WORD sourceAddr, WORD len)
00186c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00186e   ffe5
001870   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001872   ffd9
001874   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001876   ffe5
001878   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00187a   ffe5
00187c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00187e   ffe5
001880   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001882   ffe5
001884   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001886   ffe5
001888   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00188a   ffe5
00188c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00188e   ffe5
001890   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001892   ffe5
001894   0e02     movlw	0x2                	MOVLW	0x02
001896   cfdb     movff	0xfdb, 0xa5a       	MOVFF	PLUSW2, _MACMemCopyAsync_destAddr_1_1
001898   fa5a
00189a   0e03     movlw	0x3                	MOVLW	0x03
00189c   cfdb     movff	0xfdb, 0xa5b       	MOVFF	PLUSW2, (_MACMemCopyAsync_destAddr_1_1 + 1)
00189e   fa5b
0018a0   0e04     movlw	0x4                	MOVLW	0x04
0018a2   cfdb     movff	0xfdb, 0xa5c       	MOVFF	PLUSW2, _MACMemCopyAsync_sourceAddr_1_1
0018a4   fa5c
0018a6   0e05     movlw	0x5                	MOVLW	0x05
0018a8   cfdb     movff	0xfdb, 0xa5d       	MOVFF	PLUSW2, (_MACMemCopyAsync_sourceAddr_1_1 + 1)
0018aa   fa5d
0018ac   0e06     movlw	0x6                	MOVLW	0x06
0018ae   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0018b0   f000
0018b2   0e07     movlw	0x7                	MOVLW	0x07
0018b4   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0018b6   f001
                                           ;	.line	902; TCPIP_Stack/ETH97J60.c	BOOL UpdateWritePointer = FALSE;
0018b8   6a02     clrf	0x2, 0              	CLRF	r0x02
                                           ;	.line	903; TCPIP_Stack/ETH97J60.c	BOOL UpdateReadPointer = FALSE;
0018ba   6a03     clrf	0x3, 0              	CLRF	r0x03
0018bc   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	905; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&destAddr)->bits.b15)
0018be   af5b     btfss	0x5b, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_destAddr_1_1 + 1), 7, B
0018c0   d013     bra	0x18e8               	BRA	_00325_DS_
                                           ;	.line	907; TCPIP_Stack/ETH97J60.c	UpdateWritePointer = TRUE;
0018c2   0e01     movlw	0x1                	MOVLW	0x01
0018c4   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ;	.line	908; TCPIP_Stack/ETH97J60.c	destAddr = ((WORD)EWRPTH)<<8|EWRPTL;
0018c6   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
0018c8   f004
0018ca   6a05     clrf	0x5, 0              	CLRF	r0x05
0018cc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018ce   6e07     movwf	0x7, 0             	MOVWF	r0x07
0018d0   6a06     clrf	0x6, 0              	CLRF	r0x06
0018d2   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
0018d4   f004
0018d6   6a05     clrf	0x5, 0              	CLRF	r0x05
0018d8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018da   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0018dc   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
0018de   6f5a     movwf	0x5a, 0x1          	MOVWF	_MACMemCopyAsync_destAddr_1_1, B
0018e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0018e2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0018e4   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
0018e6   6f5b     movwf	0x5b, 0x1          	MOVWF	(_MACMemCopyAsync_destAddr_1_1 + 1), B
                                           _00325_DS_:
0018e8   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	910; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&sourceAddr)->bits.b15)
0018ea   af5d     btfss	0x5d, 0x7, 0x1     	BTFSS	(_MACMemCopyAsync_sourceAddr_1_1 + 1), 7, B
0018ec   d013     bra	0x1914               	BRA	_00327_DS_
                                           ;	.line	912; TCPIP_Stack/ETH97J60.c	UpdateReadPointer = TRUE;
0018ee   0e01     movlw	0x1                	MOVLW	0x01
0018f0   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ;	.line	913; TCPIP_Stack/ETH97J60.c	sourceAddr = ((WORD)ERDPTH)<<8|ERDPTL;
0018f2   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
0018f4   f004
0018f6   6a05     clrf	0x5, 0              	CLRF	r0x05
0018f8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0018fa   6e07     movwf	0x7, 0             	MOVWF	r0x07
0018fc   6a06     clrf	0x6, 0              	CLRF	r0x06
0018fe   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
001900   f004
001902   6a05     clrf	0x5, 0              	CLRF	r0x05
001904   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001906   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
001908   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
00190a   6f5c     movwf	0x5c, 0x1          	MOVWF	_MACMemCopyAsync_sourceAddr_1_1, B
00190c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00190e   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
001910   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
001912   6f5d     movwf	0x5d, 0x1          	MOVWF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), B
                                           _00327_DS_:
                                           ;	.line	918; TCPIP_Stack/ETH97J60.c	if(len <= 1u)
001914   0e00     movlw	0                  	MOVLW	0x00
001916   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
001918   e102     bnz	0x191e               	BNZ	_00376_DS_
00191a   0e02     movlw	0x2                	MOVLW	0x02
00191c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00376_DS_:
00191e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001920   d07c     bra	0x1a1a               	BRA	_00352_DS_
                                           ;	.line	920; TCPIP_Stack/ETH97J60.c	ReadSave.Val = ((WORD)ERDPTH)<<8|ERDPTL;
001922   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
001924   f004
001926   6a05     clrf	0x5, 0              	CLRF	r0x05
001928   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00192a   6e07     movwf	0x7, 0             	MOVWF	r0x07
00192c   6a06     clrf	0x6, 0              	CLRF	r0x06
00192e   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
001930   f004
001932   6a05     clrf	0x5, 0              	CLRF	r0x05
001934   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001936   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
001938   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00193a   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
00193c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00193e   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
001940   6f5e     movwf	0x5e, 0x1          	MOVWF	_MACMemCopyAsync_ReadSave_1_1, B
001942   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001944   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
001946   6f5f     movwf	0x5f, 0x1          	MOVWF	(_MACMemCopyAsync_ReadSave_1_1 + 1), B
                                           ;	.line	921; TCPIP_Stack/ETH97J60.c	WriteSave.Val =  ((WORD)EWRPTH)<<8|EWRPTL;
001948   cee3     movff	0xee3, 0x4         	MOVFF	_EWRPTH, r0x04
00194a   f004
00194c   6a05     clrf	0x5, 0              	CLRF	r0x05
00194e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001950   6e07     movwf	0x7, 0             	MOVWF	r0x07
001952   6a06     clrf	0x6, 0              	CLRF	r0x06
001954   cee2     movff	0xee2, 0x4         	MOVFF	_EWRPTL, r0x04
001956   f004
001958   6a05     clrf	0x5, 0              	CLRF	r0x05
00195a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00195c   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
00195e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001960   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
001962   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001964   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
001966   6f60     movwf	0x60, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
001968   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00196a   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
00196c   6f61     movwf	0x61, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
00196e   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	922; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(sourceAddr);
001970   515c     movf	0x5c, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
001972   6e04     movwf	0x4, 0             	MOVWF	r0x04
001974   6a05     clrf	0x5, 0              	CLRF	r0x05
001976   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001978   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
00197a   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	923; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(sourceAddr);
00197c   515d     movf	0x5d, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
00197e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001980   6a05     clrf	0x5, 0              	CLRF	r0x05
001982   6a05     clrf	0x5, 0              	CLRF	r0x05
001984   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001986   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
001988   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	924; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(destAddr);
00198a   515a     movf	0x5a, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
00198c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00198e   6a05     clrf	0x5, 0              	CLRF	r0x05
001990   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001992   010e     movlb	0xe                	BANKSEL	_EWRPTL
001994   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
001996   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	925; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(destAddr);
001998   515b     movf	0x5b, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
00199a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00199c   6a05     clrf	0x5, 0              	CLRF	r0x05
00199e   6a05     clrf	0x5, 0              	CLRF	r0x05
0019a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019a2   010e     movlb	0xe                	BANKSEL	_EWRPTH
0019a4   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	926; TCPIP_Stack/ETH97J60.c	while(len--) MACPut(MACGet());
0019a6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0019a8   f004
0019aa   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0019ac   f005
                                           _00328_DS_:
0019ae   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
0019b0   f006
0019b2   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
0019b4   f007
0019b6   0eff     movlw	0xff               	MOVLW	0xff
0019b8   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0019ba   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0019bc   0605     decf	0x5, 0x1, 0         	DECF	r0x05, F
0019be   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019c0   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
0019c2   e009     bz	0x19d6                	BZ	_00330_DS_
0019c4   ec5a     call	0x80b4, 0           	CALL	_MACGet
0019c6   f040
0019c8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0019ca   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0019ce   ec3c     call	0x8078, 0           	CALL	_MACPut
0019d0   f040
0019d2   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0019d4   d7ec     bra	0x19ae               	BRA	_00328_DS_
                                           _00330_DS_:
                                           ;	.line	927; TCPIP_Stack/ETH97J60.c	if(!UpdateReadPointer)
0019d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0019d8   e10d     bnz	0x19f4               	BNZ	_00332_DS_
0019da   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_ReadSave_1_1
                                           ;	.line	929; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(ReadSave.Val);
0019dc   515e     movf	0x5e, 0, 0x1        	MOVF	_MACMemCopyAsync_ReadSave_1_1, W, B
0019de   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019e0   6a05     clrf	0x5, 0              	CLRF	r0x05
0019e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019e4   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
0019e6   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_ReadSave_1_1 + 1)
                                           ;	.line	930; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(ReadSave.Val);
0019e8   515f     movf	0x5f, 0, 0x1        	MOVF	(_MACMemCopyAsync_ReadSave_1_1 + 1), W, B
0019ea   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019ec   6a05     clrf	0x5, 0              	CLRF	r0x05
0019ee   6a05     clrf	0x5, 0              	CLRF	r0x05
0019f0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0019f2   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00332_DS_:
                                           ;	.line	932; TCPIP_Stack/ETH97J60.c	if(!UpdateWritePointer)
0019f4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0019f6   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0019f8   d0d5     bra	0x1ba4               	BRA	_00354_DS_
0019fa   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
                                           ;	.line	934; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
0019fc   5160     movf	0x60, 0, 0x1        	MOVF	_MACMemCopyAsync_WriteSave_1_1, W, B
0019fe   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a00   6a05     clrf	0x5, 0              	CLRF	r0x05
001a02   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a04   010e     movlb	0xe                	BANKSEL	_EWRPTL
001a06   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
001a08   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
                                           ;	.line	935; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
001a0a   5161     movf	0x61, 0, 0x1        	MOVF	(_MACMemCopyAsync_WriteSave_1_1 + 1), W, B
001a0c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a0e   6a05     clrf	0x5, 0              	CLRF	r0x05
001a10   6a05     clrf	0x5, 0              	CLRF	r0x05
001a12   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a14   010e     movlb	0xe                	BANKSEL	_EWRPTH
001a16   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
001a18   d0c5     bra	0x1ba4               	BRA	_00354_DS_
                                           _00352_DS_:
                                           ;	.line	940; TCPIP_Stack/ETH97J60.c	if(UpdateWritePointer)
001a1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a1c   e023     bz	0x1a64                	BZ	_00336_DS_
                                           ;	.line	942; TCPIP_Stack/ETH97J60.c	WriteSave.Val = destAddr + len;
001a1e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a20   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
001a22   255a     addwf	0x5a, 0, 0x1       	ADDWF	_MACMemCopyAsync_destAddr_1_1, W, B
001a24   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a26   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001a28   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
001a2a   215b     addwfc	0x5b, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
001a2c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a2e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a30   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_WriteSave_1_1
001a32   6f60     movwf	0x60, 0x1          	MOVWF	_MACMemCopyAsync_WriteSave_1_1, B
001a34   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a36   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_WriteSave_1_1 + 1)
001a38   6f61     movwf	0x61, 0x1          	MOVWF	(_MACMemCopyAsync_WriteSave_1_1 + 1), B
                                           ;	.line	943; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(WriteSave.Val);
001a3a   ca60     movff	0xa60, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
001a3c   ffe8
001a3e   ca61     movff	0xa61, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
001a40   ffe8
001a42   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a44   6e05     movwf	0x5, 0             	MOVWF	r0x05
001a46   6a06     clrf	0x6, 0              	CLRF	r0x06
001a48   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001a4a   010e     movlb	0xe                	BANKSEL	_EWRPTL
001a4c   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	944; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(WriteSave.Val);
001a4e   ca60     movff	0xa60, 0xfe8       	MOVFF	_MACMemCopyAsync_WriteSave_1_1, WREG
001a50   ffe8
001a52   ca61     movff	0xa61, 0xfe8       	MOVFF	(_MACMemCopyAsync_WriteSave_1_1 + 1), WREG
001a54   ffe8
001a56   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a58   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a5a   6a04     clrf	0x4, 0              	CLRF	r0x04
001a5c   6a04     clrf	0x4, 0              	CLRF	r0x04
001a5e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a60   010e     movlb	0xe                	BANKSEL	_EWRPTH
001a62   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           _00336_DS_:
001a64   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	946; TCPIP_Stack/ETH97J60.c	len += sourceAddr - 1;
001a66   515c     movf	0x5c, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
001a68   0fff     addlw	0xff               	ADDLW	0xff
001a6a   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a6c   0eff     movlw	0xff               	MOVLW	0xff
001a6e   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
001a70   215d     addwfc	0x5d, 0, 0x1      	ADDWFC	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
001a72   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a76   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001a78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001a7a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           _00337_DS_:
                                           ;	.line	947; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);
001a7c   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
001a7e   d7fe     bra	0x1a7c               	BRA	_00337_DS_
001a80   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_sourceAddr_1_1
                                           ;	.line	948; TCPIP_Stack/ETH97J60.c	EDMASTL = LOW(sourceAddr);
001a82   515c     movf	0x5c, 0, 0x1        	MOVF	_MACMemCopyAsync_sourceAddr_1_1, W, B
001a84   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a86   6a04     clrf	0x4, 0              	CLRF	r0x04
001a88   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a8a   010e     movlb	0xe                	BANKSEL	_EDMASTL
001a8c   6ff0     movwf	0xf0, 0x1          	MOVWF	_EDMASTL, B
001a8e   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_sourceAddr_1_1 + 1)
                                           ;	.line	949; TCPIP_Stack/ETH97J60.c	EDMASTH = HIGH(sourceAddr);
001a90   515d     movf	0x5d, 0, 0x1        	MOVF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), W, B
001a92   6e02     movwf	0x2, 0             	MOVWF	r0x02
001a94   6a04     clrf	0x4, 0              	CLRF	r0x04
001a96   6a04     clrf	0x4, 0              	CLRF	r0x04
001a98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a9a   010e     movlb	0xe                	BANKSEL	_EDMASTH
001a9c   6ff1     movwf	0xf1, 0x1          	MOVWF	_EDMASTH, B
001a9e   010a     movlb	0xa                	BANKSEL	_MACMemCopyAsync_destAddr_1_1
                                           ;	.line	950; TCPIP_Stack/ETH97J60.c	EDMADSTL = LOW(destAddr);
001aa0   515a     movf	0x5a, 0, 0x1        	MOVF	_MACMemCopyAsync_destAddr_1_1, W, B
001aa2   6e02     movwf	0x2, 0             	MOVWF	r0x02
001aa4   6a04     clrf	0x4, 0              	CLRF	r0x04
001aa6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001aa8   010e     movlb	0xe                	BANKSEL	_EDMADSTL
001aaa   6ff4     movwf	0xf4, 0x1          	MOVWF	_EDMADSTL, B
001aac   010a     movlb	0xa                	BANKSEL	(_MACMemCopyAsync_destAddr_1_1 + 1)
                                           ;	.line	951; TCPIP_Stack/ETH97J60.c	EDMADSTH = HIGH(destAddr);
001aae   515b     movf	0x5b, 0, 0x1        	MOVF	(_MACMemCopyAsync_destAddr_1_1 + 1), W, B
001ab0   6e02     movwf	0x2, 0             	MOVWF	r0x02
001ab2   6a04     clrf	0x4, 0              	CLRF	r0x04
001ab4   6a04     clrf	0x4, 0              	CLRF	r0x04
001ab6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ab8   010e     movlb	0xe                	BANKSEL	_EDMADSTH
001aba   6ff5     movwf	0xf5, 0x1          	MOVWF	_EDMADSTH, B
                                           ;	.line	952; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
001abc   ca5c     movff	0xa5c, 0x2         	MOVFF	_MACMemCopyAsync_sourceAddr_1_1, r0x02
001abe   f002
001ac0   ca5d     movff	0xa5d, 0x4         	MOVFF	(_MACMemCopyAsync_sourceAddr_1_1 + 1), r0x04
001ac2   f004
001ac4   6a05     clrf	0x5, 0              	CLRF	r0x05
001ac6   6a06     clrf	0x6, 0              	CLRF	r0x06
001ac8   0e00     movlw	0                  	MOVLW	0x00
001aca   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
001acc   e108     bnz	0x1ade               	BNZ	_00394_DS_
001ace   0e00     movlw	0                  	MOVLW	0x00
001ad0   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
001ad2   e105     bnz	0x1ade               	BNZ	_00394_DS_
001ad4   0e1a     movlw	0x1a               	MOVLW	0x1a
001ad6   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001ad8   e102     bnz	0x1ade               	BNZ	_00394_DS_
001ada   0e0a     movlw	0xa                	MOVLW	0x0a
001adc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00394_DS_:
001ade   6a02     clrf	0x2, 0              	CLRF	r0x02
001ae0   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
001ae2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ae4   e11e     bnz	0x1b22               	BNZ	_00341_DS_
001ae6   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
001ae8   f004
001aea   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
001aec   f005
001aee   6a06     clrf	0x6, 0              	CLRF	r0x06
001af0   6a07     clrf	0x7, 0              	CLRF	r0x07
001af2   0e00     movlw	0                  	MOVLW	0x00
001af4   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
001af6   e108     bnz	0x1b08               	BNZ	_00395_DS_
001af8   0e00     movlw	0                  	MOVLW	0x00
001afa   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
001afc   e105     bnz	0x1b08               	BNZ	_00395_DS_
001afe   0e1a     movlw	0x1a               	MOVLW	0x1a
001b00   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
001b02   e102     bnz	0x1b08               	BNZ	_00395_DS_
001b04   0e0a     movlw	0xa                	MOVLW	0x0a
001b06   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00395_DS_:
001b08   e30c     bnc	0x1b22               	BNC	_00341_DS_
                                           ;	.line	953; TCPIP_Stack/ETH97J60.c	len -= RXSIZE; //it is a circular buffer
001b0a   0ef6     movlw	0xf6               	MOVLW	0xf6
001b0c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
001b0e   0ee5     movlw	0xe5               	MOVLW	0xe5
001b10   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001b12   0eff     movlw	0xff               	MOVLW	0xff
001b14   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001b16   0eff     movlw	0xff               	MOVLW	0xff
001b18   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
001b1a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b1c   6e00     movwf	0, 0               	MOVWF	r0x00
001b1e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001b20   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00341_DS_:
                                           ;	.line	954; TCPIP_Stack/ETH97J60.c	EDMANDL = LOW(len);
001b22   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b24   6e04     movwf	0x4, 0             	MOVWF	r0x04
001b26   6a05     clrf	0x5, 0              	CLRF	r0x05
001b28   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b2a   010e     movlb	0xe                	BANKSEL	_EDMANDL
001b2c   6ff2     movwf	0xf2, 0x1          	MOVWF	_EDMANDL, B
                                           ;	.line	955; TCPIP_Stack/ETH97J60.c	EDMANDH = HIGH(len);
001b2e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b30   6e04     movwf	0x4, 0             	MOVWF	r0x04
001b32   6a05     clrf	0x5, 0              	CLRF	r0x05
001b34   6a05     clrf	0x5, 0              	CLRF	r0x05
001b36   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001b38   010e     movlb	0xe                	BANKSEL	_EDMANDH
001b3a   6ff3     movwf	0xf3, 0x1          	MOVWF	_EDMANDH, B
                                           ;	.line	956; TCPIP_Stack/ETH97J60.c	ECON1bits.CSUMEN = 0;
001b3c   98d2     bcf	0xd2, 0x4, 0         	BCF	_ECON1bits, 4
                                           ;	.line	957; TCPIP_Stack/ETH97J60.c	ECON1bits.DMAST = 1;
001b3e   8ad2     bsf	0xd2, 0x5, 0         	BSF	_ECON1bits, 5
                                           _00343_DS_:
                                           ;	.line	958; TCPIP_Stack/ETH97J60.c	while(ECON1bits.DMAST);	// DMA requires that you must not 
001b40   bad2     btfsc	0xd2, 0x5, 0       	BTFSC	_ECON1bits, 5
001b42   d7fe     bra	0x1b40               	BRA	_00343_DS_
                                           ;	.line	961; TCPIP_Stack/ETH97J60.c	if(UpdateReadPointer)
001b44   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b46   e02e     bz	0x1ba4                	BZ	_00354_DS_
                                           ;	.line	963; TCPIP_Stack/ETH97J60.c	len++;
001b48   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001b4a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001b4c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
                                           ;	.line	964; TCPIP_Stack/ETH97J60.c	if((sourceAddr <= RXSTOP) && (len > RXSTOP))
001b4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b50   e11e     bnz	0x1b8e               	BNZ	_00347_DS_
001b52   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
001b54   f002
001b56   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
001b58   f003
001b5a   6a04     clrf	0x4, 0              	CLRF	r0x04
001b5c   6a05     clrf	0x5, 0              	CLRF	r0x05
001b5e   0e00     movlw	0                  	MOVLW	0x00
001b60   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
001b62   e108     bnz	0x1b74               	BNZ	_00398_DS_
001b64   0e00     movlw	0                  	MOVLW	0x00
001b66   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
001b68   e105     bnz	0x1b74               	BNZ	_00398_DS_
001b6a   0e1a     movlw	0x1a               	MOVLW	0x1a
001b6c   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001b6e   e102     bnz	0x1b74               	BNZ	_00398_DS_
001b70   0e0a     movlw	0xa                	MOVLW	0x0a
001b72   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
                                           _00398_DS_:
001b74   e30c     bnc	0x1b8e               	BNC	_00347_DS_
                                           ;	.line	965; TCPIP_Stack/ETH97J60.c	len -= RXSIZE;
001b76   0ef6     movlw	0xf6               	MOVLW	0xf6
001b78   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
001b7a   0ee5     movlw	0xe5               	MOVLW	0xe5
001b7c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001b7e   0eff     movlw	0xff               	MOVLW	0xff
001b80   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001b82   0eff     movlw	0xff               	MOVLW	0xff
001b84   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001b86   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b88   6e00     movwf	0, 0               	MOVWF	r0x00
001b8a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b8c   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00347_DS_:
                                           ;	.line	966; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(len);
001b8e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b90   6e02     movwf	0x2, 0             	MOVWF	r0x02
001b92   6a03     clrf	0x3, 0              	CLRF	r0x03
001b94   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001b96   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	967; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(len);
001b98   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b9a   6e00     movwf	0, 0               	MOVWF	r0x00
001b9c   6a01     clrf	0x1, 0              	CLRF	r0x01
001b9e   6a01     clrf	0x1, 0              	CLRF	r0x01
001ba0   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ba2   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           _00354_DS_:
001ba4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ba6   f007
001ba8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001baa   f006
001bac   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001bae   f005
001bb0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001bb2   f004
001bb4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001bb6   f003
001bb8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001bba   f002
001bbc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001bbe   f001
001bc0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001bc2   f000
001bc4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001bc6   ffd9
001bc8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__CalcIPBufferChecksum	code
                                           _CalcIPBufferChecksum:
                                           ;	.line	824; TCPIP_Stack/ETH97J60.c	WORD CalcIPBufferChecksum(WORD len)
000df0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000df2   ffe5
000df4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000df6   ffd9
000df8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000dfa   ffe5
000dfc   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000dfe   ffe5
000e00   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e02   ffe5
000e04   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e06   ffe5
000e08   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000e0a   ffe5
000e0c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000e0e   ffe5
000e10   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000e12   ffe5
000e14   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000e16   ffe5
000e18   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000e1a   ffe5
000e1c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000e1e   ffe5
000e20   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000e22   ffe5
000e24   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000e26   ffe5
000e28   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000e2a   ffe5
000e2c   0e02     movlw	0x2                	MOVLW	0x02
000e2e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000e30   f000
000e32   0e03     movlw	0x3                	MOVLW	0x03
000e34   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000e36   f001
000e38   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	827; TCPIP_Stack/ETH97J60.c	DWORD_VAL Checksum = {0x00000000ul};
000e3a   6b08     clrf	0x8, 0x1            	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e3c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e3e   6b09     clrf	0x9, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e40   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e42   6b0a     clrf	0xa, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e44   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e46   6b0b     clrf	0xb, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e48   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e4a   6b08     clrf	0x8, 0x1            	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e4c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e4e   6b09     clrf	0x9, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e50   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e52   6b0a     clrf	0xa, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e54   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e56   6b0b     clrf	0xb, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e58   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e5a   6b08     clrf	0x8, 0x1            	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e5c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e5e   6b09     clrf	0x9, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e60   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e62   6b0a     clrf	0xa, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e64   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e66   6b0b     clrf	0xb, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e68   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e6a   6b08     clrf	0x8, 0x1            	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e6c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e6e   6b09     clrf	0x9, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e70   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e72   6b0a     clrf	0xa, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e74   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e76   6b0b     clrf	0xb, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e78   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e7a   6b08     clrf	0x8, 0x1            	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e7c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e7e   6b09     clrf	0x9, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e80   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000e82   6b0a     clrf	0xa, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000e84   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000e86   6b0b     clrf	0xb, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000e88   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e8a   6b08     clrf	0x8, 0x1            	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e8c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e8e   6b09     clrf	0x9, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e90   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e92   6b08     clrf	0x8, 0x1            	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e94   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e96   6b09     clrf	0x9, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000e98   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000e9a   6b08     clrf	0x8, 0x1            	CLRF	_CalcIPBufferChecksum_Checksum_1_1, B
000e9c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000e9e   6b09     clrf	0x9, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
000ea0   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000ea2   9108     bcf	0x8, 0, 0x1          	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
000ea4   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000ea6   9308     bcf	0x8, 0x1, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
000ea8   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eaa   9508     bcf	0x8, 0x2, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
000eac   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eae   9708     bcf	0x8, 0x3, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
000eb0   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eb2   9908     bcf	0x8, 0x4, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
000eb4   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eb6   9b08     bcf	0x8, 0x5, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
000eb8   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000eba   9d08     bcf	0x8, 0x6, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
000ebc   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000ebe   9f08     bcf	0x8, 0x7, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
000ec0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ec2   9109     bcf	0x9, 0, 0x1          	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
000ec4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ec6   9309     bcf	0x9, 0x1, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
000ec8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000eca   9509     bcf	0x9, 0x2, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
000ecc   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ece   9709     bcf	0x9, 0x3, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
000ed0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ed2   9909     bcf	0x9, 0x4, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
000ed4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ed6   9b09     bcf	0x9, 0x5, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
000ed8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000eda   9d09     bcf	0x9, 0x6, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
000edc   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000ede   9f09     bcf	0x9, 0x7, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
000ee0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000ee2   6b0a     clrf	0xa, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000ee4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000ee6   6b0b     clrf	0xb, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000ee8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000eea   6b0a     clrf	0xa, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000eec   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000eee   6b0b     clrf	0xb, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000ef0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000ef2   6b0a     clrf	0xa, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
000ef4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000ef6   6b0b     clrf	0xb, 0x1            	CLRF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
000ef8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000efa   910a     bcf	0xa, 0, 0x1          	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
000efc   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000efe   930a     bcf	0xa, 0x1, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
000f00   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f02   950a     bcf	0xa, 0x2, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
000f04   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f06   970a     bcf	0xa, 0x3, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
000f08   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f0a   990a     bcf	0xa, 0x4, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
000f0c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f0e   9b0a     bcf	0xa, 0x5, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
000f10   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f12   9d0a     bcf	0xa, 0x6, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
000f14   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f16   9f0a     bcf	0xa, 0x7, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
000f18   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f1a   910b     bcf	0xb, 0, 0x1          	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
000f1c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f1e   930b     bcf	0xb, 0x1, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
000f20   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f22   950b     bcf	0xb, 0x2, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
000f24   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f26   970b     bcf	0xb, 0x3, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
000f28   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f2a   990b     bcf	0xb, 0x4, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
000f2c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f2e   9b0b     bcf	0xb, 0x5, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
000f30   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f32   9d0b     bcf	0xb, 0x6, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
000f34   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f36   9f0b     bcf	0xb, 0x7, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
000f38   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f3a   9108     bcf	0x8, 0, 0x1          	BCF	_CalcIPBufferChecksum_Checksum_1_1, 0, B
000f3c   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f3e   9308     bcf	0x8, 0x1, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 1, B
000f40   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f42   9508     bcf	0x8, 0x2, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 2, B
000f44   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f46   9708     bcf	0x8, 0x3, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 3, B
000f48   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f4a   9908     bcf	0x8, 0x4, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 4, B
000f4c   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f4e   9b08     bcf	0x8, 0x5, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 5, B
000f50   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f52   9d08     bcf	0x8, 0x6, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 6, B
000f54   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
000f56   9f08     bcf	0x8, 0x7, 0x1        	BCF	_CalcIPBufferChecksum_Checksum_1_1, 7, B
000f58   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f5a   9109     bcf	0x9, 0, 0x1          	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 0, B
000f5c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f5e   9309     bcf	0x9, 0x1, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 1, B
000f60   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f62   9509     bcf	0x9, 0x2, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 2, B
000f64   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f66   9709     bcf	0x9, 0x3, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 3, B
000f68   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f6a   9909     bcf	0x9, 0x4, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 4, B
000f6c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f6e   9b09     bcf	0x9, 0x5, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 5, B
000f70   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f72   9d09     bcf	0x9, 0x6, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 6, B
000f74   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
000f76   9f09     bcf	0x9, 0x7, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), 7, B
000f78   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f7a   910a     bcf	0xa, 0, 0x1          	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 0, B
000f7c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f7e   930a     bcf	0xa, 0x1, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 1, B
000f80   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f82   950a     bcf	0xa, 0x2, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 2, B
000f84   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f86   970a     bcf	0xa, 0x3, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 3, B
000f88   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f8a   990a     bcf	0xa, 0x4, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 4, B
000f8c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f8e   9b0a     bcf	0xa, 0x5, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 5, B
000f90   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f92   9d0a     bcf	0xa, 0x6, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 6, B
000f94   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
000f96   9f0a     bcf	0xa, 0x7, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), 7, B
000f98   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f9a   910b     bcf	0xb, 0, 0x1          	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 0, B
000f9c   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000f9e   930b     bcf	0xb, 0x1, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 1, B
000fa0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fa2   950b     bcf	0xb, 0x2, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 2, B
000fa4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fa6   970b     bcf	0xb, 0x3, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 3, B
000fa8   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000faa   990b     bcf	0xb, 0x4, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 4, B
000fac   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fae   9b0b     bcf	0xb, 0x5, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 5, B
000fb0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fb2   9d0b     bcf	0xb, 0x6, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 6, B
000fb4   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
000fb6   9f0b     bcf	0xb, 0x7, 0x1        	BCF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), 7, B
                                           ;	.line	833; TCPIP_Stack/ETH97J60.c	Start = ((WORD)ERDPTH)<<8|ERDPTL;
000fb8   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
000fba   f002
000fbc   6a03     clrf	0x3, 0              	CLRF	r0x03
000fbe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fc0   6e05     movwf	0x5, 0             	MOVWF	r0x05
000fc2   6a04     clrf	0x4, 0              	CLRF	r0x04
000fc4   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
000fc6   f002
000fc8   6a03     clrf	0x3, 0              	CLRF	r0x03
000fca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000fcc   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
000fce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000fd0   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
                                           _00305_DS_:
                                           ;	.line	835; TCPIP_Stack/ETH97J60.c	while(len)
000fd2   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fd4   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
000fd6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000fd8   d07d     bra	0x10d4               	BRA	_00307_DS_
                                           ;	.line	839; TCPIP_Stack/ETH97J60.c	ChunkLen = len > sizeof(DataBuffer) ? sizeof(DataBuffer) : len;
000fda   0e00     movlw	0                  	MOVLW	0x00
000fdc   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
000fde   e102     bnz	0xfe4                	BNZ	_00319_DS_
000fe0   0e15     movlw	0x15               	MOVLW	0x15
000fe2   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00319_DS_:
000fe4   e304     bnc	0xfee                	BNC	_00310_DS_
000fe6   0e14     movlw	0x14               	MOVLW	0x14
000fe8   6e04     movwf	0x4, 0             	MOVWF	r0x04
000fea   6a05     clrf	0x5, 0              	CLRF	r0x05
000fec   d004     bra	0xff6                	BRA	_00311_DS_
                                           _00310_DS_:
000fee   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
000ff0   f004
000ff2   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
000ff4   f005
                                           _00311_DS_:
000ff6   c004     movff	0x4, 0xa58         	MOVFF	r0x04, _CalcIPBufferChecksum_ChunkLen_1_1
000ff8   fa58
000ffa   c005     movff	0x5, 0xa59         	MOVFF	r0x05, (_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
000ffc   fa59
                                           ;	.line	840; TCPIP_Stack/ETH97J60.c	MACGetArray(DataBuffer, ChunkLen);
000ffe   0e08     movlw	0x8                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
001000   6e07     movwf	0x7, 0             	MOVWF	r0x07
001002   0e6d     movlw	0x6d               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001004   6e06     movwf	0x6, 0             	MOVWF	r0x06
001006   0e80     movlw	0x80               	MOVLW	0x80
001008   6e08     movwf	0x8, 0             	MOVWF	r0x08
00100a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00100c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00100e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001010   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001012   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001016   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001018   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00101c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00101e   ec7d     call	0x62fa, 0           	CALL	_MACGetArray
001020   f031
001022   0e05     movlw	0x5                	MOVLW	0x05
001024   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	842; TCPIP_Stack/ETH97J60.c	len -= ChunkLen;
001026   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001028   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
00102a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00102c   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
00102e   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	845; TCPIP_Stack/ETH97J60.c	if(((WORD_VAL*)&ChunkLen)->bits.b0)
001030   a158     btfss	0x58, 0, 0x1       	BTFSS	_CalcIPBufferChecksum_ChunkLen_1_1, 0, B
001032   d013     bra	0x105a               	BRA	_00301_DS_
                                           ;	.line	847; TCPIP_Stack/ETH97J60.c	DataBuffer[ChunkLen] = 0x00;
001034   0e6d     movlw	0x6d               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001036   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
001038   2558     addwf	0x58, 0, 0x1       	ADDWF	_CalcIPBufferChecksum_ChunkLen_1_1, W, B
00103a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00103c   0e08     movlw	0x8                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
00103e   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001040   2159     addwfc	0x59, 0, 0x1      	ADDWFC	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), W, B
001042   6e05     movwf	0x5, 0             	MOVWF	r0x05
001044   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001046   ffe9
001048   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
00104a   ffea
00104c   0e00     movlw	0                  	MOVLW	0x00
00104e   6eef     movwf	0xef, 0            	MOVWF	INDF0
001050   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_ChunkLen_1_1
                                           ;	.line	848; TCPIP_Stack/ETH97J60.c	ChunkLen++;
001052   2b58     incf	0x58, 0x1, 0x1      	INCF	_CalcIPBufferChecksum_ChunkLen_1_1, F, B
001054   e302     bnc	0x105a               	BNC	_10492_DS_
001056   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1)
001058   2b59     incf	0x59, 0x1, 0x1      	INCF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), F, B
                                           _10492_DS_:
                                           _00301_DS_:
                                           ;	.line	852; TCPIP_Stack/ETH97J60.c	DataPtr = (WORD*)&DataBuffer[0];
00105a   0e08     movlw	0x8                	MOVLW	HIGH(_CalcIPBufferChecksum_DataBuffer_1_1)
00105c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00105e   0e6d     movlw	0x6d               	MOVLW	LOW(_CalcIPBufferChecksum_DataBuffer_1_1)
001060   6e04     movwf	0x4, 0             	MOVWF	r0x04
001062   0e80     movlw	0x80               	MOVLW	0x80
001064   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/ETH97J60.c	while(ChunkLen)
001066   ca58     movff	0xa58, 0x7         	MOVFF	_CalcIPBufferChecksum_ChunkLen_1_1, r0x07
001068   f007
00106a   ca59     movff	0xa59, 0x8         	MOVFF	(_CalcIPBufferChecksum_ChunkLen_1_1 + 1), r0x08
00106c   f008
                                           _00302_DS_:
00106e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001070   1008     iorwf	0x8, 0, 0          	IORWF	r0x08, W
001072   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001074   d7ae     bra	0xfd2                	BRA	_00305_DS_
                                           ;	.line	855; TCPIP_Stack/ETH97J60.c	Checksum.Val += *DataPtr++;
001076   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001078   ffe9
00107a   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00107c   fff3
00107e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001080   ecee     call	0x7ddc, 0           	CALL	__gptrget2
001082   f03e
001084   6e09     movwf	0x9, 0             	MOVWF	r0x09
001086   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
001088   f00a
00108a   0e02     movlw	0x2                	MOVLW	0x02
00108c   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
00108e   0e00     movlw	0                  	MOVLW	0x00
001090   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001092   0e00     movlw	0                  	MOVLW	0x00
001094   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001096   6a0b     clrf	0xb, 0              	CLRF	r0x0b
001098   6a0c     clrf	0xc, 0              	CLRF	r0x0c
00109a   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
00109c   5108     movf	0x8, 0, 0x1         	MOVF	_CalcIPBufferChecksum_Checksum_1_1, W, B
00109e   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
0010a0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0010a2   5109     movf	0x9, 0, 0x1         	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
0010a4   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0010a6   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0010a8   510a     movf	0xa, 0, 0x1         	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
0010aa   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
0010ac   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0010ae   510b     movf	0xb, 0, 0x1         	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
0010b0   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
0010b2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0010b4   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
0010b6   6f08     movwf	0x8, 0x1           	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
0010b8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0010ba   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
0010bc   6f09     movwf	0x9, 0x1           	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
0010be   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0010c0   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
0010c2   6f0a     movwf	0xa, 0x1           	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
0010c4   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0010c6   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
0010c8   6f0b     movwf	0xb, 0x1           	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
                                           ;	.line	856; TCPIP_Stack/ETH97J60.c	ChunkLen -= 2;
0010ca   0efe     movlw	0xfe               	MOVLW	0xfe
0010cc   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
0010ce   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0010d0   0608     decf	0x8, 0x1, 0         	DECF	r0x08, F
0010d2   d7cd     bra	0x106e               	BRA	_00302_DS_
                                           _00307_DS_:
                                           ;	.line	861; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(Start);
0010d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010d6   6e00     movwf	0, 0               	MOVWF	r0x00
0010d8   6a01     clrf	0x1, 0              	CLRF	r0x01
0010da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010dc   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	862; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(Start);
0010de   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010e0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0010e2   6a03     clrf	0x3, 0              	CLRF	r0x03
0010e4   6a03     clrf	0x3, 0              	CLRF	r0x03
0010e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010e8   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	865; TCPIP_Stack/ETH97J60.c	Checksum.Val = (DWORD)Checksum.w[0] + (DWORD)Checksum.w[1];
0010ea   ca08     movff	0xa08, 0           	MOVFF	_CalcIPBufferChecksum_Checksum_1_1, r0x00
0010ec   f000
0010ee   ca09     movff	0xa09, 0x1         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), r0x01
0010f0   f001
0010f2   6a02     clrf	0x2, 0              	CLRF	r0x02
0010f4   6a03     clrf	0x3, 0              	CLRF	r0x03
0010f6   ca0a     movff	0xa0a, 0x4         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), r0x04
0010f8   f004
0010fa   ca0b     movff	0xa0b, 0x5         	MOVFF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), r0x05
0010fc   f005
0010fe   6a06     clrf	0x6, 0              	CLRF	r0x06
001100   6a07     clrf	0x7, 0              	CLRF	r0x07
001102   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001104   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001106   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001108   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00110a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00110c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00110e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001110   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
001112   5000     movf	0, 0, 0             	MOVF	r0x00, W
001114   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001116   6f08     movwf	0x8, 0x1           	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001118   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00111a   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
00111c   6f09     movwf	0x9, 0x1           	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
00111e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001120   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
001122   6f0a     movwf	0xa, 0x1           	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), B
001124   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001126   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001128   6f0b     movwf	0xb, 0x1           	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), B
00112a   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 2)
                                           ;	.line	869; TCPIP_Stack/ETH97J60.c	Checksum.w[0] += Checksum.w[1];
00112c   510a     movf	0xa, 0, 0x1         	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 2), W, B
00112e   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001130   2508     addwf	0x8, 0, 0x1        	ADDWF	_CalcIPBufferChecksum_Checksum_1_1, W, B
001132   6e00     movwf	0, 0               	MOVWF	r0x00
001134   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 3)
001136   510b     movf	0xb, 0, 0x1         	MOVF	(_CalcIPBufferChecksum_Checksum_1_1 + 3), W, B
001138   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
00113a   2109     addwfc	0x9, 0, 0x1       	ADDWFC	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
00113c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00113e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001140   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
001142   6f08     movwf	0x8, 0x1           	MOVWF	_CalcIPBufferChecksum_Checksum_1_1, B
001144   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001146   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001148   6f09     movwf	0x9, 0x1           	MOVWF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), B
00114a   010a     movlb	0xa                	BANKSEL	_CalcIPBufferChecksum_Checksum_1_1
                                           ;	.line	872; TCPIP_Stack/ETH97J60.c	return ~Checksum.w[0];
00114c   1d08     comf	0x8, 0, 0x1         	COMF	_CalcIPBufferChecksum_Checksum_1_1, W, B
00114e   6e00     movwf	0, 0               	MOVWF	r0x00
001150   010a     movlb	0xa                	BANKSEL	(_CalcIPBufferChecksum_Checksum_1_1 + 1)
001152   1d09     comf	0x9, 0, 0x1         	COMF	(_CalcIPBufferChecksum_Checksum_1_1 + 1), W, B
001154   6e01     movwf	0x1, 0             	MOVWF	r0x01
001156   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001158   fff3
00115a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00115c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00115e   f00c
001160   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001162   f00b
001164   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001166   f00a
001168   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00116a   f009
00116c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00116e   f008
001170   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001172   f007
001174   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001176   f006
001178   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00117a   f005
00117c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00117e   f004
001180   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001182   f003
001184   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001186   f002
001188   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00118a   f001
00118c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00118e   f000
001190   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001192   ffd9
001194   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACCalcRxChecksum	code
                                           _MACCalcRxChecksum:
                                           ;	.line	699; TCPIP_Stack/ETH97J60.c	WORD MACCalcRxChecksum(WORD offset, WORD len)
005698   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00569a   ffe5
00569c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00569e   ffd9
0056a0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0056a2   ffe5
0056a4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0056a6   ffe5
0056a8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0056aa   ffe5
0056ac   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0056ae   ffe5
0056b0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0056b2   ffe5
0056b4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0056b6   ffe5
0056b8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0056ba   ffe5
0056bc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0056be   ffe5
0056c0   0e02     movlw	0x2                	MOVLW	0x02
0056c2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0056c4   f000
0056c6   0e03     movlw	0x3                	MOVLW	0x03
0056c8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0056ca   f001
0056cc   0e04     movlw	0x4                	MOVLW	0x04
0056ce   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0056d0   f002
0056d2   0e05     movlw	0x5                	MOVLW	0x05
0056d4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0056d6   f003
0056d8   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	705; TCPIP_Stack/ETH97J60.c	temp = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
0056da   514a     movf	0x4a, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
0056dc   0f14     addlw	0x14               	ADDLW	0x14
0056de   6e04     movwf	0x4, 0             	MOVWF	r0x04
0056e0   0e00     movlw	0                  	MOVLW	0x00
0056e2   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
0056e4   214b     addwfc	0x4b, 0, 0x1      	ADDWFC	(_CurrentPacketLocation + 1), W, B
0056e6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0056e8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0056ea   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0056ec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0056ee   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           ;	.line	706; TCPIP_Stack/ETH97J60.c	if(temp > RXSTOP)		// Adjust value if a wrap is needed
0056f0   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
0056f2   f004
0056f4   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
0056f6   f005
0056f8   6a06     clrf	0x6, 0              	CLRF	r0x06
0056fa   6a07     clrf	0x7, 0              	CLRF	r0x07
0056fc   0e00     movlw	0                  	MOVLW	0x00
0056fe   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
005700   e108     bnz	0x5712               	BNZ	_00295_DS_
005702   0e00     movlw	0                  	MOVLW	0x00
005704   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
005706   e105     bnz	0x5712               	BNZ	_00295_DS_
005708   0e1a     movlw	0x1a               	MOVLW	0x1a
00570a   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
00570c   e102     bnz	0x5712               	BNZ	_00295_DS_
00570e   0e0a     movlw	0xa                	MOVLW	0x0a
005710   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00295_DS_:
005712   e30c     bnc	0x572c               	BNC	_00291_DS_
                                           ;	.line	708; TCPIP_Stack/ETH97J60.c	temp -= RXSIZE;
005714   0ef6     movlw	0xf6               	MOVLW	0xf6
005716   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
005718   0ee5     movlw	0xe5               	MOVLW	0xe5
00571a   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00571c   0eff     movlw	0xff               	MOVLW	0xff
00571e   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
005720   0eff     movlw	0xff               	MOVLW	0xff
005722   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
005724   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005726   6e00     movwf	0, 0               	MOVWF	r0x00
005728   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00572a   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00291_DS_:
                                           ;	.line	711; TCPIP_Stack/ETH97J60.c	RDSave = ((WORD)ERDPTH)<<8|ERDPTL;
00572c   cf7b     movff	0xf7b, 0x4         	MOVFF	_ERDPTH, r0x04
00572e   f004
005730   6a05     clrf	0x5, 0              	CLRF	r0x05
005732   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005734   6e07     movwf	0x7, 0             	MOVWF	r0x07
005736   6a06     clrf	0x6, 0              	CLRF	r0x06
005738   cf7a     movff	0xf7a, 0x4         	MOVFF	_ERDPTL, r0x04
00573a   f004
00573c   6a05     clrf	0x5, 0              	CLRF	r0x05
00573e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005740   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
005742   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005744   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
                                           ;	.line	712; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(temp);
005746   5000     movf	0, 0, 0             	MOVF	r0x00, W
005748   6e04     movwf	0x4, 0             	MOVWF	r0x04
00574a   6a05     clrf	0x5, 0              	CLRF	r0x05
00574c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00574e   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	713; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(temp);
005750   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005752   6e04     movwf	0x4, 0             	MOVWF	r0x04
005754   6a05     clrf	0x5, 0              	CLRF	r0x05
005756   6a05     clrf	0x5, 0              	CLRF	r0x05
005758   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00575a   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	714; TCPIP_Stack/ETH97J60.c	temp = CalcIPBufferChecksum(len);
00575c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00575e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005760   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005762   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005764   ecf8     call	0xdf0, 0            	CALL	_CalcIPBufferChecksum
005766   f006
005768   6e00     movwf	0, 0               	MOVWF	r0x00
00576a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00576c   f001
00576e   0e02     movlw	0x2                	MOVLW	0x02
005770   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	715; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(RDSave);
005772   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005774   6e02     movwf	0x2, 0             	MOVWF	r0x02
005776   6a03     clrf	0x3, 0              	CLRF	r0x03
005778   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00577a   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	716; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(RDSave);
00577c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00577e   6e06     movwf	0x6, 0             	MOVWF	r0x06
005780   6a07     clrf	0x7, 0              	CLRF	r0x07
005782   6a07     clrf	0x7, 0              	CLRF	r0x07
005784   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005786   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	718; TCPIP_Stack/ETH97J60.c	return temp;
005788   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00578a   fff3
00578c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00578e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005790   f007
005792   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005794   f006
005796   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005798   f005
00579a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00579c   f004
00579e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0057a0   f003
0057a2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0057a4   f002
0057a6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0057a8   f001
0057aa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0057ac   f000
0057ae   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0057b0   ffd9
0057b2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtr	code
                                           _MACSetReadPtr:
                                           ;	.line	669; TCPIP_Stack/ETH97J60.c	WORD MACSetReadPtr(WORD address)
00733a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00733c   ffe5
00733e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007340   ffd9
007342   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007344   ffe5
007346   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007348   ffe5
00734a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00734c   ffe5
00734e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007350   ffe5
007352   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007354   ffe5
007356   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007358   ffe5
00735a   0e02     movlw	0x2                	MOVLW	0x02
00735c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00735e   f000
007360   0e03     movlw	0x3                	MOVLW	0x03
007362   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007364   f001
                                           ;	.line	673; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)ERDPTH)<<8|ERDPTL;
007366   cf7b     movff	0xf7b, 0x2         	MOVFF	_ERDPTH, r0x02
007368   f002
00736a   6a03     clrf	0x3, 0              	CLRF	r0x03
00736c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00736e   6e05     movwf	0x5, 0             	MOVWF	r0x05
007370   6a04     clrf	0x4, 0              	CLRF	r0x04
007372   cf7a     movff	0xf7a, 0x2         	MOVFF	_ERDPTL, r0x02
007374   f002
007376   6a03     clrf	0x3, 0              	CLRF	r0x03
007378   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00737a   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
00737c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00737e   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	674; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(address);
007380   5000     movf	0, 0, 0             	MOVF	r0x00, W
007382   6e02     movwf	0x2, 0             	MOVWF	r0x02
007384   6a03     clrf	0x3, 0              	CLRF	r0x03
007386   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007388   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	675; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(address);
00738a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00738c   6e00     movwf	0, 0               	MOVWF	r0x00
00738e   6a01     clrf	0x1, 0              	CLRF	r0x01
007390   6a01     clrf	0x1, 0              	CLRF	r0x01
007392   5000     movf	0, 0, 0             	MOVF	r0x00, W
007394   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
                                           ;	.line	676; TCPIP_Stack/ETH97J60.c	return oldVal;
007396   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
007398   fff3
00739a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00739c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00739e   f005
0073a0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0073a2   f004
0073a4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0073a6   f003
0073a8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0073aa   f002
0073ac   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0073ae   f001
0073b0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0073b2   f000
0073b4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0073b6   ffd9
0073b8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetWritePtr	code
                                           _MACSetWritePtr:
                                           ;	.line	642; TCPIP_Stack/ETH97J60.c	WORD MACSetWritePtr(WORD address)
007232   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007234   ffe5
007236   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007238   ffd9
00723a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00723c   ffe5
00723e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007240   ffe5
007242   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007244   ffe5
007246   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007248   ffe5
00724a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00724c   ffe5
00724e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007250   ffe5
007252   0e02     movlw	0x2                	MOVLW	0x02
007254   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007256   f000
007258   0e03     movlw	0x3                	MOVLW	0x03
00725a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00725c   f001
                                           ;	.line	646; TCPIP_Stack/ETH97J60.c	oldVal = ((WORD)EWRPTH)<<8|EWRPTL;
00725e   cee3     movff	0xee3, 0x2         	MOVFF	_EWRPTH, r0x02
007260   f002
007262   6a03     clrf	0x3, 0              	CLRF	r0x03
007264   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007266   6e05     movwf	0x5, 0             	MOVWF	r0x05
007268   6a04     clrf	0x4, 0              	CLRF	r0x04
00726a   cee2     movff	0xee2, 0x2         	MOVFF	_EWRPTL, r0x02
00726c   f002
00726e   6a03     clrf	0x3, 0              	CLRF	r0x03
007270   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007272   1204     iorwf	0x4, 0x1, 0        	IORWF	r0x04, F
007274   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007276   1205     iorwf	0x5, 0x1, 0        	IORWF	r0x05, F
                                           ;	.line	648; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(address);
007278   5000     movf	0, 0, 0             	MOVF	r0x00, W
00727a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00727c   6a03     clrf	0x3, 0              	CLRF	r0x03
00727e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007280   010e     movlb	0xe                	BANKSEL	_EWRPTL
007282   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	649; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(address);
007284   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007286   6e00     movwf	0, 0               	MOVWF	r0x00
007288   6a01     clrf	0x1, 0              	CLRF	r0x01
00728a   6a01     clrf	0x1, 0              	CLRF	r0x01
00728c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00728e   010e     movlb	0xe                	BANKSEL	_EWRPTH
007290   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	650; TCPIP_Stack/ETH97J60.c	return oldVal;
007292   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
007294   fff3
007296   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
007298   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00729a   f005
00729c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00729e   f004
0072a0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0072a2   f003
0072a4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0072a6   f002
0072a8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0072aa   f001
0072ac   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0072ae   f000
0072b0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0072b2   ffd9
0072b4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACSetReadPtrInRx	code
                                           _MACSetReadPtrInRx:
                                           ;	.line	609; TCPIP_Stack/ETH97J60.c	void MACSetReadPtrInRx(WORD offset)
006802   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006804   ffe5
006806   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006808   ffd9
00680a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00680c   ffe5
00680e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006810   ffe5
006812   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006814   ffe5
006816   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006818   ffe5
00681a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00681c   ffe5
00681e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006820   ffe5
006822   0e02     movlw	0x2                	MOVLW	0x02
006824   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006826   f000
006828   0e03     movlw	0x3                	MOVLW	0x03
00682a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00682c   f001
00682e   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	615; TCPIP_Stack/ETH97J60.c	ReadPT.Val = CurrentPacketLocation.Val + sizeof(ENC_PREAMBLE) + offset;
006830   514a     movf	0x4a, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
006832   0f14     addlw	0x14               	ADDLW	0x14
006834   6e02     movwf	0x2, 0             	MOVWF	r0x02
006836   0e00     movlw	0                  	MOVLW	0x00
006838   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
00683a   214b     addwfc	0x4b, 0, 0x1      	ADDWFC	(_CurrentPacketLocation + 1), W, B
00683c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00683e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006840   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006842   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006844   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006846   5000     movf	0, 0, 0             	MOVF	r0x00, W
006848   010a     movlb	0xa                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
00684a   6f56     movwf	0x56, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
00684c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00684e   010a     movlb	0xa                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
006850   6f57     movwf	0x57, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           ;	.line	618; TCPIP_Stack/ETH97J60.c	if(ReadPT.Val > RXSTOP)  ReadPT.Val -= RXSIZE;
006852   ca56     movff	0xa56, 0x2         	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, r0x02
006854   f002
006856   ca57     movff	0xa57, 0x3         	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), r0x03
006858   f003
00685a   6a04     clrf	0x4, 0              	CLRF	r0x04
00685c   6a05     clrf	0x5, 0              	CLRF	r0x05
00685e   0e00     movlw	0                  	MOVLW	0x00
006860   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
006862   e108     bnz	0x6874               	BNZ	_00275_DS_
006864   0e00     movlw	0                  	MOVLW	0x00
006866   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
006868   e105     bnz	0x6874               	BNZ	_00275_DS_
00686a   0e1a     movlw	0x1a               	MOVLW	0x1a
00686c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
00686e   e102     bnz	0x6874               	BNZ	_00275_DS_
006870   0e0a     movlw	0xa                	MOVLW	0x0a
006872   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00275_DS_:
006874   e310     bnc	0x6896               	BNC	_00271_DS_
006876   6a00     clrf	0, 0                	CLRF	r0x00
006878   6a01     clrf	0x1, 0              	CLRF	r0x01
00687a   0ef6     movlw	0xf6               	MOVLW	0xf6
00687c   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
00687e   0ee5     movlw	0xe5               	MOVLW	0xe5
006880   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
006882   0eff     movlw	0xff               	MOVLW	0xff
006884   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
006886   0eff     movlw	0xff               	MOVLW	0xff
006888   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00688a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00688c   010a     movlb	0xa                	BANKSEL	_MACSetReadPtrInRx_ReadPT_1_1
00688e   6f56     movwf	0x56, 0x1          	MOVWF	_MACSetReadPtrInRx_ReadPT_1_1, B
006890   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006892   010a     movlb	0xa                	BANKSEL	(_MACSetReadPtrInRx_ReadPT_1_1 + 1)
006894   6f57     movwf	0x57, 0x1          	MOVWF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), B
                                           _00271_DS_:
                                           ;	.line	621; TCPIP_Stack/ETH97J60.c	ERDPTL = ReadPT.v[0];
006896   ca56     movff	0xa56, 0xf7a       	MOVFF	_MACSetReadPtrInRx_ReadPT_1_1, _ERDPTL
006898   ff7a
                                           ;	.line	622; TCPIP_Stack/ETH97J60.c	ERDPTH = ReadPT.v[1];
00689a   ca57     movff	0xa57, 0xf7b       	MOVFF	(_MACSetReadPtrInRx_ReadPT_1_1 + 1), _ERDPTH
00689c   ff7b
00689e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0068a0   f005
0068a2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0068a4   f004
0068a6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0068a8   f003
0068aa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0068ac   f002
0068ae   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0068b0   f001
0068b2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0068b4   f000
0068b6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0068b8   ffd9
0068ba   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACFlush	code
                                           _MACFlush:
                                           ;	.line	563; TCPIP_Stack/ETH97J60.c	void MACFlush(void)
007682   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007684   ffe5
007686   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007688   ffd9
00768a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00768c   ffe5
00768e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007690   ffe5
007692   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007694   ffe5
007696   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007698   ffe5
                                           ;	.line	569; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 1;
00769a   8ed2     bsf	0xd2, 0x7, 0         	BSF	_ECON1bits, 7
                                           ;	.line	570; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRST = 0;
00769c   9ed2     bcf	0xd2, 0x7, 0         	BCF	_ECON1bits, 7
                                           ;	.line	574; TCPIP_Stack/ETH97J60.c	{volatile BYTE i = 8; while(i--);}
00769e   0e08     movlw	0x8                	MOVLW	0x08
0076a0   010a     movlb	0xa                	BANKSEL	_MACFlush_i_2_2
0076a2   6f88     movwf	0x88, 0x1          	MOVWF	_MACFlush_i_2_2, B
                                           _00262_DS_:
0076a4   ca88     movff	0xa88, 0           	MOVFF	_MACFlush_i_2_2, r0x00
0076a6   f000
0076a8   010a     movlb	0xa                	BANKSEL	_MACFlush_i_2_2
0076aa   0788     decf	0x88, 0x1, 0x1      	DECF	_MACFlush_i_2_2, F, B
0076ac   5000     movf	0, 0, 0             	MOVF	r0x00, W
0076ae   e1fa     bnz	0x76a4               	BNZ	_00262_DS_
                                           ;	.line	575; TCPIP_Stack/ETH97J60.c	EIRbits.TXERIF = 0;
0076b0   9260     bcf	0x60, 0x1, 0         	BCF	_EIRbits, 1
                                           ;	.line	582; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 1;
0076b2   86d2     bsf	0xd2, 0x3, 0         	BSF	_ECON1bits, 3
                                           ;	.line	583; TCPIP_Stack/ETH97J60.c	wTXWatchdog = TickGet();
0076b4   ec7c     call	0x7ef8, 0           	CALL	_TickGet
0076b6   f03f
0076b8   6e00     movwf	0, 0               	MOVWF	r0x00
0076ba   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0076bc   f001
0076be   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0076c0   f002
0076c2   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0076c4   f003
0076c6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0076c8   010a     movlb	0xa                	BANKSEL	_wTXWatchdog
0076ca   6f4c     movwf	0x4c, 0x1          	MOVWF	_wTXWatchdog, B
0076cc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0076ce   010a     movlb	0xa                	BANKSEL	(_wTXWatchdog + 1)
0076d0   6f4d     movwf	0x4d, 0x1          	MOVWF	(_wTXWatchdog + 1), B
0076d2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0076d4   f003
0076d6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0076d8   f002
0076da   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0076dc   f001
0076de   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0076e0   f000
0076e2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0076e4   ffd9
0076e6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACPutHeader	code
                                           _MACPutHeader:
                                           ;	.line	515; TCPIP_Stack/ETH97J60.c	void MACPutHeader(MAC_ADDR *remote, BYTE type, WORD dataLen)
004f68   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004f6a   ffe5
004f6c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004f6e   ffd9
004f70   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004f72   ffe5
004f74   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004f76   ffe5
004f78   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004f7a   ffe5
004f7c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004f7e   ffe5
004f80   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004f82   ffe5
004f84   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004f86   ffe5
004f88   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004f8a   ffe5
004f8c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004f8e   ffe5
004f90   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004f92   ffe5
004f94   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004f96   ffe5
004f98   0e02     movlw	0x2                	MOVLW	0x02
004f9a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004f9c   f000
004f9e   0e03     movlw	0x3                	MOVLW	0x03
004fa0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004fa2   f001
004fa4   0e04     movlw	0x4                	MOVLW	0x04
004fa6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004fa8   f002
004faa   0e05     movlw	0x5                	MOVLW	0x05
004fac   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004fae   f003
004fb0   0e06     movlw	0x6                	MOVLW	0x06
004fb2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
004fb4   f004
004fb6   0e07     movlw	0x7                	MOVLW	0x07
004fb8   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
004fba   f005
                                           ;	.line	518; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART + 1);
004fbc   0e0b     movlw	0xb                	MOVLW	0x0b
004fbe   010e     movlb	0xe                	BANKSEL	_EWRPTL
004fc0   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	519; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART + 1);
004fc2   0e1a     movlw	0x1a               	MOVLW	0x1a
004fc4   010e     movlb	0xe                	BANKSEL	_EWRPTH
004fc6   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	522; TCPIP_Stack/ETH97J60.c	dataLen += (WORD)sizeof(ETHER_HEADER) + TXSTART;
004fc8   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
004fca   f006
004fcc   c005     movff	0x5, 0x7           	MOVFF	r0x05, r0x07
004fce   f007
004fd0   6a08     clrf	0x8, 0              	CLRF	r0x08
004fd2   6a09     clrf	0x9, 0              	CLRF	r0x09
004fd4   0e18     movlw	0x18               	MOVLW	0x18
004fd6   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
004fd8   0e1a     movlw	0x1a               	MOVLW	0x1a
004fda   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
004fdc   0e00     movlw	0                  	MOVLW	0x00
004fde   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
004fe0   0e00     movlw	0                  	MOVLW	0x00
004fe2   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
004fe4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004fe6   6e04     movwf	0x4, 0             	MOVWF	r0x04
004fe8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004fea   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	525; TCPIP_Stack/ETH97J60.c	ETXNDL = LOW(dataLen);
004fec   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004fee   6e06     movwf	0x6, 0             	MOVWF	r0x06
004ff0   6a07     clrf	0x7, 0              	CLRF	r0x07
004ff2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004ff4   010e     movlb	0xe                	BANKSEL	_ETXNDL
004ff6   6fe6     movwf	0xe6, 0x1          	MOVWF	_ETXNDL, B
                                           ;	.line	526; TCPIP_Stack/ETH97J60.c	ETXNDH = HIGH(dataLen);
004ff8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004ffa   6e04     movwf	0x4, 0             	MOVWF	r0x04
004ffc   6a05     clrf	0x5, 0              	CLRF	r0x05
004ffe   6a05     clrf	0x5, 0              	CLRF	r0x05
005000   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005002   010e     movlb	0xe                	BANKSEL	_ETXNDH
005004   6fe7     movwf	0xe7, 0x1          	MOVWF	_ETXNDH, B
                                           ;	.line	530; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)remote, sizeof(*remote));
005006   0e00     movlw	0                  	MOVLW	0x00
005008   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00500a   0e06     movlw	0x6                	MOVLW	0x06
00500c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00500e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005010   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005012   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005016   5000     movf	0, 0, 0             	MOVF	r0x00, W
005018   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00501a   ec9a     call	0x6d34, 0           	CALL	_MACPutArray
00501c   f036
00501e   0e05     movlw	0x5                	MOVLW	0x05
005020   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	533; TCPIP_Stack/ETH97J60.c	MACPutArray((BYTE*)&AppConfig.MyMACAddr, sizeof(AppConfig.MyMACAddr));
005022   0e0e     movlw	0xe                	MOVLW	HIGH(_AppConfig + 45)
005024   6e01     movwf	0x1, 0             	MOVWF	r0x01
005026   0e2d     movlw	0x2d               	MOVLW	LOW(_AppConfig + 45)
005028   6e00     movwf	0, 0               	MOVWF	r0x00
00502a   0e80     movlw	0x80               	MOVLW	0x80
00502c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00502e   0e00     movlw	0                  	MOVLW	0x00
005030   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005032   0e06     movlw	0x6                	MOVLW	0x06
005034   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005036   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005038   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00503a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00503c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00503e   5000     movf	0, 0, 0             	MOVF	r0x00, W
005040   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005042   ec9a     call	0x6d34, 0           	CALL	_MACPutArray
005044   f036
005046   0e05     movlw	0x5                	MOVLW	0x05
005048   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	536; TCPIP_Stack/ETH97J60.c	MACPut(0x08);
00504a   0e08     movlw	0x8                	MOVLW	0x08
00504c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00504e   ec3c     call	0x8078, 0           	CALL	_MACPut
005050   f040
005052   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	537; TCPIP_Stack/ETH97J60.c	MACPut((type == MAC_IP) ? ETHER_IP : ETHER_ARP);
005054   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005056   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
005058   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
00505a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00505c   6a03     clrf	0x3, 0              	CLRF	r0x03
00505e   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
005060   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005062   e003     bz	0x506a                	BZ	_00256_DS_
005064   6a00     clrf	0, 0                	CLRF	r0x00
005066   6a01     clrf	0x1, 0              	CLRF	r0x01
005068   d003     bra	0x5070               	BRA	_00257_DS_
                                           _00256_DS_:
00506a   0e06     movlw	0x6                	MOVLW	0x06
00506c   6e00     movwf	0, 0               	MOVWF	r0x00
00506e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00257_DS_:
005070   5000     movf	0, 0, 0             	MOVF	r0x00, W
005072   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005074   ec3c     call	0x8078, 0           	CALL	_MACPut
005076   f040
005078   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
00507a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00507c   f009
00507e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005080   f008
005082   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005084   f007
005086   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005088   f006
00508a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00508c   f005
00508e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005090   f004
005092   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005094   f003
005096   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005098   f002
00509a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00509c   f001
00509e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0050a0   f000
0050a2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0050a4   ffd9
0050a6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetHeader	code
                                           _MACGetHeader:
                                           ;	.line	425; TCPIP_Stack/ETH97J60.c	BOOL MACGetHeader(MAC_ADDR *remote, BYTE* type)
003952   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003954   ffe5
003956   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003958   ffd9
00395a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00395c   ffe5
00395e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003960   ffe5
003962   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003964   ffe5
003966   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003968   ffe5
00396a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00396c   ffe5
00396e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003970   ffe5
003972   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003974   ffe5
003976   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003978   ffe5
00397a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00397c   ffe5
00397e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003980   ffe5
003982   0e02     movlw	0x2                	MOVLW	0x02
003984   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003986   f000
003988   0e03     movlw	0x3                	MOVLW	0x03
00398a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00398c   f001
00398e   0e04     movlw	0x4                	MOVLW	0x04
003990   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003992   f002
003994   0e05     movlw	0x5                	MOVLW	0x05
003996   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003998   f003
00399a   0e06     movlw	0x6                	MOVLW	0x06
00399c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00399e   f004
0039a0   0e07     movlw	0x7                	MOVLW	0x07
0039a2   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0039a4   f005
0039a6   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	430; TCPIP_Stack/ETH97J60.c	if(EPKTCNT == 0u)
0039a8   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
0039aa   e102     bnz	0x39b0               	BNZ	_00213_DS_
                                           ;	.line	432; TCPIP_Stack/ETH97J60.c	return FALSE;
0039ac   6ae8     clrf	0xe8, 0             	CLRF	WREG
0039ae   d0c3     bra	0x3b36               	BRA	_00230_DS_
                                           _00213_DS_:
0039b0   010a     movlb	0xa                	BANKSEL	_WasDiscarded
                                           ;	.line	436; TCPIP_Stack/ETH97J60.c	if(WasDiscarded == FALSE)
0039b2   5187     movf	0x87, 0, 0x1        	MOVF	_WasDiscarded, W, B
0039b4   e104     bnz	0x39be               	BNZ	_00215_DS_
                                           ;	.line	438; TCPIP_Stack/ETH97J60.c	MACDiscardRx();
0039b6   ec30     call	0x6e60, 0           	CALL	_MACDiscardRx
0039b8   f037
                                           ;	.line	439; TCPIP_Stack/ETH97J60.c	return FALSE;
0039ba   6ae8     clrf	0xe8, 0             	CLRF	WREG
0039bc   d0bc     bra	0x3b36               	BRA	_00230_DS_
                                           _00215_DS_:
0039be   010a     movlb	0xa                	BANKSEL	_NextPacketLocation
                                           ;	.line	442; TCPIP_Stack/ETH97J60.c	CurrentPacketLocation.Val = NextPacketLocation.Val;
0039c0   5148     movf	0x48, 0, 0x1        	MOVF	_NextPacketLocation, W, B
0039c2   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
0039c4   6f4a     movwf	0x4a, 0x1          	MOVWF	_CurrentPacketLocation, B
0039c6   010a     movlb	0xa                	BANKSEL	(_NextPacketLocation + 1)
0039c8   5149     movf	0x49, 0, 0x1        	MOVF	(_NextPacketLocation + 1), W, B
0039ca   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
0039cc   6f4b     movwf	0x4b, 0x1          	MOVWF	(_CurrentPacketLocation + 1), B
0039ce   010a     movlb	0xa                	BANKSEL	(_CurrentPacketLocation + 1)
                                           ;	.line	445; TCPIP_Stack/ETH97J60.c	ERDPTH = HIGH(CurrentPacketLocation.Val);
0039d0   514b     movf	0x4b, 0, 0x1        	MOVF	(_CurrentPacketLocation + 1), W, B
0039d2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0039d4   6a07     clrf	0x7, 0              	CLRF	r0x07
0039d6   6a07     clrf	0x7, 0              	CLRF	r0x07
0039d8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0039da   6e7b     movwf	0x7b, 0            	MOVWF	_ERDPTH
0039dc   010a     movlb	0xa                	BANKSEL	_CurrentPacketLocation
                                           ;	.line	446; TCPIP_Stack/ETH97J60.c	ERDPTL = LOW(CurrentPacketLocation.Val);
0039de   514a     movf	0x4a, 0, 0x1        	MOVF	_CurrentPacketLocation, W, B
0039e0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0039e2   6a07     clrf	0x7, 0              	CLRF	r0x07
0039e4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0039e6   6e7a     movwf	0x7a, 0            	MOVWF	_ERDPTL
                                           ;	.line	449; TCPIP_Stack/ETH97J60.c	MACGetArray((BYTE*)&header, sizeof(header));
0039e8   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1)
0039ea   6e07     movwf	0x7, 0             	MOVWF	r0x07
0039ec   0eec     movlw	0xec               	MOVLW	LOW(_MACGetHeader_header_1_1)
0039ee   6e06     movwf	0x6, 0             	MOVWF	r0x06
0039f0   0e80     movlw	0x80               	MOVLW	0x80
0039f2   6e08     movwf	0x8, 0             	MOVWF	r0x08
0039f4   0e00     movlw	0                  	MOVLW	0x00
0039f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039f8   0e14     movlw	0x14               	MOVLW	0x14
0039fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0039fc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0039fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a00   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003a02   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a04   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003a06   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a08   ec7d     call	0x62fa, 0           	CALL	_MACGetArray
003a0a   f031
003a0c   0e05     movlw	0x5                	MOVLW	0x05
003a0e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003a10   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
                                           ;	.line	453; TCPIP_Stack/ETH97J60.c	header.Type.Val = swaps(header.Type.Val);
003a12   51ff     movf	0xff, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 19), W, B
003a14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a16   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
003a18   51fe     movf	0xfe, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 18), W, B
003a1a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a1c   ec87     call	0x790e, 0           	CALL	_swaps
003a1e   f03c
003a20   6e06     movwf	0x6, 0             	MOVWF	r0x06
003a22   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
003a24   f007
003a26   0e02     movlw	0x2                	MOVLW	0x02
003a28   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003a2a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003a2c   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 18)
003a2e   6ffe     movwf	0xfe, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 18), B
003a30   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003a32   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 19)
003a34   6fff     movwf	0xff, 0x1          	MOVWF	(_MACGetHeader_header_1_1 + 19), B
                                           ;	.line	458; TCPIP_Stack/ETH97J60.c	if(header.NextPacketPointer > RXSTOP || 
003a36   c0ec     movff	0xec, 0x6          	MOVFF	_MACGetHeader_header_1_1, r0x06
003a38   f006
003a3a   c0ed     movff	0xed, 0x7          	MOVFF	(_MACGetHeader_header_1_1 + 1), r0x07
003a3c   f007
003a3e   6a08     clrf	0x8, 0              	CLRF	r0x08
003a40   6a09     clrf	0x9, 0              	CLRF	r0x09
003a42   0e00     movlw	0                  	MOVLW	0x00
003a44   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
003a46   e108     bnz	0x3a58               	BNZ	_00244_DS_
003a48   0e00     movlw	0                  	MOVLW	0x00
003a4a   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
003a4c   e105     bnz	0x3a58               	BNZ	_00244_DS_
003a4e   0e1a     movlw	0x1a               	MOVLW	0x1a
003a50   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
003a52   e102     bnz	0x3a58               	BNZ	_00244_DS_
003a54   0e0a     movlw	0xa                	MOVLW	0x0a
003a56   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00244_DS_:
003a58   e214     bc	0x3a82                	BC	_00219_DS_
003a5a   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	459; TCPIP_Stack/ETH97J60.c	((BYTE_VAL*)(&header.NextPacketPointer))->bits.b0 ||
003a5c   b1ec     btfsc	0xec, 0, 0x1       	BTFSC	_MACGetHeader_header_1_1, 0, B
003a5e   d011     bra	0x3a82               	BRA	_00219_DS_
003a60   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 5)
                                           ;	.line	460; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.Zero ||
003a62   bff1     btfsc	0xf1, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 5), 7, B
003a64   d00e     bra	0x3a82               	BRA	_00219_DS_
003a66   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	461; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.CRCError ||
003a68   b9f0     btfsc	0xf0, 0x4, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 4, B
003a6a   d00b     bra	0x3a82               	BRA	_00219_DS_
                                           ;	.line	462; TCPIP_Stack/ETH97J60.c	header.StatusVector.bits.ByteCount > 1518u ||
003a6c   0e05     movlw	0x5                	MOVLW	0x05
003a6e   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 3)
003a70   5def     subwf	0xef, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 3), W, B
003a72   e103     bnz	0x3a7a               	BNZ	_00245_DS_
003a74   0eef     movlw	0xef               	MOVLW	0xef
003a76   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 2)
003a78   5dee     subwf	0xee, 0, 0x1       	SUBWF	(_MACGetHeader_header_1_1 + 2), W, B
                                           _00245_DS_:
003a7a   e203     bc	0x3a82                	BC	_00219_DS_
003a7c   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 4)
                                           ;	.line	463; TCPIP_Stack/ETH97J60.c	!header.StatusVector.bits.ReceiveOk)
003a7e   bff0     btfsc	0xf0, 0x7, 0x1     	BTFSC	(_MACGetHeader_header_1_1 + 4), 7, B
003a80   d00d     bra	0x3a9c               	BRA	_00220_DS_
                                           _00219_DS_:
                                           ;	.line	465; TCPIP_Stack/ETH97J60.c	DisplayString(0,"error reading hdr");while(1);//////////////////////ML
003a82   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
003a84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a86   0e59     movlw	0x59               	MOVLW	HIGH(__str_0)
003a88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a8a   0ed4     movlw	0xd4               	MOVLW	LOW(__str_0)
003a8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a8e   0e00     movlw	0                  	MOVLW	0x00
003a90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003a92   eccd     call	0x659a, 0           	CALL	_DisplayString
003a94   f032
003a96   0e04     movlw	0x4                	MOVLW	0x04
003a98   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00217_DS_:
003a9a   d7ff     bra	0x3a9a               	BRA	_00217_DS_
                                           _00220_DS_:
003a9c   0100     movlb	0                  	BANKSEL	_MACGetHeader_header_1_1
                                           ;	.line	470; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = header.NextPacketPointer;
003a9e   51ec     movf	0xec, 0, 0x1        	MOVF	_MACGetHeader_header_1_1, W, B
003aa0   010a     movlb	0xa                	BANKSEL	_NextPacketLocation
003aa2   6f48     movwf	0x48, 0x1          	MOVWF	_NextPacketLocation, B
003aa4   0100     movlb	0                  	BANKSEL	(_MACGetHeader_header_1_1 + 1)
003aa6   51ed     movf	0xed, 0, 0x1        	MOVF	(_MACGetHeader_header_1_1 + 1), W, B
003aa8   010a     movlb	0xa                	BANKSEL	(_NextPacketLocation + 1)
003aaa   6f49     movwf	0x49, 0x1          	MOVWF	(_NextPacketLocation + 1), B
                                           ;	.line	475; TCPIP_Stack/ETH97J60.c	memcpy((void*)remote->v, (void*)header.SourceMACAddr.v, sizeof(*remote));
003aac   0e00     movlw	0                  	MOVLW	HIGH(_MACGetHeader_header_1_1 + 12)
003aae   6e07     movwf	0x7, 0             	MOVWF	r0x07
003ab0   0ef8     movlw	0xf8               	MOVLW	LOW(_MACGetHeader_header_1_1 + 12)
003ab2   6e06     movwf	0x6, 0             	MOVWF	r0x06
003ab4   0e80     movlw	0x80               	MOVLW	0x80
003ab6   6e08     movwf	0x8, 0             	MOVWF	r0x08
003ab8   0e00     movlw	0                  	MOVLW	0x00
003aba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003abc   0e06     movlw	0x6                	MOVLW	0x06
003abe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ac0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003ac2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ac4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
003ac6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ac8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003aca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003acc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003ace   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ad0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003ad2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ad4   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ad6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ad8   ec1d     call	0x5e3a, 0           	CALL	_memcpy
003ada   f02f
003adc   0e08     movlw	0x8                	MOVLW	0x08
003ade   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	478; TCPIP_Stack/ETH97J60.c	*type = MAC_UNKNOWN;
003ae0   0eff     movlw	0xff               	MOVLW	0xff
003ae2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ae4   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003ae6   ffe9
003ae8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003aea   fff3
003aec   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003aee   ec50     call	0x80a0, 0           	CALL	__gptrput1
003af0   f040
                                           ;	.line	479; TCPIP_Stack/ETH97J60.c	if( (header.Type.v[1] == 0x08u) &&
003af2   c0ff     movff	0xff, 0            	MOVFF	(_MACGetHeader_header_1_1 + 19), r0x00
003af4   f000
003af6   6a01     clrf	0x1, 0              	CLRF	r0x01
003af8   5000     movf	0, 0, 0             	MOVF	r0x00, W
003afa   0a08     xorlw	0x8                	XORLW	0x08
003afc   e102     bnz	0x3b02               	BNZ	_00246_DS_
003afe   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003b00   e001     bz	0x3b04                	BZ	_00247_DS_
                                           _00246_DS_:
003b02   d016     bra	0x3b30               	BRA	_00227_DS_
                                           _00247_DS_:
                                           ;	.line	480; TCPIP_Stack/ETH97J60.c	((header.Type.v[0] == ETHER_IP) || (header.Type.v[0] == ETHER_ARP)) )
003b04   c0fe     movff	0xfe, 0            	MOVFF	(_MACGetHeader_header_1_1 + 18), r0x00
003b06   f000
003b08   5000     movf	0, 0, 0             	MOVF	r0x00, W
003b0a   e009     bz	0x3b1e                	BZ	_00226_DS_
003b0c   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
003b0e   f001
003b10   6a02     clrf	0x2, 0              	CLRF	r0x02
003b12   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003b14   0a06     xorlw	0x6                	XORLW	0x06
003b16   e102     bnz	0x3b1c               	BNZ	_00248_DS_
003b18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003b1a   e001     bz	0x3b1e                	BZ	_00226_DS_
                                           _00248_DS_:
003b1c   d009     bra	0x3b30               	BRA	_00227_DS_
                                           _00226_DS_:
                                           ;	.line	482; TCPIP_Stack/ETH97J60.c	*type = header.Type.v[0];
003b1e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003b20   ffe5
003b22   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003b24   ffe9
003b26   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003b28   fff3
003b2a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003b2c   ec50     call	0x80a0, 0           	CALL	__gptrput1
003b2e   f040
                                           _00227_DS_:
003b30   010a     movlb	0xa                	BANKSEL	_WasDiscarded
                                           ;	.line	486; TCPIP_Stack/ETH97J60.c	WasDiscarded = FALSE;
003b32   6b87     clrf	0x87, 0x1           	CLRF	_WasDiscarded, B
                                           ;	.line	487; TCPIP_Stack/ETH97J60.c	return TRUE;
003b34   0e01     movlw	0x1                	MOVLW	0x01
                                           _00230_DS_:
003b36   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003b38   f009
003b3a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003b3c   f008
003b3e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003b40   f007
003b42   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003b44   f006
003b46   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003b48   f005
003b4a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003b4c   f004
003b4e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003b50   f003
003b52   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003b54   f002
003b56   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003b58   f001
003b5a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003b5c   f000
003b5e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003b60   ffd9
003b62   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACGetFreeRxSize	code
                                           _MACGetFreeRxSize:
                                           ;	.line	367; TCPIP_Stack/ETH97J60.c	WORD MACGetFreeRxSize(void)
005afe   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005b00   ffe5
005b02   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005b04   ffd9
005b06   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005b08   ffe5
005b0a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005b0c   ffe5
005b0e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005b10   ffe5
005b12   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005b14   ffe5
005b16   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005b18   ffe5
005b1a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005b1c   ffe5
                                           _00186_DS_:
005b1e   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	377; TCPIP_Stack/ETH97J60.c	ReadPT.v[0] = EPKTCNT;
005b20   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
005b22   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
005b24   6f52     movwf	0x52, 0x1          	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
                                           ;	.line	379; TCPIP_Stack/ETH97J60.c	WritePT.Val = ((WORD)ERXWRPTH)<<8|ERXWRPTL;
005b26   ceef     movff	0xeef, 0           	MOVFF	_ERXWRPTH, r0x00
005b28   f000
005b2a   6a01     clrf	0x1, 0              	CLRF	r0x01
005b2c   5000     movf	0, 0, 0             	MOVF	r0x00, W
005b2e   6e03     movwf	0x3, 0             	MOVWF	r0x03
005b30   6a02     clrf	0x2, 0              	CLRF	r0x02
005b32   ceee     movff	0xeee, 0           	MOVFF	_ERXWRPTL, r0x00
005b34   f000
005b36   6a01     clrf	0x1, 0              	CLRF	r0x01
005b38   5000     movf	0, 0, 0             	MOVF	r0x00, W
005b3a   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
005b3c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005b3e   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
005b40   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005b42   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
005b44   6f54     movwf	0x54, 0x1          	MOVWF	_MACGetFreeRxSize_WritePT_1_1, B
005b46   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005b48   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005b4a   6f55     movwf	0x55, 0x1          	MOVWF	(_MACGetFreeRxSize_WritePT_1_1 + 1), B
005b4c   010e     movlb	0xe                	BANKSEL	_EPKTCNT
                                           ;	.line	380; TCPIP_Stack/ETH97J60.c	} while(EPKTCNT != ReadPT.v[0]);
005b4e   51d9     movf	0xd9, 0, 0x1        	MOVF	_EPKTCNT, W, B
005b50   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
005b52   1952     xorwf	0x52, 0, 0x1       	XORWF	_MACGetFreeRxSize_ReadPT_1_1, W, B
005b54   e1e4     bnz	0x5b1e               	BNZ	_00186_DS_
                                           ;	.line	383; TCPIP_Stack/ETH97J60.c	ReadPT.Val = ERXRDPTH<<8|ERXRDPTL;
005b56   ceed     movff	0xeed, 0           	MOVFF	_ERXRDPTH, r0x00
005b58   f000
005b5a   6a01     clrf	0x1, 0              	CLRF	r0x01
005b5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
005b5e   6e03     movwf	0x3, 0             	MOVWF	r0x03
005b60   6a02     clrf	0x2, 0              	CLRF	r0x02
005b62   ceec     movff	0xeec, 0           	MOVFF	_ERXRDPTL, r0x00
005b64   f000
005b66   6a01     clrf	0x1, 0              	CLRF	r0x01
005b68   5000     movf	0, 0, 0             	MOVF	r0x00, W
005b6a   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
005b6c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005b6e   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
005b70   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005b72   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_ReadPT_1_1
005b74   6f52     movwf	0x52, 0x1          	MOVWF	_MACGetFreeRxSize_ReadPT_1_1, B
005b76   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005b78   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_ReadPT_1_1 + 1)
005b7a   6f53     movwf	0x53, 0x1          	MOVWF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), B
                                           ;	.line	388; TCPIP_Stack/ETH97J60.c	if(WritePT.Val > ReadPT.Val)
005b7c   ca52     movff	0xa52, 0           	MOVFF	_MACGetFreeRxSize_ReadPT_1_1, r0x00
005b7e   f000
005b80   ca53     movff	0xa53, 0x1         	MOVFF	(_MACGetFreeRxSize_ReadPT_1_1 + 1), r0x01
005b82   f001
005b84   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005b86   5155     movf	0x55, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005b88   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
005b8a   e103     bnz	0x5b92               	BNZ	_00205_DS_
005b8c   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
005b8e   5154     movf	0x54, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
005b90   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00205_DS_:
005b92   e217     bc	0x5bc2                	BC	_00193_DS_
                                           ;	.line	390; TCPIP_Stack/ETH97J60.c	return (RXSTOP - RXSTART) - (WritePT.Val - ReadPT.Val);
005b94   5000     movf	0, 0, 0             	MOVF	r0x00, W
005b96   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
005b98   5d54     subwf	0x54, 0, 0x1       	SUBWF	_MACGetFreeRxSize_WritePT_1_1, W, B
005b9a   6e02     movwf	0x2, 0             	MOVWF	r0x02
005b9c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005b9e   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005ba0   5955     subwfb	0x55, 0, 0x1      	SUBWFB	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005ba2   6e03     movwf	0x3, 0             	MOVWF	r0x03
005ba4   6a04     clrf	0x4, 0              	CLRF	r0x04
005ba6   6a05     clrf	0x5, 0              	CLRF	r0x05
005ba8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005baa   0809     sublw	0x9                	SUBLW	0x09
005bac   6e02     movwf	0x2, 0             	MOVWF	r0x02
005bae   0e1a     movlw	0x1a               	MOVLW	0x1a
005bb0   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
005bb2   0e00     movlw	0                  	MOVLW	0x00
005bb4   5604     subfwb	0x4, 0x1, 0       	SUBFWB	r0x04, F
005bb6   0e00     movlw	0                  	MOVLW	0x00
005bb8   5605     subfwb	0x5, 0x1, 0       	SUBFWB	r0x05, F
005bba   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
005bbc   fff3
005bbe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005bc0   d01a     bra	0x5bf6               	BRA	_00195_DS_
                                           _00193_DS_:
005bc2   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	392; TCPIP_Stack/ETH97J60.c	else if(WritePT.Val == ReadPT.Val)
005bc4   5154     movf	0x54, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
005bc6   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
005bc8   e104     bnz	0x5bd2               	BNZ	_00206_DS_
005bca   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005bcc   5155     movf	0x55, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005bce   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
005bd0   e001     bz	0x5bd4                	BZ	_00207_DS_
                                           _00206_DS_:
005bd2   d004     bra	0x5bdc               	BRA	_00190_DS_
                                           _00207_DS_:
                                           ;	.line	394; TCPIP_Stack/ETH97J60.c	return RXSIZE - 1;
005bd4   0e1a     movlw	0x1a               	MOVLW	0x1a
005bd6   6ef3     movwf	0xf3, 0            	MOVWF	PRODL
005bd8   0e09     movlw	0x9                	MOVLW	0x09
005bda   d00d     bra	0x5bf6               	BRA	_00195_DS_
                                           _00190_DS_:
005bdc   010a     movlb	0xa                	BANKSEL	_MACGetFreeRxSize_WritePT_1_1
                                           ;	.line	398; TCPIP_Stack/ETH97J60.c	return ReadPT.Val - WritePT.Val - 1;
005bde   5154     movf	0x54, 0, 0x1        	MOVF	_MACGetFreeRxSize_WritePT_1_1, W, B
005be0   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
005be2   010a     movlb	0xa                	BANKSEL	(_MACGetFreeRxSize_WritePT_1_1 + 1)
005be4   5155     movf	0x55, 0, 0x1        	MOVF	(_MACGetFreeRxSize_WritePT_1_1 + 1), W, B
005be6   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
005be8   0eff     movlw	0xff               	MOVLW	0xff
005bea   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005bec   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
005bee   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
005bf0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005bf2   fff3
005bf4   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00195_DS_:
005bf6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005bf8   f005
005bfa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005bfc   f004
005bfe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005c00   f003
005c02   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005c04   f002
005c06   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005c08   f001
005c0a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005c0c   f000
005c0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005c10   ffd9
005c12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACDiscardRx	code
                                           _MACDiscardRx:
                                           ;	.line	313; TCPIP_Stack/ETH97J60.c	void MACDiscardRx(void)
006e60   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006e62   ffe5
006e64   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006e66   ffd9
006e68   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006e6a   ffe5
006e6c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006e6e   ffe5
006e70   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006e72   ffe5
006e74   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006e76   ffe5
006e78   010a     movlb	0xa                	BANKSEL	_WasDiscarded
                                           ;	.line	318; TCPIP_Stack/ETH97J60.c	if(WasDiscarded) return;
006e7a   5187     movf	0x87, 0, 0x1        	MOVF	_WasDiscarded, W, B
006e7c   e130     bnz	0x6ede               	BNZ	_00177_DS_
                                           ;	.line	319; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
006e7e   0e01     movlw	0x1                	MOVLW	0x01
006e80   010a     movlb	0xa                	BANKSEL	_WasDiscarded
006e82   6f87     movwf	0x87, 0x1          	MOVWF	_WasDiscarded, B
006e84   010a     movlb	0xa                	BANKSEL	_NextPacketLocation
                                           ;	.line	325; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = NextPacketLocation.Val - 1;
006e86   5148     movf	0x48, 0, 0x1        	MOVF	_NextPacketLocation, W, B
006e88   0fff     addlw	0xff               	ADDLW	0xff
006e8a   6e00     movwf	0, 0               	MOVWF	r0x00
006e8c   0eff     movlw	0xff               	MOVLW	0xff
006e8e   010a     movlb	0xa                	BANKSEL	(_NextPacketLocation + 1)
006e90   2149     addwfc	0x49, 0, 0x1      	ADDWFC	(_NextPacketLocation + 1), W, B
006e92   6e01     movwf	0x1, 0             	MOVWF	r0x01
006e94   5000     movf	0, 0, 0             	MOVF	r0x00, W
006e96   010a     movlb	0xa                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
006e98   6f50     movwf	0x50, 0x1          	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
006e9a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006e9c   010a     movlb	0xa                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
006e9e   6f51     movwf	0x51, 0x1          	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           ;	.line	327; TCPIP_Stack/ETH97J60.c	if(NewRXRDLocation.Val > RXSTOP)
006ea0   ca50     movff	0xa50, 0xfe8       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, WREG
006ea2   ffe8
006ea4   ca51     movff	0xa51, 0xfe8       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), WREG
006ea6   ffe8
006ea8   6a02     clrf	0x2, 0              	CLRF	r0x02
006eaa   6a03     clrf	0x3, 0              	CLRF	r0x03
006eac   0e00     movlw	0                  	MOVLW	0x00
006eae   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
006eb0   e108     bnz	0x6ec2               	BNZ	_00181_DS_
006eb2   0e00     movlw	0                  	MOVLW	0x00
006eb4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
006eb6   e105     bnz	0x6ec2               	BNZ	_00181_DS_
006eb8   0e1a     movlw	0x1a               	MOVLW	0x1a
006eba   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
006ebc   e102     bnz	0x6ec2               	BNZ	_00181_DS_
006ebe   0e0a     movlw	0xa                	MOVLW	0x0a
006ec0   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00181_DS_:
006ec2   e306     bnc	0x6ed0               	BNC	_00176_DS_
                                           ;	.line	332; TCPIP_Stack/ETH97J60.c	NewRXRDLocation.Val = RXSTOP;
006ec4   0e09     movlw	0x9                	MOVLW	0x09
006ec6   010a     movlb	0xa                	BANKSEL	_MACDiscardRx_NewRXRDLocation_1_1
006ec8   6f50     movwf	0x50, 0x1          	MOVWF	_MACDiscardRx_NewRXRDLocation_1_1, B
006eca   0e1a     movlw	0x1a               	MOVLW	0x1a
006ecc   010a     movlb	0xa                	BANKSEL	(_MACDiscardRx_NewRXRDLocation_1_1 + 1)
006ece   6f51     movwf	0x51, 0x1          	MOVWF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), B
                                           _00176_DS_:
006ed0   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	336; TCPIP_Stack/ETH97J60.c	ECON2bits.PKTDEC = 1;
006ed2   8dfe     bsf	0xfe, 0x6, 0x1       	BSF	_ECON2bits, 6, B
                                           ;	.line	341; TCPIP_Stack/ETH97J60.c	ERXRDPTL = NewRXRDLocation.v[0];
006ed4   ca50     movff	0xa50, 0xeec       	MOVFF	_MACDiscardRx_NewRXRDLocation_1_1, _ERXRDPTL
006ed6   feec
                                           ;	.line	342; TCPIP_Stack/ETH97J60.c	ERXRDPTH = NewRXRDLocation.v[1];
006ed8   ca51     movff	0xa51, 0xeed       	MOVFF	(_MACDiscardRx_NewRXRDLocation_1_1 + 1), _ERXRDPTH
006eda   feed
                                           ;	.line	347; TCPIP_Stack/ETH97J60.c	EIRbits.PKTIF = 0;
006edc   9c60     bcf	0x60, 0x6, 0         	BCF	_EIRbits, 6
                                           _00177_DS_:
006ede   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006ee0   f003
006ee2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006ee4   f002
006ee6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006ee8   f001
006eea   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006eec   f000
006eee   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006ef0   ffd9
006ef2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsTxReady	code
                                           _MACIsTxReady:
                                           ;	.line	278; TCPIP_Stack/ETH97J60.c	BOOL MACIsTxReady(void)
0074b8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0074ba   ffe5
0074bc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0074be   ffd9
0074c0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0074c2   ffe5
0074c4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0074c6   ffe5
0074c8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0074ca   ffe5
0074cc   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0074ce   ffe5
                                           ;	.line	280; TCPIP_Stack/ETH97J60.c	if(!ECON1bits.TXRTS)
0074d0   b6d2     btfsc	0xd2, 0x3, 0       	BTFSC	_ECON1bits, 3
0074d2   d002     bra	0x74d8               	BRA	_00161_DS_
                                           ;	.line	281; TCPIP_Stack/ETH97J60.c	return TRUE;
0074d4   0e01     movlw	0x1                	MOVLW	0x01
0074d6   d021     bra	0x751a               	BRA	_00164_DS_
                                           _00161_DS_:
                                           ;	.line	285; TCPIP_Stack/ETH97J60.c	if((WORD)TickGet() - wTXWatchdog >= (3ull*TICK_SECOND/1000ull))
0074d8   ec7c     call	0x7ef8, 0           	CALL	_TickGet
0074da   f03f
0074dc   6e00     movwf	0, 0               	MOVWF	r0x00
0074de   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0074e0   f001
0074e2   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0074e4   f002
0074e6   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0074e8   f003
0074ea   010a     movlb	0xa                	BANKSEL	_wTXWatchdog
0074ec   514c     movf	0x4c, 0, 0x1        	MOVF	_wTXWatchdog, W, B
0074ee   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
0074f0   010a     movlb	0xa                	BANKSEL	(_wTXWatchdog + 1)
0074f2   514d     movf	0x4d, 0, 0x1        	MOVF	(_wTXWatchdog + 1), W, B
0074f4   5a01     subwfb	0x1, 0x1, 0       	SUBWFB	r0x01, F
0074f6   6a02     clrf	0x2, 0              	CLRF	r0x02
0074f8   6a03     clrf	0x3, 0              	CLRF	r0x03
0074fa   0e00     movlw	0                  	MOVLW	0x00
0074fc   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
0074fe   e108     bnz	0x7510               	BNZ	_00168_DS_
007500   0e00     movlw	0                  	MOVLW	0x00
007502   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
007504   e105     bnz	0x7510               	BNZ	_00168_DS_
007506   0e00     movlw	0                  	MOVLW	0x00
007508   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
00750a   e102     bnz	0x7510               	BNZ	_00168_DS_
00750c   0e7a     movlw	0x7a               	MOVLW	0x7a
00750e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00168_DS_:
007510   e303     bnc	0x7518               	BNC	_00163_DS_
                                           ;	.line	287; TCPIP_Stack/ETH97J60.c	ECON1bits.TXRTS = 0;
007512   96d2     bcf	0xd2, 0x3, 0         	BCF	_ECON1bits, 3
                                           ;	.line	288; TCPIP_Stack/ETH97J60.c	MACFlush();
007514   ec41     call	0x7682, 0           	CALL	_MACFlush
007516   f03b
                                           _00163_DS_:
                                           ;	.line	290; TCPIP_Stack/ETH97J60.c	return FALSE;
007518   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00164_DS_:
00751a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00751c   f003
00751e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007520   f002
007522   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007524   f001
007526   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007528   f000
00752a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00752c   ffd9
00752e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACIsLinked	code
                                           _MACIsLinked:
                                           ;	.line	244; TCPIP_Stack/ETH97J60.c	BOOL MACIsLinked(void)
007bbe   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007bc0   ffe5
007bc2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007bc4   ffd9
007bc6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007bc8   ffe5
007bca   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007bcc   ffe5
                                           ;	.line	253; TCPIP_Stack/ETH97J60.c	pr.Val= ReadPHYReg(PHSTAT1);
007bce   0e01     movlw	0x1                	MOVLW	0x01
007bd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007bd2   ecbd     call	0x7b7a, 0           	CALL	_ReadPHYReg
007bd4   f03d
007bd6   6e00     movwf	0, 0               	MOVWF	r0x00
007bd8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
007bda   f001
007bdc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
007bde   5000     movf	0, 0, 0             	MOVF	r0x00, W
007be0   010a     movlb	0xa                	BANKSEL	_MACIsLinked_pr_1_1
007be2   6f4e     movwf	0x4e, 0x1          	MOVWF	_MACIsLinked_pr_1_1, B
007be4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007be6   010a     movlb	0xa                	BANKSEL	(_MACIsLinked_pr_1_1 + 1)
007be8   6f4f     movwf	0x4f, 0x1          	MOVWF	(_MACIsLinked_pr_1_1 + 1), B
                                           ;	.line	254; TCPIP_Stack/ETH97J60.c	return pr.PHSTAT1bits.LLSTAT;
007bea   6a00     clrf	0, 0                	CLRF	r0x00
007bec   010a     movlb	0xa                	BANKSEL	_MACIsLinked_pr_1_1
007bee   b54e     btfsc	0x4e, 0x2, 0x1     	BTFSC	_MACIsLinked_pr_1_1, 2, B
007bf0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007bf2   5000     movf	0, 0, 0             	MOVF	r0x00, W
007bf4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007bf6   f001
007bf8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007bfa   f000
007bfc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007bfe   ffd9
007c00   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ETH97J60__MACInit	code
                                           _MACInit:
                                           ;	.line	131; TCPIP_Stack/ETH97J60.c	void MACInit(void)
0058ce   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0058d0   ffe5
0058d2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0058d4   ffd9
                                           ;	.line	135; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA0 = 0; // Set LEDA as output (green on ethernet connector)
0058d6   9092     bcf	0x92, 0, 0           	BCF	_TRISAbits, 0
                                           ;	.line	136; TCPIP_Stack/ETH97J60.c	TRISAbits.TRISA1 = 0; // Set LEDB as output (yellow on ethernet connector)
0058d8   9292     bcf	0x92, 0x1, 0         	BCF	_TRISAbits, 1
0058da   010e     movlb	0xe                	BANKSEL	_ECON2bits
                                           ;	.line	137; TCPIP_Stack/ETH97J60.c	ECON2bits.ETHEN = 1;    // Enable Ethernet!
0058dc   8bfe     bsf	0xfe, 0x5, 0x1       	BSF	_ECON2bits, 5, B
                                           _00105_DS_:
0058de   010e     movlb	0xe                	BANKSEL	_ESTATbits
                                           ;	.line	140; TCPIP_Stack/ETH97J60.c	while(!ESTATbits.PHYRDY);
0058e0   a1fd     btfss	0xfd, 0, 0x1       	BTFSS	_ESTATbits, 0, B
0058e2   d7fd     bra	0x58de               	BRA	_00105_DS_
                                           ;	.line	144; TCPIP_Stack/ETH97J60.c	WasDiscarded = TRUE;
0058e4   0e01     movlw	0x1                	MOVLW	0x01
0058e6   010a     movlb	0xa                	BANKSEL	_WasDiscarded
0058e8   6f87     movwf	0x87, 0x1          	MOVWF	_WasDiscarded, B
0058ea   010a     movlb	0xa                	BANKSEL	_NextPacketLocation
                                           ;	.line	145; TCPIP_Stack/ETH97J60.c	NextPacketLocation.Val = RXSTART;
0058ec   6b48     clrf	0x48, 0x1           	CLRF	_NextPacketLocation, B
0058ee   010a     movlb	0xa                	BANKSEL	(_NextPacketLocation + 1)
0058f0   6b49     clrf	0x49, 0x1           	CLRF	(_NextPacketLocation + 1), B
0058f2   010e     movlb	0xe                	BANKSEL	_ERXSTL
                                           ;	.line	146; TCPIP_Stack/ETH97J60.c	ERXSTL = LOW(RXSTART);
0058f4   6be8     clrf	0xe8, 0x1           	CLRF	_ERXSTL, B
0058f6   010e     movlb	0xe                	BANKSEL	_ERXSTH
                                           ;	.line	147; TCPIP_Stack/ETH97J60.c	ERXSTH = HIGH(RXSTART);
0058f8   6be9     clrf	0xe9, 0x1           	CLRF	_ERXSTH, B
                                           ;	.line	149; TCPIP_Stack/ETH97J60.c	ERXRDPTL = LOW(RXSTOP);	// Write low byte first
0058fa   0e09     movlw	0x9                	MOVLW	0x09
0058fc   010e     movlb	0xe                	BANKSEL	_ERXRDPTL
0058fe   6fec     movwf	0xec, 0x1          	MOVWF	_ERXRDPTL, B
                                           ;	.line	150; TCPIP_Stack/ETH97J60.c	ERXRDPTH = HIGH(RXSTOP);    // Write high byte last
005900   0e1a     movlw	0x1a               	MOVLW	0x1a
005902   010e     movlb	0xe                	BANKSEL	_ERXRDPTH
005904   6fed     movwf	0xed, 0x1          	MOVWF	_ERXRDPTH, B
                                           ;	.line	152; TCPIP_Stack/ETH97J60.c	ERXNDL = LOW(RXSTOP);
005906   0e09     movlw	0x9                	MOVLW	0x09
005908   010e     movlb	0xe                	BANKSEL	_ERXNDL
00590a   6fea     movwf	0xea, 0x1          	MOVWF	_ERXNDL, B
                                           ;	.line	153; TCPIP_Stack/ETH97J60.c	ERXNDH = HIGH(RXSTOP);
00590c   0e1a     movlw	0x1a               	MOVLW	0x1a
00590e   010e     movlb	0xe                	BANKSEL	_ERXNDH
005910   6feb     movwf	0xeb, 0x1          	MOVWF	_ERXNDH, B
                                           ;	.line	155; TCPIP_Stack/ETH97J60.c	ETXSTL = LOW(TXSTART);
005912   0e0a     movlw	0xa                	MOVLW	0x0a
005914   010e     movlb	0xe                	BANKSEL	_ETXSTL
005916   6fe4     movwf	0xe4, 0x1          	MOVWF	_ETXSTL, B
                                           ;	.line	156; TCPIP_Stack/ETH97J60.c	ETXSTH = HIGH(TXSTART);
005918   0e1a     movlw	0x1a               	MOVLW	0x1a
00591a   010e     movlb	0xe                	BANKSEL	_ETXSTH
00591c   6fe5     movwf	0xe5, 0x1          	MOVWF	_ETXSTH, B
                                           ;	.line	159; TCPIP_Stack/ETH97J60.c	EWRPTL = LOW(TXSTART);
00591e   0e0a     movlw	0xa                	MOVLW	0x0a
005920   010e     movlb	0xe                	BANKSEL	_EWRPTL
005922   6fe2     movwf	0xe2, 0x1          	MOVWF	_EWRPTL, B
                                           ;	.line	160; TCPIP_Stack/ETH97J60.c	EWRPTH = HIGH(TXSTART);
005924   0e1a     movlw	0x1a               	MOVLW	0x1a
005926   010e     movlb	0xe                	BANKSEL	_EWRPTH
005928   6fe3     movwf	0xe3, 0x1          	MOVWF	_EWRPTH, B
                                           ;	.line	161; TCPIP_Stack/ETH97J60.c	EDATA = 0x00;
00592a   6a61     clrf	0x61, 0             	CLRF	_EDATA
                                           ;	.line	171; TCPIP_Stack/ETH97J60.c	MACON1 = MACON1_TXPAUS | MACON1_RXPAUS | MACON1_MARXEN; Nop();
00592c   0e0d     movlw	0xd                	MOVLW	0x0d
00592e   010e     movlb	0xe                	BANKSEL	_MACON1
005930   6fa0     movwf	0xa0, 0x1          	MOVWF	_MACON1, B
005932   0000     nop                      	nop 
                                           ;	.line	179; TCPIP_Stack/ETH97J60.c	MACON3 = MACON3_PADCFG0 | MACON3_TXCRCEN | MACON3_FRMLNEN; Nop();
005934   0e32     movlw	0x32               	MOVLW	0x32
005936   010e     movlb	0xe                	BANKSEL	_MACON3
005938   6fa2     movwf	0xa2, 0x1          	MOVWF	_MACON3, B
00593a   0000     nop                      	nop 
                                           ;	.line	180; TCPIP_Stack/ETH97J60.c	MABBIPG = 0x12; Nop();
00593c   0e12     movlw	0x12               	MOVLW	0x12
00593e   010e     movlb	0xe                	BANKSEL	_MABBIPG
005940   6fa4     movwf	0xa4, 0x1          	MOVWF	_MABBIPG, B
005942   0000     nop                      	nop 
                                           ;	.line	186; TCPIP_Stack/ETH97J60.c	MACON4 = MACON4_DEFER; Nop();
005944   0e40     movlw	0x40               	MOVLW	0x40
005946   010e     movlb	0xe                	BANKSEL	_MACON4
005948   6fa3     movwf	0xa3, 0x1          	MOVWF	_MACON4, B
00594a   0000     nop                      	nop 
                                           ;	.line	191; TCPIP_Stack/ETH97J60.c	MAIPGL = 0x12; Nop();
00594c   0e12     movlw	0x12               	MOVLW	0x12
00594e   010e     movlb	0xe                	BANKSEL	_MAIPGL
005950   6fa6     movwf	0xa6, 0x1          	MOVWF	_MAIPGL, B
005952   0000     nop                      	nop 
                                           ;	.line	192; TCPIP_Stack/ETH97J60.c	MAIPGH = 0x0C; Nop();
005954   0e0c     movlw	0xc                	MOVLW	0x0c
005956   010e     movlb	0xe                	BANKSEL	_MAIPGH
005958   6fa7     movwf	0xa7, 0x1          	MOVWF	_MAIPGH, B
00595a   0000     nop                      	nop 
                                           ;	.line	195; TCPIP_Stack/ETH97J60.c	MAMXFLL = LOW(6+6+2+1500+4); Nop();
00595c   0eee     movlw	0xee               	MOVLW	0xee
00595e   010e     movlb	0xe                	BANKSEL	_MAMXFLL
005960   6faa     movwf	0xaa, 0x1          	MOVWF	_MAMXFLL, B
005962   0000     nop                      	nop 
                                           ;	.line	196; TCPIP_Stack/ETH97J60.c	MAMXFLH = HIGH(6+6+2+1500+4); Nop();
005964   0e05     movlw	0x5                	MOVLW	0x05
005966   010e     movlb	0xe                	BANKSEL	_MAMXFLH
005968   6fab     movwf	0xab, 0x1          	MOVWF	_MAMXFLH, B
00596a   0000     nop                      	nop 
                                           ;	.line	199; TCPIP_Stack/ETH97J60.c	MAADR1 = AppConfig.MyMACAddr.v[0]; Nop();
00596c   ce2d     movff	0xe2d, 0xe84       	MOVFF	(_AppConfig + 45), _MAADR1
00596e   fe84
005970   0000     nop                      	nop 
                                           ;	.line	200; TCPIP_Stack/ETH97J60.c	MAADR2 = AppConfig.MyMACAddr.v[1]; Nop();
005972   ce2e     movff	0xe2e, 0xe85       	MOVFF	(_AppConfig + 46), _MAADR2
005974   fe85
005976   0000     nop                      	nop 
                                           ;	.line	201; TCPIP_Stack/ETH97J60.c	MAADR3 = AppConfig.MyMACAddr.v[2]; Nop();
005978   ce2f     movff	0xe2f, 0xe82       	MOVFF	(_AppConfig + 47), _MAADR3
00597a   fe82
00597c   0000     nop                      	nop 
                                           ;	.line	202; TCPIP_Stack/ETH97J60.c	MAADR4 = AppConfig.MyMACAddr.v[3]; Nop();
00597e   ce30     movff	0xe30, 0xe83       	MOVFF	(_AppConfig + 48), _MAADR4
005980   fe83
005982   0000     nop                      	nop 
                                           ;	.line	203; TCPIP_Stack/ETH97J60.c	MAADR5 = AppConfig.MyMACAddr.v[4]; Nop();
005984   ce31     movff	0xe31, 0xe80       	MOVFF	(_AppConfig + 49), _MAADR5
005986   fe80
005988   0000     nop                      	nop 
                                           ;	.line	204; TCPIP_Stack/ETH97J60.c	MAADR6 = AppConfig.MyMACAddr.v[5]; Nop();
00598a   ce32     movff	0xe32, 0xe81       	MOVFF	(_AppConfig + 50), _MAADR6
00598c   fe81
00598e   0000     nop                      	nop 
                                           ;	.line	207; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON2, PHCON2_HDLDIS | PHCON2_RXAPDIS);
005990   0e01     movlw	0x1                	MOVLW	0x01
005992   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005994   0e10     movlw	0x10               	MOVLW	0x10
005996   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005998   0e10     movlw	0x10               	MOVLW	0x10
00599a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00599c   ec02     call	0x7a04, 0           	CALL	_WritePHYReg
00599e   f03d
0059a0   0e03     movlw	0x3                	MOVLW	0x03
0059a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	210; TCPIP_Stack/ETH97J60.c	SetLEDConfig(0x3472);
0059a4   0e34     movlw	0x34               	MOVLW	0x34
0059a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059a8   0e72     movlw	0x72               	MOVLW	0x72
0059aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059ac   0e14     movlw	0x14               	MOVLW	0x14
0059ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059b0   ec02     call	0x7a04, 0           	CALL	_WritePHYReg
0059b2   f03d
0059b4   0e03     movlw	0x3                	MOVLW	0x03
0059b6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	216; TCPIP_Stack/ETH97J60.c	WritePHYReg(PHCON1, 0x0000);
0059b8   0e00     movlw	0                  	MOVLW	0x00
0059ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059bc   0e00     movlw	0                  	MOVLW	0x00
0059be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059c0   0e00     movlw	0                  	MOVLW	0x00
0059c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059c4   ec02     call	0x7a04, 0           	CALL	_WritePHYReg
0059c6   f03d
0059c8   0e03     movlw	0x3                	MOVLW	0x03
0059ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	220; TCPIP_Stack/ETH97J60.c	ECON1bits.RXEN = 1;
0059cc   84d2     bsf	0xd2, 0x2, 0         	BSF	_ECON1bits, 2
0059ce   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0059d0   ffd9
0059d2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
0059d4   7265     btg	0x65, 0x1, 0         	DB	0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e
0059d6   6f72     movwf	0x72, 0x1          
0059d8   2072     addwfc	0x72, 0, 0        
0059da   6572     cpfsgt	0x72, 0x1         
0059dc   6461     cpfsgt	0x61, 0           
0059de   6e69     movwf	0x69, 0            
0059e0   2067     addwfc	0x67, 0, 0        	DB	0x67, 0x20, 0x68, 0x64, 0x72, 0x00
0059e2   6468     cpfsgt	0x68, 0           
0059e4   0072     dw	0x72  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5346 (0x14e2) bytes ( 4.08%)
                                           ;           	 2673 (0x0a71) words
                                           ; udata size:	  141 (0x008d) bytes ( 3.67%)
                                           ; access size:	   13 (0x000d) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:16 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:16 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _GenerateRandomDWORD
                                           	global _StringToIPAddress
                                           	global _btohexa_high
                                           	global _btohexa_low
                                           	global _swaps
                                           	global _swapl
                                           	global _CalcIPChecksum
                                           	global _leftRotateDWORD
                                           	global _strnchr
                                           	global _toRotate
                                           	global _hexatob
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _rand
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           r0x1c	res	1
                                           r0x1d	res	1
                                           
                                           udata_Helpers_0	udata
                                           _GenerateRandomDWORD_wTime_1_1	res	2
                                           
                                           udata_Helpers_1	udata
                                           _StringToIPAddress_dwVal_1_1	res	4
                                           
                                           udata_Helpers_2	udata
                                           _hexatob_AsciiChars_1_1	res	2
                                           
                                           udata_Helpers_3	udata
                                           _swaps_t_1_1	res	2
                                           
                                           udata_Helpers_4	udata
                                           _swapl_v_1_1	res	4
                                           
                                           udata_Helpers_5	udata
                                           _CalcIPChecksum_count_1_1	res	2
                                           
                                           udata_Helpers_6	udata
                                           _CalcIPChecksum_sum_1_1	res	4
                                           
                                           udata_Helpers_7	udata
                                           _toRotate	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Helpers__strnchr	code
                                           _strnchr:
                                           ;	.line	1359; TCPIP_Stack/Helpers.c	char * strnchr(const char *searchString, size_t count, char c)
005f44   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005f46   ffe5
005f48   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005f4a   ffd9
005f4c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005f4e   ffe5
005f50   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005f52   ffe5
005f54   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005f56   ffe5
005f58   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005f5a   ffe5
005f5c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005f5e   ffe5
005f60   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005f62   ffe5
005f64   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005f66   ffe5
005f68   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005f6a   ffe5
005f6c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005f6e   ffe5
005f70   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
005f72   ffe5
005f74   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
005f76   ffe5
005f78   0e02     movlw	0x2                	MOVLW	0x02
005f7a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005f7c   f000
005f7e   0e03     movlw	0x3                	MOVLW	0x03
005f80   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005f82   f001
005f84   0e04     movlw	0x4                	MOVLW	0x04
005f86   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005f88   f002
005f8a   0e05     movlw	0x5                	MOVLW	0x05
005f8c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005f8e   f003
005f90   0e06     movlw	0x6                	MOVLW	0x06
005f92   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
005f94   f004
005f96   0e07     movlw	0x7                	MOVLW	0x07
005f98   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
005f9a   f005
                                           ;	.line	1363; TCPIP_Stack/Helpers.c	while(count--)
005f9c   c000     movff	0, 0x6             	MOVFF	r0x00, r0x06
005f9e   f006
005fa0   c001     movff	0x1, 0x7           	MOVFF	r0x01, r0x07
005fa2   f007
005fa4   c002     movff	0x2, 0x8           	MOVFF	r0x02, r0x08
005fa6   f008
                                           _00311_DS_:
005fa8   c003     movff	0x3, 0x9           	MOVFF	r0x03, r0x09
005faa   f009
005fac   c004     movff	0x4, 0xa           	MOVFF	r0x04, r0x0a
005fae   f00a
005fb0   0eff     movlw	0xff               	MOVLW	0xff
005fb2   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
005fb4   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
005fb6   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
005fb8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005fba   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
005fbc   e025     bz	0x6008                	BZ	_00313_DS_
                                           ;	.line	1365; TCPIP_Stack/Helpers.c	c2  = *searchString++;
005fbe   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
005fc0   ffe9
005fc2   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
005fc4   fff3
005fc6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005fc8   ec8d     call	0x7f1a, 0           	CALL	__gptrget1
005fca   f03f
005fcc   6e09     movwf	0x9, 0             	MOVWF	r0x09
005fce   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
005fd0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005fd2   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
005fd4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005fd6   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
                                           ;	.line	1366; TCPIP_Stack/Helpers.c	if(c2 == 0u)
005fd8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005fda   e104     bnz	0x5fe4               	BNZ	_00308_DS_
                                           ;	.line	1367; TCPIP_Stack/Helpers.c	return NULL;
005fdc   6af4     clrf	0xf4, 0             	CLRF	PRODH
005fde   6af3     clrf	0xf3, 0             	CLRF	PRODL
005fe0   6ae8     clrf	0xe8, 0             	CLRF	WREG
005fe2   d015     bra	0x600e               	BRA	_00314_DS_
                                           _00308_DS_:
                                           ;	.line	1368; TCPIP_Stack/Helpers.c	if(c2 == c)
005fe4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
005fe6   1805     xorwf	0x5, 0, 0          	XORWF	r0x05, W
005fe8   e1df     bnz	0x5fa8               	BNZ	_00311_DS_
                                           ;	.line	1369; TCPIP_Stack/Helpers.c	return (char*)--searchString;
005fea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005fec   0fff     addlw	0xff               	ADDLW	0xff
005fee   6e00     movwf	0, 0               	MOVWF	r0x00
005ff0   0eff     movlw	0xff               	MOVLW	0xff
005ff2   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
005ff4   6e01     movwf	0x1, 0             	MOVWF	r0x01
005ff6   0eff     movlw	0xff               	MOVLW	0xff
005ff8   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
005ffa   6e02     movwf	0x2, 0             	MOVWF	r0x02
005ffc   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
005ffe   fff4
006000   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006002   fff3
006004   5000     movf	0, 0, 0             	MOVF	r0x00, W
006006   d003     bra	0x600e               	BRA	_00314_DS_
                                           _00313_DS_:
                                           ;	.line	1371; TCPIP_Stack/Helpers.c	return NULL;
006008   6af4     clrf	0xf4, 0             	CLRF	PRODH
00600a   6af3     clrf	0xf3, 0             	CLRF	PRODL
00600c   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00314_DS_:
00600e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
006010   f00a
006012   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
006014   f009
006016   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006018   f008
00601a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00601c   f007
00601e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006020   f006
006022   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006024   f005
006026   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006028   f004
00602a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00602c   f003
00602e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006030   f002
006032   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006034   f001
006036   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006038   f000
00603a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00603c   ffd9
00603e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__leftRotateDWORD	code
                                           _leftRotateDWORD:
                                           ;	.line	1235; TCPIP_Stack/Helpers.c	DWORD leftRotateDWORD(DWORD val, BYTE bits)
0063dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0063de   ffe5
0063e0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0063e2   ffd9
0063e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0063e6   ffe5
0063e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0063ea   ffe5
0063ec   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0063ee   ffe5
0063f0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0063f2   ffe5
0063f4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0063f6   ffe5
0063f8   0e02     movlw	0x2                	MOVLW	0x02
0063fa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0063fc   f000
0063fe   0e03     movlw	0x3                	MOVLW	0x03
006400   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006402   f001
006404   0e04     movlw	0x4                	MOVLW	0x04
006406   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006408   f002
00640a   0e05     movlw	0x5                	MOVLW	0x05
00640c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00640e   f003
006410   0e06     movlw	0x6                	MOVLW	0x06
006412   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006414   f004
                                           ;	.line	1239; TCPIP_Stack/Helpers.c	toRotate.Val = val;
006416   5000     movf	0, 0, 0             	MOVF	r0x00, W
006418   010a     movlb	0xa                	BANKSEL	_toRotate
00641a   6f18     movwf	0x18, 0x1          	MOVWF	_toRotate, B
00641c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00641e   010a     movlb	0xa                	BANKSEL	(_toRotate + 1)
006420   6f19     movwf	0x19, 0x1          	MOVWF	(_toRotate + 1), B
006422   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006424   010a     movlb	0xa                	BANKSEL	(_toRotate + 2)
006426   6f1a     movwf	0x1a, 0x1          	MOVWF	(_toRotate + 2), B
006428   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00642a   010a     movlb	0xa                	BANKSEL	(_toRotate + 3)
00642c   6f1b     movwf	0x1b, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
00642e   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
006430   f000
                                           _00284_DS_:
006432   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
006434   f001
006436   6a02     clrf	0x2, 0              	CLRF	r0x02
006438   0e00     movlw	0                  	MOVLW	0x00
00643a   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00643c   e102     bnz	0x6442               	BNZ	_00300_DS_
00643e   0e08     movlw	0x8                	MOVLW	0x08
006440   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00300_DS_:
006442   e317     bnc	0x6472               	BNC	_00288_DS_
                                           ;	.line	1243; TCPIP_Stack/Helpers.c	t = toRotate.v[3];
006444   ca1b     movff	0xa1b, 0x1         	MOVFF	(_toRotate + 3), r0x01
006446   f001
                                           ;	.line	1244; TCPIP_Stack/Helpers.c	toRotate.v[3] = toRotate.v[2];
006448   ca1a     movff	0xa1a, 0x2         	MOVFF	(_toRotate + 2), r0x02
00644a   f002
00644c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00644e   010a     movlb	0xa                	BANKSEL	(_toRotate + 3)
006450   6f1b     movwf	0x1b, 0x1          	MOVWF	(_toRotate + 3), B
                                           ;	.line	1245; TCPIP_Stack/Helpers.c	toRotate.v[2] = toRotate.v[1];
006452   ca19     movff	0xa19, 0x2         	MOVFF	(_toRotate + 1), r0x02
006454   f002
006456   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006458   010a     movlb	0xa                	BANKSEL	(_toRotate + 2)
00645a   6f1a     movwf	0x1a, 0x1          	MOVWF	(_toRotate + 2), B
                                           ;	.line	1246; TCPIP_Stack/Helpers.c	toRotate.v[1] = toRotate.v[0];
00645c   ca18     movff	0xa18, 0x2         	MOVFF	_toRotate, r0x02
00645e   f002
006460   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006462   010a     movlb	0xa                	BANKSEL	(_toRotate + 1)
006464   6f19     movwf	0x19, 0x1          	MOVWF	(_toRotate + 1), B
                                           ;	.line	1247; TCPIP_Stack/Helpers.c	toRotate.v[0] = t;
006466   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006468   010a     movlb	0xa                	BANKSEL	_toRotate
00646a   6f18     movwf	0x18, 0x1          	MOVWF	_toRotate, B
                                           ;	.line	1241; TCPIP_Stack/Helpers.c	for(i = bits; i >= 8u; i -= 8)
00646c   0ef8     movlw	0xf8               	MOVLW	0xf8
00646e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006470   d7e0     bra	0x6432               	BRA	_00284_DS_
                                           _00288_DS_:
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
006472   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
006474   f001
006476   6a02     clrf	0x2, 0              	CLRF	r0x02
006478   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00647a   e102     bnz	0x6480               	BNZ	_00302_DS_
00647c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00647e   e00a     bz	0x6494                	BZ	_00291_DS_
                                           _00301_DS_:
                                           _00302_DS_:
006480   010a     movlb	0xa                	movlb _toRotate
006482   90d8     bcf	0xd8, 0, 0           	bcf STATUS,0,0
006484   bf1b     btfsc	0x1b, 0x7, 0x1     	btfsc _toRotate+3,7,1
006486   80d8     bsf	0xd8, 0, 0           	bsf STATUS,0,0
006488   3718     rlcf	0x18, 0x1, 0x1      	rlcf _toRotate+0,1,1
00648a   3719     rlcf	0x19, 0x1, 0x1      	rlcf _toRotate+1,1,1
00648c   371a     rlcf	0x1a, 0x1, 0x1      	rlcf _toRotate+2,1,1
00648e   371b     rlcf	0x1b, 0x1, 0x1      	rlcf _toRotate+3,1,1
                                           	
                                           ;	.line	1266; TCPIP_Stack/Helpers.c	for(; i != 0u; i--)
006490   0600     decf	0, 0x1, 0           	DECF	r0x00, F
006492   d7ef     bra	0x6472               	BRA	_00288_DS_
                                           _00291_DS_:
                                           ;	.line	1281; TCPIP_Stack/Helpers.c	return toRotate.Val;
006494   ca1b     movff	0xa1b, 0xfe9       	MOVFF	(_toRotate + 3), FSR0L
006496   ffe9
006498   ca1a     movff	0xa1a, 0xff4       	MOVFF	(_toRotate + 2), PRODH
00649a   fff4
00649c   ca19     movff	0xa19, 0xff3       	MOVFF	(_toRotate + 1), PRODL
00649e   fff3
0064a0   010a     movlb	0xa                	BANKSEL	_toRotate
0064a2   5118     movf	0x18, 0, 0x1        	MOVF	_toRotate, W, B
0064a4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0064a6   f004
0064a8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0064aa   f003
0064ac   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0064ae   f002
0064b0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0064b2   f001
0064b4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0064b6   f000
0064b8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0064ba   ffd9
0064bc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__CalcIPChecksum	code
                                           _CalcIPChecksum:
                                           ;	.line	1062; TCPIP_Stack/Helpers.c	WORD CalcIPChecksum(BYTE* buffer, WORD count)
001ef8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001efa   ffe5
001efc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001efe   ffd9
001f00   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001f02   ffe5
001f04   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001f06   ffe5
001f08   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001f0a   ffe5
001f0c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001f0e   ffe5
001f10   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001f12   ffe5
001f14   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001f16   ffe5
001f18   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001f1a   ffe5
001f1c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001f1e   ffe5
001f20   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001f22   ffe5
001f24   0e02     movlw	0x2                	MOVLW	0x02
001f26   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001f28   f000
001f2a   0e03     movlw	0x3                	MOVLW	0x03
001f2c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001f2e   f001
001f30   0e04     movlw	0x4                	MOVLW	0x04
001f32   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001f34   f002
001f36   0e05     movlw	0x5                	MOVLW	0x05
001f38   cfdb     movff	0xfdb, 0xa6c       	MOVFF	PLUSW2, _CalcIPChecksum_count_1_1
001f3a   fa6c
001f3c   0e06     movlw	0x6                	MOVLW	0x06
001f3e   cfdb     movff	0xfdb, 0xa6d       	MOVFF	PLUSW2, (_CalcIPChecksum_count_1_1 + 1)
001f40   fa6d
001f42   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1066; TCPIP_Stack/Helpers.c	DWORD_VAL sum = {0x00000000ul};
001f44   6b14     clrf	0x14, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f46   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f48   6b15     clrf	0x15, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f4a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f4c   6b16     clrf	0x16, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f4e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f50   6b17     clrf	0x17, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f52   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f54   6b14     clrf	0x14, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f56   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f58   6b15     clrf	0x15, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f5a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f5c   6b16     clrf	0x16, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f5e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f60   6b17     clrf	0x17, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f62   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f64   6b14     clrf	0x14, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f66   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f68   6b15     clrf	0x15, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f6a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f6c   6b16     clrf	0x16, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f6e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f70   6b17     clrf	0x17, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f72   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f74   6b14     clrf	0x14, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f76   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f78   6b15     clrf	0x15, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f7a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f7c   6b16     clrf	0x16, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f7e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f80   6b17     clrf	0x17, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f82   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f84   6b14     clrf	0x14, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f86   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f88   6b15     clrf	0x15, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f8a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001f8c   6b16     clrf	0x16, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001f8e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001f90   6b17     clrf	0x17, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001f92   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f94   6b14     clrf	0x14, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f96   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001f98   6b15     clrf	0x15, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001f9a   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001f9c   6b14     clrf	0x14, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001f9e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fa0   6b15     clrf	0x15, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001fa2   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fa4   6b14     clrf	0x14, 0x1           	CLRF	_CalcIPChecksum_sum_1_1, B
001fa6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fa8   6b15     clrf	0x15, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 1), B
001faa   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fac   9114     bcf	0x14, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
001fae   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fb0   9314     bcf	0x14, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
001fb2   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fb4   9514     bcf	0x14, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
001fb6   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fb8   9714     bcf	0x14, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
001fba   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fbc   9914     bcf	0x14, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
001fbe   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fc0   9b14     bcf	0x14, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
001fc2   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fc4   9d14     bcf	0x14, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
001fc6   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
001fc8   9f14     bcf	0x14, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
001fca   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fcc   9115     bcf	0x15, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
001fce   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fd0   9315     bcf	0x15, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
001fd2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fd4   9515     bcf	0x15, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
001fd6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fd8   9715     bcf	0x15, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
001fda   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fdc   9915     bcf	0x15, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
001fde   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fe0   9b15     bcf	0x15, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
001fe2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fe4   9d15     bcf	0x15, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
001fe6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
001fe8   9f15     bcf	0x15, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
001fea   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001fec   6b16     clrf	0x16, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001fee   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001ff0   6b17     clrf	0x17, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001ff2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001ff4   6b16     clrf	0x16, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001ff6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
001ff8   6b17     clrf	0x17, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
001ffa   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
001ffc   6b16     clrf	0x16, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 2), B
001ffe   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002000   6b17     clrf	0x17, 0x1           	CLRF	(_CalcIPChecksum_sum_1_1 + 3), B
002002   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002004   9116     bcf	0x16, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
002006   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002008   9316     bcf	0x16, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
00200a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00200c   9516     bcf	0x16, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
00200e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002010   9716     bcf	0x16, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
002012   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002014   9916     bcf	0x16, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
002016   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002018   9b16     bcf	0x16, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
00201a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00201c   9d16     bcf	0x16, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
00201e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002020   9f16     bcf	0x16, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
002022   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002024   9117     bcf	0x17, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
002026   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002028   9317     bcf	0x17, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
00202a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00202c   9517     bcf	0x17, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
00202e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002030   9717     bcf	0x17, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
002032   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002034   9917     bcf	0x17, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
002036   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002038   9b17     bcf	0x17, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
00203a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00203c   9d17     bcf	0x17, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
00203e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002040   9f17     bcf	0x17, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
002042   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002044   9114     bcf	0x14, 0, 0x1         	BCF	_CalcIPChecksum_sum_1_1, 0, B
002046   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002048   9314     bcf	0x14, 0x1, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 1, B
00204a   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
00204c   9514     bcf	0x14, 0x2, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 2, B
00204e   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002050   9714     bcf	0x14, 0x3, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 3, B
002052   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002054   9914     bcf	0x14, 0x4, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 4, B
002056   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002058   9b14     bcf	0x14, 0x5, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 5, B
00205a   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
00205c   9d14     bcf	0x14, 0x6, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 6, B
00205e   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002060   9f14     bcf	0x14, 0x7, 0x1       	BCF	_CalcIPChecksum_sum_1_1, 7, B
002062   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002064   9115     bcf	0x15, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 1), 0, B
002066   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002068   9315     bcf	0x15, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 1, B
00206a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00206c   9515     bcf	0x15, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 2, B
00206e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002070   9715     bcf	0x15, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 3, B
002072   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002074   9915     bcf	0x15, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 4, B
002076   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002078   9b15     bcf	0x15, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 5, B
00207a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00207c   9d15     bcf	0x15, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 6, B
00207e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002080   9f15     bcf	0x15, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 1), 7, B
002082   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002084   9116     bcf	0x16, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 2), 0, B
002086   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002088   9316     bcf	0x16, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 1, B
00208a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00208c   9516     bcf	0x16, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 2, B
00208e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002090   9716     bcf	0x16, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 3, B
002092   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002094   9916     bcf	0x16, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 4, B
002096   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002098   9b16     bcf	0x16, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 5, B
00209a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
00209c   9d16     bcf	0x16, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 6, B
00209e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0020a0   9f16     bcf	0x16, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 2), 7, B
0020a2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020a4   9117     bcf	0x17, 0, 0x1         	BCF	(_CalcIPChecksum_sum_1_1 + 3), 0, B
0020a6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020a8   9317     bcf	0x17, 0x1, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 1, B
0020aa   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020ac   9517     bcf	0x17, 0x2, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 2, B
0020ae   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020b0   9717     bcf	0x17, 0x3, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 3, B
0020b2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020b4   9917     bcf	0x17, 0x4, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 4, B
0020b6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020b8   9b17     bcf	0x17, 0x5, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 5, B
0020ba   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020bc   9d17     bcf	0x17, 0x6, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 6, B
0020be   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0020c0   9f17     bcf	0x17, 0x7, 0x1       	BCF	(_CalcIPChecksum_sum_1_1 + 3), 7, B
                                           ;	.line	1068; TCPIP_Stack/Helpers.c	i = count >> 1;
0020c2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0020c4   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_count_1_1 + 1)
0020c6   316d     rrcf	0x6d, 0, 0x1        	RRCF	(_CalcIPChecksum_count_1_1 + 1), W, B
0020c8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0020ca   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_count_1_1
0020cc   316c     rrcf	0x6c, 0, 0x1        	RRCF	_CalcIPChecksum_count_1_1, W, B
0020ce   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           _00274_DS_:
                                           ;	.line	1072; TCPIP_Stack/Helpers.c	while(i--)
0020d0   c003     movff	0x3, 0x5           	MOVFF	r0x03, r0x05
0020d2   f005
0020d4   c004     movff	0x4, 0x6           	MOVFF	r0x04, r0x06
0020d6   f006
0020d8   0eff     movlw	0xff               	MOVLW	0xff
0020da   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0020dc   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0020de   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0020e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0020e2   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
0020e4   e02b     bz	0x213c                	BZ	_00276_DS_
                                           ;	.line	1073; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*val++;
0020e6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0020e8   ffe9
0020ea   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0020ec   fff3
0020ee   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0020f0   ecee     call	0x7ddc, 0           	CALL	__gptrget2
0020f2   f03e
0020f4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0020f6   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0020f8   f006
0020fa   0e02     movlw	0x2                	MOVLW	0x02
0020fc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0020fe   0e00     movlw	0                  	MOVLW	0x00
002100   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002102   0e00     movlw	0                  	MOVLW	0x00
002104   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002106   6a07     clrf	0x7, 0              	CLRF	r0x07
002108   6a08     clrf	0x8, 0              	CLRF	r0x08
00210a   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
00210c   5114     movf	0x14, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
00210e   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
002110   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002112   5115     movf	0x15, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
002114   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002116   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002118   5116     movf	0x16, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
00211a   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
00211c   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00211e   5117     movf	0x17, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
002120   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
002122   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002124   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002126   6f14     movwf	0x14, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
002128   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00212a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00212c   6f15     movwf	0x15, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
00212e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002130   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002132   6f16     movwf	0x16, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
002134   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002136   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002138   6f17     movwf	0x17, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
00213a   d7ca     bra	0x20d0               	BRA	_00274_DS_
                                           _00276_DS_:
00213c   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_count_1_1
                                           ;	.line	1076; TCPIP_Stack/Helpers.c	if(((WORD_VAL*)&count)->bits.b0)
00213e   a16c     btfss	0x6c, 0, 0x1       	BTFSS	_CalcIPChecksum_count_1_1, 0, B
002140   d023     bra	0x2188               	BRA	_00278_DS_
                                           ;	.line	1077; TCPIP_Stack/Helpers.c	sum.Val += (DWORD)*(BYTE*)val;
002142   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002144   ffe9
002146   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002148   fff3
00214a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00214c   ec8d     call	0x7f1a, 0           	CALL	__gptrget1
00214e   f03f
002150   6e00     movwf	0, 0               	MOVWF	r0x00
002152   6a01     clrf	0x1, 0              	CLRF	r0x01
002154   6a02     clrf	0x2, 0              	CLRF	r0x02
002156   6a03     clrf	0x3, 0              	CLRF	r0x03
002158   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
00215a   5114     movf	0x14, 0, 0x1        	MOVF	_CalcIPChecksum_sum_1_1, W, B
00215c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00215e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
002160   5115     movf	0x15, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 1), W, B
002162   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002164   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002166   5116     movf	0x16, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
002168   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00216a   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
00216c   5117     movf	0x17, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
00216e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002170   5000     movf	0, 0, 0             	MOVF	r0x00, W
002172   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
002174   6f14     movwf	0x14, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
002176   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002178   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
00217a   6f15     movwf	0x15, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
00217c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00217e   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
002180   6f16     movwf	0x16, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
002182   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002184   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
002186   6f17     movwf	0x17, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
                                           _00278_DS_:
                                           ;	.line	1080; TCPIP_Stack/Helpers.c	sum.Val = (DWORD)sum.w[0] + (DWORD)sum.w[1];
002188   ca14     movff	0xa14, 0           	MOVFF	_CalcIPChecksum_sum_1_1, r0x00
00218a   f000
00218c   ca15     movff	0xa15, 0x1         	MOVFF	(_CalcIPChecksum_sum_1_1 + 1), r0x01
00218e   f001
002190   6a02     clrf	0x2, 0              	CLRF	r0x02
002192   6a03     clrf	0x3, 0              	CLRF	r0x03
002194   ca16     movff	0xa16, 0x4         	MOVFF	(_CalcIPChecksum_sum_1_1 + 2), r0x04
002196   f004
002198   ca17     movff	0xa17, 0x5         	MOVFF	(_CalcIPChecksum_sum_1_1 + 3), r0x05
00219a   f005
00219c   6a06     clrf	0x6, 0              	CLRF	r0x06
00219e   6a07     clrf	0x7, 0              	CLRF	r0x07
0021a0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0021a2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0021a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0021a6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0021a8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0021aa   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0021ac   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0021ae   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
0021b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021b2   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
0021b4   6f14     movwf	0x14, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
0021b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021b8   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021ba   6f15     movwf	0x15, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
0021bc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0021be   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
0021c0   6f16     movwf	0x16, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 2), B
0021c2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0021c4   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0021c6   6f17     movwf	0x17, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 3), B
0021c8   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 2)
                                           ;	.line	1084; TCPIP_Stack/Helpers.c	sum.w[0] += sum.w[1];
0021ca   5116     movf	0x16, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 2), W, B
0021cc   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
0021ce   2514     addwf	0x14, 0, 0x1       	ADDWF	_CalcIPChecksum_sum_1_1, W, B
0021d0   6e00     movwf	0, 0               	MOVWF	r0x00
0021d2   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 3)
0021d4   5117     movf	0x17, 0, 0x1        	MOVF	(_CalcIPChecksum_sum_1_1 + 3), W, B
0021d6   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021d8   2115     addwfc	0x15, 0, 0x1      	ADDWFC	(_CalcIPChecksum_sum_1_1 + 1), W, B
0021da   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021de   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
0021e0   6f14     movwf	0x14, 0x1          	MOVWF	_CalcIPChecksum_sum_1_1, B
0021e2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0021e4   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021e6   6f15     movwf	0x15, 0x1          	MOVWF	(_CalcIPChecksum_sum_1_1 + 1), B
0021e8   010a     movlb	0xa                	BANKSEL	_CalcIPChecksum_sum_1_1
                                           ;	.line	1087; TCPIP_Stack/Helpers.c	return ~sum.w[0];
0021ea   1d14     comf	0x14, 0, 0x1        	COMF	_CalcIPChecksum_sum_1_1, W, B
0021ec   6e00     movwf	0, 0               	MOVWF	r0x00
0021ee   010a     movlb	0xa                	BANKSEL	(_CalcIPChecksum_sum_1_1 + 1)
0021f0   1d15     comf	0x15, 0, 0x1        	COMF	(_CalcIPChecksum_sum_1_1 + 1), W, B
0021f2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0021f4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0021f6   fff3
0021f8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0021fa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0021fc   f008
0021fe   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002200   f007
002202   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002204   f006
002206   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002208   f005
00220a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00220c   f004
00220e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002210   f003
002212   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002214   f002
002216   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002218   f001
00221a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00221c   f000
00221e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002220   ffd9
002222   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swapl	code
                                           _swapl:
                                           ;	.line	1020; TCPIP_Stack/Helpers.c	DWORD swapl(DWORD v)
006a26   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006a28   ffe5
006a2a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006a2c   ffd9
006a2e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006a30   ffe5
006a32   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006a34   ffe5
006a36   0e02     movlw	0x2                	MOVLW	0x02
006a38   cfdb     movff	0xfdb, 0xa10       	MOVFF	PLUSW2, _swapl_v_1_1
006a3a   fa10
006a3c   0e03     movlw	0x3                	MOVLW	0x03
006a3e   cfdb     movff	0xfdb, 0xa11       	MOVFF	PLUSW2, (_swapl_v_1_1 + 1)
006a40   fa11
006a42   0e04     movlw	0x4                	MOVLW	0x04
006a44   cfdb     movff	0xfdb, 0xa12       	MOVFF	PLUSW2, (_swapl_v_1_1 + 2)
006a46   fa12
006a48   0e05     movlw	0x5                	MOVLW	0x05
006a4a   cfdb     movff	0xfdb, 0xa13       	MOVFF	PLUSW2, (_swapl_v_1_1 + 3)
006a4c   fa13
                                           ;	.line	1023; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
006a4e   ca13     movff	0xa13, 0           	MOVFF	(_swapl_v_1_1 + 3), r0x00
006a50   f000
006a52   5000     movf	0, 0, 0             	MOVF	r0x00, W
006a54   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006a56   1910     xorwf	0x10, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
006a58   6e01     movwf	0x1, 0             	MOVWF	r0x01
006a5a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006a5c   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006a5e   6f10     movwf	0x10, 0x1          	MOVWF	_swapl_v_1_1, B
006a60   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
                                           ;	.line	1024; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[3] ^= ((DWORD_VAL*)&v)->v[0];
006a62   5110     movf	0x10, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
006a64   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
006a66   5000     movf	0, 0, 0             	MOVF	r0x00, W
006a68   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 3)
006a6a   6f13     movwf	0x13, 0x1          	MOVWF	(_swapl_v_1_1 + 3), B
006a6c   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 3)
                                           ;	.line	1025; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[0] ^= ((DWORD_VAL*)&v)->v[3];
006a6e   5113     movf	0x13, 0, 0x1        	MOVF	(_swapl_v_1_1 + 3), W, B
006a70   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006a72   1910     xorwf	0x10, 0, 0x1       	XORWF	_swapl_v_1_1, W, B
006a74   6e00     movwf	0, 0               	MOVWF	r0x00
006a76   5000     movf	0, 0, 0             	MOVF	r0x00, W
006a78   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006a7a   6f10     movwf	0x10, 0x1          	MOVWF	_swapl_v_1_1, B
                                           ;	.line	1028; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
006a7c   ca12     movff	0xa12, 0           	MOVFF	(_swapl_v_1_1 + 2), r0x00
006a7e   f000
006a80   5000     movf	0, 0, 0             	MOVF	r0x00, W
006a82   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
006a84   1911     xorwf	0x11, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
006a86   6e01     movwf	0x1, 0             	MOVWF	r0x01
006a88   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006a8a   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
006a8c   6f11     movwf	0x11, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
006a8e   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
                                           ;	.line	1029; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[2] ^= ((DWORD_VAL*)&v)->v[1];
006a90   5111     movf	0x11, 0, 0x1        	MOVF	(_swapl_v_1_1 + 1), W, B
006a92   1a00     xorwf	0, 0x1, 0          	XORWF	r0x00, F
006a94   5000     movf	0, 0, 0             	MOVF	r0x00, W
006a96   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 2)
006a98   6f12     movwf	0x12, 0x1          	MOVWF	(_swapl_v_1_1 + 2), B
006a9a   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 2)
                                           ;	.line	1030; TCPIP_Stack/Helpers.c	((DWORD_VAL*)&v)->v[1] ^= ((DWORD_VAL*)&v)->v[2];
006a9c   5112     movf	0x12, 0, 0x1        	MOVF	(_swapl_v_1_1 + 2), W, B
006a9e   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
006aa0   1911     xorwf	0x11, 0, 0x1       	XORWF	(_swapl_v_1_1 + 1), W, B
006aa2   6e00     movwf	0, 0               	MOVWF	r0x00
006aa4   5000     movf	0, 0, 0             	MOVF	r0x00, W
006aa6   010a     movlb	0xa                	BANKSEL	(_swapl_v_1_1 + 1)
006aa8   6f11     movwf	0x11, 0x1          	MOVWF	(_swapl_v_1_1 + 1), B
                                           ;	.line	1032; TCPIP_Stack/Helpers.c	return v;
006aaa   ca13     movff	0xa13, 0xfe9       	MOVFF	(_swapl_v_1_1 + 3), FSR0L
006aac   ffe9
006aae   ca12     movff	0xa12, 0xff4       	MOVFF	(_swapl_v_1_1 + 2), PRODH
006ab0   fff4
006ab2   ca11     movff	0xa11, 0xff3       	MOVFF	(_swapl_v_1_1 + 1), PRODL
006ab4   fff3
006ab6   010a     movlb	0xa                	BANKSEL	_swapl_v_1_1
006ab8   5110     movf	0x10, 0, 0x1        	MOVF	_swapl_v_1_1, W, B
006aba   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006abc   f001
006abe   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006ac0   f000
006ac2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006ac4   ffd9
006ac6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__swaps	code
                                           _swaps:
                                           ;	.line	991; TCPIP_Stack/Helpers.c	WORD swaps(WORD v)
00790e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007910   ffe5
007912   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007914   ffd9
007916   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007918   ffe5
00791a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00791c   ffe5
00791e   0e02     movlw	0x2                	MOVLW	0x02
007920   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007922   f000
007924   0e03     movlw	0x3                	MOVLW	0x03
007926   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007928   f001
                                           ;	.line	996; TCPIP_Stack/Helpers.c	t.Val   = v;
00792a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00792c   010a     movlb	0xa                	BANKSEL	_swaps_t_1_1
00792e   6f6a     movwf	0x6a, 0x1          	MOVWF	_swaps_t_1_1, B
007930   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007932   010a     movlb	0xa                	BANKSEL	(_swaps_t_1_1 + 1)
007934   6f6b     movwf	0x6b, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	997; TCPIP_Stack/Helpers.c	b       = t.v[1];
007936   ca6b     movff	0xa6b, 0           	MOVFF	(_swaps_t_1_1 + 1), r0x00
007938   f000
                                           ;	.line	998; TCPIP_Stack/Helpers.c	t.v[1]  = t.v[0];
00793a   ca6a     movff	0xa6a, 0x1         	MOVFF	_swaps_t_1_1, r0x01
00793c   f001
00793e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007940   010a     movlb	0xa                	BANKSEL	(_swaps_t_1_1 + 1)
007942   6f6b     movwf	0x6b, 0x1          	MOVWF	(_swaps_t_1_1 + 1), B
                                           ;	.line	999; TCPIP_Stack/Helpers.c	t.v[0]  = b;
007944   5000     movf	0, 0, 0             	MOVF	r0x00, W
007946   010a     movlb	0xa                	BANKSEL	_swaps_t_1_1
007948   6f6a     movwf	0x6a, 0x1          	MOVWF	_swaps_t_1_1, B
                                           ;	.line	1001; TCPIP_Stack/Helpers.c	return t.Val;
00794a   ca6b     movff	0xa6b, 0xff3       	MOVFF	(_swaps_t_1_1 + 1), PRODL
00794c   fff3
00794e   010a     movlb	0xa                	BANKSEL	_swaps_t_1_1
007950   516a     movf	0x6a, 0, 0x1        	MOVF	_swaps_t_1_1, W, B
007952   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007954   f001
007956   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007958   f000
00795a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00795c   ffd9
00795e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_low	code
                                           _btohexa_low:
                                           ;	.line	904; TCPIP_Stack/Helpers.c	BYTE btohexa_low(BYTE b)
007960   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007962   ffe5
007964   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007966   ffd9
007968   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00796a   ffe5
00796c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00796e   ffe5
007970   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007972   ffe5
007974   0e02     movlw	0x2                	MOVLW	0x02
007976   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007978   f000
                                           ;	.line	906; TCPIP_Stack/Helpers.c	b &= 0x0F;
00797a   0e0f     movlw	0xf                	MOVLW	0x0f
00797c   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
                                           ;	.line	907; TCPIP_Stack/Helpers.c	return (b>9u) ? b+'A'-10:b+'0';
00797e   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
007980   f001
007982   6a02     clrf	0x2, 0              	CLRF	r0x02
007984   0e00     movlw	0                  	MOVLW	0x00
007986   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
007988   e102     bnz	0x798e               	BNZ	_00259_DS_
00798a   0e0a     movlw	0xa                	MOVLW	0x0a
00798c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00259_DS_:
00798e   e304     bnc	0x7998               	BNC	_00255_DS_
007990   0e37     movlw	0x37               	MOVLW	0x37
007992   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
007994   6e01     movwf	0x1, 0             	MOVWF	r0x01
007996   d003     bra	0x799e               	BRA	_00256_DS_
                                           _00255_DS_:
007998   0e30     movlw	0x30               	MOVLW	0x30
00799a   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00799c   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00256_DS_:
00799e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0079a0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0079a2   f002
0079a4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0079a6   f001
0079a8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0079aa   f000
0079ac   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0079ae   ffd9
0079b0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__btohexa_high	code
                                           _btohexa_high:
                                           ;	.line	878; TCPIP_Stack/Helpers.c	BYTE btohexa_high(BYTE b)
0078ba   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0078bc   ffe5
0078be   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0078c0   ffd9
0078c2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0078c4   ffe5
0078c6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0078c8   ffe5
0078ca   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0078cc   ffe5
0078ce   0e02     movlw	0x2                	MOVLW	0x02
0078d0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0078d2   f000
                                           ;	.line	880; TCPIP_Stack/Helpers.c	b >>= 4;
0078d4   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
0078d6   0b0f     andlw	0xf                	ANDLW	0x0f
0078d8   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	881; TCPIP_Stack/Helpers.c	return (b>0x9u) ? b+'A'-10:b+'0';
0078da   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0078dc   f001
0078de   6a02     clrf	0x2, 0              	CLRF	r0x02
0078e0   0e00     movlw	0                  	MOVLW	0x00
0078e2   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0078e4   e102     bnz	0x78ea               	BNZ	_00248_DS_
0078e6   0e0a     movlw	0xa                	MOVLW	0x0a
0078e8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00248_DS_:
0078ea   e304     bnc	0x78f4               	BNC	_00245_DS_
0078ec   0e37     movlw	0x37               	MOVLW	0x37
0078ee   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0078f0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0078f2   d003     bra	0x78fa               	BRA	_00246_DS_
                                           _00245_DS_:
0078f4   0e30     movlw	0x30               	MOVLW	0x30
0078f6   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0078f8   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           _00246_DS_:
0078fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0078fc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0078fe   f002
007900   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007902   f001
007904   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007906   f000
007908   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00790a   ffd9
00790c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__hexatob	code
                                           _hexatob:
                                           ;	.line	829; TCPIP_Stack/Helpers.c	BYTE hexatob(WORD AsciiCharsarg)
005c14   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005c16   ffe5
005c18   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005c1a   ffd9
005c1c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005c1e   ffe5
005c20   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005c22   ffe5
005c24   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005c26   ffe5
005c28   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005c2a   ffe5
005c2c   0e02     movlw	0x2                	MOVLW	0x02
005c2e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005c30   f000
005c32   0e03     movlw	0x3                	MOVLW	0x03
005c34   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005c36   f001
                                           ;	.line	832; TCPIP_Stack/Helpers.c	AsciiChars.v[0] = (BYTE)AsciiCharsarg&0xFF; //ML
005c38   5000     movf	0, 0, 0             	MOVF	r0x00, W
005c3a   6e02     movwf	0x2, 0             	MOVWF	r0x02
005c3c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c3e   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005c40   6f68     movwf	0x68, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           ;	.line	833; TCPIP_Stack/Helpers.c	AsciiChars.v[1] = (BYTE)(AsciiCharsarg>>8)&0xFF; //ML
005c42   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005c44   6e00     movwf	0, 0               	MOVWF	r0x00
005c46   6a01     clrf	0x1, 0              	CLRF	r0x01
005c48   5000     movf	0, 0, 0             	MOVF	r0x00, W
005c4a   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005c4c   6f69     movwf	0x69, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           ;	.line	836; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'F')
005c4e   ca69     movff	0xa69, 0x1         	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x01
005c50   f001
005c52   6a02     clrf	0x2, 0              	CLRF	r0x02
005c54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c56   0f80     addlw	0x80               	ADDLW	0x80
005c58   0f80     addlw	0x80               	ADDLW	0x80
005c5a   e102     bnz	0x5c60               	BNZ	_00235_DS_
005c5c   0e47     movlw	0x47               	MOVLW	0x47
005c5e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00235_DS_:
005c60   e305     bnc	0x5c6c               	BNC	_00220_DS_
                                           ;	.line	837; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'a'-(int)'A';
005c62   0ee0     movlw	0xe0               	MOVLW	0xe0
005c64   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
005c66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005c68   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005c6a   6f69     movwf	0x69, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00220_DS_:
                                           ;	.line	838; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'F')
005c6c   ca68     movff	0xa68, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
005c6e   f000
005c70   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005c72   f001
005c74   6a02     clrf	0x2, 0              	CLRF	r0x02
005c76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c78   0f80     addlw	0x80               	ADDLW	0x80
005c7a   0f80     addlw	0x80               	ADDLW	0x80
005c7c   e102     bnz	0x5c82               	BNZ	_00236_DS_
005c7e   0e47     movlw	0x47               	MOVLW	0x47
005c80   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00236_DS_:
005c82   e305     bnc	0x5c8e               	BNC	_00222_DS_
                                           ;	.line	839; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'a'-(int)'A';
005c84   0ee0     movlw	0xe0               	MOVLW	0xe0
005c86   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005c88   5000     movf	0, 0, 0             	MOVF	r0x00, W
005c8a   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005c8c   6f68     movwf	0x68, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00222_DS_:
                                           ;	.line	842; TCPIP_Stack/Helpers.c	if(AsciiChars.v[1] > (int)'9')
005c8e   ca69     movff	0xa69, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
005c90   f000
005c92   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005c94   f001
005c96   6a02     clrf	0x2, 0              	CLRF	r0x02
005c98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c9a   0f80     addlw	0x80               	ADDLW	0x80
005c9c   0f80     addlw	0x80               	ADDLW	0x80
005c9e   e102     bnz	0x5ca4               	BNZ	_00237_DS_
005ca0   0e3a     movlw	0x3a               	MOVLW	0x3a
005ca2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00237_DS_:
005ca4   e307     bnc	0x5cb4               	BNC	_00224_DS_
                                           ;	.line	843; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= (int)'A' - 10;
005ca6   0ec9     movlw	0xc9               	MOVLW	0xc9
005ca8   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005caa   6e01     movwf	0x1, 0             	MOVWF	r0x01
005cac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005cae   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005cb0   6f69     movwf	0x69, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
005cb2   d005     bra	0x5cbe               	BRA	_00225_DS_
                                           _00224_DS_:
                                           ;	.line	845; TCPIP_Stack/Helpers.c	AsciiChars.v[1] -= '0';
005cb4   0ed0     movlw	0xd0               	MOVLW	0xd0
005cb6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005cb8   5000     movf	0, 0, 0             	MOVF	r0x00, W
005cba   010a     movlb	0xa                	BANKSEL	(_hexatob_AsciiChars_1_1 + 1)
005cbc   6f69     movwf	0x69, 0x1          	MOVWF	(_hexatob_AsciiChars_1_1 + 1), B
                                           _00225_DS_:
                                           ;	.line	847; TCPIP_Stack/Helpers.c	if(AsciiChars.v[0] > (int)'9')
005cbe   ca68     movff	0xa68, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
005cc0   f000
005cc2   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
005cc4   f001
005cc6   6a02     clrf	0x2, 0              	CLRF	r0x02
005cc8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005cca   0f80     addlw	0x80               	ADDLW	0x80
005ccc   0f80     addlw	0x80               	ADDLW	0x80
005cce   e102     bnz	0x5cd4               	BNZ	_00238_DS_
005cd0   0e3a     movlw	0x3a               	MOVLW	0x3a
005cd2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00238_DS_:
005cd4   e307     bnc	0x5ce4               	BNC	_00227_DS_
                                           ;	.line	848; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'A' - 10;
005cd6   0ec9     movlw	0xc9               	MOVLW	0xc9
005cd8   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005cda   6e01     movwf	0x1, 0             	MOVWF	r0x01
005cdc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005cde   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005ce0   6f68     movwf	0x68, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
005ce2   d005     bra	0x5cee               	BRA	_00228_DS_
                                           _00227_DS_:
                                           ;	.line	850; TCPIP_Stack/Helpers.c	AsciiChars.v[0] -= (int)'0';
005ce4   0ed0     movlw	0xd0               	MOVLW	0xd0
005ce6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005ce8   5000     movf	0, 0, 0             	MOVF	r0x00, W
005cea   010a     movlb	0xa                	BANKSEL	_hexatob_AsciiChars_1_1
005cec   6f68     movwf	0x68, 0x1          	MOVWF	_hexatob_AsciiChars_1_1, B
                                           _00228_DS_:
                                           ;	.line	854; TCPIP_Stack/Helpers.c	return (WORD)((AsciiChars.v[1]<<4) |  AsciiChars.v[0]);
005cee   ca69     movff	0xa69, 0           	MOVFF	(_hexatob_AsciiChars_1_1 + 1), r0x00
005cf0   f000
005cf2   6a01     clrf	0x1, 0              	CLRF	r0x01
005cf4   3801     swapf	0x1, 0, 0          	SWAPF	r0x01, W
005cf6   0bf0     andlw	0xf0               	ANDLW	0xf0
005cf8   6e03     movwf	0x3, 0             	MOVWF	r0x03
005cfa   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
005cfc   6e02     movwf	0x2, 0             	MOVWF	r0x02
005cfe   0b0f     andlw	0xf                	ANDLW	0x0f
005d00   1a02     xorwf	0x2, 0x1, 0        	XORWF	r0x02, F
005d02   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
005d04   ca68     movff	0xa68, 0           	MOVFF	_hexatob_AsciiChars_1_1, r0x00
005d06   f000
005d08   6a01     clrf	0x1, 0              	CLRF	r0x01
005d0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
005d0c   1202     iorwf	0x2, 0x1, 0        	IORWF	r0x02, F
005d0e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005d10   1203     iorwf	0x3, 0x1, 0        	IORWF	r0x03, F
005d12   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005d14   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005d16   f003
005d18   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005d1a   f002
005d1c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005d1e   f001
005d20   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005d22   f000
005d24   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005d26   ffd9
005d28   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__StringToIPAddress	code
                                           _StringToIPAddress:
                                           ;	.line	330; TCPIP_Stack/Helpers.c	BOOL StringToIPAddress(BYTE* str, IP_ADDR* IPAddress)
002224   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002226   ffe5
002228   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00222a   ffd9
00222c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00222e   ffe5
002230   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002232   ffe5
002234   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002236   ffe5
002238   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00223a   ffe5
00223c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00223e   ffe5
002240   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002242   ffe5
002244   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002246   ffe5
002248   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00224a   ffe5
00224c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00224e   ffe5
002250   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002252   ffe5
002254   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002256   ffe5
002258   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00225a   ffe5
00225c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00225e   ffe5
002260   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002262   ffe5
002264   0e02     movlw	0x2                	MOVLW	0x02
002266   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002268   f000
00226a   0e03     movlw	0x3                	MOVLW	0x03
00226c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00226e   f001
002270   0e04     movlw	0x4                	MOVLW	0x04
002272   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002274   f002
002276   0e05     movlw	0x5                	MOVLW	0x05
002278   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00227a   f003
00227c   0e06     movlw	0x6                	MOVLW	0x06
00227e   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002280   f004
002282   0e07     movlw	0x7                	MOVLW	0x07
002284   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
002286   f005
                                           ;	.line	335; TCPIP_Stack/Helpers.c	charLen = 0;
002288   6a06     clrf	0x6, 0              	CLRF	r0x06
                                           ;	.line	336; TCPIP_Stack/Helpers.c	currentOctet = 0;
00228a   6a07     clrf	0x7, 0              	CLRF	r0x07
00228c   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	337; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
00228e   6b0c     clrf	0xc, 0x1            	CLRF	_StringToIPAddress_dwVal_1_1, B
002290   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002292   6b0d     clrf	0xd, 0x1            	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
002294   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
002296   6b0e     clrf	0xe, 0x1            	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
002298   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00229a   6b0f     clrf	0xf, 0x1            	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           _00161_DS_:
                                           ;	.line	338; TCPIP_Stack/Helpers.c	while((i = *str++))
00229c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00229e   ffe9
0022a0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0022a2   fff3
0022a4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0022a6   ec8d     call	0x7f1a, 0           	CALL	__gptrget1
0022a8   f03f
0022aa   6e08     movwf	0x8, 0             	MOVWF	r0x08
0022ac   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0022ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0022b0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0022b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0022b4   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0022b6   c008     movff	0x8, 0x9           	MOVFF	r0x08, r0x09
0022b8   f009
0022ba   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0022bc   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0022be   d0d0     bra	0x2460               	BRA	_00163_DS_
                                           ;	.line	340; TCPIP_Stack/Helpers.c	if(currentOctet > 3u)
0022c0   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
0022c2   f008
0022c4   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0022c6   0e00     movlw	0                  	MOVLW	0x00
0022c8   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0022ca   e102     bnz	0x22d0               	BNZ	_00193_DS_
0022cc   0e04     movlw	0x4                	MOVLW	0x04
0022ce   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00193_DS_:
0022d0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0022d2   d0c6     bra	0x2460               	BRA	_00163_DS_
                                           ;	.line	343; TCPIP_Stack/Helpers.c	i -= '0';
0022d4   0ed0     movlw	0xd0               	MOVLW	0xd0
0022d6   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
                                           ;	.line	347; TCPIP_Stack/Helpers.c	if(charLen == 0u)
0022d8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0022da   e10c     bnz	0x22f4               	BNZ	_00159_DS_
                                           ;	.line	349; TCPIP_Stack/Helpers.c	if(i > 9u)
0022dc   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
0022de   f008
0022e0   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0022e2   0e00     movlw	0                  	MOVLW	0x00
0022e4   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
0022e6   e102     bnz	0x22ec               	BNZ	_00194_DS_
0022e8   0e0a     movlw	0xa                	MOVLW	0x0a
0022ea   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00194_DS_:
0022ec   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0022ee   d09d     bra	0x242a               	BRA	_00160_DS_
                                           ;	.line	350; TCPIP_Stack/Helpers.c	return FALSE;
0022f0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0022f2   d107     bra	0x2502               	BRA	_00173_DS_
                                           _00159_DS_:
                                           ;	.line	352; TCPIP_Stack/Helpers.c	else if(charLen == 3u)
0022f4   c006     movff	0x6, 0x8           	MOVFF	r0x06, r0x08
0022f6   f008
0022f8   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0022fa   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0022fc   0a03     xorlw	0x3                	XORLW	0x03
0022fe   e102     bnz	0x2304               	BNZ	_00195_DS_
002300   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002302   e001     bz	0x2306                	BZ	_00196_DS_
                                           _00195_DS_:
002304   d044     bra	0x238e               	BRA	_00156_DS_
                                           _00196_DS_:
                                           ;	.line	354; TCPIP_Stack/Helpers.c	if(i != (BYTE)('.' - '0'))
002306   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002308   0afe     xorlw	0xfe               	XORLW	0xfe
00230a   e002     bz	0x2310                	BZ	_00146_DS_
                                           ;	.line	355; TCPIP_Stack/Helpers.c	return FALSE;
00230c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00230e   d0f9     bra	0x2502               	BRA	_00173_DS_
                                           _00146_DS_:
                                           ;	.line	357; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
002310   0e00     movlw	0                  	MOVLW	0x00
002312   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
002314   5d0f     subwf	0xf, 0, 0x1        	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
002316   e10b     bnz	0x232e               	BNZ	_00199_DS_
002318   0e02     movlw	0x2                	MOVLW	0x02
00231a   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00231c   5d0e     subwf	0xe, 0, 0x1        	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
00231e   e107     bnz	0x232e               	BNZ	_00199_DS_
002320   0e05     movlw	0x5                	MOVLW	0x05
002322   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002324   5d0d     subwf	0xd, 0, 0x1        	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
002326   e103     bnz	0x232e               	BNZ	_00199_DS_
002328   0e06     movlw	0x6                	MOVLW	0x06
00232a   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
00232c   5d0c     subwf	0xc, 0, 0x1        	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00199_DS_:
00232e   e302     bnc	0x2334               	BNC	_00148_DS_
                                           ;	.line	358; TCPIP_Stack/Helpers.c	return FALSE;
002330   6ae8     clrf	0xe8, 0             	CLRF	WREG
002332   d0e7     bra	0x2502               	BRA	_00173_DS_
                                           _00148_DS_:
                                           ;	.line	360; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
002334   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
002336   f008
002338   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
00233a   6a0a     clrf	0xa, 0              	CLRF	r0x0a
00233c   6a0b     clrf	0xb, 0              	CLRF	r0x0b
00233e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002340   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
002342   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002344   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
002346   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002348   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00234a   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00234c   510e     movf	0xe, 0, 0x1         	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
00234e   0d64     mullw	0x64               	MULLW	0x64
002350   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
002352   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
002354   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002356   510d     movf	0xd, 0, 0x1         	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
002358   0d0a     mullw	0xa                	MULLW	0x0a
00235a   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
00235c   f00d
00235e   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002360   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
002362   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
002364   510c     movf	0xc, 0, 0x1         	MOVF	_StringToIPAddress_dwVal_1_1, W, B
002366   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
002368   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00236a   ffe5
00236c   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00236e   ffe9
002370   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
002372   fff3
002374   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002376   ec50     call	0x80a0, 0           	CALL	__gptrput1
002378   f040
                                           ;	.line	361; TCPIP_Stack/Helpers.c	charLen = 0;
00237a   6a06     clrf	0x6, 0              	CLRF	r0x06
00237c   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	362; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
00237e   6b0c     clrf	0xc, 0x1            	CLRF	_StringToIPAddress_dwVal_1_1, B
002380   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002382   6b0d     clrf	0xd, 0x1            	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
002384   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
002386   6b0e     clrf	0xe, 0x1            	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
002388   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00238a   6b0f     clrf	0xf, 0x1            	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	363; TCPIP_Stack/Helpers.c	continue;
00238c   d787     bra	0x229c               	BRA	_00161_DS_
                                           _00156_DS_:
                                           ;	.line	367; TCPIP_Stack/Helpers.c	if(i == (BYTE)('.' - '0'))
00238e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002390   0afe     xorlw	0xfe               	XORLW	0xfe
002392   e001     bz	0x2396                	BZ	_00201_DS_
002394   d03f     bra	0x2414               	BRA	_00152_DS_
                                           _00201_DS_:
                                           ;	.line	369; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
002396   0e00     movlw	0                  	MOVLW	0x00
002398   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
00239a   5d0f     subwf	0xf, 0, 0x1        	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
00239c   e10b     bnz	0x23b4               	BNZ	_00202_DS_
00239e   0e02     movlw	0x2                	MOVLW	0x02
0023a0   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0023a2   5d0e     subwf	0xe, 0, 0x1        	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0023a4   e107     bnz	0x23b4               	BNZ	_00202_DS_
0023a6   0e05     movlw	0x5                	MOVLW	0x05
0023a8   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0023aa   5d0d     subwf	0xd, 0, 0x1        	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0023ac   e103     bnz	0x23b4               	BNZ	_00202_DS_
0023ae   0e06     movlw	0x6                	MOVLW	0x06
0023b0   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
0023b2   5d0c     subwf	0xc, 0, 0x1        	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00202_DS_:
0023b4   e302     bnc	0x23ba               	BNC	_00150_DS_
                                           ;	.line	370; TCPIP_Stack/Helpers.c	return FALSE;
0023b6   6ae8     clrf	0xe8, 0             	CLRF	WREG
0023b8   d0a4     bra	0x2502               	BRA	_00173_DS_
                                           _00150_DS_:
                                           ;	.line	372; TCPIP_Stack/Helpers.c	IPAddress->v[currentOctet++] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
0023ba   c007     movff	0x7, 0x8           	MOVFF	r0x07, r0x08
0023bc   f008
0023be   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0023c0   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0023c2   6a0b     clrf	0xb, 0              	CLRF	r0x0b
0023c4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023c6   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
0023c8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023ca   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0023cc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0023ce   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0023d0   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0023d2   510e     movf	0xe, 0, 0x1         	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0023d4   0d64     mullw	0x64               	MULLW	0x64
0023d6   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
0023d8   f00c
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x0d
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0023da   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0023dc   510d     movf	0xd, 0, 0x1         	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0023de   0d0a     mullw	0xa                	MULLW	0x0a
0023e0   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
0023e2   f00d
0023e4   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0023e6   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0023e8   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
0023ea   510c     movf	0xc, 0, 0x1         	MOVF	_StringToIPAddress_dwVal_1_1, W, B
0023ec   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
0023ee   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0023f0   ffe5
0023f2   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0023f4   ffe9
0023f6   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0023f8   fff3
0023fa   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0023fc   ec50     call	0x80a0, 0           	CALL	__gptrput1
0023fe   f040
                                           ;	.line	373; TCPIP_Stack/Helpers.c	charLen = 0;
002400   6a06     clrf	0x6, 0              	CLRF	r0x06
002402   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
                                           ;	.line	374; TCPIP_Stack/Helpers.c	dwVal.Val = 0;
002404   6b0c     clrf	0xc, 0x1            	CLRF	_StringToIPAddress_dwVal_1_1, B
002406   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002408   6b0d     clrf	0xd, 0x1            	CLRF	(_StringToIPAddress_dwVal_1_1 + 1), B
00240a   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
00240c   6b0e     clrf	0xe, 0x1            	CLRF	(_StringToIPAddress_dwVal_1_1 + 2), B
00240e   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
002410   6b0f     clrf	0xf, 0x1            	CLRF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	375; TCPIP_Stack/Helpers.c	continue;
002412   d744     bra	0x229c               	BRA	_00161_DS_
                                           _00152_DS_:
                                           ;	.line	377; TCPIP_Stack/Helpers.c	if(i > 9u)
002414   c009     movff	0x9, 0x8           	MOVFF	r0x09, r0x08
002416   f008
002418   6a0a     clrf	0xa, 0              	CLRF	r0x0a
00241a   0e00     movlw	0                  	MOVLW	0x00
00241c   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
00241e   e102     bnz	0x2424               	BNZ	_00203_DS_
002420   0e0a     movlw	0xa                	MOVLW	0x0a
002422   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00203_DS_:
002424   e302     bnc	0x242a               	BNC	_00160_DS_
                                           ;	.line	378; TCPIP_Stack/Helpers.c	return FALSE;
002426   6ae8     clrf	0xe8, 0             	CLRF	WREG
002428   d06c     bra	0x2502               	BRA	_00173_DS_
                                           _00160_DS_:
                                           ;	.line	381; TCPIP_Stack/Helpers.c	charLen++;
00242a   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00242c   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
                                           ;	.line	382; TCPIP_Stack/Helpers.c	dwVal.Val <<= 8;
00242e   510e     movf	0xe, 0, 0x1         	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
002430   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002432   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
002434   510d     movf	0xd, 0, 0x1         	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
002436   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002438   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
00243a   510c     movf	0xc, 0, 0x1         	MOVF	_StringToIPAddress_dwVal_1_1, W, B
00243c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00243e   6a08     clrf	0x8, 0              	CLRF	r0x08
002440   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002442   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
002444   6f0c     movwf	0xc, 0x1           	MOVWF	_StringToIPAddress_dwVal_1_1, B
002446   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002448   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
00244a   6f0d     movwf	0xd, 0x1           	MOVWF	(_StringToIPAddress_dwVal_1_1 + 1), B
00244c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00244e   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
002450   6f0e     movwf	0xe, 0x1           	MOVWF	(_StringToIPAddress_dwVal_1_1 + 2), B
002452   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002454   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
002456   6f0f     movwf	0xf, 0x1           	MOVWF	(_StringToIPAddress_dwVal_1_1 + 3), B
                                           ;	.line	383; TCPIP_Stack/Helpers.c	dwVal.v[0] = i;
002458   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00245a   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
00245c   6f0c     movwf	0xc, 0x1           	MOVWF	_StringToIPAddress_dwVal_1_1, B
00245e   d71e     bra	0x229c               	BRA	_00161_DS_
                                           _00163_DS_:
                                           ;	.line	389; TCPIP_Stack/Helpers.c	if(i != 0u && i != (int)'/' && i != (int)'\r' && i != (int)'\n' && i !=(int) ' ' && i != (int)'\t')
002460   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002462   e01e     bz	0x24a0                	BZ	_00165_DS_
002464   c009     movff	0x9, 0             	MOVFF	r0x09, r0x00
002466   f000
002468   6a01     clrf	0x1, 0              	CLRF	r0x01
00246a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00246c   0a2f     xorlw	0x2f               	XORLW	0x2f
00246e   e102     bnz	0x2474               	BNZ	_00205_DS_
002470   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002472   e016     bz	0x24a0                	BZ	_00165_DS_
                                           _00205_DS_:
002474   5000     movf	0, 0, 0             	MOVF	r0x00, W
002476   0a0d     xorlw	0xd                	XORLW	0x0d
002478   e102     bnz	0x247e               	BNZ	_00207_DS_
00247a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00247c   e011     bz	0x24a0                	BZ	_00165_DS_
                                           _00207_DS_:
00247e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002480   0a0a     xorlw	0xa                	XORLW	0x0a
002482   e102     bnz	0x2488               	BNZ	_00209_DS_
002484   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002486   e00c     bz	0x24a0                	BZ	_00165_DS_
                                           _00209_DS_:
002488   5000     movf	0, 0, 0             	MOVF	r0x00, W
00248a   0a20     xorlw	0x20               	XORLW	0x20
00248c   e102     bnz	0x2492               	BNZ	_00211_DS_
00248e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002490   e007     bz	0x24a0                	BZ	_00165_DS_
                                           _00211_DS_:
002492   5000     movf	0, 0, 0             	MOVF	r0x00, W
002494   0a09     xorlw	0x9                	XORLW	0x09
002496   e102     bnz	0x249c               	BNZ	_00213_DS_
002498   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00249a   e002     bz	0x24a0                	BZ	_00165_DS_
                                           _00213_DS_:
                                           ;	.line	390; TCPIP_Stack/Helpers.c	return FALSE;
00249c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00249e   d031     bra	0x2502               	BRA	_00173_DS_
                                           _00165_DS_:
                                           ;	.line	393; TCPIP_Stack/Helpers.c	if(dwVal.Val > 0x00020505ul)
0024a0   0e00     movlw	0                  	MOVLW	0x00
0024a2   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 3)
0024a4   5d0f     subwf	0xf, 0, 0x1        	SUBWF	(_StringToIPAddress_dwVal_1_1 + 3), W, B
0024a6   e10b     bnz	0x24be               	BNZ	_00214_DS_
0024a8   0e02     movlw	0x2                	MOVLW	0x02
0024aa   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0024ac   5d0e     subwf	0xe, 0, 0x1        	SUBWF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0024ae   e107     bnz	0x24be               	BNZ	_00214_DS_
0024b0   0e05     movlw	0x5                	MOVLW	0x05
0024b2   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0024b4   5d0d     subwf	0xd, 0, 0x1        	SUBWF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0024b6   e103     bnz	0x24be               	BNZ	_00214_DS_
0024b8   0e06     movlw	0x6                	MOVLW	0x06
0024ba   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
0024bc   5d0c     subwf	0xc, 0, 0x1        	SUBWF	_StringToIPAddress_dwVal_1_1, W, B
                                           _00214_DS_:
0024be   e302     bnc	0x24c4               	BNC	_00172_DS_
                                           ;	.line	394; TCPIP_Stack/Helpers.c	return FALSE;
0024c0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0024c2   d01f     bra	0x2502               	BRA	_00173_DS_
                                           _00172_DS_:
                                           ;	.line	396; TCPIP_Stack/Helpers.c	IPAddress->v[3] = dwVal.v[2]*((BYTE)100) + dwVal.v[1]*((BYTE)10) + dwVal.v[0];
0024c4   0e03     movlw	0x3                	MOVLW	0x03
0024c6   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0024c8   0e00     movlw	0                  	MOVLW	0x00
0024ca   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0024cc   0e00     movlw	0                  	MOVLW	0x00
0024ce   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
                                           ; ;multiply lit val:0x64 by variable (_StringToIPAddress_dwVal_1_1 + 2) and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0024d0   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 2)
0024d2   510e     movf	0xe, 0, 0x1         	MOVF	(_StringToIPAddress_dwVal_1_1 + 2), W, B
0024d4   0d64     mullw	0x64               	MULLW	0x64
0024d6   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0024d8   f000
                                           ; ;multiply lit val:0x0a by variable (_StringToIPAddress_dwVal_1_1 + 1) and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0024da   010a     movlb	0xa                	BANKSEL	(_StringToIPAddress_dwVal_1_1 + 1)
0024dc   510d     movf	0xd, 0, 0x1         	MOVF	(_StringToIPAddress_dwVal_1_1 + 1), W, B
0024de   0d0a     mullw	0xa                	MULLW	0x0a
0024e0   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0024e2   f001
0024e4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0024e6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0024e8   010a     movlb	0xa                	BANKSEL	_StringToIPAddress_dwVal_1_1
0024ea   510c     movf	0xc, 0, 0x1         	MOVF	_StringToIPAddress_dwVal_1_1, W, B
0024ec   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0024ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0024f0   ffe5
0024f2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0024f4   ffe9
0024f6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0024f8   fff3
0024fa   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0024fc   ec50     call	0x80a0, 0           	CALL	__gptrput1
0024fe   f040
                                           ;	.line	398; TCPIP_Stack/Helpers.c	return TRUE;
002500   0e01     movlw	0x1                	MOVLW	0x01
                                           _00173_DS_:
002502   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002504   f00d
002506   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002508   f00c
00250a   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00250c   f00b
00250e   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002510   f00a
002512   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002514   f009
002516   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002518   f008
00251a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00251c   f007
00251e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002520   f006
002522   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002524   f005
002526   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002528   f004
00252a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00252c   f003
00252e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002530   f002
002532   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002534   f001
002536   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002538   f000
00253a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00253c   ffd9
00253e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Helpers__GenerateRandomDWORD	code
                                           _GenerateRandomDWORD:
                                           ;	.line	106; TCPIP_Stack/Helpers.c	DWORD GenerateRandomDWORD(void)
002b14   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002b16   ffe5
002b18   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002b1a   ffd9
002b1c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002b1e   ffe5
002b20   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002b22   ffe5
002b24   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002b26   ffe5
002b28   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002b2a   ffe5
002b2c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002b2e   ffe5
002b30   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002b32   ffe5
002b34   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002b36   ffe5
002b38   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002b3a   ffe5
002b3c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002b3e   ffe5
002b40   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002b42   ffe5
002b44   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002b46   ffe5
002b48   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002b4a   ffe5
002b4c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002b4e   ffe5
002b50   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002b52   ffe5
002b54   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002b56   ffe5
002b58   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002b5a   ffe5
002b5c   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
002b5e   ffe5
002b60   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
002b62   ffe5
002b64   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
002b66   ffe5
002b68   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
002b6a   ffe5
002b6c   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
002b6e   ffe5
002b70   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
002b72   ffe5
002b74   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
002b76   ffe5
002b78   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
002b7a   ffe5
002b7c   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
002b7e   ffe5
002b80   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
002b82   ffe5
002b84   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
002b86   ffe5
002b88   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
002b8a   ffe5
002b8c   c01c     movff	0x1c, 0xfe5        	MOVFF	r0x1c, POSTDEC1
002b8e   ffe5
002b90   c01d     movff	0x1d, 0xfe5        	MOVFF	r0x1d, POSTDEC1
002b92   ffe5
                                           ;	.line	119; TCPIP_Stack/Helpers.c	ADCON0Save = ADCON0;
002b94   cfc2     movff	0xfc2, 0           	MOVFF	_ADCON0, r0x00
002b96   f000
                                           ;	.line	120; TCPIP_Stack/Helpers.c	ADCON2Save = ADCON2;
002b98   cfc0     movff	0xfc0, 0x1         	MOVFF	_ADCON2, r0x01
002b9a   f001
                                           ;	.line	121; TCPIP_Stack/Helpers.c	T0CONSave = T0CON;
002b9c   cfd5     movff	0xfd5, 0x2         	MOVFF	_T0CON, r0x02
002b9e   f002
                                           ;	.line	122; TCPIP_Stack/Helpers.c	TMR0LSave = TMR0L;
002ba0   cfd6     movff	0xfd6, 0x3         	MOVFF	_TMR0L, r0x03
002ba2   f003
                                           ;	.line	123; TCPIP_Stack/Helpers.c	TMR0HSave = TMR0H;
002ba4   cfd7     movff	0xfd7, 0x4         	MOVFF	_TMR0H, r0x04
002ba6   f004
                                           ;	.line	126; TCPIP_Stack/Helpers.c	ADCON0 = 0x01;	// Turn on the A/D module
002ba8   0e01     movlw	0x1                	MOVLW	0x01
002baa   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           ;	.line	127; TCPIP_Stack/Helpers.c	ADCON2 = 0x3F;	// 20 Tad acquisition, Frc A/D clock used for conversion
002bac   0e3f     movlw	0x3f               	MOVLW	0x3f
002bae   6ec0     movwf	0xc0, 0            	MOVWF	_ADCON2
                                           ;	.line	128; TCPIP_Stack/Helpers.c	T0CON = 0x88;	// TMR0ON = 1, no prescalar
002bb0   0e88     movlw	0x88               	MOVLW	0x88
002bb2   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
                                           ;	.line	130; TCPIP_Stack/Helpers.c	dwTotalTime = 0;
002bb4   6a05     clrf	0x5, 0              	CLRF	r0x05
002bb6   6a06     clrf	0x6, 0              	CLRF	r0x06
002bb8   6a07     clrf	0x7, 0              	CLRF	r0x07
002bba   6a08     clrf	0x8, 0              	CLRF	r0x08
                                           ;	.line	131; TCPIP_Stack/Helpers.c	wLastValue = 0;
002bbc   6a09     clrf	0x9, 0              	CLRF	r0x09
002bbe   6a0a     clrf	0xa, 0              	CLRF	r0x0a
                                           ;	.line	132; TCPIP_Stack/Helpers.c	dwRandomResult = rand();
002bc0   ecd9     call	0x79b2, 0           	CALL	_rand
002bc2   f03c
002bc4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002bc6   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
002bc8   f00c
002bca   cff4     movff	0xff4, 0xd         	MOVFF	PRODH, r0x0d
002bcc   f00d
002bce   cfe9     movff	0xfe9, 0xe         	MOVFF	FSR0L, r0x0e
002bd0   f00e
                                           ;	.line	133; TCPIP_Stack/Helpers.c	while(1)
002bd2   6a0f     clrf	0xf, 0              	CLRF	r0x0f
                                           _00120_DS_:
                                           ;	.line	136; TCPIP_Stack/Helpers.c	TMR0H = 0x00;
002bd4   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	137; TCPIP_Stack/Helpers.c	TMR0L = 0x00;
002bd6   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	138; TCPIP_Stack/Helpers.c	ADCON0bits.GO = 1;
002bd8   82c2     bsf	0xc2, 0x1, 0         	BSF	_ADCON0bits, 1
002bda   0004     clrwdt                   	clrwdt 
                                           _00108_DS_:
                                           ;	.line	140; TCPIP_Stack/Helpers.c	while(ADCON0bits.GO);
002bdc   b2c2     btfsc	0xc2, 0x1, 0       	BTFSC	_ADCON0bits, 1
002bde   d7fe     bra	0x2bdc               	BRA	_00108_DS_
                                           ;	.line	141; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[0] = TMR0L;
002be0   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
002be2   010a     movlb	0xa                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
002be4   6f66     movwf	0x66, 0x1          	MOVWF	_GenerateRandomDWORD_wTime_1_1, B
                                           ;	.line	142; TCPIP_Stack/Helpers.c	((BYTE*)&wTime)[1] = TMR0H;
002be6   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
002be8   010a     movlb	0xa                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
002bea   6f67     movwf	0x67, 0x1          	MOVWF	(_GenerateRandomDWORD_wTime_1_1 + 1), B
                                           ;	.line	143; TCPIP_Stack/Helpers.c	w = rand();
002bec   ecd9     call	0x79b2, 0           	CALL	_rand
002bee   f03c
002bf0   6e10     movwf	0x10, 0            	MOVWF	r0x10
002bf2   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
002bf4   f011
002bf6   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
002bf8   f012
002bfa   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
002bfc   f013
                                           ;	.line	146; TCPIP_Stack/Helpers.c	dwTotalTime += wTime;
002bfe   ca66     movff	0xa66, 0x12        	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x12
002c00   f012
002c02   ca67     movff	0xa67, 0x13        	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x13
002c04   f013
002c06   6a14     clrf	0x14, 0             	CLRF	r0x14
002c08   6a15     clrf	0x15, 0             	CLRF	r0x15
002c0a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002c0c   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
002c0e   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002c10   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002c12   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002c14   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
002c16   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002c18   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
                                           ;	.line	147; TCPIP_Stack/Helpers.c	if(dwTotalTime >= GetInstructionClock())
002c1a   0e00     movlw	0                  	MOVLW	0x00
002c1c   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
002c1e   e108     bnz	0x2c30               	BNZ	_00130_DS_
002c20   0e9e     movlw	0x9e               	MOVLW	0x9e
002c22   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
002c24   e105     bnz	0x2c30               	BNZ	_00130_DS_
002c26   0ef2     movlw	0xf2               	MOVLW	0xf2
002c28   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
002c2a   e102     bnz	0x2c30               	BNZ	_00130_DS_
002c2c   0e1a     movlw	0x1a               	MOVLW	0x1a
002c2e   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00130_DS_:
002c30   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002c32   d048     bra	0x2cc4               	BRA	_00112_DS_
                                           ;	.line	149; TCPIP_Stack/Helpers.c	dwRandomResult ^= rand() | (((DWORD)rand())<<15ul) | (((DWORD)rand())<<30ul);
002c34   ecd9     call	0x79b2, 0           	CALL	_rand
002c36   f03c
002c38   6e12     movwf	0x12, 0            	MOVWF	r0x12
002c3a   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
002c3c   f013
002c3e   cff4     movff	0xff4, 0x14        	MOVFF	PRODH, r0x14
002c40   f014
002c42   cfe9     movff	0xfe9, 0x15        	MOVFF	FSR0L, r0x15
002c44   f015
002c46   ecd9     call	0x79b2, 0           	CALL	_rand
002c48   f03c
002c4a   6e16     movwf	0x16, 0            	MOVWF	r0x16
002c4c   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
002c4e   f017
002c50   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
002c52   f018
002c54   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
002c56   f019
002c58   3018     rrcf	0x18, 0, 0          	RRCF	r0x18, W
002c5a   3017     rrcf	0x17, 0, 0          	RRCF	r0x17, W
002c5c   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
002c5e   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
002c60   321c     rrcf	0x1c, 0x1, 0        	RRCF	r0x1c, F
002c62   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
002c64   0b80     andlw	0x80               	ANDLW	0x80
002c66   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
002c68   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
002c6a   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
002c6c   0b7f     andlw	0x7f               	ANDLW	0x7f
002c6e   121c     iorwf	0x1c, 0x1, 0       	IORWF	r0x1c, F
002c70   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
002c72   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
002c74   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
002c76   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
002c78   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
002c7a   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
002c7c   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
002c7e   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
002c80   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
002c82   ecd9     call	0x79b2, 0           	CALL	_rand
002c84   f03c
002c86   6e16     movwf	0x16, 0            	MOVWF	r0x16
002c88   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
002c8a   f017
002c8c   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
002c8e   f018
002c90   cfe9     movff	0xfe9, 0x19        	MOVFF	FSR0L, r0x19
002c92   f019
002c94   4016     rrncf	0x16, 0, 0         	RRNCF	r0x16, W
002c96   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
002c98   0bc0     andlw	0xc0               	ANDLW	0xc0
002c9a   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
002c9c   6a1a     clrf	0x1a, 0             	CLRF	r0x1a
002c9e   6a1b     clrf	0x1b, 0             	CLRF	r0x1b
002ca0   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
002ca2   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
002ca4   1212     iorwf	0x12, 0x1, 0       	IORWF	r0x12, F
002ca6   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
002ca8   1213     iorwf	0x13, 0x1, 0       	IORWF	r0x13, F
002caa   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
002cac   1214     iorwf	0x14, 0x1, 0       	IORWF	r0x14, F
002cae   501d     movf	0x1d, 0, 0          	MOVF	r0x1d, W
002cb0   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
002cb2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002cb4   1a0b     xorwf	0xb, 0x1, 0        	XORWF	r0x0b, F
002cb6   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002cb8   1a0c     xorwf	0xc, 0x1, 0        	XORWF	r0x0c, F
002cba   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
002cbc   1a0d     xorwf	0xd, 0x1, 0        	XORWF	r0x0d, F
002cbe   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
002cc0   1a0e     xorwf	0xe, 0x1, 0        	XORWF	r0x0e, F
                                           ;	.line	150; TCPIP_Stack/Helpers.c	break;
002cc2   d047     bra	0x2d52               	BRA	_00121_DS_
                                           _00112_DS_:
                                           ;	.line	154; TCPIP_Stack/Helpers.c	if(wLastValue == wTime)
002cc4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002cc6   010a     movlb	0xa                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
002cc8   1966     xorwf	0x66, 0, 0x1       	XORWF	_GenerateRandomDWORD_wTime_1_1, W, B
002cca   e105     bnz	0x2cd6               	BNZ	_00135_DS_
002ccc   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002cce   010a     movlb	0xa                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
002cd0   1967     xorwf	0x67, 0, 0x1       	XORWF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
002cd2   e101     bnz	0x2cd6               	BNZ	_00135_DS_
002cd4   d77f     bra	0x2bd4               	BRA	_00120_DS_
                                           _00135_DS_:
002cd6   010a     movlb	0xa                	BANKSEL	_GenerateRandomDWORD_wTime_1_1
                                           ;	.line	158; TCPIP_Stack/Helpers.c	srand(w + (wLastValue - wTime));
002cd8   5166     movf	0x66, 0, 0x1        	MOVF	_GenerateRandomDWORD_wTime_1_1, W, B
002cda   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
002cdc   6e12     movwf	0x12, 0            	MOVWF	r0x12
002cde   010a     movlb	0xa                	BANKSEL	(_GenerateRandomDWORD_wTime_1_1 + 1)
002ce0   5167     movf	0x67, 0, 0x1        	MOVF	(_GenerateRandomDWORD_wTime_1_1 + 1), W, B
002ce2   580a     subwfb	0xa, 0, 0         	SUBWFB	r0x0a, W
002ce4   6e13     movwf	0x13, 0            	MOVWF	r0x13
002ce6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002ce8   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
002cea   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002cec   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
002cee   6a12     clrf	0x12, 0             	CLRF	r0x12
002cf0   6a13     clrf	0x13, 0             	CLRF	r0x13
002cf2   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002cf4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cf6   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
002cf8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfa   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
002cfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cfe   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
002d00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002d02   ec69     call	0x7ed2, 0           	CALL	_srand
002d04   f03f
002d06   0e04     movlw	0x4                	MOVLW	0x04
002d08   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	159; TCPIP_Stack/Helpers.c	wLastValue = wTime;
002d0a   ca66     movff	0xa66, 0x9         	MOVFF	_GenerateRandomDWORD_wTime_1_1, r0x09
002d0c   f009
002d0e   ca67     movff	0xa67, 0xa         	MOVFF	(_GenerateRandomDWORD_wTime_1_1 + 1), r0x0a
002d10   f00a
                                           ;	.line	162; TCPIP_Stack/Helpers.c	dwRandomResult <<= 1;
002d12   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002d14   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
002d16   360c     rlcf	0xc, 0x1, 0         	RLCF	r0x0c, F
002d18   360d     rlcf	0xd, 0x1, 0         	RLCF	r0x0d, F
002d1a   360e     rlcf	0xe, 0x1, 0         	RLCF	r0x0e, F
                                           ;	.line	163; TCPIP_Stack/Helpers.c	if(rand() >= 16384)
002d1c   ecd9     call	0x79b2, 0           	CALL	_rand
002d1e   f03c
002d20   6e10     movwf	0x10, 0            	MOVWF	r0x10
002d22   cff3     movff	0xff3, 0x11        	MOVFF	PRODL, r0x11
002d24   f011
002d26   cff4     movff	0xff4, 0x12        	MOVFF	PRODH, r0x12
002d28   f012
002d2a   cfe9     movff	0xfe9, 0x13        	MOVFF	FSR0L, r0x13
002d2c   f013
002d2e   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
002d30   0f80     addlw	0x80               	ADDLW	0x80
002d32   0f80     addlw	0x80               	ADDLW	0x80
002d34   e108     bnz	0x2d46               	BNZ	_00136_DS_
002d36   0e00     movlw	0                  	MOVLW	0x00
002d38   5c12     subwf	0x12, 0, 0         	SUBWF	r0x12, W
002d3a   e105     bnz	0x2d46               	BNZ	_00136_DS_
002d3c   0e40     movlw	0x40               	MOVLW	0x40
002d3e   5c11     subwf	0x11, 0, 0         	SUBWF	r0x11, W
002d40   e102     bnz	0x2d46               	BNZ	_00136_DS_
002d42   0e00     movlw	0                  	MOVLW	0x00
002d44   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
                                           _00136_DS_:
002d46   e301     bnc	0x2d4a               	BNC	_00116_DS_
                                           ;	.line	164; TCPIP_Stack/Helpers.c	dwRandomResult |= 0x1;
002d48   800b     bsf	0xb, 0, 0            	BSF	r0x0b, 0
                                           _00116_DS_:
                                           ;	.line	167; TCPIP_Stack/Helpers.c	if(++vBitCount == 0u)
002d4a   2a0f     incf	0xf, 0x1, 0         	INCF	r0x0f, F
002d4c   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
002d4e   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
002d50   d741     bra	0x2bd4               	BRA	_00120_DS_
                                           _00121_DS_:
                                           ;	.line	172; TCPIP_Stack/Helpers.c	ADCON0 = ADCON0Save;
002d52   c000     movff	0, 0xfc2           	MOVFF	r0x00, _ADCON0
002d54   ffc2
                                           ;	.line	173; TCPIP_Stack/Helpers.c	ADCON2 = ADCON2Save;
002d56   c001     movff	0x1, 0xfc0         	MOVFF	r0x01, _ADCON2
002d58   ffc0
                                           ;	.line	174; TCPIP_Stack/Helpers.c	TMR0H = TMR0HSave;
002d5a   c004     movff	0x4, 0xfd7         	MOVFF	r0x04, _TMR0H
002d5c   ffd7
                                           ;	.line	175; TCPIP_Stack/Helpers.c	TMR0L = TMR0LSave;
002d5e   c003     movff	0x3, 0xfd6         	MOVFF	r0x03, _TMR0L
002d60   ffd6
                                           ;	.line	176; TCPIP_Stack/Helpers.c	T0CON = T0CONSave;
002d62   c002     movff	0x2, 0xfd5         	MOVFF	r0x02, _T0CON
002d64   ffd5
                                           ;	.line	254; TCPIP_Stack/Helpers.c	return dwRandomResult;
002d66   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
002d68   ffe9
002d6a   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
002d6c   fff4
002d6e   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
002d70   fff3
002d72   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002d74   cfe4     movff	0xfe4, 0x1d        	MOVFF	PREINC1, r0x1d
002d76   f01d
002d78   cfe4     movff	0xfe4, 0x1c        	MOVFF	PREINC1, r0x1c
002d7a   f01c
002d7c   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
002d7e   f01b
002d80   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
002d82   f01a
002d84   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
002d86   f019
002d88   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
002d8a   f018
002d8c   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
002d8e   f017
002d90   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
002d92   f016
002d94   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
002d96   f015
002d98   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
002d9a   f014
002d9c   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
002d9e   f013
002da0   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
002da2   f012
002da4   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002da6   f011
002da8   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
002daa   f010
002dac   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002dae   f00f
002db0   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002db2   f00e
002db4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002db6   f00d
002db8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002dba   f00c
002dbc   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002dbe   f00b
002dc0   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002dc2   f00a
002dc4   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002dc6   f009
002dc8   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002dca   f008
002dcc   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002dce   f007
002dd0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002dd2   f006
002dd4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002dd6   f005
002dd8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002dda   f004
002ddc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002dde   f003
002de0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002de2   f002
002de4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002de6   f001
002de8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002dea   f000
002dec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002dee   ffd9
002df0   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3510 (0x0db6) bytes ( 2.68%)
                                           ;           	 1755 (0x06db) words
                                           ; udata size:	   24 (0x0018) bytes ( 0.62%)
                                           ; access size:	   30 (0x001e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:16 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ICMPProcess
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACGetArray
                                           	extern _MACMemCopyAsync
                                           	extern _MACIsMemCopyDone
                                           	extern _MACIsTxReady
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           udata_ICMP_0	udata
                                           _ICMPProcess_dwVal_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ICMP__ICMPProcess	code
                                           _ICMPProcess:
                                           ;	.line	132; TCPIP_Stack/ICMP.c	void ICMPProcess(NODE_INFO *remote, WORD len)
00487e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004880   ffe5
004882   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004884   ffd9
004886   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004888   ffe5
00488a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00488c   ffe5
00488e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004890   ffe5
004892   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004894   ffe5
004896   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004898   ffe5
00489a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00489c   ffe5
00489e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0048a0   ffe5
0048a2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0048a4   ffe5
0048a6   0e02     movlw	0x2                	MOVLW	0x02
0048a8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0048aa   f000
0048ac   0e03     movlw	0x3                	MOVLW	0x03
0048ae   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0048b0   f001
0048b2   0e04     movlw	0x4                	MOVLW	0x04
0048b4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0048b6   f002
0048b8   0e05     movlw	0x5                	MOVLW	0x05
0048ba   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0048bc   f003
0048be   0e06     movlw	0x6                	MOVLW	0x06
0048c0   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0048c2   f004
                                           ;	.line	137; TCPIP_Stack/ICMP.c	MACGetArray((BYTE*)&dwVal, sizeof(dwVal));
0048c4   0e0a     movlw	0xa                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
0048c6   6e06     movwf	0x6, 0             	MOVWF	r0x06
0048c8   0e1c     movlw	0x1c               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
0048ca   6e05     movwf	0x5, 0             	MOVWF	r0x05
0048cc   0e80     movlw	0x80               	MOVLW	0x80
0048ce   6e07     movwf	0x7, 0             	MOVWF	r0x07
0048d0   0e00     movlw	0                  	MOVLW	0x00
0048d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048d4   0e04     movlw	0x4                	MOVLW	0x04
0048d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048d8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0048da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048dc   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0048de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048e0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0048e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0048e4   ec7d     call	0x62fa, 0           	CALL	_MACGetArray
0048e6   f031
0048e8   0e05     movlw	0x5                	MOVLW	0x05
0048ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0048ec   010a     movlb	0xa                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	140; TCPIP_Stack/ICMP.c	if(dwVal.w[0] == 0x0008u)
0048ee   511c     movf	0x1c, 0, 0x1        	MOVF	_ICMPProcess_dwVal_1_1, W, B
0048f0   0a08     xorlw	0x8                	XORLW	0x08
0048f2   e103     bnz	0x48fa               	BNZ	_00129_DS_
0048f4   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 1)
0048f6   511d     movf	0x1d, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 1), W, B
0048f8   e001     bz	0x48fc                	BZ	_00130_DS_
                                           _00129_DS_:
0048fa   d07e     bra	0x49f8               	BRA	_00119_DS_
                                           _00130_DS_:
                                           ;	.line	146; TCPIP_Stack/ICMP.c	if(MACCalcRxChecksum(0+sizeof(IP_HEADER), len))
0048fc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0048fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004900   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004902   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004904   0e00     movlw	0                  	MOVLW	0x00
004906   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004908   0e14     movlw	0x14               	MOVLW	0x14
00490a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00490c   ec4c     call	0x5698, 0           	CALL	_MACCalcRxChecksum
00490e   f02b
004910   6e05     movwf	0x5, 0             	MOVWF	r0x05
004912   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004914   f006
004916   0e04     movlw	0x4                	MOVLW	0x04
004918   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00491a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00491c   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00491e   e001     bz	0x4922                	BZ	_00106_DS_
                                           ;	.line	147; TCPIP_Stack/ICMP.c	return;
004920   d06b     bra	0x49f8               	BRA	_00119_DS_
                                           _00106_DS_:
004922   010a     movlb	0xa                	BANKSEL	_ICMPProcess_dwVal_1_1
                                           ;	.line	150; TCPIP_Stack/ICMP.c	dwVal.v[0] = 0x00;	// Type: 0 (ICMP echo/ping reply)
004924   6b1c     clrf	0x1c, 0x1           	CLRF	_ICMPProcess_dwVal_1_1, B
                                           ;	.line	151; TCPIP_Stack/ICMP.c	dwVal.v[2] += 8;	// Subtract 0x0800 from the checksum
004926   0e08     movlw	0x8                	MOVLW	0x08
004928   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
00492a   251e     addwf	0x1e, 0, 0x1       	ADDWF	(_ICMPProcess_dwVal_1_1 + 2), W, B
00492c   6e05     movwf	0x5, 0             	MOVWF	r0x05
00492e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004930   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
004932   6f1e     movwf	0x1e, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           ;	.line	152; TCPIP_Stack/ICMP.c	if(dwVal.v[2] < 8u)
004934   ca1e     movff	0xa1e, 0x6         	MOVFF	(_ICMPProcess_dwVal_1_1 + 2), r0x06
004936   f006
004938   6a07     clrf	0x7, 0              	CLRF	r0x07
00493a   0e00     movlw	0                  	MOVLW	0x00
00493c   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
00493e   e102     bnz	0x4944               	BNZ	_00131_DS_
004940   0e08     movlw	0x8                	MOVLW	0x08
004942   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00131_DS_:
004944   e20d     bc	0x4960                	BC	_00111_DS_
                                           ;	.line	154; TCPIP_Stack/ICMP.c	dwVal.v[3]++;
004946   ca1f     movff	0xa1f, 0x5         	MOVFF	(_ICMPProcess_dwVal_1_1 + 3), r0x05
004948   f005
00494a   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00494c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00494e   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
004950   6f1f     movwf	0x1f, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 3), B
004952   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 3)
                                           ;	.line	155; TCPIP_Stack/ICMP.c	if(dwVal.v[3] == 0u) dwVal.v[2]++;
004954   511f     movf	0x1f, 0, 0x1        	MOVF	(_ICMPProcess_dwVal_1_1 + 3), W, B
004956   e104     bnz	0x4960               	BNZ	_00111_DS_
004958   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00495a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00495c   010a     movlb	0xa                	BANKSEL	(_ICMPProcess_dwVal_1_1 + 2)
00495e   6f1e     movwf	0x1e, 0x1          	MOVWF	(_ICMPProcess_dwVal_1_1 + 2), B
                                           _00111_DS_:
                                           ;	.line	160; TCPIP_Stack/ICMP.c	while(!IPIsTxReady());
004960   ec5c     call	0x74b8, 0           	CALL	_MACIsTxReady
004962   f03a
004964   6e05     movwf	0x5, 0             	MOVWF	r0x05
004966   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004968   e0fb     bz	0x4960                	BZ	_00111_DS_
                                           ;	.line	165; TCPIP_Stack/ICMP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
00496a   0e1a     movlw	0x1a               	MOVLW	0x1a
00496c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00496e   0e19     movlw	0x19               	MOVLW	0x19
004970   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004972   ec19     call	0x7232, 0           	CALL	_MACSetWritePtr
004974   f039
004976   0e02     movlw	0x2                	MOVLW	0x02
004978   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	168; TCPIP_Stack/ICMP.c	IPPutHeader(remote, IP_PROT_ICMP, len);
00497a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00497c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00497e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004980   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004982   0e01     movlw	0x1                	MOVLW	0x01
004984   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004986   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004988   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00498a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00498c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00498e   5000     movf	0, 0, 0             	MOVF	r0x00, W
004990   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004992   ecb2     call	0x4164, 0           	CALL	_IPPutHeader
004994   f020
004996   0e06     movlw	0x6                	MOVLW	0x06
004998   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	171; TCPIP_Stack/ICMP.c	MACPutArray((BYTE*)&dwVal, sizeof(dwVal));
00499a   0e0a     movlw	0xa                	MOVLW	HIGH(_ICMPProcess_dwVal_1_1)
00499c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00499e   0e1c     movlw	0x1c               	MOVLW	LOW(_ICMPProcess_dwVal_1_1)
0049a0   6e00     movwf	0, 0               	MOVWF	r0x00
0049a2   0e80     movlw	0x80               	MOVLW	0x80
0049a4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0049a6   0e00     movlw	0                  	MOVLW	0x00
0049a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049aa   0e04     movlw	0x4                	MOVLW	0x04
0049ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049ae   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0049b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049b2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0049b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049b6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0049b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049ba   ec9a     call	0x6d34, 0           	CALL	_MACPutArray
0049bc   f036
0049be   0e05     movlw	0x5                	MOVLW	0x05
0049c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	172; TCPIP_Stack/ICMP.c	MACMemCopyAsync(-1, -1, len-4);
0049c2   0efc     movlw	0xfc               	MOVLW	0xfc
0049c4   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0049c6   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0049c8   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
0049ca   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0049cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049ce   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0049d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049d2   0eff     movlw	0xff               	MOVLW	0xff
0049d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049d6   0eff     movlw	0xff               	MOVLW	0xff
0049d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049da   0eff     movlw	0xff               	MOVLW	0xff
0049dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049de   0eff     movlw	0xff               	MOVLW	0xff
0049e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0049e2   ec36     call	0x186c, 0           	CALL	_MACMemCopyAsync
0049e4   f00c
0049e6   0e06     movlw	0x6                	MOVLW	0x06
0049e8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00114_DS_:
                                           ;	.line	173; TCPIP_Stack/ICMP.c	while(!MACIsMemCopyDone());
0049ea   ec04     call	0x7e08, 0           	CALL	_MACIsMemCopyDone
0049ec   f03f
0049ee   6e00     movwf	0, 0               	MOVWF	r0x00
0049f0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0049f2   e0fb     bz	0x49ea                	BZ	_00114_DS_
                                           ;	.line	176; TCPIP_Stack/ICMP.c	MACFlush();
0049f4   ec41     call	0x7682, 0           	CALL	_MACFlush
0049f6   f03b
                                           _00119_DS_:
0049f8   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0049fa   f007
0049fc   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0049fe   f006
004a00   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004a02   f005
004a04   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004a06   f004
004a08   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004a0a   f003
004a0c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004a0e   f002
004a10   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004a12   f001
004a14   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004a16   f000
004a18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004a1a   ffd9
004a1c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  416 (0x01a0) bytes ( 0.32%)
                                           ;           	  208 (0x00d0) words
                                           ; udata size:	    4 (0x0004) bytes ( 0.10%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:16 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _IPGetHeader
                                           	global _IPPutHeader
                                           	global _IPSetRxBuffer
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput4
                                           	extern __gptrput1
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrget2
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _MACCalcRxChecksum
                                           	extern _MACSetReadPtrInRx
                                           	extern _MACGetArray
                                           	extern _MACPutHeader
                                           	extern _MACPutArray
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           __Identifier	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           
                                           udata_IP_0	udata
                                           _IPHeaderLen	res	1
                                           
                                           udata_IP_1	udata
                                           _IPGetHeader_header_1_1	res	20
                                           
                                           udata_IP_2	udata
                                           _IPGetHeader_CalcChecksum_1_1	res	2
                                           
                                           udata_IP_3	udata
                                           _IPPutHeader_header_1_1	res	20
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_IP__SwapIPHeader	code
                                           _SwapIPHeader:
                                           ;	.line	302; TCPIP_Stack/IP.c	static void SwapIPHeader(IP_HEADER* h)
004b82   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004b84   ffe5
004b86   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004b88   ffd9
004b8a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004b8c   ffe5
004b8e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004b90   ffe5
004b92   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004b94   ffe5
004b96   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004b98   ffe5
004b9a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004b9c   ffe5
004b9e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004ba0   ffe5
004ba2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004ba4   ffe5
004ba6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004ba8   ffe5
004baa   0e02     movlw	0x2                	MOVLW	0x02
004bac   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004bae   f000
004bb0   0e03     movlw	0x3                	MOVLW	0x03
004bb2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004bb4   f001
004bb6   0e04     movlw	0x4                	MOVLW	0x04
004bb8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004bba   f002
                                           ;	.line	304; TCPIP_Stack/IP.c	h->TotalLength      = swaps(h->TotalLength);
004bbc   5000     movf	0, 0, 0             	MOVF	r0x00, W
004bbe   0f02     addlw	0x2                	ADDLW	0x02
004bc0   6e03     movwf	0x3, 0             	MOVWF	r0x03
004bc2   0e00     movlw	0                  	MOVLW	0x00
004bc4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004bc6   6e04     movwf	0x4, 0             	MOVWF	r0x04
004bc8   0e00     movlw	0                  	MOVLW	0x00
004bca   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004bcc   6e05     movwf	0x5, 0             	MOVWF	r0x05
004bce   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004bd0   ffe9
004bd2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004bd4   fff3
004bd6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004bd8   ecee     call	0x7ddc, 0           	CALL	__gptrget2
004bda   f03e
004bdc   6e06     movwf	0x6, 0             	MOVWF	r0x06
004bde   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004be0   f007
004be2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004be4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004be6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004be8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004bea   ec87     call	0x790e, 0           	CALL	_swaps
004bec   f03c
004bee   6e06     movwf	0x6, 0             	MOVWF	r0x06
004bf0   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004bf2   f007
004bf4   0e02     movlw	0x2                	MOVLW	0x02
004bf6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004bf8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004bfa   ffe5
004bfc   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
004bfe   fff4
004c00   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004c02   ffe9
004c04   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004c06   fff3
004c08   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004c0a   ec30     call	0x8060, 0           	CALL	__gptrput2
004c0c   f040
                                           ;	.line	305; TCPIP_Stack/IP.c	h->Identification   = swaps(h->Identification);
004c0e   5000     movf	0, 0, 0             	MOVF	r0x00, W
004c10   0f04     addlw	0x4                	ADDLW	0x04
004c12   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c14   0e00     movlw	0                  	MOVLW	0x00
004c16   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004c18   6e04     movwf	0x4, 0             	MOVWF	r0x04
004c1a   0e00     movlw	0                  	MOVLW	0x00
004c1c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004c1e   6e05     movwf	0x5, 0             	MOVWF	r0x05
004c20   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004c22   ffe9
004c24   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004c26   fff3
004c28   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004c2a   ecee     call	0x7ddc, 0           	CALL	__gptrget2
004c2c   f03e
004c2e   6e06     movwf	0x6, 0             	MOVWF	r0x06
004c30   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004c32   f007
004c34   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c38   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c3c   ec87     call	0x790e, 0           	CALL	_swaps
004c3e   f03c
004c40   6e06     movwf	0x6, 0             	MOVWF	r0x06
004c42   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004c44   f007
004c46   0e02     movlw	0x2                	MOVLW	0x02
004c48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004c4a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004c4c   ffe5
004c4e   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
004c50   fff4
004c52   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004c54   ffe9
004c56   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004c58   fff3
004c5a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004c5c   ec30     call	0x8060, 0           	CALL	__gptrput2
004c5e   f040
                                           ;	.line	306; TCPIP_Stack/IP.c	h->HeaderChecksum   = swaps(h->HeaderChecksum);
004c60   0e0a     movlw	0xa                	MOVLW	0x0a
004c62   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004c64   0e00     movlw	0                  	MOVLW	0x00
004c66   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004c68   0e00     movlw	0                  	MOVLW	0x00
004c6a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004c6c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004c6e   ffe9
004c70   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004c72   fff3
004c74   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004c76   ecee     call	0x7ddc, 0           	CALL	__gptrget2
004c78   f03e
004c7a   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c7c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004c7e   f004
004c80   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004c82   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c84   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004c86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004c88   ec87     call	0x790e, 0           	CALL	_swaps
004c8a   f03c
004c8c   6e03     movwf	0x3, 0             	MOVWF	r0x03
004c8e   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004c90   f004
004c92   0e02     movlw	0x2                	MOVLW	0x02
004c94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004c96   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004c98   ffe5
004c9a   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
004c9c   fff4
004c9e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004ca0   ffe9
004ca2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004ca4   fff3
004ca6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004ca8   ec30     call	0x8060, 0           	CALL	__gptrput2
004caa   f040
004cac   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004cae   f007
004cb0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004cb2   f006
004cb4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004cb6   f005
004cb8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004cba   f004
004cbc   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004cbe   f003
004cc0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004cc2   f002
004cc4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004cc6   f001
004cc8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004cca   f000
004ccc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004cce   ffd9
004cd0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPSetRxBuffer	code
                                           _IPSetRxBuffer:
                                           ;	.line	295; TCPIP_Stack/IP.c	void IPSetRxBuffer(WORD Offset) 
00780c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00780e   ffe5
007810   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007812   ffd9
007814   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007816   ffe5
007818   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00781a   ffe5
00781c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00781e   ffe5
007820   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007822   ffe5
007824   0e02     movlw	0x2                	MOVLW	0x02
007826   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007828   f000
00782a   0e03     movlw	0x3                	MOVLW	0x03
00782c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00782e   f001
                                           ;	.line	297; TCPIP_Stack/IP.c	MACSetReadPtrInRx(Offset+IPHeaderLen);
007830   ca8a     movff	0xa8a, 0x2         	MOVFF	_IPHeaderLen, r0x02
007832   f002
007834   6a03     clrf	0x3, 0              	CLRF	r0x03
007836   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007838   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00783a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00783c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00783e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007840   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007842   5000     movf	0, 0, 0             	MOVF	r0x00, W
007844   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007846   ec01     call	0x6802, 0           	CALL	_MACSetReadPtrInRx
007848   f034
00784a   0e02     movlw	0x2                	MOVLW	0x02
00784c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00784e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007850   f003
007852   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007854   f002
007856   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007858   f001
00785a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00785c   f000
00785e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007860   ffd9
007862   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPPutHeader	code
                                           _IPPutHeader:
                                           ;	.line	247; TCPIP_Stack/IP.c	WORD IPPutHeader(NODE_INFO *remote,
004164   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004166   ffe5
004168   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00416a   ffd9
00416c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00416e   ffe5
004170   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004172   ffe5
004174   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004176   ffe5
004178   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00417a   ffe5
00417c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00417e   ffe5
004180   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004182   ffe5
004184   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004186   ffe5
004188   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00418a   ffe5
00418c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00418e   ffe5
004190   0e02     movlw	0x2                	MOVLW	0x02
004192   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004194   f000
004196   0e03     movlw	0x3                	MOVLW	0x03
004198   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00419a   f001
00419c   0e04     movlw	0x4                	MOVLW	0x04
00419e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0041a0   f002
0041a2   0e05     movlw	0x5                	MOVLW	0x05
0041a4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0041a6   f003
0041a8   0e06     movlw	0x6                	MOVLW	0x06
0041aa   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0041ac   f004
0041ae   0e07     movlw	0x7                	MOVLW	0x07
0041b0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0041b2   f005
                                           ;	.line	253; TCPIP_Stack/IP.c	IPHeaderLen = sizeof(IP_HEADER);
0041b4   0e14     movlw	0x14               	MOVLW	0x14
0041b6   010a     movlb	0xa                	BANKSEL	_IPHeaderLen
0041b8   6f8a     movwf	0x8a, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	255; TCPIP_Stack/IP.c	header.VersionIHL       = IP_VERSION | IP_IHL;
0041ba   0e45     movlw	0x45               	MOVLW	0x45
0041bc   0108     movlb	0x8                	BANKSEL	_IPPutHeader_header_1_1
0041be   6f95     movwf	0x95, 0x1          	MOVWF	_IPPutHeader_header_1_1, B
0041c0   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 1)
                                           ;	.line	256; TCPIP_Stack/IP.c	header.TypeOfService    = IP_SERVICE;
0041c2   6b96     clrf	0x96, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 1), B
                                           ;	.line	257; TCPIP_Stack/IP.c	header.TotalLength      = sizeof(header) + len;
0041c4   0e14     movlw	0x14               	MOVLW	0x14
0041c6   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0041c8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0041ca   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0041cc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0041ce   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 2)
0041d0   6f97     movwf	0x97, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 2), B
0041d2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0041d4   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 3)
0041d6   6f98     movwf	0x98, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 3), B
0041d8   0108     movlb	0x8                	BANKSEL	__Identifier
                                           ;	.line	258; TCPIP_Stack/IP.c	header.Identification   = ++_Identifier;
0041da   2b5e     incf	0x5e, 0x1, 0x1      	INCF	__Identifier, F, B
0041dc   e302     bnc	0x41e2               	BNC	_10137_DS_
0041de   0108     movlb	0x8                	BANKSEL	(__Identifier + 1)
0041e0   2b5f     incf	0x5f, 0x1, 0x1      	INCF	(__Identifier + 1), F, B
                                           _10137_DS_:
0041e2   0108     movlb	0x8                	BANKSEL	__Identifier
0041e4   515e     movf	0x5e, 0, 0x1        	MOVF	__Identifier, W, B
0041e6   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 4)
0041e8   6f99     movwf	0x99, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 4), B
0041ea   0108     movlb	0x8                	BANKSEL	(__Identifier + 1)
0041ec   515f     movf	0x5f, 0, 0x1        	MOVF	(__Identifier + 1), W, B
0041ee   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 5)
0041f0   6f9a     movwf	0x9a, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 5), B
0041f2   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 6)
                                           ;	.line	259; TCPIP_Stack/IP.c	header.FragmentInfo     = 0;
0041f4   6b9b     clrf	0x9b, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 6), B
0041f6   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 7)
0041f8   6b9c     clrf	0x9c, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 7), B
                                           ;	.line	260; TCPIP_Stack/IP.c	header.TimeToLive       = MY_IP_TTL;
0041fa   0e64     movlw	0x64               	MOVLW	0x64
0041fc   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 8)
0041fe   6f9d     movwf	0x9d, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 8), B
                                           ;	.line	261; TCPIP_Stack/IP.c	header.Protocol         = protocol;
004200   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004202   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 9)
004204   6f9e     movwf	0x9e, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 9), B
004206   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
                                           ;	.line	262; TCPIP_Stack/IP.c	header.HeaderChecksum   = 0;
004208   6b9f     clrf	0x9f, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 10), B
00420a   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
00420c   6ba0     clrf	0xa0, 0x1           	CLRF	(_IPPutHeader_header_1_1 + 11), B
00420e   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	264; TCPIP_Stack/IP.c	header.SourceAddress.Val 	= AppConfig.MyIPAddr.Val;
004210   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
004212   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 12)
004214   6fa1     movwf	0xa1, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 12), B
004216   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
004218   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
00421a   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 13)
00421c   6fa2     movwf	0xa2, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 13), B
00421e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
004220   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
004222   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 14)
004224   6fa3     movwf	0xa3, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 14), B
004226   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
004228   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
00422a   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 15)
00422c   6fa4     movwf	0xa4, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 15), B
                                           ;	.line	266; TCPIP_Stack/IP.c	header.DestAddress.Val = remote->IPAddr.Val;
00422e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004230   ffe9
004232   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004234   fff3
004236   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004238   ec43     call	0x7c86, 0           	CALL	__gptrget4
00423a   f03e
00423c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00423e   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
004240   f006
004242   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
004244   f007
004246   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
004248   f008
00424a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00424c   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 16)
00424e   6fa5     movwf	0xa5, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 16), B
004250   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004252   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 17)
004254   6fa6     movwf	0xa6, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 17), B
004256   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004258   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 18)
00425a   6fa7     movwf	0xa7, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 18), B
00425c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00425e   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 19)
004260   6fa8     movwf	0xa8, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 19), B
                                           ;	.line	268; TCPIP_Stack/IP.c	SwapIPHeader(&header);
004262   0e08     movlw	0x8                	MOVLW	HIGH(_IPPutHeader_header_1_1)
004264   6e06     movwf	0x6, 0             	MOVWF	r0x06
004266   0e95     movlw	0x95               	MOVLW	LOW(_IPPutHeader_header_1_1)
004268   6e03     movwf	0x3, 0             	MOVWF	r0x03
00426a   0e80     movlw	0x80               	MOVLW	0x80
00426c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00426e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004270   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004272   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004274   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004276   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004278   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00427a   ecc1     call	0x4b82, 0           	CALL	_SwapIPHeader
00427c   f025
00427e   0e03     movlw	0x3                	MOVLW	0x03
004280   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	270; TCPIP_Stack/IP.c	header.HeaderChecksum   = CalcIPChecksum((BYTE*)&header, sizeof(header));
004282   0e08     movlw	0x8                	MOVLW	HIGH(_IPPutHeader_header_1_1)
004284   6e06     movwf	0x6, 0             	MOVWF	r0x06
004286   0e95     movlw	0x95               	MOVLW	LOW(_IPPutHeader_header_1_1)
004288   6e03     movwf	0x3, 0             	MOVWF	r0x03
00428a   0e80     movlw	0x80               	MOVLW	0x80
00428c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00428e   0e00     movlw	0                  	MOVLW	0x00
004290   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004292   0e14     movlw	0x14               	MOVLW	0x14
004294   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004296   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004298   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00429a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00429c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00429e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0042a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042a2   ec7c     call	0x1ef8, 0           	CALL	_CalcIPChecksum
0042a4   f00f
0042a6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0042a8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0042aa   f006
0042ac   0e05     movlw	0x5                	MOVLW	0x05
0042ae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0042b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0042b2   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 10)
0042b4   6f9f     movwf	0x9f, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 10), B
0042b6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0042b8   0108     movlb	0x8                	BANKSEL	(_IPPutHeader_header_1_1 + 11)
0042ba   6fa0     movwf	0xa0, 0x1          	MOVWF	(_IPPutHeader_header_1_1 + 11), B
                                           ;	.line	272; TCPIP_Stack/IP.c	MACPutHeader(&remote->MACAddr, MAC_IP, (sizeof(header)+len));
0042bc   0e04     movlw	0x4                	MOVLW	0x04
0042be   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0042c0   0e00     movlw	0                  	MOVLW	0x00
0042c2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0042c4   0e00     movlw	0                  	MOVLW	0x00
0042c6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0042c8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0042ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042cc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0042ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042d0   0e00     movlw	0                  	MOVLW	0x00
0042d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042d4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0042d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042d8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0042da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0042de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042e0   ecb4     call	0x4f68, 0           	CALL	_MACPutHeader
0042e2   f027
0042e4   0e06     movlw	0x6                	MOVLW	0x06
0042e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	273; TCPIP_Stack/IP.c	MACPutArray((BYTE*)&header, sizeof(header));
0042e8   0e08     movlw	0x8                	MOVLW	HIGH(_IPPutHeader_header_1_1)
0042ea   6e01     movwf	0x1, 0             	MOVWF	r0x01
0042ec   0e95     movlw	0x95               	MOVLW	LOW(_IPPutHeader_header_1_1)
0042ee   6e00     movwf	0, 0               	MOVWF	r0x00
0042f0   0e80     movlw	0x80               	MOVLW	0x80
0042f2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0042f4   0e00     movlw	0                  	MOVLW	0x00
0042f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042f8   0e14     movlw	0x14               	MOVLW	0x14
0042fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0042fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004300   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
004302   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004304   5000     movf	0, 0, 0             	MOVF	r0x00, W
004306   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004308   ec9a     call	0x6d34, 0           	CALL	_MACPutArray
00430a   f036
00430c   0e05     movlw	0x5                	MOVLW	0x05
00430e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	275; TCPIP_Stack/IP.c	return 0x0000;
004310   6af3     clrf	0xf3, 0             	CLRF	PRODL
004312   6ae8     clrf	0xe8, 0             	CLRF	WREG
004314   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004316   f008
004318   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00431a   f007
00431c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00431e   f006
004320   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004322   f005
004324   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004326   f004
004328   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00432a   f003
00432c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00432e   f002
004330   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004332   f001
004334   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004336   f000
004338   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00433a   ffd9
00433c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_IP__IPGetHeader	code
                                           _IPGetHeader:
                                           ;	.line	136; TCPIP_Stack/IP.c	BOOL IPGetHeader(IP_ADDR *localIP,
0032d4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0032d6   ffe5
0032d8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0032da   ffd9
0032dc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0032de   ffe5
0032e0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0032e2   ffe5
0032e4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0032e6   ffe5
0032e8   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0032ea   ffe5
0032ec   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0032ee   ffe5
0032f0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0032f2   ffe5
0032f4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0032f6   ffe5
0032f8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0032fa   ffe5
0032fc   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0032fe   ffe5
003300   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003302   ffe5
003304   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003306   ffe5
003308   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00330a   ffe5
00330c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00330e   ffe5
003310   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003312   ffe5
003314   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003316   ffe5
003318   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00331a   ffe5
00331c   0e02     movlw	0x2                	MOVLW	0x02
00331e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003320   f000
003322   0e03     movlw	0x3                	MOVLW	0x03
003324   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003326   f001
003328   0e04     movlw	0x4                	MOVLW	0x04
00332a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00332c   f002
00332e   0e05     movlw	0x5                	MOVLW	0x05
003330   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003332   f003
003334   0e06     movlw	0x6                	MOVLW	0x06
003336   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003338   f004
00333a   0e07     movlw	0x7                	MOVLW	0x07
00333c   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00333e   f005
003340   0e08     movlw	0x8                	MOVLW	0x08
003342   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
003344   f006
003346   0e09     movlw	0x9                	MOVLW	0x09
003348   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
00334a   f007
00334c   0e0a     movlw	0xa                	MOVLW	0x0a
00334e   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
003350   f008
003352   0e0b     movlw	0xb                	MOVLW	0x0b
003354   cfdb     movff	0xfdb, 0x9         	MOVFF	PLUSW2, r0x09
003356   f009
003358   0e0c     movlw	0xc                	MOVLW	0x0c
00335a   cfdb     movff	0xfdb, 0xa         	MOVFF	PLUSW2, r0x0a
00335c   f00a
00335e   0e0d     movlw	0xd                	MOVLW	0x0d
003360   cfdb     movff	0xfdb, 0xb         	MOVFF	PLUSW2, r0x0b
003362   f00b
                                           ;	.line	153; TCPIP_Stack/IP.c	MACGetArray((BYTE*)&header, sizeof(header));
003364   0e08     movlw	0x8                	MOVLW	HIGH(_IPGetHeader_header_1_1)
003366   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
003368   0e81     movlw	0x81               	MOVLW	LOW(_IPGetHeader_header_1_1)
00336a   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00336c   0e80     movlw	0x80               	MOVLW	0x80
00336e   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
003370   0e00     movlw	0                  	MOVLW	0x00
003372   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003374   0e14     movlw	0x14               	MOVLW	0x14
003376   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003378   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00337a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00337c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00337e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003380   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003384   ec7d     call	0x62fa, 0           	CALL	_MACGetArray
003386   f031
003388   0e05     movlw	0x5                	MOVLW	0x05
00338a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	156; TCPIP_Stack/IP.c	if((header.VersionIHL & 0xf0) != IP_VERSION) return FALSE;
00338c   0ef0     movlw	0xf0               	MOVLW	0xf0
00338e   0108     movlb	0x8                	BANKSEL	_IPGetHeader_header_1_1
003390   1581     andwf	0x81, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
003392   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003394   6a0d     clrf	0xd, 0              	CLRF	r0x0d
003396   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003398   0a40     xorlw	0x40               	XORLW	0x40
00339a   e102     bnz	0x33a0               	BNZ	_00121_DS_
00339c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00339e   e002     bz	0x33a4                	BZ	_00106_DS_
                                           _00121_DS_:
0033a0   6ae8     clrf	0xe8, 0             	CLRF	WREG
0033a2   d0a0     bra	0x34e4               	BRA	_00113_DS_
                                           _00106_DS_:
0033a4   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 6)
                                           ;	.line	160; TCPIP_Stack/IP.c	if(header.FragmentInfo & 0xFF1F) return FALSE;
0033a6   5187     movf	0x87, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 6), W, B
0033a8   0b1f     andlw	0x1f               	ANDLW	0x1f
0033aa   e103     bnz	0x33b2               	BNZ	_00122_DS_
0033ac   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 7)
0033ae   5188     movf	0x88, 0, 0x1        	MOVF	(_IPGetHeader_header_1_1 + 7), W, B
0033b0   e002     bz	0x33b6                	BZ	_00108_DS_
                                           _00122_DS_:
0033b2   6ae8     clrf	0xe8, 0             	CLRF	WREG
0033b4   d097     bra	0x34e4               	BRA	_00113_DS_
                                           _00108_DS_:
                                           ;	.line	162; TCPIP_Stack/IP.c	IPHeaderLen = (header.VersionIHL & 0x0f) << 2;
0033b6   0e0f     movlw	0xf                	MOVLW	0x0f
0033b8   0108     movlb	0x8                	BANKSEL	_IPGetHeader_header_1_1
0033ba   1581     andwf	0x81, 0, 0x1       	ANDWF	_IPGetHeader_header_1_1, W, B
0033bc   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0033be   440c     rlncf	0xc, 0, 0          	RLNCF	r0x0c, W
0033c0   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0033c2   0bfc     andlw	0xfc               	ANDLW	0xfc
0033c4   010a     movlb	0xa                	BANKSEL	_IPHeaderLen
0033c6   6f8a     movwf	0x8a, 0x1          	MOVWF	_IPHeaderLen, B
                                           ;	.line	169; TCPIP_Stack/IP.c	CalcChecksum.Val = MACCalcRxChecksum(0, IPHeaderLen);
0033c8   ca8a     movff	0xa8a, 0xc         	MOVFF	_IPHeaderLen, r0x0c
0033ca   f00c
0033cc   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0033ce   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0033d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033d2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0033d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033d6   0e00     movlw	0                  	MOVLW	0x00
0033d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033da   0e00     movlw	0                  	MOVLW	0x00
0033dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0033de   ec4c     call	0x5698, 0           	CALL	_MACCalcRxChecksum
0033e0   f02b
0033e2   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0033e4   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
0033e6   f00d
0033e8   0e04     movlw	0x4                	MOVLW	0x04
0033ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0033ec   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0033ee   010a     movlb	0xa                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
0033f0   6f6e     movwf	0x6e, 0x1          	MOVWF	_IPGetHeader_CalcChecksum_1_1, B
0033f2   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0033f4   010a     movlb	0xa                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
0033f6   6f6f     movwf	0x6f, 0x1          	MOVWF	(_IPGetHeader_CalcChecksum_1_1 + 1), B
                                           ;	.line	172; TCPIP_Stack/IP.c	MACSetReadPtrInRx(IPHeaderLen);
0033f8   ca8a     movff	0xa8a, 0xc         	MOVFF	_IPHeaderLen, r0x0c
0033fa   f00c
0033fc   6a0d     clrf	0xd, 0              	CLRF	r0x0d
0033fe   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003400   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003402   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003406   ec01     call	0x6802, 0           	CALL	_MACSetReadPtrInRx
003408   f034
00340a   0e02     movlw	0x2                	MOVLW	0x02
00340c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00340e   010a     movlb	0xa                	BANKSEL	_IPGetHeader_CalcChecksum_1_1
                                           ;	.line	174; TCPIP_Stack/IP.c	if(CalcChecksum.Val)
003410   516e     movf	0x6e, 0, 0x1        	MOVF	_IPGetHeader_CalcChecksum_1_1, W, B
003412   010a     movlb	0xa                	BANKSEL	(_IPGetHeader_CalcChecksum_1_1 + 1)
003414   116f     iorwf	0x6f, 0, 0x1       	IORWF	(_IPGetHeader_CalcChecksum_1_1 + 1), W, B
003416   e002     bz	0x341c                	BZ	_00110_DS_
                                           ;	.line	209; TCPIP_Stack/IP.c	return FALSE;
003418   6ae8     clrf	0xe8, 0             	CLRF	WREG
00341a   d064     bra	0x34e4               	BRA	_00113_DS_
                                           _00110_DS_:
                                           ;	.line	213; TCPIP_Stack/IP.c	SwapIPHeader(&header);
00341c   0e08     movlw	0x8                	MOVLW	HIGH(_IPGetHeader_header_1_1)
00341e   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
003420   0e81     movlw	0x81               	MOVLW	LOW(_IPGetHeader_header_1_1)
003422   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003424   0e80     movlw	0x80               	MOVLW	0x80
003426   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
003428   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00342a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00342c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00342e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003430   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003432   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003434   ecc1     call	0x4b82, 0           	CALL	_SwapIPHeader
003436   f025
003438   0e03     movlw	0x3                	MOVLW	0x03
00343a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	217; TCPIP_Stack/IP.c	if ( localIP ) localIP->Val = header.DestAddress.Val;
00343c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00343e   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
003440   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
003442   e017     bz	0x3472                	BZ	_00112_DS_
003444   c891     movff	0x891, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 16), r0x0c
003446   f00c
003448   c892     movff	0x892, 0xd         	MOVFF	(_IPGetHeader_header_1_1 + 17), r0x0d
00344a   f00d
00344c   c893     movff	0x893, 0xe         	MOVFF	(_IPGetHeader_header_1_1 + 18), r0x0e
00344e   f00e
003450   c894     movff	0x894, 0xf         	MOVFF	(_IPGetHeader_header_1_1 + 19), r0x0f
003452   f00f
003454   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003456   ffe5
003458   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
00345a   fff4
00345c   c00e     movff	0xe, 0xff6         	MOVFF	r0x0e, TBLPTRL
00345e   fff6
003460   c00f     movff	0xf, 0xff7         	MOVFF	r0x0f, TBLPTRH
003462   fff7
003464   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003466   ffe9
003468   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00346a   fff3
00346c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00346e   ecbe     call	0x7f7c, 0           	CALL	__gptrput4
003470   f03f
                                           _00112_DS_:
                                           ;	.line	219; TCPIP_Stack/IP.c	remote->IPAddr.Val  = header.SourceAddress.Val;
003472   c88d     movff	0x88d, 0           	MOVFF	(_IPGetHeader_header_1_1 + 12), r0x00
003474   f000
003476   c88e     movff	0x88e, 0x1         	MOVFF	(_IPGetHeader_header_1_1 + 13), r0x01
003478   f001
00347a   c88f     movff	0x88f, 0x2         	MOVFF	(_IPGetHeader_header_1_1 + 14), r0x02
00347c   f002
00347e   c890     movff	0x890, 0xc         	MOVFF	(_IPGetHeader_header_1_1 + 15), r0x0c
003480   f00c
003482   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003484   ffe5
003486   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
003488   fff4
00348a   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
00348c   fff6
00348e   c00c     movff	0xc, 0xff7         	MOVFF	r0x0c, TBLPTRH
003490   fff7
003492   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003494   ffe9
003496   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003498   fff3
00349a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00349c   ecbe     call	0x7f7c, 0           	CALL	__gptrput4
00349e   f03f
                                           ;	.line	220; TCPIP_Stack/IP.c	*protocol           = header.Protocol;
0034a0   c88a     movff	0x88a, 0           	MOVFF	(_IPGetHeader_header_1_1 + 9), r0x00
0034a2   f000
0034a4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0034a6   ffe5
0034a8   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0034aa   ffe9
0034ac   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0034ae   fff3
0034b0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0034b2   ec50     call	0x80a0, 0           	CALL	__gptrput1
0034b4   f040
                                           ;	.line	221; TCPIP_Stack/IP.c	*len 		= header.TotalLength - IPHeaderLen;
0034b6   ca8a     movff	0xa8a, 0           	MOVFF	_IPHeaderLen, r0x00
0034b8   f000
0034ba   6a01     clrf	0x1, 0              	CLRF	r0x01
0034bc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0034be   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 2)
0034c0   5d83     subwf	0x83, 0, 0x1       	SUBWF	(_IPGetHeader_header_1_1 + 2), W, B
0034c2   6e00     movwf	0, 0               	MOVWF	r0x00
0034c4   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0034c6   0108     movlb	0x8                	BANKSEL	(_IPGetHeader_header_1_1 + 3)
0034c8   5984     subwfb	0x84, 0, 0x1      	SUBWFB	(_IPGetHeader_header_1_1 + 3), W, B
0034ca   6e01     movwf	0x1, 0             	MOVWF	r0x01
0034cc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0034ce   ffe5
0034d0   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
0034d2   fff4
0034d4   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
0034d6   ffe9
0034d8   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
0034da   fff3
0034dc   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0034de   ec30     call	0x8060, 0           	CALL	__gptrput2
0034e0   f040
                                           ;	.line	223; TCPIP_Stack/IP.c	return TRUE;
0034e2   0e01     movlw	0x1                	MOVLW	0x01
                                           _00113_DS_:
0034e4   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0034e6   f00f
0034e8   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0034ea   f00e
0034ec   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0034ee   f00d
0034f0   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0034f2   f00c
0034f4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0034f6   f00b
0034f8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0034fa   f00a
0034fc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0034fe   f009
003500   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003502   f008
003504   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003506   f007
003508   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00350a   f006
00350c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00350e   f005
003510   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003512   f004
003514   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003516   f003
003518   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00351a   f002
00351c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00351e   f001
003520   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003522   f000
003524   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003526   ffd9
003528   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1496 (0x05d8) bytes ( 1.14%)
                                           ;           	  748 (0x02ec) words
                                           ; udata size:	   43 (0x002b) bytes ( 1.12%)
                                           ; access size:	   16 (0x0010) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 20:48:42 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDListInit
                                           	global _LCDListIsEmpty
                                           	global _LCDListIsFull
                                           	global _LCDListPush
                                           	global _LCDListPop
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _strlcpy
                                           	extern __moduint
                                           	extern __mulint
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _LCDListReady	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           
                                           lcd_scn	udata
                                           _listLCD	res	378
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListPop	code
                                           _LCDListPop:
                                           ;	.line	81; TCPIP_Stack/LCDCircularList.c	char LCDListPop(char *order, char text[])
0046cc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0046ce   ffe5
0046d0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0046d2   ffd9
0046d4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0046d6   ffe5
0046d8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0046da   ffe5
0046dc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0046de   ffe5
0046e0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0046e2   ffe5
0046e4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0046e6   ffe5
0046e8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0046ea   ffe5
0046ec   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0046ee   ffe5
0046f0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0046f2   ffe5
0046f4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0046f6   ffe5
0046f8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0046fa   ffe5
0046fc   0e02     movlw	0x2                	MOVLW	0x02
0046fe   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004700   f000
004702   0e03     movlw	0x3                	MOVLW	0x03
004704   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004706   f001
004708   0e04     movlw	0x4                	MOVLW	0x04
00470a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00470c   f002
00470e   0e05     movlw	0x5                	MOVLW	0x05
004710   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
004712   f003
004714   0e06     movlw	0x6                	MOVLW	0x06
004716   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
004718   f004
00471a   0e07     movlw	0x7                	MOVLW	0x07
00471c   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00471e   f005
004720   0108     movlb	0x8                	BANKSEL	_LCDListReady
                                           ;	.line	84; TCPIP_Stack/LCDCircularList.c	if (!LCDListReady)
004722   5160     movf	0x60, 0, 0x1        	MOVF	_LCDListReady, W, B
004724   e102     bnz	0x472a               	BNZ	_00151_DS_
                                           ;	.line	85; TCPIP_Stack/LCDCircularList.c	return -1;
004726   68e8     setf	0xe8, 0             	SETF	WREG
004728   d093     bra	0x4850               	BRA	_00154_DS_
                                           _00151_DS_:
                                           ;	.line	86; TCPIP_Stack/LCDCircularList.c	if (LCDListIsEmpty())
00472a   ec9f     call	0x7d3e, 0           	CALL	_LCDListIsEmpty
00472c   f03e
00472e   6e06     movwf	0x6, 0             	MOVWF	r0x06
004730   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004732   e002     bz	0x4738                	BZ	_00153_DS_
                                           ;	.line	87; TCPIP_Stack/LCDCircularList.c	return -2;
004734   0efe     movlw	0xfe               	MOVLW	0xfe
004736   d08c     bra	0x4850               	BRA	_00154_DS_
                                           _00153_DS_:
004738   0104     movlb	0x4                	BANKSEL	(_listLCD + 377)
                                           ;	.line	89; TCPIP_Stack/LCDCircularList.c	*order = listLCD.op[listLCD.tail].order;
00473a   5179     movf	0x79, 0, 0x1        	MOVF	(_listLCD + 377), W, B
00473c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00473e   0104     movlb	0x4                	BANKSEL	(_listLCD + 376)
004740   5178     movf	0x78, 0, 0x1        	MOVF	(_listLCD + 376), W, B
004742   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004744   0e00     movlw	0                  	MOVLW	0x00
004746   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004748   0e22     movlw	0x22               	MOVLW	0x22
00474a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00474c   ec64     call	0x6ac8, 0           	CALL	__mulint
00474e   f035
004750   6e06     movwf	0x6, 0             	MOVWF	r0x06
004752   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
004754   f007
004756   0e04     movlw	0x4                	MOVLW	0x04
004758   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00475a   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
00475c   2406     addwf	0x6, 0, 0          	ADDWF	r0x06, W
00475e   6e08     movwf	0x8, 0             	MOVWF	r0x08
004760   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
004762   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
004764   6e09     movwf	0x9, 0             	MOVWF	r0x09
004766   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
004768   ffe9
00476a   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
00476c   ffea
00476e   cfef     movff	0xfef, 0x8         	MOVFF	INDF0, r0x08
004770   f008
004772   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004774   ffe5
004776   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004778   ffe9
00477a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00477c   fff3
00477e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004780   ec50     call	0x80a0, 0           	CALL	__gptrput1
004782   f040
                                           ;	.line	90; TCPIP_Stack/LCDCircularList.c	strlcpy(text, listLCD.op[listLCD.tail].text, ROWCHARS*2+1);
004784   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
004786   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
004788   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
00478a   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
00478c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00478e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004790   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
004792   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
004794   6e07     movwf	0x7, 0             	MOVWF	r0x07
004796   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004798   6e06     movwf	0x6, 0             	MOVWF	r0x06
00479a   0e80     movlw	0x80               	MOVLW	0x80
00479c   6e00     movwf	0, 0               	MOVWF	r0x00
00479e   0e00     movlw	0                  	MOVLW	0x00
0047a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047a2   0e21     movlw	0x21               	MOVLW	0x21
0047a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047a6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0047a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047aa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0047ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047ae   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0047b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047b2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0047b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047b6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0047b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047ba   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0047bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047be   ecb3     call	0x3d66, 0           	CALL	_strlcpy
0047c0   f01e
0047c2   0e08     movlw	0x8                	MOVLW	0x08
0047c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	92; TCPIP_Stack/LCDCircularList.c	listLCD.op[listLCD.tail].order = 0;
0047c6   c478     movff	0x478, 0           	MOVFF	(_listLCD + 376), r0x00
0047c8   f000
0047ca   c479     movff	0x479, 0x1         	MOVFF	(_listLCD + 377), r0x01
0047cc   f001
0047ce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0047d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047d2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0047d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047d6   0e00     movlw	0                  	MOVLW	0x00
0047d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047da   0e22     movlw	0x22               	MOVLW	0x22
0047dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0047de   ec64     call	0x6ac8, 0           	CALL	__mulint
0047e0   f035
0047e2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0047e4   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
0047e6   f003
0047e8   0e04     movlw	0x4                	MOVLW	0x04
0047ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0047ec   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
0047ee   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
0047f0   6e04     movwf	0x4, 0             	MOVWF	r0x04
0047f2   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
0047f4   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
0047f6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0047f8   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0047fa   ffe9
0047fc   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
0047fe   ffea
004800   0e00     movlw	0                  	MOVLW	0x00
004802   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	93; TCPIP_Stack/LCDCircularList.c	listLCD.op[listLCD.tail].text[0] = '\0';
004804   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
004806   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
004808   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
00480a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00480c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00480e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004810   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
004812   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
004814   ffe9
004816   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
004818   ffea
00481a   0e00     movlw	0                  	MOVLW	0x00
00481c   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	95; TCPIP_Stack/LCDCircularList.c	listLCD.tail = (listLCD.tail + 1) % OP_LIST_SIZE;
00481e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
004820   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004822   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004824   0e00     movlw	0                  	MOVLW	0x00
004826   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004828   0e0b     movlw	0xb                	MOVLW	0x0b
00482a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00482c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00482e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004830   5000     movf	0, 0, 0             	MOVF	r0x00, W
004832   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004834   ec5e     call	0x68bc, 0           	CALL	__moduint
004836   f034
004838   6e00     movwf	0, 0               	MOVWF	r0x00
00483a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00483c   f001
00483e   0e04     movlw	0x4                	MOVLW	0x04
004840   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004842   5000     movf	0, 0, 0             	MOVF	r0x00, W
004844   0104     movlb	0x4                	BANKSEL	(_listLCD + 376)
004846   6f78     movwf	0x78, 0x1          	MOVWF	(_listLCD + 376), B
004848   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00484a   0104     movlb	0x4                	BANKSEL	(_listLCD + 377)
00484c   6f79     movwf	0x79, 0x1          	MOVWF	(_listLCD + 377), B
                                           ;	.line	96; TCPIP_Stack/LCDCircularList.c	return 0;
00484e   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00154_DS_:
004850   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004852   f009
004854   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004856   f008
004858   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00485a   f007
00485c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00485e   f006
004860   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004862   f005
004864   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004866   f004
004868   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00486a   f003
00486c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00486e   f002
004870   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004872   f001
004874   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004876   f000
004878   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00487a   ffd9
00487c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListPush	code
                                           _LCDListPush:
                                           ;	.line	66; TCPIP_Stack/LCDCircularList.c	char LCDListPush(char order, char text[])
005320   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005322   ffe5
005324   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005326   ffd9
005328   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00532a   ffe5
00532c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00532e   ffe5
005330   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005332   ffe5
005334   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005336   ffe5
005338   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00533a   ffe5
00533c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00533e   ffe5
005340   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005342   ffe5
005344   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005346   ffe5
005348   0e02     movlw	0x2                	MOVLW	0x02
00534a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00534c   f000
00534e   0e03     movlw	0x3                	MOVLW	0x03
005350   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005352   f001
005354   0e04     movlw	0x4                	MOVLW	0x04
005356   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005358   f002
00535a   0e05     movlw	0x5                	MOVLW	0x05
00535c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00535e   f003
005360   0108     movlb	0x8                	BANKSEL	_LCDListReady
                                           ;	.line	69; TCPIP_Stack/LCDCircularList.c	if (!LCDListReady)
005362   5160     movf	0x60, 0, 0x1        	MOVF	_LCDListReady, W, B
005364   e102     bnz	0x536a               	BNZ	_00142_DS_
                                           ;	.line	70; TCPIP_Stack/LCDCircularList.c	return -1;
005366   68e8     setf	0xe8, 0             	SETF	WREG
005368   d063     bra	0x5430               	BRA	_00145_DS_
                                           _00142_DS_:
                                           ;	.line	71; TCPIP_Stack/LCDCircularList.c	if (LCDListIsFull())
00536a   ec5b     call	0x72b6, 0           	CALL	_LCDListIsFull
00536c   f039
00536e   6e04     movwf	0x4, 0             	MOVWF	r0x04
005370   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005372   e002     bz	0x5378                	BZ	_00144_DS_
                                           ;	.line	72; TCPIP_Stack/LCDCircularList.c	return -2;
005374   0efe     movlw	0xfe               	MOVLW	0xfe
005376   d05c     bra	0x5430               	BRA	_00145_DS_
                                           _00144_DS_:
005378   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
                                           ;	.line	74; TCPIP_Stack/LCDCircularList.c	listLCD.op[listLCD.head].order = order;
00537a   5177     movf	0x77, 0, 0x1        	MOVF	(_listLCD + 375), W, B
00537c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00537e   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
005380   5176     movf	0x76, 0, 0x1        	MOVF	(_listLCD + 374), W, B
005382   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005384   0e00     movlw	0                  	MOVLW	0x00
005386   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005388   0e22     movlw	0x22               	MOVLW	0x22
00538a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00538c   ec64     call	0x6ac8, 0           	CALL	__mulint
00538e   f035
005390   6e04     movwf	0x4, 0             	MOVWF	r0x04
005392   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
005394   f005
005396   0e04     movlw	0x4                	MOVLW	0x04
005398   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00539a   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
00539c   2404     addwf	0x4, 0, 0          	ADDWF	r0x04, W
00539e   6e06     movwf	0x6, 0             	MOVWF	r0x06
0053a0   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
0053a2   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0053a4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0053a6   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0053a8   ffe9
0053aa   c007     movff	0x7, 0xfea         	MOVFF	r0x07, FSR0H
0053ac   ffea
0053ae   c000     movff	0, 0xfef           	MOVFF	r0x00, INDF0
0053b0   ffef
                                           ;	.line	75; TCPIP_Stack/LCDCircularList.c	strlcpy(listLCD.op[listLCD.head].text, text, ROWCHARS*2+1);
0053b2   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
0053b4   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
0053b6   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
0053b8   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0053ba   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0053bc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0053be   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0053c0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0053c2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0053c4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0053c6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0053c8   0e80     movlw	0x80               	MOVLW	0x80
0053ca   6e00     movwf	0, 0               	MOVWF	r0x00
0053cc   0e00     movlw	0                  	MOVLW	0x00
0053ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053d0   0e21     movlw	0x21               	MOVLW	0x21
0053d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0053d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0053da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0053de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0053e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053e4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0053e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053e8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0053ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053ec   ecb3     call	0x3d66, 0           	CALL	_strlcpy
0053ee   f01e
0053f0   0e08     movlw	0x8                	MOVLW	0x08
0053f2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0053f4   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
                                           ;	.line	77; TCPIP_Stack/LCDCircularList.c	listLCD.head = (listLCD.head + 1) % OP_LIST_SIZE;
0053f6   5176     movf	0x76, 0, 0x1        	MOVF	(_listLCD + 374), W, B
0053f8   0f01     addlw	0x1                	ADDLW	0x01
0053fa   6e00     movwf	0, 0               	MOVWF	r0x00
0053fc   0e00     movlw	0                  	MOVLW	0x00
0053fe   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
005400   2177     addwfc	0x77, 0, 0x1      	ADDWFC	(_listLCD + 375), W, B
005402   6e01     movwf	0x1, 0             	MOVWF	r0x01
005404   0e00     movlw	0                  	MOVLW	0x00
005406   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005408   0e0b     movlw	0xb                	MOVLW	0x0b
00540a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00540c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00540e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005410   5000     movf	0, 0, 0             	MOVF	r0x00, W
005412   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005414   ec5e     call	0x68bc, 0           	CALL	__moduint
005416   f034
005418   6e00     movwf	0, 0               	MOVWF	r0x00
00541a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00541c   f001
00541e   0e04     movlw	0x4                	MOVLW	0x04
005420   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005422   5000     movf	0, 0, 0             	MOVF	r0x00, W
005424   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
005426   6f76     movwf	0x76, 0x1          	MOVWF	(_listLCD + 374), B
005428   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00542a   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
00542c   6f77     movwf	0x77, 0x1          	MOVWF	(_listLCD + 375), B
                                           ;	.line	78; TCPIP_Stack/LCDCircularList.c	return 0;
00542e   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00145_DS_:
005430   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005432   f007
005434   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005436   f006
005438   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00543a   f005
00543c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00543e   f004
005440   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005442   f003
005444   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005446   f002
005448   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00544a   f001
00544c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00544e   f000
005450   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005452   ffd9
005454   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListIsFull	code
                                           _LCDListIsFull:
                                           ;	.line	58; TCPIP_Stack/LCDCircularList.c	char LCDListIsFull(void)
0072b6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0072b8   ffe5
0072ba   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0072bc   ffd9
0072be   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0072c0   ffe5
0072c2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0072c4   ffe5
0072c6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0072c8   ffe5
0072ca   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0072cc   ffe5
0072ce   0108     movlb	0x8                	BANKSEL	_LCDListReady
                                           ;	.line	61; TCPIP_Stack/LCDCircularList.c	if (!LCDListReady)
0072d0   5160     movf	0x60, 0, 0x1        	MOVF	_LCDListReady, W, B
0072d2   e102     bnz	0x72d8               	BNZ	_00131_DS_
                                           ;	.line	62; TCPIP_Stack/LCDCircularList.c	return -1;
0072d4   68e8     setf	0xe8, 0             	SETF	WREG
0072d6   d026     bra	0x7324               	BRA	_00132_DS_
                                           _00131_DS_:
                                           ;	.line	63; TCPIP_Stack/LCDCircularList.c	return (listLCD.tail == ((listLCD.head + 1) % OP_LIST_SIZE));
0072d8   c478     movff	0x478, 0           	MOVFF	(_listLCD + 376), r0x00
0072da   f000
0072dc   c479     movff	0x479, 0x1         	MOVFF	(_listLCD + 377), r0x01
0072de   f001
0072e0   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
0072e2   5176     movf	0x76, 0, 0x1        	MOVF	(_listLCD + 374), W, B
0072e4   0f01     addlw	0x1                	ADDLW	0x01
0072e6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0072e8   0e00     movlw	0                  	MOVLW	0x00
0072ea   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
0072ec   2177     addwfc	0x77, 0, 0x1      	ADDWFC	(_listLCD + 375), W, B
0072ee   6e03     movwf	0x3, 0             	MOVWF	r0x03
0072f0   0e00     movlw	0                  	MOVLW	0x00
0072f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072f4   0e0b     movlw	0xb                	MOVLW	0x0b
0072f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072f8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0072fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0072fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0072fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007300   ec5e     call	0x68bc, 0           	CALL	__moduint
007302   f034
007304   6e02     movwf	0x2, 0             	MOVWF	r0x02
007306   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
007308   f003
00730a   0e04     movlw	0x4                	MOVLW	0x04
00730c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00730e   5000     movf	0, 0, 0             	MOVF	r0x00, W
007310   1802     xorwf	0x2, 0, 0          	XORWF	r0x02, W
007312   e106     bnz	0x7320               	BNZ	_00135_DS_
007314   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007316   1803     xorwf	0x3, 0, 0          	XORWF	r0x03, W
007318   e103     bnz	0x7320               	BNZ	_00135_DS_
00731a   6a00     clrf	0, 0                	CLRF	r0x00
00731c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00731e   d001     bra	0x7322               	BRA	_00136_DS_
                                           _00135_DS_:
007320   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00136_DS_:
007322   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00132_DS_:
007324   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007326   f003
007328   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00732a   f002
00732c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00732e   f001
007330   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007332   f000
007334   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007336   ffd9
007338   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListIsEmpty	code
                                           _LCDListIsEmpty:
                                           ;	.line	50; TCPIP_Stack/LCDCircularList.c	char LCDListIsEmpty(void)
007d3e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007d40   ffe5
007d42   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007d44   ffd9
007d46   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007d48   ffe5
007d4a   0108     movlb	0x8                	BANKSEL	_LCDListReady
                                           ;	.line	53; TCPIP_Stack/LCDCircularList.c	if (!LCDListReady)
007d4c   5160     movf	0x60, 0, 0x1        	MOVF	_LCDListReady, W, B
007d4e   e102     bnz	0x7d54               	BNZ	_00120_DS_
                                           ;	.line	54; TCPIP_Stack/LCDCircularList.c	return -1;
007d50   68e8     setf	0xe8, 0             	SETF	WREG
007d52   d00d     bra	0x7d6e               	BRA	_00121_DS_
                                           _00120_DS_:
                                           ;	.line	55; TCPIP_Stack/LCDCircularList.c	return (listLCD.head == listLCD.tail);
007d54   6a00     clrf	0, 0                	CLRF	r0x00
007d56   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
007d58   5176     movf	0x76, 0, 0x1        	MOVF	(_listLCD + 374), W, B
007d5a   0104     movlb	0x4                	BANKSEL	(_listLCD + 376)
007d5c   1978     xorwf	0x78, 0, 0x1       	XORWF	(_listLCD + 376), W, B
007d5e   e106     bnz	0x7d6c               	BNZ	_00125_DS_
007d60   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
007d62   5177     movf	0x77, 0, 0x1        	MOVF	(_listLCD + 375), W, B
007d64   0104     movlb	0x4                	BANKSEL	(_listLCD + 377)
007d66   1979     xorwf	0x79, 0, 0x1       	XORWF	(_listLCD + 377), W, B
007d68   e101     bnz	0x7d6c               	BNZ	_00125_DS_
007d6a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           _00125_DS_:
007d6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00121_DS_:
007d6e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007d70   f000
007d72   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007d74   ffd9
007d76   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDCircularList__LCDListInit	code
                                           _LCDListInit:
                                           ;	.line	34; TCPIP_Stack/LCDCircularList.c	char LCDListInit()
006974   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006976   ffe5
006978   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00697a   ffd9
00697c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00697e   ffe5
006980   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006982   ffe5
006984   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006986   ffe5
006988   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00698a   ffe5
00698c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00698e   ffe5
006990   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006992   ffe5
006994   0104     movlb	0x4                	BANKSEL	(_listLCD + 374)
                                           ;	.line	37; TCPIP_Stack/LCDCircularList.c	listLCD.head = 0;
006996   6b76     clrf	0x76, 0x1           	CLRF	(_listLCD + 374), B
006998   0104     movlb	0x4                	BANKSEL	(_listLCD + 375)
00699a   6b77     clrf	0x77, 0x1           	CLRF	(_listLCD + 375), B
00699c   0104     movlb	0x4                	BANKSEL	(_listLCD + 376)
                                           ;	.line	38; TCPIP_Stack/LCDCircularList.c	listLCD.tail = 0;
00699e   6b78     clrf	0x78, 0x1           	CLRF	(_listLCD + 376), B
0069a0   0104     movlb	0x4                	BANKSEL	(_listLCD + 377)
0069a2   6b79     clrf	0x79, 0x1           	CLRF	(_listLCD + 377), B
                                           ;	.line	40; TCPIP_Stack/LCDCircularList.c	for (i=0; i<OP_LIST_SIZE; i++)
0069a4   6a00     clrf	0, 0                	CLRF	r0x00
0069a6   6a01     clrf	0x1, 0              	CLRF	r0x01
0069a8   6a02     clrf	0x2, 0              	CLRF	r0x02
0069aa   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00105_DS_:
0069ac   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0069ae   0f80     addlw	0x80               	ADDLW	0x80
0069b0   0f80     addlw	0x80               	ADDLW	0x80
0069b2   e102     bnz	0x69b8               	BNZ	_00114_DS_
0069b4   0e0b     movlw	0xb                	MOVLW	0x0b
0069b6   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00114_DS_:
0069b8   e223     bc	0x6a00                	BC	_00108_DS_
                                           ;	.line	42; TCPIP_Stack/LCDCircularList.c	listLCD.op[i].order = 0;
0069ba   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
0069bc   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
0069be   6e04     movwf	0x4, 0             	MOVWF	r0x04
0069c0   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
0069c2   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
0069c4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0069c6   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0069c8   ffe9
0069ca   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
0069cc   ffea
0069ce   0e00     movlw	0                  	MOVLW	0x00
0069d0   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	43; TCPIP_Stack/LCDCircularList.c	listLCD.op[i].text[0] = '\0';
0069d2   0e00     movlw	0                  	MOVLW	LOW(_listLCD)
0069d4   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
0069d6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0069d8   0e03     movlw	0x3                	MOVLW	HIGH(_listLCD)
0069da   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
0069dc   6e05     movwf	0x5, 0             	MOVWF	r0x05
0069de   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0069e0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0069e2   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0069e4   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0069e6   ffe9
0069e8   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
0069ea   ffea
0069ec   0e00     movlw	0                  	MOVLW	0x00
0069ee   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	40; TCPIP_Stack/LCDCircularList.c	for (i=0; i<OP_LIST_SIZE; i++)
0069f0   0e22     movlw	0x22               	MOVLW	0x22
0069f2   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
0069f4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0069f6   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0069f8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0069fa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0069fc   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0069fe   d7d6     bra	0x69ac               	BRA	_00105_DS_
                                           _00108_DS_:
                                           ;	.line	46; TCPIP_Stack/LCDCircularList.c	LCDListReady = 1;
006a00   0e01     movlw	0x1                	MOVLW	0x01
006a02   0108     movlb	0x8                	BANKSEL	_LCDListReady
006a04   6f60     movwf	0x60, 0x1          	MOVWF	_LCDListReady, B
                                           ;	.line	47; TCPIP_Stack/LCDCircularList.c	return 0;
006a06   6ae8     clrf	0xe8, 0             	CLRF	WREG
006a08   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006a0a   f005
006a0c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006a0e   f004
006a10   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006a12   f003
006a14   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006a16   f002
006a18   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006a1a   f001
006a1c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006a1e   f000
006a20   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006a22   ffd9
006a24   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1112 (0x0458) bytes ( 0.85%)
                                           ;           	  556 (0x022c) words
                                           ; udata size:	  378 (0x017a) bytes ( 9.84%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Mon Dec 11 01:24:42 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _LCDTaskInit
                                           	global _LCDTask
                                           	global _LCDInit
                                           	global _LCDErase
                                           	global _LCDUpdate
                                           	global _LCDText
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _memset
                                           	extern _LCDListInit
                                           	extern _LCDListIsEmpty
                                           	extern _LCDListPush
                                           	extern _LCDListPop
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_LCDNonBlocking_0	udata
                                           _LCDi	res	1
                                           
                                           udata_LCDNonBlocking_1	udata
                                           _LCDj	res	1
                                           
                                           udata_LCDNonBlocking_2	udata
                                           _st_init	res	1
                                           
                                           udata_LCDNonBlocking_3	udata
                                           _st_update	res	1
                                           
                                           udata_LCDNonBlocking_4	udata
                                           _st_erase	res	1
                                           
                                           udata_LCDNonBlocking_5	udata
                                           _LCDWaiting	res	1
                                           
                                           udata_LCDNonBlocking_6	udata
                                           _LCDOpInProgress	res	1
                                           
                                           udata_LCDNonBlocking_7	udata
                                           _LCDCurrentOrder	res	1
                                           
                                           udata_LCDNonBlocking_8	udata
                                           _LCDText	res	33
                                           
                                           udata_LCDNonBlocking_9	udata
                                           _LCDCurrentText	res	33
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDUpdate	code
                                           _LCDUpdate:
                                           ;	.line	588; TCPIP_Stack/LCDNonBlocking.c	void LCDUpdate(void)
007aea   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007aec   ffe5
007aee   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007af0   ffd9
007af2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007af4   ffe5
007af6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007af8   ffe5
007afa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007afc   ffe5
                                           ;	.line	590; TCPIP_Stack/LCDNonBlocking.c	LCDListPush(3, LCDText);
007afe   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
007b00   6e01     movwf	0x1, 0             	MOVWF	r0x01
007b02   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
007b04   6e00     movwf	0, 0               	MOVWF	r0x00
007b06   0e80     movlw	0x80               	MOVLW	0x80
007b08   6e02     movwf	0x2, 0             	MOVWF	r0x02
007b0a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007b0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b0e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
007b10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b12   5000     movf	0, 0, 0             	MOVF	r0x00, W
007b14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b16   0e03     movlw	0x3                	MOVLW	0x03
007b18   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007b1a   ec90     call	0x5320, 0           	CALL	_LCDListPush
007b1c   f029
007b1e   0e04     movlw	0x4                	MOVLW	0x04
007b20   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007b22   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007b24   f002
007b26   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007b28   f001
007b2a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007b2c   f000
007b2e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007b30   ffd9
007b32   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDErase	code
                                           _LCDErase:
                                           ;	.line	565; TCPIP_Stack/LCDNonBlocking.c	void LCDErase(void)
007e86   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007e88   ffe5
007e8a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007e8c   ffd9
                                           ;	.line	567; TCPIP_Stack/LCDNonBlocking.c	LCDListPush(2, "");
007e8e   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
007e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e92   0e77     movlw	0x77               	MOVLW	HIGH(__str_0)
007e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e96   0e4a     movlw	0x4a               	MOVLW	LOW(__str_0)
007e98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e9a   0e02     movlw	0x2                	MOVLW	0x02
007e9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007e9e   ec90     call	0x5320, 0           	CALL	_LCDListPush
007ea0   f029
007ea2   0e04     movlw	0x4                	MOVLW	0x04
007ea4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007ea6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007ea8   ffd9
007eaa   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDInit	code
                                           _LCDInit:
                                           ;	.line	545; TCPIP_Stack/LCDNonBlocking.c	void LCDInit(void)
007eac   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007eae   ffe5
007eb0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007eb2   ffd9
                                           ;	.line	547; TCPIP_Stack/LCDNonBlocking.c	LCDListPush(1, "");
007eb4   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
007eb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007eb8   0e77     movlw	0x77               	MOVLW	HIGH(__str_0)
007eba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ebc   0e4a     movlw	0x4a               	MOVLW	LOW(__str_0)
007ebe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ec0   0e01     movlw	0x1                	MOVLW	0x01
007ec2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007ec4   ec90     call	0x5320, 0           	CALL	_LCDListPush
007ec6   f029
007ec8   0e04     movlw	0x4                	MOVLW	0x04
007eca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007ecc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007ece   ffd9
007ed0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDTask	code
                                           _LCDTask:
                                           ;	.line	489; TCPIP_Stack/LCDNonBlocking.c	void LCDTask(void)
0059e6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0059e8   ffe5
0059ea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0059ec   ffd9
0059ee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0059f0   ffe5
0059f2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0059f4   ffe5
0059f6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0059f8   ffe5
0059fa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0059fc   ffe5
0059fe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005a00   ffe5
005a02   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005a04   ffe5
                                           ;	.line	491; TCPIP_Stack/LCDNonBlocking.c	if (PIR1bits.TMR1IF && LCDWaiting)		// Time expired
005a06   a09e     btfss	0x9e, 0, 0         	BTFSS	_PIR1bits, 0
005a08   d007     bra	0x5a18               	BRA	_00241_DS_
005a0a   010a     movlb	0xa                	BANKSEL	_LCDWaiting
005a0c   5190     movf	0x90, 0, 0x1        	MOVF	_LCDWaiting, W, B
005a0e   e004     bz	0x5a18                	BZ	_00241_DS_
005a10   010a     movlb	0xa                	BANKSEL	_LCDWaiting
                                           ;	.line	493; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 0;
005a12   6b90     clrf	0x90, 0x1           	CLRF	_LCDWaiting, B
                                           ;	.line	494; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON = 0;
005a14   90cd     bcf	0xcd, 0, 0           	BCF	_T1CONbits, 0
                                           ;	.line	495; TCPIP_Stack/LCDNonBlocking.c	PIR1bits.TMR1IF = 0;
005a16   909e     bcf	0x9e, 0, 0           	BCF	_PIR1bits, 0
                                           _00241_DS_:
005a18   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	497; TCPIP_Stack/LCDNonBlocking.c	if (!LCDOpInProgress)				// No operations being executed
005a1a   5191     movf	0x91, 0, 0x1        	MOVF	_LCDOpInProgress, W, B
005a1c   e124     bnz	0x5a66               	BNZ	_00246_DS_
                                           ;	.line	499; TCPIP_Stack/LCDNonBlocking.c	if (!LCDListIsEmpty())				// The list contains at least one operation
005a1e   ec9f     call	0x7d3e, 0           	CALL	_LCDListIsEmpty
005a20   f03e
005a22   6e00     movwf	0, 0               	MOVWF	r0x00
005a24   5000     movf	0, 0, 0             	MOVF	r0x00, W
005a26   e11f     bnz	0x5a66               	BNZ	_00246_DS_
                                           ;	.line	501; TCPIP_Stack/LCDNonBlocking.c	LCDListPop(&LCDCurrentOrder, LCDCurrentText);			// Retrieve the operation to execute
005a28   0e0a     movlw	0xa                	MOVLW	HIGH(_LCDCurrentOrder)
005a2a   6e01     movwf	0x1, 0             	MOVWF	r0x01
005a2c   0e92     movlw	0x92               	MOVLW	LOW(_LCDCurrentOrder)
005a2e   6e00     movwf	0, 0               	MOVWF	r0x00
005a30   0e80     movlw	0x80               	MOVLW	0x80
005a32   6e02     movwf	0x2, 0             	MOVWF	r0x02
005a34   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
005a36   6e04     movwf	0x4, 0             	MOVWF	r0x04
005a38   0e54     movlw	0x54               	MOVLW	LOW(_LCDCurrentText)
005a3a   6e03     movwf	0x3, 0             	MOVWF	r0x03
005a3c   0e80     movlw	0x80               	MOVLW	0x80
005a3e   6e05     movwf	0x5, 0             	MOVWF	r0x05
005a40   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005a42   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a44   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005a46   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a48   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005a4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a4c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005a4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a50   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005a52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a54   5000     movf	0, 0, 0             	MOVF	r0x00, W
005a56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005a58   ec66     call	0x46cc, 0           	CALL	_LCDListPop
005a5a   f023
005a5c   0e06     movlw	0x6                	MOVLW	0x06
005a5e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	502; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 1;		// Set the execution flag
005a60   0e01     movlw	0x1                	MOVLW	0x01
005a62   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
005a64   6f91     movwf	0x91, 0x1          	MOVWF	_LCDOpInProgress, B
                                           _00246_DS_:
005a66   010a     movlb	0xa                	BANKSEL	_LCDWaiting
                                           ;	.line	505; TCPIP_Stack/LCDNonBlocking.c	if (!LCDWaiting && LCDOpInProgress)				// Not waiting for timers
005a68   5190     movf	0x90, 0, 0x1        	MOVF	_LCDWaiting, W, B
005a6a   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
005a6c   d039     bra	0x5ae0               	BRA	_00255_DS_
005a6e   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
005a70   5191     movf	0x91, 0, 0x1        	MOVF	_LCDOpInProgress, W, B
005a72   e036     bz	0x5ae0                	BZ	_00255_DS_
005a74   010a     movlb	0xa                	BANKSEL	_LCDCurrentOrder
                                           ;	.line	507; TCPIP_Stack/LCDNonBlocking.c	switch (LCDCurrentOrder)
005a76   5192     movf	0x92, 0, 0x1        	MOVF	_LCDCurrentOrder, W, B
005a78   0f80     addlw	0x80               	ADDLW	0x80
005a7a   0f7f     addlw	0x7f               	ADDLW	0x7f
005a7c   e331     bnc	0x5ae0               	BNC	_00255_DS_
005a7e   010a     movlb	0xa                	BANKSEL	_LCDCurrentOrder
005a80   5192     movf	0x92, 0, 0x1        	MOVF	_LCDCurrentOrder, W, B
005a82   0f80     addlw	0x80               	ADDLW	0x80
005a84   0f7c     addlw	0x7c               	ADDLW	0x7c
005a86   e22c     bc	0x5ae0                	BC	_00255_DS_
005a88   010a     movlb	0xa                	BANKSEL	_LCDCurrentOrder
005a8a   0592     decf	0x92, 0, 0x1        	DECF	_LCDCurrentOrder, W, B
005a8c   6e00     movwf	0, 0               	MOVWF	r0x00
005a8e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005a90   ffe5
005a92   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005a94   ffe5
005a96   6a07     clrf	0x7, 0              	CLRF	r0x07
005a98   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
005a9a   3607     rlcf	0x7, 0x1, 0         	RLCF	r0x07, F
005a9c   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
005a9e   3607     rlcf	0x7, 0x1, 0         	RLCF	r0x07, F
005aa0   0bfc     andlw	0xfc               	ANDLW	0xfc
005aa2   6e06     movwf	0x6, 0             	MOVWF	r0x06
005aa4   0e00     movlw	0                  	MOVLW	UPPER(_00267_DS_)
005aa6   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
005aa8   0e5a     movlw	0x5a               	MOVLW	HIGH(_00267_DS_)
005aaa   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
005aac   0ec4     movlw	0xc4               	MOVLW	LOW(_00267_DS_)
005aae   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
005ab0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
005ab2   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
005ab4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005ab6   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
005ab8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005aba   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005abc   f007
005abe   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005ac0   f006
005ac2   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00267_DS_:
005ac4   ef68     goto	0x5ad0              	GOTO	_00247_DS_
005ac6   f02d
005ac8   ef6b     goto	0x5ad6              	GOTO	_00248_DS_
005aca   f02d
005acc   ef6e     goto	0x5adc              	GOTO	_00249_DS_
005ace   f02d
                                           _00247_DS_:
                                           ;	.line	510; TCPIP_Stack/LCDNonBlocking.c	LCDInitExec();
005ad0   ec95     call	0x352a, 0           	CALL	_LCDInitExec
005ad2   f01a
                                           ;	.line	511; TCPIP_Stack/LCDNonBlocking.c	break;
005ad4   d005     bra	0x5ae0               	BRA	_00255_DS_
                                           _00248_DS_:
                                           ;	.line	514; TCPIP_Stack/LCDNonBlocking.c	LCDEraseExec();
005ad6   ec98     call	0x7530, 0           	CALL	_LCDEraseExec
005ad8   f03a
                                           ;	.line	515; TCPIP_Stack/LCDNonBlocking.c	break;
005ada   d002     bra	0x5ae0               	BRA	_00255_DS_
                                           _00249_DS_:
                                           ;	.line	518; TCPIP_Stack/LCDNonBlocking.c	LCDUpdateExec();
005adc   ecb2     call	0x3b64, 0           	CALL	_LCDUpdateExec
005ade   f01d
                                           _00255_DS_:
                                           ;	.line	524; TCPIP_Stack/LCDNonBlocking.c	}
005ae0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005ae2   f005
005ae4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005ae6   f004
005ae8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005aea   f003
005aec   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005aee   f002
005af0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005af2   f001
005af4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005af6   f000
005af8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005afa   ffd9
005afc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDTaskInit	code
                                           _LCDTaskInit:
                                           ;	.line	465; TCPIP_Stack/LCDNonBlocking.c	void LCDTaskInit(void)
007d02   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007d04   ffe5
007d06   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007d08   ffd9
007d0a   010a     movlb	0xa                	BANKSEL	_st_init
                                           ;	.line	468; TCPIP_Stack/LCDNonBlocking.c	st_init   = LCD_RESET;
007d0c   6b8d     clrf	0x8d, 0x1           	CLRF	_st_init, B
007d0e   010a     movlb	0xa                	BANKSEL	_st_update
                                           ;	.line	469; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_GOTOFIRSTLINE;
007d10   6b8e     clrf	0x8e, 0x1           	CLRF	_st_update, B
007d12   010a     movlb	0xa                	BANKSEL	_st_erase
                                           ;	.line	470; TCPIP_Stack/LCDNonBlocking.c	st_erase  = LCD_CLEARDISPLAY;
007d14   6b8f     clrf	0x8f, 0x1           	CLRF	_st_erase, B
007d16   010a     movlb	0xa                	BANKSEL	_LCDWaiting
                                           ;	.line	472; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 0;
007d18   6b90     clrf	0x90, 0x1           	CLRF	_LCDWaiting, B
007d1a   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	473; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 0;
007d1c   6b91     clrf	0x91, 0x1           	CLRF	_LCDOpInProgress, B
007d1e   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	474; TCPIP_Stack/LCDNonBlocking.c	LCDi = 0;
007d20   6b8b     clrf	0x8b, 0x1           	CLRF	_LCDi, B
007d22   010a     movlb	0xa                	BANKSEL	_LCDj
                                           ;	.line	475; TCPIP_Stack/LCDNonBlocking.c	LCDj = 0;
007d24   6b8c     clrf	0x8c, 0x1           	CLRF	_LCDj, B
                                           ;	.line	477; TCPIP_Stack/LCDNonBlocking.c	LCDListInit();
007d26   ecba     call	0x6974, 0           	CALL	_LCDListInit
007d28   f034
                                           ;	.line	479; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	0;		// disable timer1
007d2a   90cd     bcf	0xcd, 0, 0           	BCF	_T1CONbits, 0
                                           ;	.line	480; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.RD16		=	1;		// use timer1 16-bit counter
007d2c   8ecd     bsf	0xcd, 0x7, 0         	BSF	_T1CONbits, 7
                                           ;	.line	481; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.T1CKPS0	=	0;		// prescaler set to 1:1
007d2e   98cd     bcf	0xcd, 0x4, 0         	BCF	_T1CONbits, 4
                                           ;	.line	482; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.T1CKPS1	=	0;
007d30   9acd     bcf	0xcd, 0x5, 0         	BCF	_T1CONbits, 5
                                           ;	.line	483; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.T1OSCEN	=	1;		// timer1 oscillator enable
007d32   86cd     bsf	0xcd, 0x3, 0         	BSF	_T1CONbits, 3
                                           ;	.line	484; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1CS	=	1;		// external clock selected
007d34   82cd     bsf	0xcd, 0x1, 0         	BSF	_T1CONbits, 1
                                           ;	.line	485; TCPIP_Stack/LCDNonBlocking.c	PIR1bits.TMR1IF		=	0;		// clear timer1 overflow bit
007d36   909e     bcf	0x9e, 0, 0           	BCF	_PIR1bits, 0
007d38   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007d3a   ffd9
007d3c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDUpdateExec	code
                                           _LCDUpdateExec:
                                           ;	.line	366; TCPIP_Stack/LCDNonBlocking.c	static void LCDUpdateExec(void)
003b64   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003b66   ffe5
003b68   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003b6a   ffd9
003b6c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003b6e   ffe5
003b70   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003b72   ffe5
003b74   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003b76   ffe5
                                           ;	.line	368; TCPIP_Stack/LCDNonBlocking.c	switch(st_update)
003b78   0e05     movlw	0x5                	MOVLW	0x05
003b7a   010a     movlb	0xa                	BANKSEL	_st_update
003b7c   5d8e     subwf	0x8e, 0, 0x1       	SUBWF	_st_update, W, B
003b7e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003b80   d0e9     bra	0x3d54               	BRA	_00214_DS_
003b82   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003b84   ffe5
003b86   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003b88   ffe5
003b8a   6a04     clrf	0x4, 0              	CLRF	r0x04
003b8c   010a     movlb	0xa                	BANKSEL	_st_update
003b8e   358e     rlcf	0x8e, 0, 0x1        	RLCF	_st_update, W, B
003b90   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
003b92   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
003b94   3604     rlcf	0x4, 0x1, 0         	RLCF	r0x04, F
003b96   0bfc     andlw	0xfc               	ANDLW	0xfc
003b98   6e03     movwf	0x3, 0             	MOVWF	r0x03
003b9a   0e00     movlw	0                  	MOVLW	UPPER(_00226_DS_)
003b9c   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003b9e   0e3b     movlw	0x3b               	MOVLW	HIGH(_00226_DS_)
003ba0   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
003ba2   0eba     movlw	0xba               	MOVLW	LOW(_00226_DS_)
003ba4   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
003ba6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003ba8   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003baa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003bac   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003bae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003bb0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003bb2   f004
003bb4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003bb6   f003
003bb8   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00226_DS_:
003bba   efe7     goto	0x3bce              	GOTO	_00191_DS_
003bbc   f01d
003bbe   effd     goto	0x3bfa              	GOTO	_00192_DS_
003bc0   f01d
003bc2   ef46     goto	0x3c8c              	GOTO	_00197_DS_
003bc4   f01e
003bc6   ef5d     goto	0x3cba              	GOTO	_00198_DS_
003bc8   f01e
003bca   efa6     goto	0x3d4c              	GOTO	_00203_DS_
003bcc   f01e
                                           _00191_DS_:
                                           ;	.line	372; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x02);
003bce   0e02     movlw	0x2                	MOVLW	0x02
003bd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bd2   0e00     movlw	0                  	MOVLW	0x00
003bd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003bd6   ec74     call	0x76e8, 0           	CALL	_LCDWrite
003bd8   f03b
003bda   0e02     movlw	0x2                	MOVLW	0x02
003bdc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	374; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
003bde   0e01     movlw	0x1                	MOVLW	0x01
003be0   010a     movlb	0xa                	BANKSEL	_LCDWaiting
003be2   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	375; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 66)	& 0xff;
003be4   0ebe     movlw	0xbe               	MOVLW	0xbe
003be6   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	376; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 66)	>> 8;
003be8   0eff     movlw	0xff               	MOVLW	0xff
003bea   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	377; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
003bec   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	378; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_OUTFIRSTLINE;
003bee   0e01     movlw	0x1                	MOVLW	0x01
003bf0   010a     movlb	0xa                	BANKSEL	_st_update
003bf2   6f8e     movwf	0x8e, 0x1          	MOVWF	_st_update, B
003bf4   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	379; TCPIP_Stack/LCDNonBlocking.c	LCDi = 0;
003bf6   6b8b     clrf	0x8b, 0x1           	CLRF	_LCDi, B
                                           ;	.line	380; TCPIP_Stack/LCDNonBlocking.c	break;
003bf8   d0ad     bra	0x3d54               	BRA	_00214_DS_
                                           _00192_DS_:
                                           ;	.line	385; TCPIP_Stack/LCDNonBlocking.c	if(LCDCurrentText[LCDi] == 0u)
003bfa   0e54     movlw	0x54               	MOVLW	LOW(_LCDCurrentText)
003bfc   010a     movlb	0xa                	BANKSEL	_LCDi
003bfe   258b     addwf	0x8b, 0, 0x1       	ADDWF	_LCDi, W, B
003c00   6e00     movwf	0, 0               	MOVWF	r0x00
003c02   6a01     clrf	0x1, 0              	CLRF	r0x01
003c04   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
003c06   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003c08   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003c0a   ffe9
003c0c   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
003c0e   ffea
003c10   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
003c12   f000
003c14   5000     movf	0, 0, 0             	MOVF	r0x00, W
003c16   e11b     bnz	0x3c4e               	BNZ	_00194_DS_
                                           ;	.line	387; TCPIP_Stack/LCDNonBlocking.c	for(LCDj=LCDi; LCDj < 16u; LCDj++)
003c18   ca8b     movff	0xa8b, 0xa8c       	MOVFF	_LCDi, _LCDj
003c1a   fa8c
                                           _00206_DS_:
003c1c   ca8c     movff	0xa8c, 0x1         	MOVFF	_LCDj, r0x01
003c1e   f001
003c20   6a02     clrf	0x2, 0              	CLRF	r0x02
003c22   0e00     movlw	0                  	MOVLW	0x00
003c24   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
003c26   e102     bnz	0x3c2c               	BNZ	_00227_DS_
003c28   0e10     movlw	0x10               	MOVLW	0x10
003c2a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00227_DS_:
003c2c   e210     bc	0x3c4e                	BC	_00194_DS_
                                           ;	.line	389; TCPIP_Stack/LCDNonBlocking.c	LCDCurrentText[LCDj] = ' ';
003c2e   0e54     movlw	0x54               	MOVLW	LOW(_LCDCurrentText)
003c30   010a     movlb	0xa                	BANKSEL	_LCDj
003c32   258c     addwf	0x8c, 0, 0x1       	ADDWF	_LCDj, W, B
003c34   6e01     movwf	0x1, 0             	MOVWF	r0x01
003c36   6a02     clrf	0x2, 0              	CLRF	r0x02
003c38   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
003c3a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003c3c   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
003c3e   ffe9
003c40   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
003c42   ffea
003c44   0e20     movlw	0x20               	MOVLW	0x20
003c46   6eef     movwf	0xef, 0            	MOVWF	INDF0
003c48   010a     movlb	0xa                	BANKSEL	_LCDj
                                           ;	.line	387; TCPIP_Stack/LCDNonBlocking.c	for(LCDj=LCDi; LCDj < 16u; LCDj++)
003c4a   2b8c     incf	0x8c, 0x1, 0x1      	INCF	_LCDj, F, B
003c4c   d7e7     bra	0x3c1c               	BRA	_00206_DS_
                                           _00194_DS_:
                                           ;	.line	392; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(1, LCDCurrentText[LCDi]);
003c4e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003c50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c52   0e01     movlw	0x1                	MOVLW	0x01
003c54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c56   ec74     call	0x76e8, 0           	CALL	_LCDWrite
003c58   f03b
003c5a   0e02     movlw	0x2                	MOVLW	0x02
003c5c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003c5e   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	394; TCPIP_Stack/LCDNonBlocking.c	LCDi++;
003c60   2b8b     incf	0x8b, 0x1, 0x1      	INCF	_LCDi, F, B
                                           ;	.line	395; TCPIP_Stack/LCDNonBlocking.c	if (LCDi >= 16u)
003c62   ca8b     movff	0xa8b, 0           	MOVFF	_LCDi, r0x00
003c64   f000
003c66   6a01     clrf	0x1, 0              	CLRF	r0x01
003c68   0e00     movlw	0                  	MOVLW	0x00
003c6a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
003c6c   e102     bnz	0x3c72               	BNZ	_00228_DS_
003c6e   0e10     movlw	0x10               	MOVLW	0x10
003c70   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00228_DS_:
003c72   e303     bnc	0x3c7a               	BNC	_00196_DS_
                                           ;	.line	396; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_GOTOSECONDLINE;
003c74   0e02     movlw	0x2                	MOVLW	0x02
003c76   010a     movlb	0xa                	BANKSEL	_st_update
003c78   6f8e     movwf	0x8e, 0x1          	MOVWF	_st_update, B
                                           _00196_DS_:
                                           ;	.line	398; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
003c7a   0e01     movlw	0x1                	MOVLW	0x01
003c7c   010a     movlb	0xa                	BANKSEL	_LCDWaiting
003c7e   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	399; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
003c80   0efe     movlw	0xfe               	MOVLW	0xfe
003c82   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	400; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
003c84   0eff     movlw	0xff               	MOVLW	0xff
003c86   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	401; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
003c88   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	402; TCPIP_Stack/LCDNonBlocking.c	break;
003c8a   d064     bra	0x3d54               	BRA	_00214_DS_
                                           _00197_DS_:
                                           ;	.line	406; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0xC0);
003c8c   0ec0     movlw	0xc0               	MOVLW	0xc0
003c8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c90   0e00     movlw	0                  	MOVLW	0x00
003c92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c94   ec74     call	0x76e8, 0           	CALL	_LCDWrite
003c96   f03b
003c98   0e02     movlw	0x2                	MOVLW	0x02
003c9a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	408; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
003c9c   0e01     movlw	0x1                	MOVLW	0x01
003c9e   010a     movlb	0xa                	BANKSEL	_LCDWaiting
003ca0   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	409; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
003ca2   0efe     movlw	0xfe               	MOVLW	0xfe
003ca4   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	410; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
003ca6   0eff     movlw	0xff               	MOVLW	0xff
003ca8   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	411; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
003caa   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	412; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_OUTSECONDLINE;
003cac   0e03     movlw	0x3                	MOVLW	0x03
003cae   010a     movlb	0xa                	BANKSEL	_st_update
003cb0   6f8e     movwf	0x8e, 0x1          	MOVWF	_st_update, B
                                           ;	.line	413; TCPIP_Stack/LCDNonBlocking.c	LCDi = 16;
003cb2   0e10     movlw	0x10               	MOVLW	0x10
003cb4   010a     movlb	0xa                	BANKSEL	_LCDi
003cb6   6f8b     movwf	0x8b, 0x1          	MOVWF	_LCDi, B
                                           ;	.line	414; TCPIP_Stack/LCDNonBlocking.c	break;
003cb8   d04d     bra	0x3d54               	BRA	_00214_DS_
                                           _00198_DS_:
                                           ;	.line	419; TCPIP_Stack/LCDNonBlocking.c	if(LCDCurrentText[LCDi] == 0u)
003cba   0e54     movlw	0x54               	MOVLW	LOW(_LCDCurrentText)
003cbc   010a     movlb	0xa                	BANKSEL	_LCDi
003cbe   258b     addwf	0x8b, 0, 0x1       	ADDWF	_LCDi, W, B
003cc0   6e00     movwf	0, 0               	MOVWF	r0x00
003cc2   6a01     clrf	0x1, 0              	CLRF	r0x01
003cc4   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
003cc6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003cc8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003cca   ffe9
003ccc   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
003cce   ffea
003cd0   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
003cd2   f000
003cd4   5000     movf	0, 0, 0             	MOVF	r0x00, W
003cd6   e11b     bnz	0x3d0e               	BNZ	_00200_DS_
                                           ;	.line	421; TCPIP_Stack/LCDNonBlocking.c	for(LCDj=LCDi; LCDj < 32u; LCDj++)
003cd8   ca8b     movff	0xa8b, 0xa8c       	MOVFF	_LCDi, _LCDj
003cda   fa8c
                                           _00210_DS_:
003cdc   ca8c     movff	0xa8c, 0x1         	MOVFF	_LCDj, r0x01
003cde   f001
003ce0   6a02     clrf	0x2, 0              	CLRF	r0x02
003ce2   0e00     movlw	0                  	MOVLW	0x00
003ce4   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
003ce6   e102     bnz	0x3cec               	BNZ	_00229_DS_
003ce8   0e20     movlw	0x20               	MOVLW	0x20
003cea   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00229_DS_:
003cec   e210     bc	0x3d0e                	BC	_00200_DS_
                                           ;	.line	423; TCPIP_Stack/LCDNonBlocking.c	LCDCurrentText[LCDj] = ' ';
003cee   0e54     movlw	0x54               	MOVLW	LOW(_LCDCurrentText)
003cf0   010a     movlb	0xa                	BANKSEL	_LCDj
003cf2   258c     addwf	0x8c, 0, 0x1       	ADDWF	_LCDj, W, B
003cf4   6e01     movwf	0x1, 0             	MOVWF	r0x01
003cf6   6a02     clrf	0x2, 0              	CLRF	r0x02
003cf8   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDCurrentText)
003cfa   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003cfc   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
003cfe   ffe9
003d00   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
003d02   ffea
003d04   0e20     movlw	0x20               	MOVLW	0x20
003d06   6eef     movwf	0xef, 0            	MOVWF	INDF0
003d08   010a     movlb	0xa                	BANKSEL	_LCDj
                                           ;	.line	421; TCPIP_Stack/LCDNonBlocking.c	for(LCDj=LCDi; LCDj < 32u; LCDj++)
003d0a   2b8c     incf	0x8c, 0x1, 0x1      	INCF	_LCDj, F, B
003d0c   d7e7     bra	0x3cdc               	BRA	_00210_DS_
                                           _00200_DS_:
                                           ;	.line	426; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(1, LCDCurrentText[LCDi]);
003d0e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003d10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d12   0e01     movlw	0x1                	MOVLW	0x01
003d14   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003d16   ec74     call	0x76e8, 0           	CALL	_LCDWrite
003d18   f03b
003d1a   0e02     movlw	0x2                	MOVLW	0x02
003d1c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003d1e   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	428; TCPIP_Stack/LCDNonBlocking.c	LCDi++;
003d20   2b8b     incf	0x8b, 0x1, 0x1      	INCF	_LCDi, F, B
                                           ;	.line	429; TCPIP_Stack/LCDNonBlocking.c	if (LCDi >= 32u)
003d22   ca8b     movff	0xa8b, 0           	MOVFF	_LCDi, r0x00
003d24   f000
003d26   6a01     clrf	0x1, 0              	CLRF	r0x01
003d28   0e00     movlw	0                  	MOVLW	0x00
003d2a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
003d2c   e102     bnz	0x3d32               	BNZ	_00230_DS_
003d2e   0e20     movlw	0x20               	MOVLW	0x20
003d30   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00230_DS_:
003d32   e303     bnc	0x3d3a               	BNC	_00202_DS_
                                           ;	.line	430; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_ENDUPDATE;
003d34   0e04     movlw	0x4                	MOVLW	0x04
003d36   010a     movlb	0xa                	BANKSEL	_st_update
003d38   6f8e     movwf	0x8e, 0x1          	MOVWF	_st_update, B
                                           _00202_DS_:
                                           ;	.line	432; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
003d3a   0e01     movlw	0x1                	MOVLW	0x01
003d3c   010a     movlb	0xa                	BANKSEL	_LCDWaiting
003d3e   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	433; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
003d40   0efe     movlw	0xfe               	MOVLW	0xfe
003d42   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	434; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
003d44   0eff     movlw	0xff               	MOVLW	0xff
003d46   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	435; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
003d48   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	436; TCPIP_Stack/LCDNonBlocking.c	break;
003d4a   d004     bra	0x3d54               	BRA	_00214_DS_
                                           _00203_DS_:
003d4c   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	439; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 0;
003d4e   6b91     clrf	0x91, 0x1           	CLRF	_LCDOpInProgress, B
003d50   010a     movlb	0xa                	BANKSEL	_st_update
                                           ;	.line	440; TCPIP_Stack/LCDNonBlocking.c	st_update = LCD_GOTOFIRSTLINE;
003d52   6b8e     clrf	0x8e, 0x1           	CLRF	_st_update, B
                                           _00214_DS_:
                                           ;	.line	446; TCPIP_Stack/LCDNonBlocking.c	}
003d54   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003d56   f002
003d58   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003d5a   f001
003d5c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003d5e   f000
003d60   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003d62   ffd9
003d64   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDEraseExec	code
                                           _LCDEraseExec:
                                           ;	.line	334; TCPIP_Stack/LCDNonBlocking.c	static void LCDEraseExec(void)
007530   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007532   ffe5
007534   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007536   ffd9
007538   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00753a   ffe5
                                           ;	.line	336; TCPIP_Stack/LCDNonBlocking.c	switch(st_erase)
00753c   ca8f     movff	0xa8f, 0           	MOVFF	_st_erase, r0x00
00753e   f000
007540   5000     movf	0, 0, 0             	MOVF	r0x00, W
007542   e005     bz	0x754e                	BZ	_00175_DS_
                                           _00184_DS_:
007544   010a     movlb	0xa                	BANKSEL	_st_erase
007546   518f     movf	0x8f, 0, 0x1        	MOVF	_st_erase, W, B
007548   0a01     xorlw	0x1                	XORLW	0x01
00754a   e015     bz	0x7576                	BZ	_00176_DS_
00754c   d026     bra	0x759a               	BRA	_00179_DS_
                                           _00175_DS_:
                                           ;	.line	340; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x01);
00754e   0e01     movlw	0x1                	MOVLW	0x01
007550   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007552   0e00     movlw	0                  	MOVLW	0x00
007554   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007556   ec74     call	0x76e8, 0           	CALL	_LCDWrite
007558   f03b
00755a   0e02     movlw	0x2                	MOVLW	0x02
00755c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	342; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
00755e   0e01     movlw	0x1                	MOVLW	0x01
007560   010a     movlb	0xa                	BANKSEL	_LCDWaiting
007562   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	343; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 66)	& 0xff;
007564   0ebe     movlw	0xbe               	MOVLW	0xbe
007566   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	344; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 66)	>> 8;
007568   0eff     movlw	0xff               	MOVLW	0xff
00756a   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	345; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
00756c   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	347; TCPIP_Stack/LCDNonBlocking.c	st_erase = LCD_CLEARLOCAL;
00756e   0e01     movlw	0x1                	MOVLW	0x01
007570   010a     movlb	0xa                	BANKSEL	_st_erase
007572   6f8f     movwf	0x8f, 0x1          	MOVWF	_st_erase, B
                                           ;	.line	348; TCPIP_Stack/LCDNonBlocking.c	break;
007574   d012     bra	0x759a               	BRA	_00179_DS_
                                           _00176_DS_:
                                           ;	.line	352; TCPIP_Stack/LCDNonBlocking.c	memset(LCDText, ' ', 32);
007576   0e00     movlw	0                  	MOVLW	0x00
007578   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00757a   0e20     movlw	0x20               	MOVLW	0x20
00757c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00757e   0e20     movlw	0x20               	MOVLW	0x20
007580   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007582   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
007584   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007586   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
007588   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00758a   ec38     call	0x6670, 0           	CALL	_memset
00758c   f033
00758e   0e05     movlw	0x5                	MOVLW	0x05
007590   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
007592   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	354; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 0;
007594   6b91     clrf	0x91, 0x1           	CLRF	_LCDOpInProgress, B
007596   010a     movlb	0xa                	BANKSEL	_st_erase
                                           ;	.line	356; TCPIP_Stack/LCDNonBlocking.c	st_erase = LCD_CLEARDISPLAY;
007598   6b8f     clrf	0x8f, 0x1           	CLRF	_st_erase, B
                                           _00179_DS_:
                                           ;	.line	362; TCPIP_Stack/LCDNonBlocking.c	}
00759a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00759c   f000
00759e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0075a0   ffd9
0075a2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDInitExec	code
                                           _LCDInitExec:
                                           ;	.line	173; TCPIP_Stack/LCDNonBlocking.c	static void LCDInitExec(void)
00352a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00352c   ffe5
00352e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003530   ffd9
003532   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003534   ffe5
003536   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003538   ffe5
00353a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00353c   ffe5
00353e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003540   ffe5
003542   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003544   ffe5
003546   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003548   ffe5
00354a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00354c   ffe5
00354e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003550   ffe5
                                           ;	.line	175; TCPIP_Stack/LCDNonBlocking.c	switch (st_init)
003552   0e08     movlw	0x8                	MOVLW	0x08
003554   010a     movlb	0xa                	BANKSEL	_st_init
003556   5d8d     subwf	0x8d, 0, 0x1       	SUBWF	_st_init, W, B
003558   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00355a   d0de     bra	0x3718               	BRA	_00161_DS_
00355c   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00355e   ffe5
003560   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003562   ffe5
003564   6a09     clrf	0x9, 0              	CLRF	r0x09
003566   010a     movlb	0xa                	BANKSEL	_st_init
003568   358d     rlcf	0x8d, 0, 0x1        	RLCF	_st_init, W, B
00356a   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
00356c   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00356e   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
003570   0bfc     andlw	0xfc               	ANDLW	0xfc
003572   6e08     movwf	0x8, 0             	MOVWF	r0x08
003574   0e00     movlw	0                  	MOVLW	UPPER(_00169_DS_)
003576   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
003578   0e35     movlw	0x35               	MOVLW	HIGH(_00169_DS_)
00357a   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
00357c   0e94     movlw	0x94               	MOVLW	LOW(_00169_DS_)
00357e   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
003580   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003582   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
003584   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003586   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
003588   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00358a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00358c   f009
00358e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003590   f008
003592   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00169_DS_:
003594   efda     goto	0x35b4              	GOTO	_00143_DS_
003596   f01a
003598   effc     goto	0x35f8              	GOTO	_00144_DS_
00359a   f01a
00359c   ef05     goto	0x360a              	GOTO	_00145_DS_
00359e   f01b
0035a0   ef38     goto	0x3670              	GOTO	_00154_DS_
0035a2   f01b
0035a4   ef4c     goto	0x3698              	GOTO	_00155_DS_
0035a6   f01b
0035a8   ef60     goto	0x36c0              	GOTO	_00156_DS_
0035aa   f01b
0035ac   ef74     goto	0x36e8              	GOTO	_00157_DS_
0035ae   f01b
0035b0   ef88     goto	0x3710              	GOTO	_00158_DS_
0035b2   f01b
                                           _00143_DS_:
                                           ;	.line	178; TCPIP_Stack/LCDNonBlocking.c	memset(LCDText, ' ', sizeof(LCDText)-1);
0035b4   0e00     movlw	0                  	MOVLW	0x00
0035b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035b8   0e20     movlw	0x20               	MOVLW	0x20
0035ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035bc   0e20     movlw	0x20               	MOVLW	0x20
0035be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035c0   0e0e     movlw	0xe                	MOVLW	HIGH(_LCDText)
0035c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035c4   0e33     movlw	0x33               	MOVLW	LOW(_LCDText)
0035c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0035c8   ec38     call	0x6670, 0           	CALL	_memset
0035ca   f033
0035cc   0e05     movlw	0x5                	MOVLW	0x05
0035ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0035d0   010e     movlb	0xe                	BANKSEL	(_LCDText + 32)
                                           ;	.line	179; TCPIP_Stack/LCDNonBlocking.c	LCDText[sizeof(LCDText)-1] = 0;
0035d2   6b53     clrf	0x53, 0x1           	CLRF	(_LCDText + 32), B
                                           ;	.line	181; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 0;
0035d4   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
                                           ;	.line	182; TCPIP_Stack/LCDNonBlocking.c	LCD_RD_WR_IO = 0;
0035d6   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	184; TCPIP_Stack/LCDNonBlocking.c	LCD_DATA_TRIS = 0x00;
0035d8   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	197; TCPIP_Stack/LCDNonBlocking.c	LCD_RD_WR_TRIS = 0;
0035da   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	198; TCPIP_Stack/LCDNonBlocking.c	LCD_RS_TRIS = 0;
0035dc   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	199; TCPIP_Stack/LCDNonBlocking.c	LCD_E_TRIS = 0;
0035de   9099     bcf	0x99, 0, 0           	BCF	_TRISHbits, 0
                                           ;	.line	201; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
0035e0   0e01     movlw	0x1                	MOVLW	0x01
0035e2   010a     movlb	0xa                	BANKSEL	_LCDWaiting
0035e4   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	202; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 1311)	& 0xff;
0035e6   0ee1     movlw	0xe1               	MOVLW	0xe1
0035e8   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	203; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 1311)	>> 8;
0035ea   0efa     movlw	0xfa               	MOVLW	0xfa
0035ec   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	204; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
0035ee   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	206; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_DEFAULTFUNC1;
0035f0   0e01     movlw	0x1                	MOVLW	0x01
0035f2   010a     movlb	0xa                	BANKSEL	_st_init
0035f4   6f8d     movwf	0x8d, 0x1          	MOVWF	_st_init, B
                                           ;	.line	207; TCPIP_Stack/LCDNonBlocking.c	break;
0035f6   d090     bra	0x3718               	BRA	_00161_DS_
                                           _00144_DS_:
                                           ;	.line	216; TCPIP_Stack/LCDNonBlocking.c	LCD_RS_IO = 0;
0035f8   9490     bcf	0x90, 0x2, 0         	BCF	_LATHbits, 2
                                           ;	.line	218; TCPIP_Stack/LCDNonBlocking.c	LCD_DATA_IO = 0x03;
0035fa   0e03     movlw	0x3                	MOVLW	0x03
0035fc   6e8d     movwf	0x8d, 0            	MOVWF	_LATE
                                           ;	.line	234; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_EPULSETIME;
0035fe   0e02     movlw	0x2                	MOVLW	0x02
003600   010a     movlb	0xa                	BANKSEL	_st_init
003602   6f8d     movwf	0x8d, 0x1          	MOVWF	_st_init, B
003604   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	235; TCPIP_Stack/LCDNonBlocking.c	LCDi = 0;
003606   6b8b     clrf	0x8b, 0x1           	CLRF	_LCDi, B
                                           ;	.line	236; TCPIP_Stack/LCDNonBlocking.c	break;
003608   d087     bra	0x3718               	BRA	_00161_DS_
                                           _00145_DS_:
                                           ;	.line	239; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 1;
00360a   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
                                           ;	.line	240; TCPIP_Stack/LCDNonBlocking.c	Delay10us(1);			// Wait E Pulse width time (min 230ns)
00360c   0e11     movlw	0x11               	MOVLW	0x11
00360e   6e00     movwf	0, 0               	MOVWF	r0x00
003610   6a01     clrf	0x1, 0              	CLRF	r0x01
003612   6a02     clrf	0x2, 0              	CLRF	r0x02
003614   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00146_DS_:
003616   c000     movff	0, 0x4             	MOVFF	r0x00, r0x04
003618   f004
00361a   c001     movff	0x1, 0x5           	MOVFF	r0x01, r0x05
00361c   f005
00361e   c002     movff	0x2, 0x6           	MOVFF	r0x02, r0x06
003620   f006
003622   c003     movff	0x3, 0x7           	MOVFF	r0x03, r0x07
003624   f007
003626   0eff     movlw	0xff               	MOVLW	0xff
003628   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00362a   0eff     movlw	0xff               	MOVLW	0xff
00362c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00362e   0eff     movlw	0xff               	MOVLW	0xff
003630   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
003632   0eff     movlw	0xff               	MOVLW	0xff
003634   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003636   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003638   1005     iorwf	0x5, 0, 0          	IORWF	r0x05, W
00363a   1006     iorwf	0x6, 0, 0          	IORWF	r0x06, W
00363c   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
00363e   e1eb     bnz	0x3616               	BNZ	_00146_DS_
                                           ;	.line	241; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 0;
003640   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
003642   010a     movlb	0xa                	BANKSEL	_LCDi
                                           ;	.line	243; TCPIP_Stack/LCDNonBlocking.c	LCDi++;
003644   2b8b     incf	0x8b, 0x1, 0x1      	INCF	_LCDi, F, B
                                           ;	.line	244; TCPIP_Stack/LCDNonBlocking.c	if (LCDi >= 3u)
003646   ca8b     movff	0xa8b, 0           	MOVFF	_LCDi, r0x00
003648   f000
00364a   6a01     clrf	0x1, 0              	CLRF	r0x01
00364c   0e00     movlw	0                  	MOVLW	0x00
00364e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
003650   e102     bnz	0x3656               	BNZ	_00170_DS_
003652   0e03     movlw	0x3                	MOVLW	0x03
003654   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00170_DS_:
003656   e303     bnc	0x365e               	BNC	_00153_DS_
                                           ;	.line	245; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_DEFAULTFUNC2;
003658   0e03     movlw	0x3                	MOVLW	0x03
00365a   010a     movlb	0xa                	BANKSEL	_st_init
00365c   6f8d     movwf	0x8d, 0x1          	MOVWF	_st_init, B
                                           _00153_DS_:
                                           ;	.line	247; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
00365e   0e01     movlw	0x1                	MOVLW	0x01
003660   010a     movlb	0xa                	BANKSEL	_LCDWaiting
003662   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	248; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 66)	& 0xff;
003664   0ebe     movlw	0xbe               	MOVLW	0xbe
003666   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	249; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 66)	>> 8;
003668   0eff     movlw	0xff               	MOVLW	0xff
00366a   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	250; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
00366c   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	251; TCPIP_Stack/LCDNonBlocking.c	break;
00366e   d054     bra	0x3718               	BRA	_00161_DS_
                                           _00154_DS_:
                                           ;	.line	276; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x38);
003670   0e38     movlw	0x38               	MOVLW	0x38
003672   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003674   0e00     movlw	0                  	MOVLW	0x00
003676   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003678   ec74     call	0x76e8, 0           	CALL	_LCDWrite
00367a   f03b
00367c   0e02     movlw	0x2                	MOVLW	0x02
00367e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	279; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
003680   0e01     movlw	0x1                	MOVLW	0x01
003682   010a     movlb	0xa                	BANKSEL	_LCDWaiting
003684   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	280; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
003686   0efe     movlw	0xfe               	MOVLW	0xfe
003688   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	281; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
00368a   0eff     movlw	0xff               	MOVLW	0xff
00368c   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	282; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
00368e   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	284; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_ENTRYMODE;
003690   0e04     movlw	0x4                	MOVLW	0x04
003692   010a     movlb	0xa                	BANKSEL	_st_init
003694   6f8d     movwf	0x8d, 0x1          	MOVWF	_st_init, B
                                           ;	.line	285; TCPIP_Stack/LCDNonBlocking.c	break;
003696   d040     bra	0x3718               	BRA	_00161_DS_
                                           _00155_DS_:
                                           ;	.line	288; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x06);	// Increment after each write, do not shift
003698   0e06     movlw	0x6                	MOVLW	0x06
00369a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00369c   0e00     movlw	0                  	MOVLW	0x00
00369e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036a0   ec74     call	0x76e8, 0           	CALL	_LCDWrite
0036a2   f03b
0036a4   0e02     movlw	0x2                	MOVLW	0x02
0036a6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	290; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
0036a8   0e01     movlw	0x1                	MOVLW	0x01
0036aa   010a     movlb	0xa                	BANKSEL	_LCDWaiting
0036ac   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	291; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
0036ae   0efe     movlw	0xfe               	MOVLW	0xfe
0036b0   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	292; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
0036b2   0eff     movlw	0xff               	MOVLW	0xff
0036b4   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	293; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
0036b6   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	295; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_DISPLAYCONTROL;
0036b8   0e05     movlw	0x5                	MOVLW	0x05
0036ba   010a     movlb	0xa                	BANKSEL	_st_init
0036bc   6f8d     movwf	0x8d, 0x1          	MOVWF	_st_init, B
                                           ;	.line	296; TCPIP_Stack/LCDNonBlocking.c	break;
0036be   d02c     bra	0x3718               	BRA	_00161_DS_
                                           _00156_DS_:
                                           ;	.line	299; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x0C);		// Turn display on, no cusor, no cursor blink
0036c0   0e0c     movlw	0xc                	MOVLW	0x0c
0036c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036c4   0e00     movlw	0                  	MOVLW	0x00
0036c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036c8   ec74     call	0x76e8, 0           	CALL	_LCDWrite
0036ca   f03b
0036cc   0e02     movlw	0x2                	MOVLW	0x02
0036ce   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	301; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
0036d0   0e01     movlw	0x1                	MOVLW	0x01
0036d2   010a     movlb	0xa                	BANKSEL	_LCDWaiting
0036d4   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	302; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 2)	& 0xff;
0036d6   0efe     movlw	0xfe               	MOVLW	0xfe
0036d8   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	303; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 2)	>> 8;
0036da   0eff     movlw	0xff               	MOVLW	0xff
0036dc   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	304; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
0036de   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	306; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_CLEAR;
0036e0   0e06     movlw	0x6                	MOVLW	0x06
0036e2   010a     movlb	0xa                	BANKSEL	_st_init
0036e4   6f8d     movwf	0x8d, 0x1          	MOVWF	_st_init, B
                                           ;	.line	307; TCPIP_Stack/LCDNonBlocking.c	break;
0036e6   d018     bra	0x3718               	BRA	_00161_DS_
                                           _00157_DS_:
                                           ;	.line	310; TCPIP_Stack/LCDNonBlocking.c	LCDWrite(0, 0x01);	
0036e8   0e01     movlw	0x1                	MOVLW	0x01
0036ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036ec   0e00     movlw	0                  	MOVLW	0x00
0036ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0036f0   ec74     call	0x76e8, 0           	CALL	_LCDWrite
0036f2   f03b
0036f4   0e02     movlw	0x2                	MOVLW	0x02
0036f6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	312; TCPIP_Stack/LCDNonBlocking.c	LCDWaiting = 1;
0036f8   0e01     movlw	0x1                	MOVLW	0x01
0036fa   010a     movlb	0xa                	BANKSEL	_LCDWaiting
0036fc   6f90     movwf	0x90, 0x1          	MOVWF	_LCDWaiting, B
                                           ;	.line	313; TCPIP_Stack/LCDNonBlocking.c	TMR1L			=	(0x10000 - 66)	& 0xff;
0036fe   0ebe     movlw	0xbe               	MOVLW	0xbe
003700   6ece     movwf	0xce, 0            	MOVWF	_TMR1L
                                           ;	.line	314; TCPIP_Stack/LCDNonBlocking.c	TMR1H			=	(0x10000 - 66)	>> 8;
003702   0eff     movlw	0xff               	MOVLW	0xff
003704   6ecf     movwf	0xcf, 0            	MOVWF	_TMR1H
                                           ;	.line	315; TCPIP_Stack/LCDNonBlocking.c	T1CONbits.TMR1ON	=	1;
003706   80cd     bsf	0xcd, 0, 0           	BSF	_T1CONbits, 0
                                           ;	.line	317; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_ENDINIT;
003708   0e07     movlw	0x7                	MOVLW	0x07
00370a   010a     movlb	0xa                	BANKSEL	_st_init
00370c   6f8d     movwf	0x8d, 0x1          	MOVWF	_st_init, B
                                           ;	.line	318; TCPIP_Stack/LCDNonBlocking.c	break;
00370e   d004     bra	0x3718               	BRA	_00161_DS_
                                           _00158_DS_:
003710   010a     movlb	0xa                	BANKSEL	_LCDOpInProgress
                                           ;	.line	322; TCPIP_Stack/LCDNonBlocking.c	LCDOpInProgress = 0;
003712   6b91     clrf	0x91, 0x1           	CLRF	_LCDOpInProgress, B
003714   010a     movlb	0xa                	BANKSEL	_st_init
                                           ;	.line	324; TCPIP_Stack/LCDNonBlocking.c	st_init = LCD_RESET;
003716   6b8d     clrf	0x8d, 0x1           	CLRF	_st_init, B
                                           _00161_DS_:
                                           ;	.line	330; TCPIP_Stack/LCDNonBlocking.c	}
003718   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00371a   f007
00371c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00371e   f006
003720   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003722   f005
003724   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003726   f004
003728   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00372a   f003
00372c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00372e   f002
003730   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003732   f001
003734   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003736   f000
003738   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00373a   ffd9
00373c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_LCDNonBlocking__LCDWrite	code
                                           _LCDWrite:
                                           ;	.line	77; TCPIP_Stack/LCDNonBlocking.c	static void LCDWrite(BYTE RS, BYTE Data)
0076e8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0076ea   ffe5
0076ec   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0076ee   ffd9
0076f0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0076f2   ffe5
0076f4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0076f6   ffe5
0076f8   0e02     movlw	0x2                	MOVLW	0x02
0076fa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0076fc   f000
0076fe   0e03     movlw	0x3                	MOVLW	0x03
007700   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007702   f001
                                           ;	.line	80; TCPIP_Stack/LCDNonBlocking.c	LCD_DATA_TRIS = 0x00;
007704   6a96     clrf	0x96, 0             	CLRF	_TRISE
                                           ;	.line	93; TCPIP_Stack/LCDNonBlocking.c	LCD_RS_TRIS = 0;
007706   9499     bcf	0x99, 0x2, 0         	BCF	_TRISHbits, 2
                                           ;	.line	94; TCPIP_Stack/LCDNonBlocking.c	LCD_RD_WR_TRIS = 0;
007708   9299     bcf	0x99, 0x1, 0         	BCF	_TRISHbits, 1
                                           ;	.line	95; TCPIP_Stack/LCDNonBlocking.c	LCD_RD_WR_IO = 0;
00770a   9290     bcf	0x90, 0x1, 0         	BCF	_LATHbits, 1
                                           ;	.line	96; TCPIP_Stack/LCDNonBlocking.c	LCD_RS_IO = RS;
00770c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00770e   0b01     andlw	0x1                	ANDLW	0x01
007710   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
007712   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
007714   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
007716   5090     movf	0x90, 0, 0          	MOVF	_LATHbits, W
007718   0bfb     andlw	0xfb               	ANDLW	0xfb
00771a   10f4     iorwf	0xf4, 0, 0         	IORWF	PRODH, W
00771c   6e90     movwf	0x90, 0            	MOVWF	_LATHbits
                                           ;	.line	123; TCPIP_Stack/LCDNonBlocking.c	LCD_DATA_IO = Data;
00771e   c001     movff	0x1, 0xf8d         	MOVFF	r0x01, _LATE
007720   ff8d
007722   0000     nop                      	nop 
007724   0000     nop                      	nop 
                                           ;	.line	138; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 1;
007726   8090     bsf	0x90, 0, 0           	BSF	_LATHbits, 0
007728   0000     nop                      	nop 
00772a   0000     nop                      	nop 
00772c   0000     nop                      	nop 
00772e   0000     nop                      	nop 
007730   0000     nop                      	nop 
007732   0000     nop                      	nop 
007734   0000     nop                      	nop 
007736   0000     nop                      	nop 
007738   0000     nop                      	nop 
                                           ;	.line	148; TCPIP_Stack/LCDNonBlocking.c	LCD_E_IO = 0;
00773a   9090     bcf	0x90, 0, 0           	BCF	_LATHbits, 0
00773c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00773e   f001
007740   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007742   f000
007744   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007746   ffd9
007748   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
00774a   0000     nop                      	DB	0x00
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1752 (0x06d8) bytes ( 1.34%)
                                           ;           	  876 (0x036c) words
                                           ; udata size:	   74 (0x004a) bytes ( 1.93%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:16 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _StackInit
                                           	global _StackTask
                                           	global _StackApplications
                                           	global _remoteNode
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _srand
                                           	extern _GenerateRandomDWORD
                                           	extern _MACInit
                                           	extern _MACIsLinked
                                           	extern _MACGetHeader
                                           	extern _IPGetHeader
                                           	extern _ARPInit
                                           	extern _ARPProcess
                                           	extern _UDPInit
                                           	extern _UDPTask
                                           	extern _UDPProcess
                                           	extern _UDPDiscard
                                           	extern _DHCPInit
                                           	extern _DHCPTask
                                           	extern _DHCPDisable
                                           	extern _DHCPIsBound
                                           	extern _ICMPProcess
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _StackTask_bLastLinkState_2_2	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           
                                           udata_StackTsk_0	udata
                                           _smStack	res	1
                                           
                                           udata_StackTsk_1	udata
                                           _StackTask_tempLocalIP_1_1	res	4
                                           
                                           udata_StackTsk_2	udata
                                           _remoteNode	res	10
                                           
                                           udata_StackTsk_3	udata
                                           _StackTask_cFrameType_1_1	res	1
                                           
                                           udata_StackTsk_4	udata
                                           _StackTask_cIPFrameType_1_1	res	1
                                           
                                           udata_StackTsk_5	udata
                                           _StackTask_dataCount_1_1	res	2
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_StackTsk__StackApplications	code
                                           _StackApplications:
                                           ;	.line	378; TCPIP_Stack/StackTsk.c	void StackApplications(void)
0080c4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0080c6   ffe5
0080c8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0080ca   ffd9
                                           ;	.line	435; TCPIP_Stack/StackTsk.c	}
0080cc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0080ce   ffd9
0080d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackTask	code
                                           _StackTask:
                                           ;	.line	209; TCPIP_Stack/StackTsk.c	void StackTask(void)
001bca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001bcc   ffe5
001bce   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001bd0   ffd9
001bd2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001bd4   ffe5
001bd6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001bd8   ffe5
001bda   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001bdc   ffe5
001bde   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001be0   ffe5
001be2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001be4   ffe5
001be6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001be8   ffe5
001bea   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001bec   ffe5
001bee   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001bf0   ffe5
001bf2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001bf4   ffe5
001bf6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001bf8   ffe5
001bfa   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001bfc   ffe5
001bfe   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001c00   ffe5
001c02   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001c04   ffe5
001c06   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001c08   ffe5
001c0a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	229; TCPIP_Stack/StackTsk.c	if(AppConfig.Flags.bIsDHCPEnabled)
001c0c   ad2c     btfss	0x2c, 0x6, 0x1     	BTFSS	(_AppConfig + 44), 6, B
001c0e   d047     bra	0x1c9e               	BRA	_00119_DS_
                                           ;	.line	234; TCPIP_Stack/StackTsk.c	bCurrentLinkState = MACIsLinked();
001c10   ecdf     call	0x7bbe, 0           	CALL	_MACIsLinked
001c12   f03d
001c14   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	235; TCPIP_Stack/StackTsk.c	if(bCurrentLinkState != bLastLinkState)
001c16   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c18   0108     movlb	0x8                	BANKSEL	_StackTask_bLastLinkState_2_2
001c1a   1961     xorwf	0x61, 0, 0x1       	XORWF	_StackTask_bLastLinkState_2_2, W, B
001c1c   e101     bnz	0x1c20               	BNZ	_00157_DS_
001c1e   d033     bra	0x1c86               	BRA	_00115_DS_
                                           _00157_DS_:
                                           ;	.line	237; TCPIP_Stack/StackTsk.c	bLastLinkState = bCurrentLinkState;
001c20   c000     movff	0, 0x861           	MOVFF	r0x00, _StackTask_bLastLinkState_2_2
001c22   f861
                                           ;	.line	238; TCPIP_Stack/StackTsk.c	if(!bCurrentLinkState) //we lost the MAC link
001c24   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c26   e12f     bnz	0x1c86               	BNZ	_00115_DS_
                                           ;	.line	240; TCPIP_Stack/StackTsk.c	AppConfig.MyIPAddr.Val = AppConfig.DefaultIPAddr.Val;
001c28   ce14     movff	0xe14, 0           	MOVFF	(_AppConfig + 20), r0x00
001c2a   f000
001c2c   ce15     movff	0xe15, 0x1         	MOVFF	(_AppConfig + 21), r0x01
001c2e   f001
001c30   ce16     movff	0xe16, 0x2         	MOVFF	(_AppConfig + 22), r0x02
001c32   f002
001c34   ce17     movff	0xe17, 0x3         	MOVFF	(_AppConfig + 23), r0x03
001c36   f003
001c38   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c3a   010e     movlb	0xe                	BANKSEL	_AppConfig
001c3c   6f00     movwf	0, 0x1             	MOVWF	_AppConfig, B
001c3e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c40   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
001c42   6f01     movwf	0x1, 0x1           	MOVWF	(_AppConfig + 1), B
001c44   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c46   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
001c48   6f02     movwf	0x2, 0x1           	MOVWF	(_AppConfig + 2), B
001c4a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c4c   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
001c4e   6f03     movwf	0x3, 0x1           	MOVWF	(_AppConfig + 3), B
                                           ;	.line	241; TCPIP_Stack/StackTsk.c	AppConfig.MyMask.Val = AppConfig.DefaultMask.Val;
001c50   ce18     movff	0xe18, 0           	MOVFF	(_AppConfig + 24), r0x00
001c52   f000
001c54   ce19     movff	0xe19, 0x1         	MOVFF	(_AppConfig + 25), r0x01
001c56   f001
001c58   ce1a     movff	0xe1a, 0x2         	MOVFF	(_AppConfig + 26), r0x02
001c5a   f002
001c5c   ce1b     movff	0xe1b, 0x3         	MOVFF	(_AppConfig + 27), r0x03
001c5e   f003
001c60   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c62   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
001c64   6f04     movwf	0x4, 0x1           	MOVWF	(_AppConfig + 4), B
001c66   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c68   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
001c6a   6f05     movwf	0x5, 0x1           	MOVWF	(_AppConfig + 5), B
001c6c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001c6e   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
001c70   6f06     movwf	0x6, 0x1           	MOVWF	(_AppConfig + 6), B
001c72   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001c74   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
001c76   6f07     movwf	0x7, 0x1           	MOVWF	(_AppConfig + 7), B
001c78   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	242; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
001c7a   8f2c     bsf	0x2c, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	243; TCPIP_Stack/StackTsk.c	DHCPInit(0);
001c7c   0e00     movlw	0                  	MOVLW	0x00
001c7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c80   ecd7     call	0x71ae, 0           	CALL	_DHCPInit
001c82   f038
001c84   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00115_DS_:
                                           ;	.line	251; TCPIP_Stack/StackTsk.c	DHCPTask();
001c86   ec83     call	0x706, 0            	CALL	_DHCPTask
001c88   f003
                                           ;	.line	253; TCPIP_Stack/StackTsk.c	if(DHCPIsBound(0))
001c8a   0e00     movlw	0                  	MOVLW	0x00
001c8c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c8e   ecae     call	0x7f5c, 0           	CALL	_DHCPIsBound
001c90   f03f
001c92   6e00     movwf	0, 0               	MOVWF	r0x00
001c94   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
001c96   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c98   e002     bz	0x1c9e                	BZ	_00119_DS_
001c9a   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	254; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = FALSE;
001c9c   9f2c     bcf	0x2c, 0x7, 0x1       	BCF	(_AppConfig + 44), 7, B
                                           _00119_DS_:
                                           ;	.line	270; TCPIP_Stack/StackTsk.c	UDPTask();
001c9e   ec46     call	0x808c, 0           	CALL	_UDPTask
001ca0   f040
                                           _00138_DS_:
                                           ;	.line	285; TCPIP_Stack/StackTsk.c	UDPDiscard();
001ca2   ec2e     call	0x7e5c, 0           	CALL	_UDPDiscard
001ca4   f03f
                                           ;	.line	290; TCPIP_Stack/StackTsk.c	if(!MACGetHeader(&remoteNode.MACAddr, &cFrameType))
001ca6   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode + 4)
001ca8   6e01     movwf	0x1, 0             	MOVWF	r0x01
001caa   0ecf     movlw	0xcf               	MOVLW	LOW(_remoteNode + 4)
001cac   6e00     movwf	0, 0               	MOVWF	r0x00
001cae   0e80     movlw	0x80               	MOVLW	0x80
001cb0   6e02     movwf	0x2, 0             	MOVWF	r0x02
001cb2   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_cFrameType_1_1)
001cb4   6e04     movwf	0x4, 0             	MOVWF	r0x04
001cb6   0e94     movlw	0x94               	MOVLW	LOW(_StackTask_cFrameType_1_1)
001cb8   6e03     movwf	0x3, 0             	MOVWF	r0x03
001cba   0e80     movlw	0x80               	MOVLW	0x80
001cbc   6e05     movwf	0x5, 0             	MOVWF	r0x05
001cbe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001cc0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cc2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cc6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001cc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ccc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cce   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cd2   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cd4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001cd6   eca9     call	0x3952, 0           	CALL	_MACGetHeader
001cd8   f01c
001cda   6e00     movwf	0, 0               	MOVWF	r0x00
001cdc   0e06     movlw	0x6                	MOVLW	0x06
001cde   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001ce0   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ce2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001ce4   d0ea     bra	0x1eba               	BRA	_00140_DS_
                                           ;	.line	294; TCPIP_Stack/StackTsk.c	switch(cFrameType)
001ce6   ca94     movff	0xa94, 0           	MOVFF	_StackTask_cFrameType_1_1, r0x00
001ce8   f000
001cea   6a01     clrf	0x1, 0              	CLRF	r0x01
001cec   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cee   e102     bnz	0x1cf4               	BNZ	_00159_DS_
001cf0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cf2   e009     bz	0x1d06                	BZ	_00123_DS_
                                           _00159_DS_:
001cf4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cf6   0a06     xorlw	0x6                	XORLW	0x06
001cf8   e102     bnz	0x1cfe               	BNZ	_00160_DS_
001cfa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cfc   e001     bz	0x1d00                	BZ	_00161_DS_
                                           _00160_DS_:
001cfe   d7d1     bra	0x1ca2               	BRA	_00138_DS_
                                           _00161_DS_:
                                           ;	.line	298; TCPIP_Stack/StackTsk.c	ARPProcess();
001d00   ecf9     call	0x2df2, 0           	CALL	_ARPProcess
001d02   f016
                                           ;	.line	299; TCPIP_Stack/StackTsk.c	break;
001d04   d7ce     bra	0x1ca2               	BRA	_00138_DS_
                                           _00123_DS_:
                                           ;	.line	303; TCPIP_Stack/StackTsk.c	if(!IPGetHeader(&tempLocalIP, &remoteNode, &cIPFrameType, &dataCount))
001d06   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_tempLocalIP_1_1)
001d08   6e01     movwf	0x1, 0             	MOVWF	r0x01
001d0a   0e20     movlw	0x20               	MOVLW	LOW(_StackTask_tempLocalIP_1_1)
001d0c   6e00     movwf	0, 0               	MOVWF	r0x00
001d0e   0e80     movlw	0x80               	MOVLW	0x80
001d10   6e02     movwf	0x2, 0             	MOVWF	r0x02
001d12   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode)
001d14   6e04     movwf	0x4, 0             	MOVWF	r0x04
001d16   0ecb     movlw	0xcb               	MOVLW	LOW(_remoteNode)
001d18   6e03     movwf	0x3, 0             	MOVWF	r0x03
001d1a   0e80     movlw	0x80               	MOVLW	0x80
001d1c   6e05     movwf	0x5, 0             	MOVWF	r0x05
001d1e   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_cIPFrameType_1_1)
001d20   6e07     movwf	0x7, 0             	MOVWF	r0x07
001d22   0e95     movlw	0x95               	MOVLW	LOW(_StackTask_cIPFrameType_1_1)
001d24   6e06     movwf	0x6, 0             	MOVWF	r0x06
001d26   0e80     movlw	0x80               	MOVLW	0x80
001d28   6e08     movwf	0x8, 0             	MOVWF	r0x08
001d2a   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_dataCount_1_1)
001d2c   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001d2e   0e70     movlw	0x70               	MOVLW	LOW(_StackTask_dataCount_1_1)
001d30   6e09     movwf	0x9, 0             	MOVWF	r0x09
001d32   0e80     movlw	0x80               	MOVLW	0x80
001d34   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001d36   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001d38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d3a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001d3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d3e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001d40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d42   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001d44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d46   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001d48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d4a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001d4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d4e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001d50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d52   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001d54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d56   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001d58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d5e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d62   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d66   ec6a     call	0x32d4, 0           	CALL	_IPGetHeader
001d68   f019
001d6a   6e00     movwf	0, 0               	MOVWF	r0x00
001d6c   0e0c     movlw	0xc                	MOVLW	0x0c
001d6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001d70   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d72   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001d74   d796     bra	0x1ca2               	BRA	_00138_DS_
                                           ;	.line	307; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_ICMP)
001d76   ca95     movff	0xa95, 0           	MOVFF	_StackTask_cIPFrameType_1_1, r0x00
001d78   f000
001d7a   6a01     clrf	0x1, 0              	CLRF	r0x01
001d7c   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d7e   0a01     xorlw	0x1                	XORLW	0x01
001d80   e102     bnz	0x1d86               	BNZ	_00162_DS_
001d82   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d84   e001     bz	0x1d88                	BZ	_00163_DS_
                                           _00162_DS_:
001d86   d06d     bra	0x1e62               	BRA	_00131_DS_
                                           _00163_DS_:
                                           ;	.line	328; TCPIP_Stack/StackTsk.c	if( (tempLocalIP.Val == AppConfig.MyIPAddr.Val) ||
001d88   ca20     movff	0xa20, 0x2         	MOVFF	_StackTask_tempLocalIP_1_1, r0x02
001d8a   f002
001d8c   ca21     movff	0xa21, 0x3         	MOVFF	(_StackTask_tempLocalIP_1_1 + 1), r0x03
001d8e   f003
001d90   ca22     movff	0xa22, 0x4         	MOVFF	(_StackTask_tempLocalIP_1_1 + 2), r0x04
001d92   f004
001d94   ca23     movff	0xa23, 0x5         	MOVFF	(_StackTask_tempLocalIP_1_1 + 3), r0x05
001d96   f005
001d98   ce00     movff	0xe00, 0x6         	MOVFF	_AppConfig, r0x06
001d9a   f006
001d9c   ce01     movff	0xe01, 0x7         	MOVFF	(_AppConfig + 1), r0x07
001d9e   f007
001da0   ce02     movff	0xe02, 0x8         	MOVFF	(_AppConfig + 2), r0x08
001da2   f008
001da4   ce03     movff	0xe03, 0x9         	MOVFF	(_AppConfig + 3), r0x09
001da6   f009
001da8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001daa   1806     xorwf	0x6, 0, 0          	XORWF	r0x06, W
001dac   e10a     bnz	0x1dc2               	BNZ	_00165_DS_
001dae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001db0   1807     xorwf	0x7, 0, 0          	XORWF	r0x07, W
001db2   e107     bnz	0x1dc2               	BNZ	_00165_DS_
001db4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001db6   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001db8   e104     bnz	0x1dc2               	BNZ	_00165_DS_
001dba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001dbc   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001dbe   e101     bnz	0x1dc2               	BNZ	_00165_DS_
001dc0   d039     bra	0x1e34               	BRA	_00126_DS_
                                           _00165_DS_:
                                           ;	.line	329; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == 0xFFFFFFFF) ||
001dc2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001dc4   0aff     xorlw	0xff               	XORLW	0xff
001dc6   e109     bnz	0x1dda               	BNZ	_00167_DS_
001dc8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001dca   0aff     xorlw	0xff               	XORLW	0xff
001dcc   e106     bnz	0x1dda               	BNZ	_00167_DS_
001dce   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001dd0   0aff     xorlw	0xff               	XORLW	0xff
001dd2   e103     bnz	0x1dda               	BNZ	_00167_DS_
001dd4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001dd6   0aff     xorlw	0xff               	XORLW	0xff
001dd8   e02d     bz	0x1e34                	BZ	_00126_DS_
                                           _00167_DS_:
001dda   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	330; TCPIP_Stack/StackTsk.c	(tempLocalIP.Val == ((AppConfig.MyIPAddr.Val & AppConfig.MyMask.Val) | ~AppConfig.MyMask.Val)))
001ddc   5104     movf	0x4, 0, 0x1         	MOVF	(_AppConfig + 4), W, B
001dde   1606     andwf	0x6, 0x1, 0        	ANDWF	r0x06, F
001de0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
001de2   5105     movf	0x5, 0, 0x1         	MOVF	(_AppConfig + 5), W, B
001de4   1607     andwf	0x7, 0x1, 0        	ANDWF	r0x07, F
001de6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
001de8   5106     movf	0x6, 0, 0x1         	MOVF	(_AppConfig + 6), W, B
001dea   1608     andwf	0x8, 0x1, 0        	ANDWF	r0x08, F
001dec   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
001dee   5107     movf	0x7, 0, 0x1         	MOVF	(_AppConfig + 7), W, B
001df0   1609     andwf	0x9, 0x1, 0        	ANDWF	r0x09, F
001df2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
001df4   1d04     comf	0x4, 0, 0x1         	COMF	(_AppConfig + 4), W, B
001df6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001df8   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
001dfa   1d05     comf	0x5, 0, 0x1         	COMF	(_AppConfig + 5), W, B
001dfc   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001dfe   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
001e00   1d06     comf	0x6, 0, 0x1         	COMF	(_AppConfig + 6), W, B
001e02   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
001e04   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
001e06   1d07     comf	0x7, 0, 0x1         	COMF	(_AppConfig + 7), W, B
001e08   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
001e0a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001e0c   1206     iorwf	0x6, 0x1, 0        	IORWF	r0x06, F
001e0e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001e10   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
001e12   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001e14   1208     iorwf	0x8, 0x1, 0        	IORWF	r0x08, F
001e16   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
001e18   1209     iorwf	0x9, 0x1, 0        	IORWF	r0x09, F
001e1a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e1c   1806     xorwf	0x6, 0, 0          	XORWF	r0x06, W
001e1e   e109     bnz	0x1e32               	BNZ	_00170_DS_
001e20   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e22   1807     xorwf	0x7, 0, 0          	XORWF	r0x07, W
001e24   e106     bnz	0x1e32               	BNZ	_00170_DS_
001e26   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e28   1808     xorwf	0x8, 0, 0          	XORWF	r0x08, W
001e2a   e103     bnz	0x1e32               	BNZ	_00170_DS_
001e2c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e2e   1809     xorwf	0x9, 0, 0          	XORWF	r0x09, W
001e30   e001     bz	0x1e34                	BZ	_00126_DS_
                                           _00170_DS_:
001e32   d737     bra	0x1ca2               	BRA	_00138_DS_
                                           _00126_DS_:
                                           ;	.line	332; TCPIP_Stack/StackTsk.c	ICMPProcess(&remoteNode, dataCount);
001e34   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode)
001e36   6e03     movwf	0x3, 0             	MOVWF	r0x03
001e38   0ecb     movlw	0xcb               	MOVLW	LOW(_remoteNode)
001e3a   6e02     movwf	0x2, 0             	MOVWF	r0x02
001e3c   0e80     movlw	0x80               	MOVLW	0x80
001e3e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e40   010a     movlb	0xa                	BANKSEL	(_StackTask_dataCount_1_1 + 1)
001e42   5171     movf	0x71, 0, 0x1        	MOVF	(_StackTask_dataCount_1_1 + 1), W, B
001e44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e46   010a     movlb	0xa                	BANKSEL	_StackTask_dataCount_1_1
001e48   5170     movf	0x70, 0, 0x1        	MOVF	_StackTask_dataCount_1_1, W, B
001e4a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e4c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e4e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e50   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e52   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e54   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001e56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e58   ec3f     call	0x487e, 0           	CALL	_ICMPProcess
001e5a   f024
001e5c   0e05     movlw	0x5                	MOVLW	0x05
001e5e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	335; TCPIP_Stack/StackTsk.c	break;
001e60   d720     bra	0x1ca2               	BRA	_00138_DS_
                                           _00131_DS_:
                                           ;	.line	349; TCPIP_Stack/StackTsk.c	if(cIPFrameType == IP_PROT_UDP)
001e62   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e64   0a11     xorlw	0x11               	XORLW	0x11
001e66   e102     bnz	0x1e6c               	BNZ	_00172_DS_
001e68   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001e6a   e001     bz	0x1e6e                	BZ	_00173_DS_
                                           _00172_DS_:
001e6c   d71a     bra	0x1ca2               	BRA	_00138_DS_
                                           _00173_DS_:
                                           ;	.line	353; TCPIP_Stack/StackTsk.c	if(UDPProcess(&remoteNode, &tempLocalIP, dataCount))
001e6e   0e08     movlw	0x8                	MOVLW	HIGH(_remoteNode)
001e70   6e01     movwf	0x1, 0             	MOVWF	r0x01
001e72   0ecb     movlw	0xcb               	MOVLW	LOW(_remoteNode)
001e74   6e00     movwf	0, 0               	MOVWF	r0x00
001e76   0e80     movlw	0x80               	MOVLW	0x80
001e78   6e02     movwf	0x2, 0             	MOVWF	r0x02
001e7a   0e0a     movlw	0xa                	MOVLW	HIGH(_StackTask_tempLocalIP_1_1)
001e7c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e7e   0e20     movlw	0x20               	MOVLW	LOW(_StackTask_tempLocalIP_1_1)
001e80   6e03     movwf	0x3, 0             	MOVWF	r0x03
001e82   0e80     movlw	0x80               	MOVLW	0x80
001e84   6e05     movwf	0x5, 0             	MOVWF	r0x05
001e86   010a     movlb	0xa                	BANKSEL	(_StackTask_dataCount_1_1 + 1)
001e88   5171     movf	0x71, 0, 0x1        	MOVF	(_StackTask_dataCount_1_1 + 1), W, B
001e8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e8c   010a     movlb	0xa                	BANKSEL	_StackTask_dataCount_1_1
001e8e   5170     movf	0x70, 0, 0x1        	MOVF	_StackTask_dataCount_1_1, W, B
001e90   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e92   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e96   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001e98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e9a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001e9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001e9e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ea0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ea2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001ea4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001ea6   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ea8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001eaa   eca0     call	0x2540, 0           	CALL	_UDPProcess
001eac   f012
001eae   6e00     movwf	0, 0               	MOVWF	r0x00
001eb0   0e08     movlw	0x8                	MOVLW	0x08
001eb2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001eb4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001eb6   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001eb8   d6f4     bra	0x1ca2               	BRA	_00138_DS_
                                           _00140_DS_:
                                           ;	.line	359; TCPIP_Stack/StackTsk.c	}
001eba   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001ebc   f00d
001ebe   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
001ec0   f00c
001ec2   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001ec4   f00b
001ec6   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001ec8   f00a
001eca   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001ecc   f009
001ece   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001ed0   f008
001ed2   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001ed4   f007
001ed6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001ed8   f006
001eda   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001edc   f005
001ede   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001ee0   f004
001ee2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001ee4   f003
001ee6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001ee8   f002
001eea   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001eec   f001
001eee   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001ef0   f000
001ef2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ef4   ffd9
001ef6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_StackTsk__StackInit	code
                                           _StackInit:
                                           ;	.line	115; TCPIP_Stack/StackTsk.c	void StackInit(void)
0070a2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0070a4   ffe5
0070a6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0070a8   ffd9
0070aa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0070ac   ffe5
0070ae   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0070b0   ffe5
0070b2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0070b4   ffe5
0070b6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0070b8   ffe5
0070ba   010a     movlb	0xa                	BANKSEL	_smStack
                                           ;	.line	117; TCPIP_Stack/StackTsk.c	smStack                     = SM_STACK_IDLE;
0070bc   6b93     clrf	0x93, 0x1           	CLRF	_smStack, B
0070be   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	124; TCPIP_Stack/StackTsk.c	AppConfig.Flags.bInConfigMode = TRUE;
0070c0   8f2c     bsf	0x2c, 0x7, 0x1       	BSF	(_AppConfig + 44), 7, B
                                           ;	.line	128; TCPIP_Stack/StackTsk.c	srand(GenerateRandomDWORD());
0070c2   ec8a     call	0x2b14, 0           	CALL	_GenerateRandomDWORD
0070c4   f015
0070c6   6e00     movwf	0, 0               	MOVWF	r0x00
0070c8   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0070ca   f001
0070cc   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0070ce   f002
0070d0   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
0070d2   f003
0070d4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0070d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0070da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070dc   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0070de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0070e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070e4   ec69     call	0x7ed2, 0           	CALL	_srand
0070e6   f03f
0070e8   0e04     movlw	0x4                	MOVLW	0x04
0070ea   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	130; TCPIP_Stack/StackTsk.c	MACInit();
0070ec   ec67     call	0x58ce, 0           	CALL	_MACInit
0070ee   f02c
                                           ;	.line	139; TCPIP_Stack/StackTsk.c	ARPInit();
0070f0   ecbc     call	0x7d78, 0           	CALL	_ARPInit
0070f2   f03e
                                           ;	.line	142; TCPIP_Stack/StackTsk.c	UDPInit();
0070f4   ec4f     call	0x7a9e, 0           	CALL	_UDPInit
0070f6   f03d
                                           ;	.line	174; TCPIP_Stack/StackTsk.c	DHCPInit(0);
0070f8   0e00     movlw	0                  	MOVLW	0x00
0070fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0070fc   ecd7     call	0x71ae, 0           	CALL	_DHCPInit
0070fe   f038
007100   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
007102   010e     movlb	0xe                	BANKSEL	(_AppConfig + 44)
                                           ;	.line	176; TCPIP_Stack/StackTsk.c	if(!AppConfig.Flags.bIsDHCPEnabled)
007104   bd2c     btfsc	0x2c, 0x6, 0x1     	BTFSC	(_AppConfig + 44), 6, B
007106   d005     bra	0x7112               	BRA	_00107_DS_
                                           ;	.line	178; TCPIP_Stack/StackTsk.c	DHCPDisable(0);  
007108   0e00     movlw	0                  	MOVLW	0x00
00710a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00710c   ec29     call	0x7a52, 0           	CALL	_DHCPDisable
00710e   f03d
007110   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           _00107_DS_:
007112   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007114   f003
007116   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007118   f002
00711a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00711c   f001
00711e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007120   f000
007122   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007124   ffd9
007126   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  962 (0x03c2) bytes ( 0.73%)
                                           ;           	  481 (0x01e1) words
                                           ; udata size:	   19 (0x0013) bytes ( 0.49%)
                                           ; access size:	   14 (0x000e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:16 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffffffffffff) bytes (14073748835532800.00%)
                                           ;           	9223372036854775807 (0x7fffffffffffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:16 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _TickInit
                                           	global _TickGet
                                           	global _TickGetDiv256
                                           	global _TickGetDiv64K
                                           	global _TickConvertToMilliseconds
                                           	global _TickUpdate
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern __divulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _dwInternalTicks	db	0x00, 0x00, 0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           udata_Tick_0	udata
                                           _vTickReading	res	6
                                           
                                           udata_Tick_1	udata
                                           _TickGetDiv256_ret_1_1	res	4
                                           
                                           udata_Tick_2	udata
                                           _TickGetDiv64K_ret_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_Tick__TickUpdate	code
                                           _TickUpdate:
                                           ;	.line	356; TCPIP_Stack/Tick.c	void TickUpdate(void)
007e32   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007e34   ffe5
007e36   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007e38   ffd9
                                           ;	.line	358; TCPIP_Stack/Tick.c	if(INTCONbits.TMR0IF)
007e3a   a4f2     btfss	0xf2, 0x2, 0       	BTFSS	_INTCONbits, 2
007e3c   d00c     bra	0x7e56               	BRA	_00143_DS_
007e3e   0108     movlb	0x8                	BANKSEL	_dwInternalTicks
                                           ;	.line	361; TCPIP_Stack/Tick.c	dwInternalTicks++;
007e40   2b62     incf	0x62, 0x1, 0x1      	INCF	_dwInternalTicks, F, B
007e42   e302     bnc	0x7e48               	BNC	_10141_DS_
007e44   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 1)
007e46   2b63     incf	0x63, 0x1, 0x1      	INCF	(_dwInternalTicks + 1), F, B
                                           _10141_DS_:
007e48   e302     bnc	0x7e4e               	BNC	_20142_DS_
007e4a   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 2)
007e4c   2b64     incf	0x64, 0x1, 0x1      	INCF	(_dwInternalTicks + 2), F, B
                                           _20142_DS_:
007e4e   e302     bnc	0x7e54               	BNC	_30143_DS_
007e50   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 3)
007e52   2b65     incf	0x65, 0x1, 0x1      	INCF	(_dwInternalTicks + 3), F, B
                                           _30143_DS_:
                                           ;	.line	364; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;
007e54   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           _00143_DS_:
007e56   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007e58   ffd9
007e5a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickConvertToMilliseconds	code
                                           _TickConvertToMilliseconds:
                                           ;	.line	333; TCPIP_Stack/Tick.c	DWORD TickConvertToMilliseconds(DWORD dwTickValue)
006b68   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006b6a   ffe5
006b6c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006b6e   ffd9
006b70   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006b72   ffe5
006b74   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006b76   ffe5
006b78   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006b7a   ffe5
006b7c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006b7e   ffe5
006b80   0e02     movlw	0x2                	MOVLW	0x02
006b82   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006b84   f000
006b86   0e03     movlw	0x3                	MOVLW	0x03
006b88   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006b8a   f001
006b8c   0e04     movlw	0x4                	MOVLW	0x04
006b8e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006b90   f002
006b92   0e05     movlw	0x5                	MOVLW	0x05
006b94   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006b96   f003
                                           ;	.line	335; TCPIP_Stack/Tick.c	return (dwTickValue+(TICKS_PER_SECOND/2000ul))/((DWORD)(TICKS_PER_SECOND/1000ul));
006b98   0e14     movlw	0x14               	MOVLW	0x14
006b9a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006b9c   0e00     movlw	0                  	MOVLW	0x00
006b9e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006ba0   0e00     movlw	0                  	MOVLW	0x00
006ba2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
006ba4   0e00     movlw	0                  	MOVLW	0x00
006ba6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
006ba8   0e00     movlw	0                  	MOVLW	0x00
006baa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bac   0e00     movlw	0                  	MOVLW	0x00
006bae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bb0   0e00     movlw	0                  	MOVLW	0x00
006bb2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bb4   0e28     movlw	0x28               	MOVLW	0x28
006bb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bb8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006bba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006bbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bc0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
006bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006bc8   ecda     call	0x57b4, 0           	CALL	__divulong
006bca   f02b
006bcc   6e00     movwf	0, 0               	MOVWF	r0x00
006bce   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
006bd0   f001
006bd2   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
006bd4   f002
006bd6   cfe9     movff	0xfe9, 0x3         	MOVFF	FSR0L, r0x03
006bd8   f003
006bda   0e08     movlw	0x8                	MOVLW	0x08
006bdc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006bde   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
006be0   ffe9
006be2   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
006be4   fff4
006be6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006be8   fff3
006bea   5000     movf	0, 0, 0             	MOVF	r0x00, W
006bec   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006bee   f003
006bf0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006bf2   f002
006bf4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006bf6   f001
006bf8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006bfa   f000
006bfc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006bfe   ffd9
006c00   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv64K	code
                                           _TickGetDiv64K:
                                           ;	.line	292; TCPIP_Stack/Tick.c	DWORD TickGetDiv64K(void)
007c02   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007c04   ffe5
007c06   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007c08   ffd9
                                           ;	.line	296; TCPIP_Stack/Tick.c	GetTickCopy();
007c0a   ec9a     call	0x7b34, 0           	CALL	_GetTickCopy
007c0c   f03d
007c0e   0108     movlb	0x8                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	297; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[2];	// Note: This copy must be done one 
007c10   51f5     movf	0xf5, 0, 0x1        	MOVF	(_vTickReading + 2), W, B
007c12   010a     movlb	0xa                	BANKSEL	_TickGetDiv64K_ret_1_1
007c14   6f28     movwf	0x28, 0x1          	MOVWF	_TickGetDiv64K_ret_1_1, B
007c16   0108     movlb	0x8                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	298; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[3];	// byte at a time to prevent misaligned 
007c18   51f6     movf	0xf6, 0, 0x1        	MOVF	(_vTickReading + 3), W, B
007c1a   010a     movlb	0xa                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 1)
007c1c   6f29     movwf	0x29, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 1), B
007c1e   0108     movlb	0x8                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	299; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[4];	// memory reads, which will reset the PIC.
007c20   51f7     movf	0xf7, 0, 0x1        	MOVF	(_vTickReading + 4), W, B
007c22   010a     movlb	0xa                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 2)
007c24   6f2a     movwf	0x2a, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 2), B
007c26   0108     movlb	0x8                	BANKSEL	(_vTickReading + 5)
                                           ;	.line	300; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[5];
007c28   51f8     movf	0xf8, 0, 0x1        	MOVF	(_vTickReading + 5), W, B
007c2a   010a     movlb	0xa                	BANKSEL	(_TickGetDiv64K_ret_1_1 + 3)
007c2c   6f2b     movwf	0x2b, 0x1          	MOVWF	(_TickGetDiv64K_ret_1_1 + 3), B
                                           ;	.line	302; TCPIP_Stack/Tick.c	return ret.Val;
007c2e   ca2b     movff	0xa2b, 0xfe9       	MOVFF	(_TickGetDiv64K_ret_1_1 + 3), FSR0L
007c30   ffe9
007c32   ca2a     movff	0xa2a, 0xff4       	MOVFF	(_TickGetDiv64K_ret_1_1 + 2), PRODH
007c34   fff4
007c36   ca29     movff	0xa29, 0xff3       	MOVFF	(_TickGetDiv64K_ret_1_1 + 1), PRODL
007c38   fff3
007c3a   010a     movlb	0xa                	BANKSEL	_TickGetDiv64K_ret_1_1
007c3c   5128     movf	0x28, 0, 0x1        	MOVF	_TickGetDiv64K_ret_1_1, W, B
007c3e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007c40   ffd9
007c42   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGetDiv256	code
                                           _TickGetDiv256:
                                           ;	.line	255; TCPIP_Stack/Tick.c	DWORD TickGetDiv256(void)
007c44   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007c46   ffe5
007c48   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007c4a   ffd9
                                           ;	.line	259; TCPIP_Stack/Tick.c	GetTickCopy();
007c4c   ec9a     call	0x7b34, 0           	CALL	_GetTickCopy
007c4e   f03d
007c50   0108     movlb	0x8                	BANKSEL	(_vTickReading + 1)
                                           ;	.line	260; TCPIP_Stack/Tick.c	ret.v[0] = vTickReading[1];	// Note: This copy must be done one 
007c52   51f4     movf	0xf4, 0, 0x1        	MOVF	(_vTickReading + 1), W, B
007c54   010a     movlb	0xa                	BANKSEL	_TickGetDiv256_ret_1_1
007c56   6f24     movwf	0x24, 0x1          	MOVWF	_TickGetDiv256_ret_1_1, B
007c58   0108     movlb	0x8                	BANKSEL	(_vTickReading + 2)
                                           ;	.line	261; TCPIP_Stack/Tick.c	ret.v[1] = vTickReading[2];	// byte at a time to prevent misaligned 
007c5a   51f5     movf	0xf5, 0, 0x1        	MOVF	(_vTickReading + 2), W, B
007c5c   010a     movlb	0xa                	BANKSEL	(_TickGetDiv256_ret_1_1 + 1)
007c5e   6f25     movwf	0x25, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 1), B
007c60   0108     movlb	0x8                	BANKSEL	(_vTickReading + 3)
                                           ;	.line	262; TCPIP_Stack/Tick.c	ret.v[2] = vTickReading[3];	// memory reads, which will reset the PIC.
007c62   51f6     movf	0xf6, 0, 0x1        	MOVF	(_vTickReading + 3), W, B
007c64   010a     movlb	0xa                	BANKSEL	(_TickGetDiv256_ret_1_1 + 2)
007c66   6f26     movwf	0x26, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 2), B
007c68   0108     movlb	0x8                	BANKSEL	(_vTickReading + 4)
                                           ;	.line	263; TCPIP_Stack/Tick.c	ret.v[3] = vTickReading[4];
007c6a   51f7     movf	0xf7, 0, 0x1        	MOVF	(_vTickReading + 4), W, B
007c6c   010a     movlb	0xa                	BANKSEL	(_TickGetDiv256_ret_1_1 + 3)
007c6e   6f27     movwf	0x27, 0x1          	MOVWF	(_TickGetDiv256_ret_1_1 + 3), B
                                           ;	.line	265; TCPIP_Stack/Tick.c	return ret.Val;
007c70   ca27     movff	0xa27, 0xfe9       	MOVFF	(_TickGetDiv256_ret_1_1 + 3), FSR0L
007c72   ffe9
007c74   ca26     movff	0xa26, 0xff4       	MOVFF	(_TickGetDiv256_ret_1_1 + 2), PRODH
007c76   fff4
007c78   ca25     movff	0xa25, 0xff3       	MOVFF	(_TickGetDiv256_ret_1_1 + 1), PRODL
007c7a   fff3
007c7c   010a     movlb	0xa                	BANKSEL	_TickGetDiv256_ret_1_1
007c7e   5124     movf	0x24, 0, 0x1        	MOVF	_TickGetDiv256_ret_1_1, W, B
007c80   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007c82   ffd9
007c84   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickGet	code
                                           _TickGet:
                                           ;	.line	225; TCPIP_Stack/Tick.c	DWORD TickGet(void)
007ef8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007efa   ffe5
007efc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007efe   ffd9
                                           ;	.line	227; TCPIP_Stack/Tick.c	GetTickCopy();
007f00   ec9a     call	0x7b34, 0           	CALL	_GetTickCopy
007f02   f03d
                                           ;	.line	228; TCPIP_Stack/Tick.c	return *((DWORD*)&vTickReading[0]);
007f04   c8f6     movff	0x8f6, 0xfe9       	MOVFF	(_vTickReading + 3), FSR0L
007f06   ffe9
007f08   c8f5     movff	0x8f5, 0xff4       	MOVFF	(_vTickReading + 2), PRODH
007f0a   fff4
007f0c   c8f4     movff	0x8f4, 0xff3       	MOVFF	(_vTickReading + 1), PRODL
007f0e   fff3
007f10   0108     movlb	0x8                	BANKSEL	_vTickReading
007f12   51f3     movf	0xf3, 0, 0x1        	MOVF	_vTickReading, W, B
007f14   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007f16   ffd9
007f18   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__GetTickCopy	code
                                           _GetTickCopy:
                                           ;	.line	157; TCPIP_Stack/Tick.c	static void GetTickCopy(void)
007b34   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007b36   ffe5
007b38   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007b3a   ffd9
                                           _00113_DS_:
                                           ;	.line	164; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
007b3c   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
007b3e   0000     nop                      	nop 
                                           ;	.line	166; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 0;		// Disable interrupt
007b40   9af2     bcf	0xf2, 0x5, 0         	BCF	_INTCONbits, 5
                                           ;	.line	167; TCPIP_Stack/Tick.c	vTickReading[0] = TMR0L;
007b42   50d6     movf	0xd6, 0, 0          	MOVF	_TMR0L, W
007b44   0108     movlb	0x8                	BANKSEL	_vTickReading
007b46   6ff3     movwf	0xf3, 0x1          	MOVWF	_vTickReading, B
                                           ;	.line	168; TCPIP_Stack/Tick.c	vTickReading[1] = TMR0H;
007b48   50d7     movf	0xd7, 0, 0          	MOVF	_TMR0H, W
007b4a   0108     movlb	0x8                	BANKSEL	(_vTickReading + 1)
007b4c   6ff4     movwf	0xf4, 0x1          	MOVWF	(_vTickReading + 1), B
007b4e   0108     movlb	0x8                	BANKSEL	_dwInternalTicks
                                           ;	.line	169; TCPIP_Stack/Tick.c	*((DWORD*)&vTickReading[2]) = dwInternalTicks;
007b50   5162     movf	0x62, 0, 0x1        	MOVF	_dwInternalTicks, W, B
007b52   0108     movlb	0x8                	BANKSEL	(_vTickReading + 2)
007b54   6ff5     movwf	0xf5, 0x1          	MOVWF	(_vTickReading + 2), B
007b56   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 1)
007b58   5163     movf	0x63, 0, 0x1        	MOVF	(_dwInternalTicks + 1), W, B
007b5a   0108     movlb	0x8                	BANKSEL	(_vTickReading + 3)
007b5c   6ff6     movwf	0xf6, 0x1          	MOVWF	(_vTickReading + 3), B
007b5e   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 2)
007b60   5164     movf	0x64, 0, 0x1        	MOVF	(_dwInternalTicks + 2), W, B
007b62   0108     movlb	0x8                	BANKSEL	(_vTickReading + 4)
007b64   6ff7     movwf	0xf7, 0x1          	MOVWF	(_vTickReading + 4), B
007b66   0108     movlb	0x8                	BANKSEL	(_dwInternalTicks + 3)
007b68   5165     movf	0x65, 0, 0x1        	MOVF	(_dwInternalTicks + 3), W, B
007b6a   0108     movlb	0x8                	BANKSEL	(_vTickReading + 5)
007b6c   6ff8     movwf	0xf8, 0x1          	MOVWF	(_vTickReading + 5), B
                                           ;	.line	170; TCPIP_Stack/Tick.c	} while(INTCONbits.TMR0IF);
007b6e   b4f2     btfsc	0xf2, 0x2, 0       	BTFSC	_INTCONbits, 2
007b70   d7e5     bra	0x7b3c               	BRA	_00113_DS_
                                           ;	.line	171; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;			// Enable interrupt
007b72   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
007b74   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007b76   ffd9
007b78   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_Tick__TickInit	code
                                           _TickInit:
                                           ;	.line	97; TCPIP_Stack/Tick.c	void TickInit(void)
008012   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
008014   ffe5
008016   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008018   ffd9
                                           ;	.line	102; TCPIP_Stack/Tick.c	TMR0H = 0;
00801a   6ad7     clrf	0xd7, 0             	CLRF	_TMR0H
                                           ;	.line	103; TCPIP_Stack/Tick.c	TMR0L = 0;
00801c   6ad6     clrf	0xd6, 0             	CLRF	_TMR0L
                                           ;	.line	106; TCPIP_Stack/Tick.c	INTCON2bits.TMR0IP = 0;		// Low priority
00801e   94f1     bcf	0xf1, 0x2, 0         	BCF	_INTCON2bits, 2
                                           ;	.line	107; TCPIP_Stack/Tick.c	INTCONbits.TMR0IF = 0;          //reset overflow indicator
008020   94f2     bcf	0xf2, 0x2, 0         	BCF	_INTCONbits, 2
                                           ;	.line	108; TCPIP_Stack/Tick.c	INTCONbits.TMR0IE = 1;		// Enable interrupt
008022   8af2     bsf	0xf2, 0x5, 0         	BSF	_INTCONbits, 5
                                           ;	.line	111; TCPIP_Stack/Tick.c	T0CON = 0x87;
008024   0e87     movlw	0x87               	MOVLW	0x87
008026   6ed5     movwf	0xd5, 0            	MOVWF	_T0CON
008028   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00802a   ffd9
00802c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  460 (0x01cc) bytes ( 0.35%)
                                           ;           	  230 (0x00e6) words
                                           ; udata size:	   14 (0x000e) bytes ( 0.36%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:16 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _UDPInit
                                           	global _UDPTask
                                           	global _UDPOpen
                                           	global _UDPClose
                                           	global _UDPSetTxBuffer
                                           	global _UDPSetRxBuffer
                                           	global _UDPIsPutReady
                                           	global _UDPPut
                                           	global _UDPPutArray
                                           	global _UDPPutString
                                           	global _UDPFlush
                                           	global _UDPIsGetReady
                                           	global _UDPGet
                                           	global _UDPGetArray
                                           	global _UDPDiscard
                                           	global _UDPProcess
                                           	global _UDPSocketInfo
                                           	global _activeUDPSocket
                                           	global _UDPTxCount
                                           	global _UDPRxCount
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget4
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _strlen
                                           	extern _memcpy
                                           	extern _memset
                                           	extern _swaps
                                           	extern _CalcIPChecksum
                                           	extern _CalcIPBufferChecksum
                                           	extern _MACSetWritePtr
                                           	extern _MACSetReadPtr
                                           	extern _MACGet
                                           	extern _MACGetArray
                                           	extern _MACDiscardRx
                                           	extern _MACIsTxReady
                                           	extern _MACPut
                                           	extern _MACPutArray
                                           	extern _MACFlush
                                           	extern _IPPutHeader
                                           	extern _IPSetRxBuffer
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _LastPutSocket	db	0xff
                                           _SocketWithRxData	db	0xff
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           
                                           udata_UDP_0	udata
                                           _wPutOffset	res	2
                                           
                                           udata_UDP_1	udata
                                           _wGetOffset	res	2
                                           
                                           udata_UDP_2	udata
                                           _Flags	res	1
                                           
                                           udata_UDP_3	udata
                                           _UDPOpen_NextPort_1_1	res	2
                                           
                                           udata_UDP_4	udata
                                           _activeUDPSocket	res	1
                                           
                                           udata_UDP_5	udata
                                           _UDPSocketInfo	res	140
                                           
                                           udata_UDP_6	udata
                                           _UDPTxCount	res	2
                                           
                                           udata_UDP_7	udata
                                           _UDPFlush_wChecksum_1_1	res	2
                                           
                                           udata_UDP_8	udata
                                           _UDPFlush_h_1_1	res	8
                                           
                                           udata_UDP_9	udata
                                           _UDPFlush_pseudoHeader_2_2	res	12
                                           
                                           udata_UDP_10	udata
                                           _UDPRxCount	res	2
                                           
                                           udata_UDP_11	udata
                                           _UDPProcess_h_1_1	res	8
                                           
                                           udata_UDP_12	udata
                                           _UDPProcess_pseudoHeader_1_1	res	12
                                           
                                           udata_UDP_13	udata
                                           _UDPProcess_checksums_1_1	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_UDP__FindMatchingSocket	code
                                           _FindMatchingSocket:
                                           ;	.line	1017; TCPIP_Stack/UDP.c	static UDP_SOCKET FindMatchingSocket(UDP_HEADER *h,
001196   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001198   ffe5
00119a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00119c   ffd9
00119e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0011a0   ffe5
0011a2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0011a4   ffe5
0011a6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0011a8   ffe5
0011aa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0011ac   ffe5
0011ae   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0011b0   ffe5
0011b2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0011b4   ffe5
0011b6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0011b8   ffe5
0011ba   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0011bc   ffe5
0011be   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0011c0   ffe5
0011c2   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0011c4   ffe5
0011c6   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0011c8   ffe5
0011ca   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0011cc   ffe5
0011ce   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0011d0   ffe5
0011d2   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0011d4   ffe5
0011d6   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0011d8   ffe5
0011da   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0011dc   ffe5
0011de   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0011e0   ffe5
0011e2   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0011e4   ffe5
0011e6   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0011e8   ffe5
0011ea   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0011ec   ffe5
0011ee   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
0011f0   ffe5
0011f2   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0011f4   ffe5
0011f6   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
0011f8   ffe5
0011fa   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
0011fc   ffe5
0011fe   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
001200   ffe5
001202   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
001204   ffe5
001206   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
001208   ffe5
00120a   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
00120c   ffe5
00120e   0e02     movlw	0x2                	MOVLW	0x02
001210   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001212   f000
001214   0e03     movlw	0x3                	MOVLW	0x03
001216   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001218   f001
00121a   0e04     movlw	0x4                	MOVLW	0x04
00121c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00121e   f002
001220   0e05     movlw	0x5                	MOVLW	0x05
001222   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
001224   f003
001226   0e06     movlw	0x6                	MOVLW	0x06
001228   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00122a   f004
00122c   0e07     movlw	0x7                	MOVLW	0x07
00122e   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
001230   f005
001232   0e08     movlw	0x8                	MOVLW	0x08
001234   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
001236   f006
001238   0e09     movlw	0x9                	MOVLW	0x09
00123a   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
00123c   f007
00123e   0e0a     movlw	0xa                	MOVLW	0x0a
001240   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
001242   f008
                                           ;	.line	1025; TCPIP_Stack/UDP.c	partialMatch = INVALID_UDP_SOCKET;
001244   0eff     movlw	0xff               	MOVLW	0xff
001246   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	1027; TCPIP_Stack/UDP.c	p = UDPSocketInfo;
001248   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
00124a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00124c   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
00124e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001250   0e80     movlw	0x80               	MOVLW	0x80
001252   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
001254   6a0d     clrf	0xd, 0              	CLRF	r0x0d
001256   5000     movf	0, 0, 0             	MOVF	r0x00, W
001258   0f02     addlw	0x2                	ADDLW	0x02
00125a   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00125c   0e00     movlw	0                  	MOVLW	0x00
00125e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001260   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
001262   0e00     movlw	0                  	MOVLW	0x00
001264   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001266   6e10     movwf	0x10, 0            	MOVWF	r0x10
001268   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
00126a   ffe9
00126c   c00f     movff	0xf, 0xff3         	MOVFF	r0x0f, PRODL
00126e   fff3
001270   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
001272   ecee     call	0x7ddc, 0           	CALL	__gptrget2
001274   f03e
001276   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
001278   cff3     movff	0xff3, 0xf         	MOVFF	PRODL, r0x0f
00127a   f00f
00127c   c00a     movff	0xa, 0x10          	MOVFF	r0x0a, r0x10
00127e   f010
001280   c00b     movff	0xb, 0x11          	MOVFF	r0x0b, r0x11
001282   f011
001284   c00c     movff	0xc, 0x12          	MOVFF	r0x0c, r0x12
001286   f012
001288   6a13     clrf	0x13, 0             	CLRF	r0x13
                                           _00306_DS_:
00128a   c013     movff	0x13, 0x14         	MOVFF	r0x13, r0x14
00128c   f014
00128e   6a15     clrf	0x15, 0             	CLRF	r0x15
001290   0e00     movlw	0                  	MOVLW	0x00
001292   5c15     subwf	0x15, 0, 0         	SUBWF	r0x15, W
001294   e102     bnz	0x129a               	BNZ	_00319_DS_
001296   0e0a     movlw	0xa                	MOVLW	0x0a
001298   5c14     subwf	0x14, 0, 0         	SUBWF	r0x14, W
                                           _00319_DS_:
00129a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00129c   d0b4     bra	0x1406               	BRA	_00309_DS_
                                           ;	.line	1035; TCPIP_Stack/UDP.c	if ( p->localPort == h->DestinationPort )
00129e   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0012a0   0f0c     addlw	0xc                	ADDLW	0x0c
0012a2   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012a4   0e00     movlw	0                  	MOVLW	0x00
0012a6   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
0012a8   6e15     movwf	0x15, 0            	MOVWF	r0x15
0012aa   0e00     movlw	0                  	MOVLW	0x00
0012ac   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
0012ae   6e16     movwf	0x16, 0            	MOVWF	r0x16
0012b0   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
0012b2   ffe9
0012b4   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
0012b6   fff3
0012b8   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0012ba   ecee     call	0x7ddc, 0           	CALL	__gptrget2
0012bc   f03e
0012be   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012c0   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0012c2   f015
0012c4   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0012c6   180e     xorwf	0xe, 0, 0          	XORWF	r0x0e, W
0012c8   e103     bnz	0x12d0               	BNZ	_00320_DS_
0012ca   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0012cc   180f     xorwf	0xf, 0, 0          	XORWF	r0x0f, W
0012ce   e001     bz	0x12d2                	BZ	_00321_DS_
                                           _00320_DS_:
0012d0   d090     bra	0x13f2               	BRA	_00303_DS_
                                           _00321_DS_:
                                           ;	.line	1037; TCPIP_Stack/UDP.c	if(p->remotePort == h->SourcePort)
0012d2   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0012d4   0f0a     addlw	0xa                	ADDLW	0x0a
0012d6   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012d8   0e00     movlw	0                  	MOVLW	0x00
0012da   2011     addwfc	0x11, 0, 0        	ADDWFC	r0x11, W
0012dc   6e15     movwf	0x15, 0            	MOVWF	r0x15
0012de   0e00     movlw	0                  	MOVLW	0x00
0012e0   2012     addwfc	0x12, 0, 0        	ADDWFC	r0x12, W
0012e2   6e16     movwf	0x16, 0            	MOVWF	r0x16
0012e4   c014     movff	0x14, 0xfe9        	MOVFF	r0x14, FSR0L
0012e6   ffe9
0012e8   c015     movff	0x15, 0xff3        	MOVFF	r0x15, PRODL
0012ea   fff3
0012ec   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0012ee   ecee     call	0x7ddc, 0           	CALL	__gptrget2
0012f0   f03e
0012f2   6e14     movwf	0x14, 0            	MOVWF	r0x14
0012f4   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
0012f6   f015
0012f8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0012fa   ffe9
0012fc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0012fe   fff3
001300   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001302   ecee     call	0x7ddc, 0           	CALL	__gptrget2
001304   f03e
001306   6e16     movwf	0x16, 0            	MOVWF	r0x16
001308   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
00130a   f017
00130c   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00130e   1816     xorwf	0x16, 0, 0         	XORWF	r0x16, W
001310   e103     bnz	0x1318               	BNZ	_00322_DS_
001312   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
001314   1817     xorwf	0x17, 0, 0         	XORWF	r0x17, W
001316   e001     bz	0x131a                	BZ	_00323_DS_
                                           _00322_DS_:
001318   d06a     bra	0x13ee               	BRA	_00301_DS_
                                           _00323_DS_:
                                           ;	.line	1039; TCPIP_Stack/UDP.c	if( (p->remoteNode.IPAddr.Val == remoteNode->IPAddr.Val) ||
00131a   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
00131c   ffe9
00131e   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
001320   fff3
001322   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
001324   ec43     call	0x7c86, 0           	CALL	__gptrget4
001326   f03e
001328   6e14     movwf	0x14, 0            	MOVWF	r0x14
00132a   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
00132c   f015
00132e   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
001330   f016
001332   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
001334   f017
001336   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001338   ffe9
00133a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00133c   fff3
00133e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001340   ec43     call	0x7c86, 0           	CALL	__gptrget4
001342   f03e
001344   6e18     movwf	0x18, 0            	MOVWF	r0x18
001346   cff3     movff	0xff3, 0x19        	MOVFF	PRODL, r0x19
001348   f019
00134a   cff4     movff	0xff4, 0x1a        	MOVFF	PRODH, r0x1a
00134c   f01a
00134e   cfe9     movff	0xfe9, 0x1b        	MOVFF	FSR0L, r0x1b
001350   f01b
001352   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
001354   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
001356   e10a     bnz	0x136c               	BNZ	_00325_DS_
001358   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00135a   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
00135c   e107     bnz	0x136c               	BNZ	_00325_DS_
00135e   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
001360   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
001362   e104     bnz	0x136c               	BNZ	_00325_DS_
001364   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
001366   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
001368   e101     bnz	0x136c               	BNZ	_00325_DS_
00136a   d03f     bra	0x13ea               	BRA	_00296_DS_
                                           _00325_DS_:
                                           ;	.line	1040; TCPIP_Stack/UDP.c	(localIP->Val == 0xFFFFFFFFul) || (localIP->Val == 
00136c   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00136e   ffe9
001370   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001372   fff3
001374   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001376   ec43     call	0x7c86, 0           	CALL	__gptrget4
001378   f03e
00137a   6e14     movwf	0x14, 0            	MOVWF	r0x14
00137c   cff3     movff	0xff3, 0x15        	MOVFF	PRODL, r0x15
00137e   f015
001380   cff4     movff	0xff4, 0x16        	MOVFF	PRODH, r0x16
001382   f016
001384   cfe9     movff	0xfe9, 0x17        	MOVFF	FSR0L, r0x17
001386   f017
001388   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00138a   0aff     xorlw	0xff               	XORLW	0xff
00138c   e109     bnz	0x13a0               	BNZ	_00327_DS_
00138e   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
001390   0aff     xorlw	0xff               	XORLW	0xff
001392   e106     bnz	0x13a0               	BNZ	_00327_DS_
001394   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
001396   0aff     xorlw	0xff               	XORLW	0xff
001398   e103     bnz	0x13a0               	BNZ	_00327_DS_
00139a   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
00139c   0aff     xorlw	0xff               	XORLW	0xff
00139e   e025     bz	0x13ea                	BZ	_00296_DS_
                                           _00327_DS_:
0013a0   010e     movlb	0xe                	BANKSEL	(_AppConfig + 4)
                                           ;	.line	1041; TCPIP_Stack/UDP.c	(AppConfig.MyIPAddr.Val | (~AppConfig.MyMask.Val))))
0013a2   1d04     comf	0x4, 0, 0x1         	COMF	(_AppConfig + 4), W, B
0013a4   6e18     movwf	0x18, 0            	MOVWF	r0x18
0013a6   010e     movlb	0xe                	BANKSEL	(_AppConfig + 5)
0013a8   1d05     comf	0x5, 0, 0x1         	COMF	(_AppConfig + 5), W, B
0013aa   6e19     movwf	0x19, 0            	MOVWF	r0x19
0013ac   010e     movlb	0xe                	BANKSEL	(_AppConfig + 6)
0013ae   1d06     comf	0x6, 0, 0x1         	COMF	(_AppConfig + 6), W, B
0013b0   6e1a     movwf	0x1a, 0            	MOVWF	r0x1a
0013b2   010e     movlb	0xe                	BANKSEL	(_AppConfig + 7)
0013b4   1d07     comf	0x7, 0, 0x1         	COMF	(_AppConfig + 7), W, B
0013b6   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
0013b8   010e     movlb	0xe                	BANKSEL	_AppConfig
0013ba   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
0013bc   1218     iorwf	0x18, 0x1, 0       	IORWF	r0x18, F
0013be   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
0013c0   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
0013c2   1219     iorwf	0x19, 0x1, 0       	IORWF	r0x19, F
0013c4   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
0013c6   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
0013c8   121a     iorwf	0x1a, 0x1, 0       	IORWF	r0x1a, F
0013ca   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
0013cc   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
0013ce   121b     iorwf	0x1b, 0x1, 0       	IORWF	r0x1b, F
0013d0   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0013d2   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
0013d4   e109     bnz	0x13e8               	BNZ	_00329_DS_
0013d6   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0013d8   1819     xorwf	0x19, 0, 0         	XORWF	r0x19, W
0013da   e106     bnz	0x13e8               	BNZ	_00329_DS_
0013dc   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0013de   181a     xorwf	0x1a, 0, 0         	XORWF	r0x1a, W
0013e0   e103     bnz	0x13e8               	BNZ	_00329_DS_
0013e2   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
0013e4   181b     xorwf	0x1b, 0, 0         	XORWF	r0x1b, W
0013e6   e001     bz	0x13ea                	BZ	_00296_DS_
                                           _00329_DS_:
0013e8   d002     bra	0x13ee               	BRA	_00301_DS_
                                           _00296_DS_:
                                           ;	.line	1043; TCPIP_Stack/UDP.c	return s;
0013ea   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0013ec   d054     bra	0x1496               	BRA	_00310_DS_
                                           _00301_DS_:
                                           ;	.line	1047; TCPIP_Stack/UDP.c	partialMatch = s;
0013ee   c013     movff	0x13, 0x9          	MOVFF	r0x13, r0x09
0013f0   f009
                                           _00303_DS_:
                                           ;	.line	1049; TCPIP_Stack/UDP.c	p++;
0013f2   0e0e     movlw	0xe                	MOVLW	0x0e
0013f4   2610     addwf	0x10, 0x1, 0       	ADDWF	r0x10, F
0013f6   0e00     movlw	0                  	MOVLW	0x00
0013f8   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
0013fa   0e00     movlw	0                  	MOVLW	0x00
0013fc   2212     addwfc	0x12, 0x1, 0      	ADDWFC	r0x12, F
                                           ;	.line	1028; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
0013fe   2a13     incf	0x13, 0x1, 0        	INCF	r0x13, F
001400   c013     movff	0x13, 0xd          	MOVFF	r0x13, r0x0d
001402   f00d
001404   d742     bra	0x128a               	BRA	_00306_DS_
                                           _00309_DS_:
                                           ;	.line	1052; TCPIP_Stack/UDP.c	if ( partialMatch != INVALID_UDP_SOCKET )
001406   c009     movff	0x9, 0x6           	MOVFF	r0x09, r0x06
001408   f006
00140a   6a07     clrf	0x7, 0              	CLRF	r0x07
00140c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00140e   0aff     xorlw	0xff               	XORLW	0xff
001410   e103     bnz	0x1418               	BNZ	_00332_DS_
001412   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001414   e101     bnz	0x1418               	BNZ	_00332_DS_
001416   d03e     bra	0x1494               	BRA	_00305_DS_
                                           ; ;multiply lit val:0x0e by variable r0x09 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00332_DS_:
                                           ;	.line	1054; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[partialMatch];
001418   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00141a   0d0e     mullw	0xe                	MULLW	0x0e
00141c   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
00141e   f006
001420   6a07     clrf	0x7, 0              	CLRF	r0x07
001422   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
001424   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
001426   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
001428   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
00142a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00142c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00142e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001430   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001432   0e80     movlw	0x80               	MOVLW	0x80
001434   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
                                           ;	.line	1057; TCPIP_Stack/UDP.c	(void*)remoteNode, sizeof(p->remoteNode) );
001436   0e00     movlw	0                  	MOVLW	0x00
001438   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143a   0e0a     movlw	0xa                	MOVLW	0x0a
00143c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001440   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001442   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001444   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001446   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001448   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00144a   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00144c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00144e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001450   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001452   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001454   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001456   ec1d     call	0x5e3a, 0           	CALL	_memcpy
001458   f02f
00145a   0e08     movlw	0x8                	MOVLW	0x08
00145c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	1059; TCPIP_Stack/UDP.c	p->remotePort = h->SourcePort;
00145e   0e0a     movlw	0xa                	MOVLW	0x0a
001460   260a     addwf	0xa, 0x1, 0        	ADDWF	r0x0a, F
001462   0e00     movlw	0                  	MOVLW	0x00
001464   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
001466   0e00     movlw	0                  	MOVLW	0x00
001468   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
00146a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00146c   ffe9
00146e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001470   fff3
001472   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001474   ecee     call	0x7ddc, 0           	CALL	__gptrget2
001476   f03e
001478   6e00     movwf	0, 0               	MOVWF	r0x00
00147a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00147c   f001
00147e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001480   ffe5
001482   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
001484   fff4
001486   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
001488   ffe9
00148a   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
00148c   fff3
00148e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
001490   ec30     call	0x8060, 0           	CALL	__gptrput2
001492   f040
                                           _00305_DS_:
                                           ;	.line	1061; TCPIP_Stack/UDP.c	return partialMatch;
001494   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
                                           _00310_DS_:
001496   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
001498   f01b
00149a   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
00149c   f01a
00149e   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
0014a0   f019
0014a2   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
0014a4   f018
0014a6   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
0014a8   f017
0014aa   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
0014ac   f016
0014ae   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
0014b0   f015
0014b2   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0014b4   f014
0014b6   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
0014b8   f013
0014ba   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
0014bc   f012
0014be   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
0014c0   f011
0014c2   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
0014c4   f010
0014c6   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0014c8   f00f
0014ca   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
0014cc   f00e
0014ce   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
0014d0   f00d
0014d2   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
0014d4   f00c
0014d6   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0014d8   f00b
0014da   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0014dc   f00a
0014de   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0014e0   f009
0014e2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0014e4   f008
0014e6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0014e8   f007
0014ea   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0014ec   f006
0014ee   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0014f0   f005
0014f2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0014f4   f004
0014f6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0014f8   f003
0014fa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0014fc   f002
0014fe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001500   f001
001502   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001504   f000
001506   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001508   ffd9
00150a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPProcess	code
                                           _UDPProcess:
                                           ;	.line	929; TCPIP_Stack/UDP.c	BOOL UDPProcess(NODE_INFO *remoteNode, IP_ADDR *localIP, WORD len)
002540   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002542   ffe5
002544   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002546   ffd9
002548   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00254a   ffe5
00254c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00254e   ffe5
002550   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002552   ffe5
002554   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002556   ffe5
002558   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00255a   ffe5
00255c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00255e   ffe5
002560   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002562   ffe5
002564   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002566   ffe5
002568   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00256a   ffe5
00256c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00256e   ffe5
002570   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002572   ffe5
002574   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002576   ffe5
002578   0e02     movlw	0x2                	MOVLW	0x02
00257a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00257c   f000
00257e   0e03     movlw	0x3                	MOVLW	0x03
002580   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002582   f001
002584   0e04     movlw	0x4                	MOVLW	0x04
002586   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002588   f002
00258a   0e05     movlw	0x5                	MOVLW	0x05
00258c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00258e   f003
002590   0e06     movlw	0x6                	MOVLW	0x06
002592   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002594   f004
002596   0e07     movlw	0x7                	MOVLW	0x07
002598   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00259a   f005
00259c   0e08     movlw	0x8                	MOVLW	0x08
00259e   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0025a0   f006
0025a2   0e09     movlw	0x9                	MOVLW	0x09
0025a4   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0025a6   f007
0025a8   010a     movlb	0xa                	BANKSEL	_UDPRxCount
                                           ;	.line	936; TCPIP_Stack/UDP.c	UDPRxCount = 0;
0025aa   6b7c     clrf	0x7c, 0x1           	CLRF	_UDPRxCount, B
0025ac   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
0025ae   6b7d     clrf	0x7d, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	939; TCPIP_Stack/UDP.c	MACGetArray((BYTE*)&h, sizeof(h));
0025b0   0e08     movlw	0x8                	MOVLW	HIGH(_UDPProcess_h_1_1)
0025b2   6e09     movwf	0x9, 0             	MOVWF	r0x09
0025b4   0ee5     movlw	0xe5               	MOVLW	LOW(_UDPProcess_h_1_1)
0025b6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0025b8   0e80     movlw	0x80               	MOVLW	0x80
0025ba   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0025bc   0e00     movlw	0                  	MOVLW	0x00
0025be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c0   0e08     movlw	0x8                	MOVLW	0x08
0025c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0025c6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025c8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0025ca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025cc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0025ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025d0   ec7d     call	0x62fa, 0           	CALL	_MACGetArray
0025d2   f031
0025d4   0e05     movlw	0x5                	MOVLW	0x05
0025d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025d8   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 1)
                                           ;	.line	941; TCPIP_Stack/UDP.c	h.SourcePort        = swaps(h.SourcePort);
0025da   51e6     movf	0xe6, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 1), W, B
0025dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025de   0108     movlb	0x8                	BANKSEL	_UDPProcess_h_1_1
0025e0   51e5     movf	0xe5, 0, 0x1        	MOVF	_UDPProcess_h_1_1, W, B
0025e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0025e4   ec87     call	0x790e, 0           	CALL	_swaps
0025e6   f03c
0025e8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0025ea   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0025ec   f009
0025ee   0e02     movlw	0x2                	MOVLW	0x02
0025f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0025f2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0025f4   0108     movlb	0x8                	BANKSEL	_UDPProcess_h_1_1
0025f6   6fe5     movwf	0xe5, 0x1          	MOVWF	_UDPProcess_h_1_1, B
0025f8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0025fa   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 1)
0025fc   6fe6     movwf	0xe6, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 1), B
0025fe   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 3)
                                           ;	.line	942; TCPIP_Stack/UDP.c	h.DestinationPort   = swaps(h.DestinationPort);
002600   51e8     movf	0xe8, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 3), W, B
002602   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002604   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 2)
002606   51e7     movf	0xe7, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 2), W, B
002608   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00260a   ec87     call	0x790e, 0           	CALL	_swaps
00260c   f03c
00260e   6e08     movwf	0x8, 0             	MOVWF	r0x08
002610   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002612   f009
002614   0e02     movlw	0x2                	MOVLW	0x02
002616   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002618   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00261a   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 2)
00261c   6fe7     movwf	0xe7, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 2), B
00261e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002620   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 3)
002622   6fe8     movwf	0xe8, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 3), B
002624   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 5)
                                           ;	.line	943; TCPIP_Stack/UDP.c	h.Length            = swaps(h.Length) - sizeof(UDP_HEADER);
002626   51ea     movf	0xea, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 5), W, B
002628   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00262a   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 4)
00262c   51e9     movf	0xe9, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 4), W, B
00262e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002630   ec87     call	0x790e, 0           	CALL	_swaps
002632   f03c
002634   6e08     movwf	0x8, 0             	MOVWF	r0x08
002636   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002638   f009
00263a   0e02     movlw	0x2                	MOVLW	0x02
00263c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00263e   0ef8     movlw	0xf8               	MOVLW	0xf8
002640   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
002642   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
002644   0609     decf	0x9, 0x1, 0         	DECF	r0x09, F
002646   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002648   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 4)
00264a   6fe9     movwf	0xe9, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 4), B
00264c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00264e   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 5)
002650   6fea     movwf	0xea, 0x1          	MOVWF	(_UDPProcess_h_1_1 + 5), B
002652   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 6)
                                           ;	.line	946; TCPIP_Stack/UDP.c	if(h.Checksum)
002654   51eb     movf	0xeb, 0, 0x1        	MOVF	(_UDPProcess_h_1_1 + 6), W, B
002656   0108     movlb	0x8                	BANKSEL	(_UDPProcess_h_1_1 + 7)
002658   11ec     iorwf	0xec, 0, 0x1       	IORWF	(_UDPProcess_h_1_1 + 7), W, B
00265a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00265c   d096     bra	0x278a               	BRA	_00279_DS_
                                           ;	.line	949; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val	= remoteNode->IPAddr.Val;
00265e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002660   ffe9
002662   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002664   fff3
002666   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002668   ec43     call	0x7c86, 0           	CALL	__gptrget4
00266a   f03e
00266c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00266e   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002670   f009
002672   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
002674   f00a
002676   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
002678   f00b
00267a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00267c   0108     movlb	0x8                	BANKSEL	_UDPProcess_pseudoHeader_1_1
00267e   6fb5     movwf	0xb5, 0x1          	MOVWF	_UDPProcess_pseudoHeader_1_1, B
002680   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002682   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 1)
002684   6fb6     movwf	0xb6, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 1), B
002686   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002688   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 2)
00268a   6fb7     movwf	0xb7, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 2), B
00268c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
00268e   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 3)
002690   6fb8     movwf	0xb8, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 3), B
                                           ;	.line	950; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val	= localIP->Val;
002692   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002694   ffe9
002696   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002698   fff3
00269a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00269c   ec43     call	0x7c86, 0           	CALL	__gptrget4
00269e   f03e
0026a0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0026a2   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0026a4   f009
0026a6   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
0026a8   f00a
0026aa   cfe9     movff	0xfe9, 0xb         	MOVFF	FSR0L, r0x0b
0026ac   f00b
0026ae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0026b0   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 4)
0026b2   6fb9     movwf	0xb9, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 4), B
0026b4   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0026b6   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 5)
0026b8   6fba     movwf	0xba, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 5), B
0026ba   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0026bc   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 6)
0026be   6fbb     movwf	0xbb, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 6), B
0026c0   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0026c2   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 7)
0026c4   6fbc     movwf	0xbc, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 7), B
0026c6   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 8)
                                           ;	.line	951; TCPIP_Stack/UDP.c	pseudoHeader.Zero		= 0x0;
0026c8   6bbd     clrf	0xbd, 0x1           	CLRF	(_UDPProcess_pseudoHeader_1_1 + 8), B
                                           ;	.line	952; TCPIP_Stack/UDP.c	pseudoHeader.Protocol		= IP_PROT_UDP;
0026ca   0e11     movlw	0x11               	MOVLW	0x11
0026cc   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 9)
0026ce   6fbe     movwf	0xbe, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 9), B
                                           ;	.line	953; TCPIP_Stack/UDP.c	pseudoHeader.Length		= len;
0026d0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0026d2   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0026d4   6fbf     movwf	0xbf, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0026d6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0026d8   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0026da   6fc0     movwf	0xc0, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	955; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
0026dc   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0026de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0026e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0026e4   ec87     call	0x790e, 0           	CALL	_swaps
0026e6   f03c
0026e8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0026ea   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0026ec   f009
0026ee   0e02     movlw	0x2                	MOVLW	0x02
0026f0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0026f2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0026f4   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 10)
0026f6   6fbf     movwf	0xbf, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 10), B
0026f8   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0026fa   0108     movlb	0x8                	BANKSEL	(_UDPProcess_pseudoHeader_1_1 + 11)
0026fc   6fc0     movwf	0xc0, 0x1          	MOVWF	(_UDPProcess_pseudoHeader_1_1 + 11), B
                                           ;	.line	957; TCPIP_Stack/UDP.c	checksums.w[0] = ~CalcIPChecksum((BYTE*)&pseudoHeader,
0026fe   0e08     movlw	0x8                	MOVLW	HIGH(_UDPProcess_pseudoHeader_1_1)
002700   6e09     movwf	0x9, 0             	MOVWF	r0x09
002702   0eb5     movlw	0xb5               	MOVLW	LOW(_UDPProcess_pseudoHeader_1_1)
002704   6e08     movwf	0x8, 0             	MOVWF	r0x08
002706   0e80     movlw	0x80               	MOVLW	0x80
002708   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
                                           ;	.line	958; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
00270a   0e00     movlw	0                  	MOVLW	0x00
00270c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00270e   0e0c     movlw	0xc                	MOVLW	0x0c
002710   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002712   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002714   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002716   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002718   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00271a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00271c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00271e   ec7c     call	0x1ef8, 0           	CALL	_CalcIPChecksum
002720   f00f
002722   6e08     movwf	0x8, 0             	MOVWF	r0x08
002724   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
002726   f009
002728   0e05     movlw	0x5                	MOVLW	0x05
00272a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00272c   1e08     comf	0x8, 0x1, 0         	COMF	r0x08, F
00272e   1e09     comf	0x9, 0x1, 0         	COMF	r0x09, F
002730   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002732   010a     movlb	0xa                	BANKSEL	_UDPProcess_checksums_1_1
002734   6f2c     movwf	0x2c, 0x1          	MOVWF	_UDPProcess_checksums_1_1, B
002736   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002738   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
00273a   6f2d     movwf	0x2d, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 1), B
                                           ;	.line	963; TCPIP_Stack/UDP.c	IPSetRxBuffer(0);
00273c   0e00     movlw	0                  	MOVLW	0x00
00273e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002740   0e00     movlw	0                  	MOVLW	0x00
002742   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002744   ec06     call	0x780c, 0           	CALL	_IPSetRxBuffer
002746   f03c
002748   0e02     movlw	0x2                	MOVLW	0x02
00274a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	964; TCPIP_Stack/UDP.c	checksums.w[1] = CalcIPBufferChecksum(len);
00274c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00274e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002750   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002752   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002754   ecf8     call	0xdf0, 0            	CALL	_CalcIPBufferChecksum
002756   f006
002758   6e06     movwf	0x6, 0             	MOVWF	r0x06
00275a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00275c   f007
00275e   0e02     movlw	0x2                	MOVLW	0x02
002760   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002762   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002764   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
002766   6f2e     movwf	0x2e, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 2), B
002768   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00276a   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
00276c   6f2f     movwf	0x2f, 0x1          	MOVWF	(_UDPProcess_checksums_1_1 + 3), B
00276e   010a     movlb	0xa                	BANKSEL	_UDPProcess_checksums_1_1
                                           ;	.line	966; TCPIP_Stack/UDP.c	if(checksums.w[0] != checksums.w[1])
002770   512c     movf	0x2c, 0, 0x1        	MOVF	_UDPProcess_checksums_1_1, W, B
002772   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 2)
002774   192e     xorwf	0x2e, 0, 0x1       	XORWF	(_UDPProcess_checksums_1_1 + 2), W, B
002776   e105     bnz	0x2782               	BNZ	_00289_DS_
002778   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 1)
00277a   512d     movf	0x2d, 0, 0x1        	MOVF	(_UDPProcess_checksums_1_1 + 1), W, B
00277c   010a     movlb	0xa                	BANKSEL	(_UDPProcess_checksums_1_1 + 3)
00277e   192f     xorwf	0x2f, 0, 0x1       	XORWF	(_UDPProcess_checksums_1_1 + 3), W, B
002780   e004     bz	0x278a                	BZ	_00279_DS_
                                           _00289_DS_:
                                           ;	.line	968; TCPIP_Stack/UDP.c	MACDiscardRx();
002782   ec30     call	0x6e60, 0           	CALL	_MACDiscardRx
002784   f037
                                           ;	.line	969; TCPIP_Stack/UDP.c	return FALSE;
002786   6ae8     clrf	0xe8, 0             	CLRF	WREG
002788   d035     bra	0x27f4               	BRA	_00283_DS_
                                           _00279_DS_:
                                           ;	.line	973; TCPIP_Stack/UDP.c	s = FindMatchingSocket(&h, remoteNode, localIP);
00278a   0e08     movlw	0x8                	MOVLW	HIGH(_UDPProcess_h_1_1)
00278c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00278e   0ee5     movlw	0xe5               	MOVLW	LOW(_UDPProcess_h_1_1)
002790   6e06     movwf	0x6, 0             	MOVWF	r0x06
002792   0e80     movlw	0x80               	MOVLW	0x80
002794   6e08     movwf	0x8, 0             	MOVWF	r0x08
002796   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002798   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00279c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00279e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0027a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0027a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0027ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0027b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027b2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0027b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027b6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0027b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0027ba   eccb     call	0x1196, 0           	CALL	_FindMatchingSocket
0027bc   f008
0027be   6e00     movwf	0, 0               	MOVWF	r0x00
0027c0   0e09     movlw	0x9                	MOVLW	0x09
0027c2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	974; TCPIP_Stack/UDP.c	if(s == INVALID_UDP_SOCKET)
0027c4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
0027c6   f001
0027c8   6a02     clrf	0x2, 0              	CLRF	r0x02
0027ca   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0027cc   0aff     xorlw	0xff               	XORLW	0xff
0027ce   e102     bnz	0x27d4               	BNZ	_00290_DS_
0027d0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0027d2   e001     bz	0x27d6                	BZ	_00291_DS_
                                           _00290_DS_:
0027d4   d004     bra	0x27de               	BRA	_00281_DS_
                                           _00291_DS_:
                                           ;	.line	978; TCPIP_Stack/UDP.c	MACDiscardRx();
0027d6   ec30     call	0x6e60, 0           	CALL	_MACDiscardRx
0027d8   f037
                                           ;	.line	979; TCPIP_Stack/UDP.c	return FALSE;
0027da   6ae8     clrf	0xe8, 0             	CLRF	WREG
0027dc   d00b     bra	0x27f4               	BRA	_00283_DS_
                                           _00281_DS_:
                                           ;	.line	983; TCPIP_Stack/UDP.c	SocketWithRxData = s;
0027de   c000     movff	0, 0x867           	MOVFF	r0x00, _SocketWithRxData
0027e0   f867
                                           ;	.line	984; TCPIP_Stack/UDP.c	UDPRxCount = h.Length;
0027e2   c8e9     movff	0x8e9, 0xa7c       	MOVFF	(_UDPProcess_h_1_1 + 4), _UDPRxCount
0027e4   fa7c
0027e6   c8ea     movff	0x8ea, 0xa7d       	MOVFF	(_UDPProcess_h_1_1 + 5), (_UDPRxCount + 1)
0027e8   fa7d
0027ea   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	985; TCPIP_Stack/UDP.c	Flags.bFirstRead = 1;
0027ec   8196     bsf	0x96, 0, 0x1         	BSF	_Flags, 0, B
0027ee   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	986; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 0;
0027f0   9396     bcf	0x96, 0x1, 0x1       	BCF	_Flags, 1, B
                                           ;	.line	990; TCPIP_Stack/UDP.c	return TRUE;
0027f2   0e01     movlw	0x1                	MOVLW	0x01
                                           _00283_DS_:
0027f4   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0027f6   f00b
0027f8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0027fa   f00a
0027fc   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0027fe   f009
002800   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002802   f008
002804   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002806   f007
002808   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00280a   f006
00280c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00280e   f005
002810   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002812   f004
002814   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002816   f003
002818   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00281a   f002
00281c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00281e   f001
002820   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002822   f000
002824   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002826   ffd9
002828   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPDiscard	code
                                           _UDPDiscard:
                                           ;	.line	886; TCPIP_Stack/UDP.c	void UDPDiscard(void)
007e5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007e5e   ffe5
007e60   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007e62   ffd9
007e64   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	888; TCPIP_Stack/UDP.c	if(!Flags.bWasDiscarded)
007e66   b396     btfsc	0x96, 0x1, 0x1     	BTFSC	_Flags, 1, B
007e68   d00b     bra	0x7e80               	BRA	_00271_DS_
                                           ;	.line	890; TCPIP_Stack/UDP.c	MACDiscardRx();
007e6a   ec30     call	0x6e60, 0           	CALL	_MACDiscardRx
007e6c   f037
007e6e   010a     movlb	0xa                	BANKSEL	_UDPRxCount
                                           ;	.line	891; TCPIP_Stack/UDP.c	UDPRxCount = 0;
007e70   6b7c     clrf	0x7c, 0x1           	CLRF	_UDPRxCount, B
007e72   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
007e74   6b7d     clrf	0x7d, 0x1           	CLRF	(_UDPRxCount + 1), B
                                           ;	.line	892; TCPIP_Stack/UDP.c	SocketWithRxData = INVALID_UDP_SOCKET;
007e76   0eff     movlw	0xff               	MOVLW	0xff
007e78   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
007e7a   6f67     movwf	0x67, 0x1          	MOVWF	_SocketWithRxData, B
007e7c   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	893; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
007e7e   8396     bsf	0x96, 0x1, 0x1       	BSF	_Flags, 1, B
                                           _00271_DS_:
007e80   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007e82   ffd9
007e84   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGetArray	code
                                           _UDPGetArray:
                                           ;	.line	843; TCPIP_Stack/UDP.c	WORD UDPGetArray(BYTE *cData, WORD wDataLen)
006216   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006218   ffe5
00621a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00621c   ffd9
00621e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006220   ffe5
006222   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006224   ffe5
006226   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006228   ffe5
00622a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00622c   ffe5
00622e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006230   ffe5
006232   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
006234   ffe5
006236   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006238   ffe5
00623a   0e02     movlw	0x2                	MOVLW	0x02
00623c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00623e   f000
006240   0e03     movlw	0x3                	MOVLW	0x03
006242   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006244   f001
006246   0e04     movlw	0x4                	MOVLW	0x04
006248   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00624a   f002
00624c   0e05     movlw	0x5                	MOVLW	0x05
00624e   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006250   f003
006252   0e06     movlw	0x6                	MOVLW	0x06
006254   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006256   f004
006258   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	848; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
00625a   517d     movf	0x7d, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
00625c   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
00625e   5d75     subwf	0x75, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
006260   e104     bnz	0x626a               	BNZ	_00261_DS_
006262   010a     movlb	0xa                	BANKSEL	_UDPRxCount
006264   517c     movf	0x7c, 0, 0x1        	MOVF	_UDPRxCount, W, B
006266   010a     movlb	0xa                	BANKSEL	_wGetOffset
006268   5d74     subwf	0x74, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00261_DS_:
00626a   e205     bc	0x6276                	BC	_00252_DS_
00626c   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
00626e   5167     movf	0x67, 0, 0x1        	MOVF	_SocketWithRxData, W, B
006270   010a     movlb	0xa                	BANKSEL	_activeUDPSocket
006272   1997     xorwf	0x97, 0, 0x1       	XORWF	_activeUDPSocket, W, B
006274   e003     bz	0x627c                	BZ	_00253_DS_
                                           _00252_DS_:
                                           ;	.line	849; TCPIP_Stack/UDP.c	return 0;
006276   6af3     clrf	0xf3, 0             	CLRF	PRODL
006278   6ae8     clrf	0xe8, 0             	CLRF	WREG
00627a   d02e     bra	0x62d8               	BRA	_00257_DS_
                                           _00253_DS_:
00627c   010a     movlb	0xa                	BANKSEL	_wGetOffset
                                           ;	.line	852; TCPIP_Stack/UDP.c	wBytesAvailable = UDPRxCount - wGetOffset;
00627e   5174     movf	0x74, 0, 0x1        	MOVF	_wGetOffset, W, B
006280   010a     movlb	0xa                	BANKSEL	_UDPRxCount
006282   5d7c     subwf	0x7c, 0, 0x1       	SUBWF	_UDPRxCount, W, B
006284   6e05     movwf	0x5, 0             	MOVWF	r0x05
006286   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
006288   5175     movf	0x75, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
00628a   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
00628c   597d     subwfb	0x7d, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
00628e   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	853; TCPIP_Stack/UDP.c	if(wBytesAvailable < wDataLen) wDataLen = wBytesAvailable;
006290   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006292   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
006294   e102     bnz	0x629a               	BNZ	_00264_DS_
006296   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006298   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00264_DS_:
00629a   e204     bc	0x62a4                	BC	_00256_DS_
00629c   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
00629e   f003
0062a0   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
0062a2   f004
                                           _00256_DS_:
                                           ;	.line	855; TCPIP_Stack/UDP.c	wDataLen = MACGetArray(cData, wDataLen);
0062a4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0062a6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062a8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0062aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0062ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062b0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0062b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0062b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0062b8   ec7d     call	0x62fa, 0           	CALL	_MACGetArray
0062ba   f031
0062bc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0062be   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0062c0   f004
0062c2   0e05     movlw	0x5                	MOVLW	0x05
0062c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	856; TCPIP_Stack/UDP.c	wGetOffset += wDataLen;
0062c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0062c8   010a     movlb	0xa                	BANKSEL	_wGetOffset
0062ca   2774     addwf	0x74, 0x1, 0x1     	ADDWF	_wGetOffset, F, B
0062cc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0062ce   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
0062d0   2375     addwfc	0x75, 0x1, 0x1    	ADDWFC	(_wGetOffset + 1), F, B
                                           ;	.line	858; TCPIP_Stack/UDP.c	return wDataLen;
0062d2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0062d4   fff3
0062d6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
                                           _00257_DS_:
0062d8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0062da   f006
0062dc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0062de   f005
0062e0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0062e2   f004
0062e4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0062e6   f003
0062e8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0062ea   f002
0062ec   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0062ee   f001
0062f0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0062f2   f000
0062f4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0062f6   ffd9
0062f8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPGet	code
                                           _UDPGet:
                                           ;	.line	805; TCPIP_Stack/UDP.c	BOOL UDPGet(BYTE *v)
007128   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00712a   ffe5
00712c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00712e   ffd9
007130   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007132   ffe5
007134   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007136   ffe5
007138   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00713a   ffe5
00713c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00713e   ffe5
007140   0e02     movlw	0x2                	MOVLW	0x02
007142   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007144   f000
007146   0e03     movlw	0x3                	MOVLW	0x03
007148   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00714a   f001
00714c   0e04     movlw	0x4                	MOVLW	0x04
00714e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
007150   f002
007152   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
                                           ;	.line	808; TCPIP_Stack/UDP.c	if((wGetOffset >= UDPRxCount) || (SocketWithRxData != activeUDPSocket))
007154   517d     movf	0x7d, 0, 0x1        	MOVF	(_UDPRxCount + 1), W, B
007156   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
007158   5d75     subwf	0x75, 0, 0x1       	SUBWF	(_wGetOffset + 1), W, B
00715a   e104     bnz	0x7164               	BNZ	_00245_DS_
00715c   010a     movlb	0xa                	BANKSEL	_UDPRxCount
00715e   517c     movf	0x7c, 0, 0x1        	MOVF	_UDPRxCount, W, B
007160   010a     movlb	0xa                	BANKSEL	_wGetOffset
007162   5d74     subwf	0x74, 0, 0x1       	SUBWF	_wGetOffset, W, B
                                           _00245_DS_:
007164   e205     bc	0x7170                	BC	_00239_DS_
007166   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
007168   5167     movf	0x67, 0, 0x1        	MOVF	_SocketWithRxData, W, B
00716a   010a     movlb	0xa                	BANKSEL	_activeUDPSocket
00716c   1997     xorwf	0x97, 0, 0x1       	XORWF	_activeUDPSocket, W, B
00716e   e002     bz	0x7174                	BZ	_00240_DS_
                                           _00239_DS_:
                                           ;	.line	809; TCPIP_Stack/UDP.c	return FALSE;
007170   6ae8     clrf	0xe8, 0             	CLRF	WREG
007172   d012     bra	0x7198               	BRA	_00242_DS_
                                           _00240_DS_:
                                           ;	.line	811; TCPIP_Stack/UDP.c	*v = MACGet();
007174   ec5a     call	0x80b4, 0           	CALL	_MACGet
007176   f040
007178   6e03     movwf	0x3, 0             	MOVWF	r0x03
00717a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00717c   ffe5
00717e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007180   ffe9
007182   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007184   fff3
007186   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007188   ec50     call	0x80a0, 0           	CALL	__gptrput1
00718a   f040
00718c   010a     movlb	0xa                	BANKSEL	_wGetOffset
                                           ;	.line	812; TCPIP_Stack/UDP.c	wGetOffset++;
00718e   2b74     incf	0x74, 0x1, 0x1      	INCF	_wGetOffset, F, B
007190   e302     bnc	0x7196               	BNC	_10296_DS_
007192   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
007194   2b75     incf	0x75, 0x1, 0x1      	INCF	(_wGetOffset + 1), F, B
                                           _10296_DS_:
                                           ;	.line	814; TCPIP_Stack/UDP.c	return TRUE;
007196   0e01     movlw	0x1                	MOVLW	0x01
                                           _00242_DS_:
007198   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00719a   f003
00719c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00719e   f002
0071a0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0071a2   f001
0071a4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0071a6   f000
0071a8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0071aa   ffd9
0071ac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsGetReady	code
                                           _UDPIsGetReady:
                                           ;	.line	766; TCPIP_Stack/UDP.c	WORD UDPIsGetReady(UDP_SOCKET s)
007618   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00761a   ffe5
00761c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00761e   ffd9
007620   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007622   ffe5
007624   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007626   ffe5
007628   0e02     movlw	0x2                	MOVLW	0x02
00762a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00762c   f000
                                           ;	.line	768; TCPIP_Stack/UDP.c	activeUDPSocket = s;
00762e   c000     movff	0, 0xa97           	MOVFF	r0x00, _activeUDPSocket
007630   fa97
007632   0108     movlb	0x8                	BANKSEL	_SocketWithRxData
                                           ;	.line	769; TCPIP_Stack/UDP.c	if(SocketWithRxData != s) return 0;
007634   5167     movf	0x67, 0, 0x1        	MOVF	_SocketWithRxData, W, B
007636   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
007638   e003     bz	0x7640                	BZ	_00226_DS_
00763a   6af3     clrf	0xf3, 0             	CLRF	PRODL
00763c   6ae8     clrf	0xe8, 0             	CLRF	WREG
00763e   d01a     bra	0x7674               	BRA	_00229_DS_
                                           _00226_DS_:
007640   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	773; TCPIP_Stack/UDP.c	if(Flags.bFirstRead)
007642   a196     btfss	0x96, 0, 0x1       	BTFSS	_Flags, 0, B
007644   d00a     bra	0x765a               	BRA	_00228_DS_
007646   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	775; TCPIP_Stack/UDP.c	Flags.bFirstRead = 0;
007648   9196     bcf	0x96, 0, 0x1         	BCF	_Flags, 0, B
                                           ;	.line	776; TCPIP_Stack/UDP.c	UDPSetRxBuffer(0);
00764a   0e00     movlw	0                  	MOVLW	0x00
00764c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00764e   0e00     movlw	0                  	MOVLW	0x00
007650   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007652   ecd7     call	0x77ae, 0           	CALL	_UDPSetRxBuffer
007654   f03b
007656   0e02     movlw	0x2                	MOVLW	0x02
007658   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00228_DS_:
00765a   010a     movlb	0xa                	BANKSEL	_wGetOffset
                                           ;	.line	779; TCPIP_Stack/UDP.c	return UDPRxCount - wGetOffset;
00765c   5174     movf	0x74, 0, 0x1        	MOVF	_wGetOffset, W, B
00765e   010a     movlb	0xa                	BANKSEL	_UDPRxCount
007660   5d7c     subwf	0x7c, 0, 0x1       	SUBWF	_UDPRxCount, W, B
007662   6e00     movwf	0, 0               	MOVWF	r0x00
007664   010a     movlb	0xa                	BANKSEL	(_wGetOffset + 1)
007666   5175     movf	0x75, 0, 0x1        	MOVF	(_wGetOffset + 1), W, B
007668   010a     movlb	0xa                	BANKSEL	(_UDPRxCount + 1)
00766a   597d     subwfb	0x7d, 0, 0x1      	SUBWFB	(_UDPRxCount + 1), W, B
00766c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00766e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
007670   fff3
007672   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00229_DS_:
007674   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007676   f001
007678   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00767a   f000
00767c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00767e   ffd9
007680   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPFlush	code
                                           _UDPFlush:
                                           ;	.line	671; TCPIP_Stack/UDP.c	void UDPFlush(void)
00282a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00282c   ffe5
00282e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002830   ffd9
002832   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002834   ffe5
002836   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002838   ffe5
00283a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00283c   ffe5
00283e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002840   ffe5
002842   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002844   ffe5
002846   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002848   ffe5
00284a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00284c   ffe5
00284e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002850   ffe5
002852   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002854   ffe5
                                           ; ;multiply lit val:0x0e by variable _activeUDPSocket and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
002856   010a     movlb	0xa                	BANKSEL	_activeUDPSocket
                                           ;	.line	679; TCPIP_Stack/UDP.c	p = &UDPSocketInfo[activeUDPSocket];
002858   5197     movf	0x97, 0, 0x1        	MOVF	_activeUDPSocket, W, B
00285a   0d0e     mullw	0xe                	MULLW	0x0e
00285c   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00285e   f000
002860   6a01     clrf	0x1, 0              	CLRF	r0x01
002862   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
002864   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002866   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
002868   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00286a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00286c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00286e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002870   6e00     movwf	0, 0               	MOVWF	r0x00
002872   0e80     movlw	0x80               	MOVLW	0x80
002874   6e02     movwf	0x2, 0             	MOVWF	r0x02
002876   010a     movlb	0xa                	BANKSEL	_UDPTxCount
                                           ;	.line	681; TCPIP_Stack/UDP.c	wUDPLength = UDPTxCount + sizeof(UDP_HEADER);
002878   5178     movf	0x78, 0, 0x1        	MOVF	_UDPTxCount, W, B
00287a   0f08     addlw	0x8                	ADDLW	0x08
00287c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00287e   0e00     movlw	0                  	MOVLW	0x00
002880   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
002882   2179     addwfc	0x79, 0, 0x1      	ADDWFC	(_UDPTxCount + 1), W, B
002884   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ;	.line	684; TCPIP_Stack/UDP.c	h.SourcePort = swaps(p->localPort);
002886   5000     movf	0, 0, 0             	MOVF	r0x00, W
002888   0f0c     addlw	0xc                	ADDLW	0x0c
00288a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00288c   0e00     movlw	0                  	MOVLW	0x00
00288e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002890   6e06     movwf	0x6, 0             	MOVWF	r0x06
002892   0e00     movlw	0                  	MOVLW	0x00
002894   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002896   6e07     movwf	0x7, 0             	MOVWF	r0x07
002898   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00289a   ffe9
00289c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00289e   fff3
0028a0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0028a2   ecee     call	0x7ddc, 0           	CALL	__gptrget2
0028a4   f03e
0028a6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028a8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028aa   f006
0028ac   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028b4   ec87     call	0x790e, 0           	CALL	_swaps
0028b6   f03c
0028b8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028ba   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028bc   f006
0028be   0e02     movlw	0x2                	MOVLW	0x02
0028c0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0028c2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028c4   0108     movlb	0x8                	BANKSEL	_UDPFlush_h_1_1
0028c6   6fdd     movwf	0xdd, 0x1          	MOVWF	_UDPFlush_h_1_1, B
0028c8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028ca   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 1)
0028cc   6fde     movwf	0xde, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 1), B
                                           ;	.line	685; TCPIP_Stack/UDP.c	h.DestinationPort = swaps(p->remotePort);
0028ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028d0   0f0a     addlw	0xa                	ADDLW	0x0a
0028d2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028d4   0e00     movlw	0                  	MOVLW	0x00
0028d6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0028d8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0028da   0e00     movlw	0                  	MOVLW	0x00
0028dc   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0028de   6e07     movwf	0x7, 0             	MOVWF	r0x07
0028e0   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0028e2   ffe9
0028e4   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0028e6   fff3
0028e8   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0028ea   ecee     call	0x7ddc, 0           	CALL	__gptrget2
0028ec   f03e
0028ee   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028f0   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0028f2   f006
0028f4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028f8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0028fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0028fc   ec87     call	0x790e, 0           	CALL	_swaps
0028fe   f03c
002900   6e05     movwf	0x5, 0             	MOVWF	r0x05
002902   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002904   f006
002906   0e02     movlw	0x2                	MOVLW	0x02
002908   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00290a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00290c   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 2)
00290e   6fdf     movwf	0xdf, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 2), B
002910   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002912   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 3)
002914   6fe0     movwf	0xe0, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 3), B
                                           ;	.line	686; TCPIP_Stack/UDP.c	h.Length = swaps(wUDPLength);
002916   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002918   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00291a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00291c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00291e   ec87     call	0x790e, 0           	CALL	_swaps
002920   f03c
002922   6e05     movwf	0x5, 0             	MOVWF	r0x05
002924   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002926   f006
002928   0e02     movlw	0x2                	MOVLW	0x02
00292a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00292c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00292e   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 4)
002930   6fe1     movwf	0xe1, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 4), B
002932   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002934   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 5)
002936   6fe2     movwf	0xe2, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 5), B
002938   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 6)
                                           ;	.line	687; TCPIP_Stack/UDP.c	h.Checksum = 0x0000;
00293a   6be3     clrf	0xe3, 0x1           	CLRF	(_UDPFlush_h_1_1 + 6), B
00293c   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 7)
00293e   6be4     clrf	0xe4, 0x1           	CLRF	(_UDPFlush_h_1_1 + 7), B
002940   010e     movlb	0xe                	BANKSEL	_AppConfig
                                           ;	.line	695; TCPIP_Stack/UDP.c	pseudoHeader.SourceAddress.Val = AppConfig.MyIPAddr.Val;
002942   5100     movf	0, 0, 0x1           	MOVF	_AppConfig, W, B
002944   0108     movlb	0x8                	BANKSEL	_UDPFlush_pseudoHeader_2_2
002946   6fa9     movwf	0xa9, 0x1          	MOVWF	_UDPFlush_pseudoHeader_2_2, B
002948   010e     movlb	0xe                	BANKSEL	(_AppConfig + 1)
00294a   5101     movf	0x1, 0, 0x1         	MOVF	(_AppConfig + 1), W, B
00294c   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 1)
00294e   6faa     movwf	0xaa, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 1), B
002950   010e     movlb	0xe                	BANKSEL	(_AppConfig + 2)
002952   5102     movf	0x2, 0, 0x1         	MOVF	(_AppConfig + 2), W, B
002954   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 2)
002956   6fab     movwf	0xab, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 2), B
002958   010e     movlb	0xe                	BANKSEL	(_AppConfig + 3)
00295a   5103     movf	0x3, 0, 0x1         	MOVF	(_AppConfig + 3), W, B
00295c   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 3)
00295e   6fac     movwf	0xac, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 3), B
                                           ;	.line	696; TCPIP_Stack/UDP.c	pseudoHeader.DestAddress.Val = p->remoteNode.IPAddr.Val;
002960   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002962   ffe9
002964   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002966   fff3
002968   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00296a   ec43     call	0x7c86, 0           	CALL	__gptrget4
00296c   f03e
00296e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002970   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
002972   f006
002974   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
002976   f007
002978   cfe9     movff	0xfe9, 0x8         	MOVFF	FSR0L, r0x08
00297a   f008
00297c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00297e   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 4)
002980   6fad     movwf	0xad, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 4), B
002982   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002984   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 5)
002986   6fae     movwf	0xae, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 5), B
002988   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00298a   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 6)
00298c   6faf     movwf	0xaf, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 6), B
00298e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002990   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 7)
002992   6fb0     movwf	0xb0, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 7), B
002994   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 8)
                                           ;	.line	697; TCPIP_Stack/UDP.c	pseudoHeader.Zero = 0x0;
002996   6bb1     clrf	0xb1, 0x1           	CLRF	(_UDPFlush_pseudoHeader_2_2 + 8), B
                                           ;	.line	698; TCPIP_Stack/UDP.c	pseudoHeader.Protocol = IP_PROT_UDP;
002998   0e11     movlw	0x11               	MOVLW	0x11
00299a   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 9)
00299c   6fb2     movwf	0xb2, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 9), B
                                           ;	.line	699; TCPIP_Stack/UDP.c	pseudoHeader.Length = wUDPLength;
00299e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029a0   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
0029a2   6fb3     movwf	0xb3, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
0029a4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029a6   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
0029a8   6fb4     movwf	0xb4, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	700; TCPIP_Stack/UDP.c	SwapPseudoHeader(pseudoHeader);
0029aa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0029ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0029b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029b2   ec87     call	0x790e, 0           	CALL	_swaps
0029b4   f03c
0029b6   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029b8   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0029ba   f006
0029bc   0e02     movlw	0x2                	MOVLW	0x02
0029be   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029c0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029c2   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 10)
0029c4   6fb3     movwf	0xb3, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 10), B
0029c6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029c8   0108     movlb	0x8                	BANKSEL	(_UDPFlush_pseudoHeader_2_2 + 11)
0029ca   6fb4     movwf	0xb4, 0x1          	MOVWF	(_UDPFlush_pseudoHeader_2_2 + 11), B
                                           ;	.line	701; TCPIP_Stack/UDP.c	h.Checksum = ~CalcIPChecksum((BYTE*)&pseudoHeader, 
0029cc   0e08     movlw	0x8                	MOVLW	HIGH(_UDPFlush_pseudoHeader_2_2)
0029ce   6e06     movwf	0x6, 0             	MOVWF	r0x06
0029d0   0ea9     movlw	0xa9               	MOVLW	LOW(_UDPFlush_pseudoHeader_2_2)
0029d2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029d4   0e80     movlw	0x80               	MOVLW	0x80
0029d6   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	702; TCPIP_Stack/UDP.c	sizeof(pseudoHeader));
0029d8   0e00     movlw	0                  	MOVLW	0x00
0029da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029dc   0e0c     movlw	0xc                	MOVLW	0x0c
0029de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e0   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0029e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029e8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0029ec   ec7c     call	0x1ef8, 0           	CALL	_CalcIPChecksum
0029ee   f00f
0029f0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0029f2   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
0029f4   f006
0029f6   0e05     movlw	0x5                	MOVLW	0x05
0029f8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0029fa   1e05     comf	0x5, 0x1, 0         	COMF	r0x05, F
0029fc   1e06     comf	0x6, 0x1, 0         	COMF	r0x06, F
0029fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002a00   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 6)
002a02   6fe3     movwf	0xe3, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 6), B
002a04   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002a06   0108     movlb	0x8                	BANKSEL	(_UDPFlush_h_1_1 + 7)
002a08   6fe4     movwf	0xe4, 0x1          	MOVWF	(_UDPFlush_h_1_1 + 7), B
                                           ;	.line	708; TCPIP_Stack/UDP.c	MACSetWritePtr(BASE_TX_ADDR + sizeof(ETHER_HEADER));
002a0a   0e1a     movlw	0x1a               	MOVLW	0x1a
002a0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a0e   0e19     movlw	0x19               	MOVLW	0x19
002a10   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a12   ec19     call	0x7232, 0           	CALL	_MACSetWritePtr
002a14   f039
002a16   0e02     movlw	0x2                	MOVLW	0x02
002a18   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	711; TCPIP_Stack/UDP.c	IPPutHeader(&p->remoteNode, IP_PROT_UDP, wUDPLength);
002a1a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a1e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a20   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a22   0e11     movlw	0x11               	MOVLW	0x11
002a24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a26   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a2a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a2e   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a32   ecb2     call	0x4164, 0           	CALL	_IPPutHeader
002a34   f020
002a36   0e06     movlw	0x6                	MOVLW	0x06
002a38   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	714; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&h, sizeof(h));
002a3a   0e08     movlw	0x8                	MOVLW	HIGH(_UDPFlush_h_1_1)
002a3c   6e01     movwf	0x1, 0             	MOVWF	r0x01
002a3e   0edd     movlw	0xdd               	MOVLW	LOW(_UDPFlush_h_1_1)
002a40   6e00     movwf	0, 0               	MOVWF	r0x00
002a42   0e80     movlw	0x80               	MOVLW	0x80
002a44   6e02     movwf	0x2, 0             	MOVWF	r0x02
002a46   0e00     movlw	0                  	MOVLW	0x00
002a48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4a   0e08     movlw	0x8                	MOVLW	0x08
002a4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002a50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a52   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a56   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a5a   ec9a     call	0x6d34, 0           	CALL	_MACPutArray
002a5c   f036
002a5e   0e05     movlw	0x5                	MOVLW	0x05
002a60   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	720; TCPIP_Stack/UDP.c	sizeof(IP_HEADER));
002a62   0e1a     movlw	0x1a               	MOVLW	0x1a
002a64   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a66   0e2d     movlw	0x2d               	MOVLW	0x2d
002a68   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a6a   ec9d     call	0x733a, 0           	CALL	_MACSetReadPtr
002a6c   f039
002a6e   6e00     movwf	0, 0               	MOVWF	r0x00
002a70   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
002a72   f001
002a74   0e02     movlw	0x2                	MOVLW	0x02
002a76   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	721; TCPIP_Stack/UDP.c	wChecksum = CalcIPBufferChecksum(wUDPLength);
002a78   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002a7a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a7c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002a7e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a80   ecf8     call	0xdf0, 0            	CALL	_CalcIPBufferChecksum
002a82   f006
002a84   010a     movlb	0xa                	BANKSEL	_UDPFlush_wChecksum_1_1
002a86   6f7a     movwf	0x7a, 0x1          	MOVWF	_UDPFlush_wChecksum_1_1, B
002a88   cff3     movff	0xff3, 0xa7b       	MOVFF	PRODL, (_UDPFlush_wChecksum_1_1 + 1)
002a8a   fa7b
002a8c   0e02     movlw	0x2                	MOVLW	0x02
002a8e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	722; TCPIP_Stack/UDP.c	MACSetReadPtr(wReadPtrSave);
002a90   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002a92   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a94   5000     movf	0, 0, 0             	MOVF	r0x00, W
002a96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002a98   ec9d     call	0x733a, 0           	CALL	_MACSetReadPtr
002a9a   f039
002a9c   0e02     movlw	0x2                	MOVLW	0x02
002a9e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	724; TCPIP_Stack/UDP.c	+ 6);    // 6 is the offset to the Checksum field in UDP_HEADER
002aa0   0e1a     movlw	0x1a               	MOVLW	0x1a
002aa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aa4   0e33     movlw	0x33               	MOVLW	0x33
002aa6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002aa8   ec19     call	0x7232, 0           	CALL	_MACSetWritePtr
002aaa   f039
002aac   0e02     movlw	0x2                	MOVLW	0x02
002aae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	725; TCPIP_Stack/UDP.c	MACPutArray((BYTE*)&wChecksum, sizeof(wChecksum));
002ab0   0e0a     movlw	0xa                	MOVLW	HIGH(_UDPFlush_wChecksum_1_1)
002ab2   6e01     movwf	0x1, 0             	MOVWF	r0x01
002ab4   0e7a     movlw	0x7a               	MOVLW	LOW(_UDPFlush_wChecksum_1_1)
002ab6   6e00     movwf	0, 0               	MOVWF	r0x00
002ab8   0e80     movlw	0x80               	MOVLW	0x80
002aba   6e02     movwf	0x2, 0             	MOVWF	r0x02
002abc   0e00     movlw	0                  	MOVLW	0x00
002abe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac0   0e02     movlw	0x2                	MOVLW	0x02
002ac2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ac6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ac8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002aca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002acc   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ace   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002ad0   ec9a     call	0x6d34, 0           	CALL	_MACPutArray
002ad2   f036
002ad4   0e05     movlw	0x5                	MOVLW	0x05
002ad6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	730; TCPIP_Stack/UDP.c	MACFlush();
002ad8   ec41     call	0x7682, 0           	CALL	_MACFlush
002ada   f03b
002adc   010a     movlb	0xa                	BANKSEL	_UDPTxCount
                                           ;	.line	733; TCPIP_Stack/UDP.c	UDPTxCount = 0;
002ade   6b78     clrf	0x78, 0x1           	CLRF	_UDPTxCount, B
002ae0   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
002ae2   6b79     clrf	0x79, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	734; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
002ae4   0eff     movlw	0xff               	MOVLW	0xff
002ae6   0108     movlb	0x8                	BANKSEL	_LastPutSocket
002ae8   6f66     movwf	0x66, 0x1          	MOVWF	_LastPutSocket, B
002aea   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002aec   f008
002aee   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002af0   f007
002af2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002af4   f006
002af6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002af8   f005
002afa   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002afc   f004
002afe   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002b00   f003
002b02   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002b04   f002
002b06   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002b08   f001
002b0a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002b0c   f000
002b0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002b10   ffd9
002b12   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutString	code
                                           _UDPPutString:
                                           ;	.line	601; TCPIP_Stack/UDP.c	BYTE* UDPPutString(BYTE *strData)
006c02   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006c04   ffe5
006c06   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006c08   ffd9
006c0a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006c0c   ffe5
006c0e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006c10   ffe5
006c12   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006c14   ffe5
006c16   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006c18   ffe5
006c1a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006c1c   ffe5
006c1e   0e02     movlw	0x2                	MOVLW	0x02
006c20   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006c22   f000
006c24   0e03     movlw	0x3                	MOVLW	0x03
006c26   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006c28   f001
006c2a   0e04     movlw	0x4                	MOVLW	0x04
006c2c   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
006c2e   f002
                                           ;	.line	603; TCPIP_Stack/UDP.c	return strData + UDPPutArray(strData, strlen((char*)strData));
006c30   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006c32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c34   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006c36   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c38   5000     movf	0, 0, 0             	MOVF	r0x00, W
006c3a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c3c   ecdd     call	0x73ba, 0           	CALL	_strlen
006c3e   f039
006c40   6e03     movwf	0x3, 0             	MOVWF	r0x03
006c42   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
006c44   f004
006c46   0e03     movlw	0x3                	MOVLW	0x03
006c48   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006c4a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006c4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c4e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006c50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c52   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006c54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c56   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006c58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c5a   5000     movf	0, 0, 0             	MOVF	r0x00, W
006c5c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006c5e   ec20     call	0x6040, 0           	CALL	_UDPPutArray
006c60   f030
006c62   6e03     movwf	0x3, 0             	MOVWF	r0x03
006c64   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
006c66   f004
006c68   0e05     movlw	0x5                	MOVLW	0x05
006c6a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006c6c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006c6e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006c70   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
006c72   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006c74   6ae8     clrf	0xe8, 0             	CLRF	WREG
006c76   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
006c78   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
006c7a   fff4
006c7c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006c7e   fff3
006c80   5000     movf	0, 0, 0             	MOVF	r0x00, W
006c82   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006c84   f004
006c86   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006c88   f003
006c8a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006c8c   f002
006c8e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006c90   f001
006c92   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006c94   f000
006c96   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006c98   ffd9
006c9a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPutArray	code
                                           _UDPPutArray:
                                           ;	.line	514; TCPIP_Stack/UDP.c	WORD UDPPutArray(BYTE *cData, WORD wDataLen)
006040   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006042   ffe5
006044   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006046   ffd9
006048   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00604a   ffe5
00604c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00604e   ffe5
006050   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006052   ffe5
006054   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006056   ffe5
006058   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00605a   ffe5
00605c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00605e   ffe5
006060   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
006062   ffe5
006064   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
006066   ffe5
006068   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00606a   ffe5
00606c   0e02     movlw	0x2                	MOVLW	0x02
00606e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006070   f000
006072   0e03     movlw	0x3                	MOVLW	0x03
006074   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
006076   f001
006078   0e04     movlw	0x4                	MOVLW	0x04
00607a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00607c   f002
00607e   0e05     movlw	0x5                	MOVLW	0x05
006080   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
006082   f003
006084   0e06     movlw	0x6                	MOVLW	0x06
006086   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
006088   f004
                                           ;	.line	518; TCPIP_Stack/UDP.c	wTemp=(MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER))-wPutOffset;
00608a   ca72     movff	0xa72, 0x5         	MOVFF	_wPutOffset, r0x05
00608c   f005
00608e   ca73     movff	0xa73, 0x6         	MOVFF	(_wPutOffset + 1), r0x06
006090   f006
006092   6a07     clrf	0x7, 0              	CLRF	r0x07
006094   6a08     clrf	0x8, 0              	CLRF	r0x08
006096   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
006098   08c0     sublw	0xc0               	SUBLW	0xc0
00609a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00609c   0e05     movlw	0x5                	MOVLW	0x05
00609e   5606     subfwb	0x6, 0x1, 0       	SUBFWB	r0x06, F
0060a0   0e00     movlw	0                  	MOVLW	0x00
0060a2   5607     subfwb	0x7, 0x1, 0       	SUBFWB	r0x07, F
0060a4   0e00     movlw	0                  	MOVLW	0x00
0060a6   5608     subfwb	0x8, 0x1, 0       	SUBFWB	r0x08, F
                                           ;	.line	519; TCPIP_Stack/UDP.c	if(wTemp < wDataLen) wDataLen = wTemp;
0060a8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0060aa   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
0060ac   e102     bnz	0x60b2               	BNZ	_00209_DS_
0060ae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0060b0   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00209_DS_:
0060b2   e204     bc	0x60bc                	BC	_00202_DS_
0060b4   c005     movff	0x5, 0x3           	MOVFF	r0x05, r0x03
0060b6   f003
0060b8   c006     movff	0x6, 0x4           	MOVFF	r0x06, r0x04
0060ba   f004
                                           _00202_DS_:
                                           ;	.line	521; TCPIP_Stack/UDP.c	wPutOffset += wDataLen;
0060bc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0060be   010a     movlb	0xa                	BANKSEL	_wPutOffset
0060c0   2772     addwf	0x72, 0x1, 0x1     	ADDWF	_wPutOffset, F, B
0060c2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0060c4   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
0060c6   2373     addwfc	0x73, 0x1, 0x1    	ADDWFC	(_wPutOffset + 1), F, B
0060c8   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	522; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount) UDPTxCount = wPutOffset;
0060ca   5173     movf	0x73, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
0060cc   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
0060ce   5d79     subwf	0x79, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
0060d0   e104     bnz	0x60da               	BNZ	_00210_DS_
0060d2   010a     movlb	0xa                	BANKSEL	_wPutOffset
0060d4   5172     movf	0x72, 0, 0x1        	MOVF	_wPutOffset, W, B
0060d6   010a     movlb	0xa                	BANKSEL	_UDPTxCount
0060d8   5d78     subwf	0x78, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00210_DS_:
0060da   e204     bc	0x60e4                	BC	_00204_DS_
0060dc   ca72     movff	0xa72, 0xa78       	MOVFF	_wPutOffset, _UDPTxCount
0060de   fa78
0060e0   ca73     movff	0xa73, 0xa79       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
0060e2   fa79
                                           _00204_DS_:
                                           ;	.line	525; TCPIP_Stack/UDP.c	MACPutArray(cData, wDataLen);
0060e4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0060e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0060ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060ec   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0060ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060f0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0060f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0060f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0060f8   ec9a     call	0x6d34, 0           	CALL	_MACPutArray
0060fa   f036
0060fc   0e05     movlw	0x5                	MOVLW	0x05
0060fe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	527; TCPIP_Stack/UDP.c	return wDataLen;
006100   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
006102   fff3
006104   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
006106   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
006108   f008
00610a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00610c   f007
00610e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
006110   f006
006112   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006114   f005
006116   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006118   f004
00611a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00611c   f003
00611e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006120   f002
006122   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006124   f001
006126   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006128   f000
00612a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00612c   ffd9
00612e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPPut	code
                                           _UDPPut:
                                           ;	.line	472; TCPIP_Stack/UDP.c	BOOL UDPPut(BYTE v)
006dca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006dcc   ffe5
006dce   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006dd0   ffd9
006dd2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006dd4   ffe5
006dd6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006dd8   ffe5
006dda   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006ddc   ffe5
006dde   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006de0   ffe5
006de2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
006de4   ffe5
006de6   0e02     movlw	0x2                	MOVLW	0x02
006de8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006dea   f000
                                           ;	.line	475; TCPIP_Stack/UDP.c	if(wPutOffset >= (MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)))
006dec   ca72     movff	0xa72, 0x1         	MOVFF	_wPutOffset, r0x01
006dee   f001
006df0   ca73     movff	0xa73, 0x2         	MOVFF	(_wPutOffset + 1), r0x02
006df2   f002
006df4   6a03     clrf	0x3, 0              	CLRF	r0x03
006df6   6a04     clrf	0x4, 0              	CLRF	r0x04
006df8   0e00     movlw	0                  	MOVLW	0x00
006dfa   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
006dfc   e108     bnz	0x6e0e               	BNZ	_00195_DS_
006dfe   0e00     movlw	0                  	MOVLW	0x00
006e00   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
006e02   e105     bnz	0x6e0e               	BNZ	_00195_DS_
006e04   0e05     movlw	0x5                	MOVLW	0x05
006e06   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
006e08   e102     bnz	0x6e0e               	BNZ	_00195_DS_
006e0a   0ec0     movlw	0xc0               	MOVLW	0xc0
006e0c   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00195_DS_:
006e0e   e302     bnc	0x6e14               	BNC	_00188_DS_
                                           ;	.line	477; TCPIP_Stack/UDP.c	return FALSE;
006e10   6ae8     clrf	0xe8, 0             	CLRF	WREG
006e12   d019     bra	0x6e46               	BRA	_00191_DS_
                                           _00188_DS_:
                                           ;	.line	481; TCPIP_Stack/UDP.c	MACPut(v);
006e14   5000     movf	0, 0, 0             	MOVF	r0x00, W
006e16   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e18   ec3c     call	0x8078, 0           	CALL	_MACPut
006e1a   f040
006e1c   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
006e1e   010a     movlb	0xa                	BANKSEL	_wPutOffset
                                           ;	.line	482; TCPIP_Stack/UDP.c	wPutOffset++;
006e20   2b72     incf	0x72, 0x1, 0x1      	INCF	_wPutOffset, F, B
006e22   e302     bnc	0x6e28               	BNC	_20297_DS_
006e24   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
006e26   2b73     incf	0x73, 0x1, 0x1      	INCF	(_wPutOffset + 1), F, B
                                           _20297_DS_:
006e28   010a     movlb	0xa                	BANKSEL	(_wPutOffset + 1)
                                           ;	.line	483; TCPIP_Stack/UDP.c	if(wPutOffset > UDPTxCount)
006e2a   5173     movf	0x73, 0, 0x1        	MOVF	(_wPutOffset + 1), W, B
006e2c   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
006e2e   5d79     subwf	0x79, 0, 0x1       	SUBWF	(_UDPTxCount + 1), W, B
006e30   e104     bnz	0x6e3a               	BNZ	_00196_DS_
006e32   010a     movlb	0xa                	BANKSEL	_wPutOffset
006e34   5172     movf	0x72, 0, 0x1        	MOVF	_wPutOffset, W, B
006e36   010a     movlb	0xa                	BANKSEL	_UDPTxCount
006e38   5d78     subwf	0x78, 0, 0x1       	SUBWF	_UDPTxCount, W, B
                                           _00196_DS_:
006e3a   e204     bc	0x6e44                	BC	_00190_DS_
                                           ;	.line	484; TCPIP_Stack/UDP.c	UDPTxCount = wPutOffset;
006e3c   ca72     movff	0xa72, 0xa78       	MOVFF	_wPutOffset, _UDPTxCount
006e3e   fa78
006e40   ca73     movff	0xa73, 0xa79       	MOVFF	(_wPutOffset + 1), (_UDPTxCount + 1)
006e42   fa79
                                           _00190_DS_:
                                           ;	.line	486; TCPIP_Stack/UDP.c	return TRUE;
006e44   0e01     movlw	0x1                	MOVLW	0x01
                                           _00191_DS_:
006e46   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
006e48   f004
006e4a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006e4c   f003
006e4e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006e50   f002
006e52   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006e54   f001
006e56   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006e58   f000
006e5a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006e5c   ffd9
006e5e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPIsPutReady	code
                                           _UDPIsPutReady:
                                           ;	.line	434; TCPIP_Stack/UDP.c	WORD UDPIsPutReady(UDP_SOCKET s)
006f86   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006f88   ffe5
006f8a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006f8c   ffd9
006f8e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006f90   ffe5
006f92   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006f94   ffe5
006f96   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006f98   ffe5
006f9a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006f9c   ffe5
006f9e   0e02     movlw	0x2                	MOVLW	0x02
006fa0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006fa2   f000
                                           ;	.line	436; TCPIP_Stack/UDP.c	if(!MACIsTxReady())
006fa4   ec5c     call	0x74b8, 0           	CALL	_MACIsTxReady
006fa6   f03a
006fa8   6e01     movwf	0x1, 0             	MOVWF	r0x01
006faa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006fac   e103     bnz	0x6fb4               	BNZ	_00174_DS_
                                           ;	.line	437; TCPIP_Stack/UDP.c	return 0;
006fae   6af3     clrf	0xf3, 0             	CLRF	PRODL
006fb0   6ae8     clrf	0xe8, 0             	CLRF	WREG
006fb2   d026     bra	0x7000               	BRA	_00177_DS_
                                           _00174_DS_:
006fb4   0108     movlb	0x8                	BANKSEL	_LastPutSocket
                                           ;	.line	439; TCPIP_Stack/UDP.c	if(LastPutSocket != s)
006fb6   5166     movf	0x66, 0, 0x1        	MOVF	_LastPutSocket, W, B
006fb8   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
006fba   e00e     bz	0x6fd8                	BZ	_00176_DS_
                                           ;	.line	441; TCPIP_Stack/UDP.c	LastPutSocket = s;
006fbc   c000     movff	0, 0x866           	MOVFF	r0x00, _LastPutSocket
006fbe   f866
006fc0   010a     movlb	0xa                	BANKSEL	_UDPTxCount
                                           ;	.line	442; TCPIP_Stack/UDP.c	UDPTxCount = 0;
006fc2   6b78     clrf	0x78, 0x1           	CLRF	_UDPTxCount, B
006fc4   010a     movlb	0xa                	BANKSEL	(_UDPTxCount + 1)
006fc6   6b79     clrf	0x79, 0x1           	CLRF	(_UDPTxCount + 1), B
                                           ;	.line	443; TCPIP_Stack/UDP.c	UDPSetTxBuffer(0);
006fc8   0e00     movlw	0                  	MOVLW	0x00
006fca   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006fcc   0e00     movlw	0                  	MOVLW	0x00
006fce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006fd0   ec1d     call	0x743a, 0           	CALL	_UDPSetTxBuffer
006fd2   f03a
006fd4   0e02     movlw	0x2                	MOVLW	0x02
006fd6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00176_DS_:
                                           ;	.line	445; TCPIP_Stack/UDP.c	activeUDPSocket = s;
006fd8   c000     movff	0, 0xa97           	MOVFF	r0x00, _activeUDPSocket
006fda   fa97
                                           ;	.line	447; TCPIP_Stack/UDP.c	return MAC_TX_BUFFER_SIZE-sizeof(IP_HEADER)-sizeof(UDP_HEADER)-UDPTxCount;
006fdc   ca78     movff	0xa78, 0           	MOVFF	_UDPTxCount, r0x00
006fde   f000
006fe0   ca79     movff	0xa79, 0x1         	MOVFF	(_UDPTxCount + 1), r0x01
006fe2   f001
006fe4   6a02     clrf	0x2, 0              	CLRF	r0x02
006fe6   6a03     clrf	0x3, 0              	CLRF	r0x03
006fe8   5000     movf	0, 0, 0             	MOVF	r0x00, W
006fea   08c0     sublw	0xc0               	SUBLW	0xc0
006fec   6e00     movwf	0, 0               	MOVWF	r0x00
006fee   0e05     movlw	0x5                	MOVLW	0x05
006ff0   5601     subfwb	0x1, 0x1, 0       	SUBFWB	r0x01, F
006ff2   0e00     movlw	0                  	MOVLW	0x00
006ff4   5602     subfwb	0x2, 0x1, 0       	SUBFWB	r0x02, F
006ff6   0e00     movlw	0                  	MOVLW	0x00
006ff8   5603     subfwb	0x3, 0x1, 0       	SUBFWB	r0x03, F
006ffa   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006ffc   fff3
006ffe   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00177_DS_:
007000   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
007002   f003
007004   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007006   f002
007008   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00700a   f001
00700c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00700e   f000
007010   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007012   ffd9
007014   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetRxBuffer	code
                                           _UDPSetRxBuffer:
                                           ;	.line	400; TCPIP_Stack/UDP.c	void UDPSetRxBuffer(WORD wOffset)
0077ae   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0077b0   ffe5
0077b2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0077b4   ffd9
0077b6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0077b8   ffe5
0077ba   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0077bc   ffe5
0077be   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0077c0   ffe5
0077c2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0077c4   ffe5
0077c6   0e02     movlw	0x2                	MOVLW	0x02
0077c8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0077ca   f000
0077cc   0e03     movlw	0x3                	MOVLW	0x03
0077ce   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0077d0   f001
                                           ;	.line	402; TCPIP_Stack/UDP.c	IPSetRxBuffer(wOffset+sizeof(UDP_HEADER));
0077d2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0077d4   0f08     addlw	0x8                	ADDLW	0x08
0077d6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0077d8   0e00     movlw	0                  	MOVLW	0x00
0077da   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0077dc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0077de   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0077e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077e2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0077e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0077e6   ec06     call	0x780c, 0           	CALL	_IPSetRxBuffer
0077e8   f03c
0077ea   0e02     movlw	0x2                	MOVLW	0x02
0077ec   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	403; TCPIP_Stack/UDP.c	wGetOffset = wOffset;
0077ee   c000     movff	0, 0xa74           	MOVFF	r0x00, _wGetOffset
0077f0   fa74
0077f2   c001     movff	0x1, 0xa75         	MOVFF	r0x01, (_wGetOffset + 1)
0077f4   fa75
0077f6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0077f8   f003
0077fa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0077fc   f002
0077fe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007800   f001
007802   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007804   f000
007806   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007808   ffd9
00780a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPSetTxBuffer	code
                                           _UDPSetTxBuffer:
                                           ;	.line	370; TCPIP_Stack/UDP.c	void UDPSetTxBuffer(WORD wOffset)
00743a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00743c   ffe5
00743e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007440   ffd9
007442   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007444   ffe5
007446   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007448   ffe5
00744a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00744c   ffe5
00744e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
007450   ffe5
007452   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
007454   ffe5
007456   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
007458   ffe5
00745a   0e02     movlw	0x2                	MOVLW	0x02
00745c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00745e   f000
007460   0e03     movlw	0x3                	MOVLW	0x03
007462   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
007464   f001
                                           ;	.line	372; TCPIP_Stack/UDP.c	IPSetTxBuffer(wOffset+sizeof(UDP_HEADER));
007466   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
007468   f002
00746a   c001     movff	0x1, 0x3           	MOVFF	r0x01, r0x03
00746c   f003
00746e   6a04     clrf	0x4, 0              	CLRF	r0x04
007470   6a05     clrf	0x5, 0              	CLRF	r0x05
007472   0e35     movlw	0x35               	MOVLW	0x35
007474   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
007476   0e1a     movlw	0x1a               	MOVLW	0x1a
007478   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00747a   0e00     movlw	0                  	MOVLW	0x00
00747c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00747e   0e00     movlw	0                  	MOVLW	0x00
007480   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
007482   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
007484   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007486   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
007488   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00748a   ec19     call	0x7232, 0           	CALL	_MACSetWritePtr
00748c   f039
00748e   0e02     movlw	0x2                	MOVLW	0x02
007490   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	373; TCPIP_Stack/UDP.c	wPutOffset = wOffset;
007492   c000     movff	0, 0xa72           	MOVFF	r0x00, _wPutOffset
007494   fa72
007496   c001     movff	0x1, 0xa73         	MOVFF	r0x01, (_wPutOffset + 1)
007498   fa73
00749a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00749c   f005
00749e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0074a0   f004
0074a2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0074a4   f003
0074a6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0074a8   f002
0074aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0074ac   f001
0074ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0074b0   f000
0074b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0074b4   ffd9
0074b6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPClose	code
                                           _UDPClose:
                                           ;	.line	339; TCPIP_Stack/UDP.c	void UDPClose(UDP_SOCKET s)
007016   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007018   ffe5
00701a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00701c   ffd9
00701e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007020   ffe5
007022   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007024   ffe5
007026   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007028   ffe5
00702a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00702c   ffe5
00702e   0e02     movlw	0x2                	MOVLW	0x02
007030   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
007032   f000
                                           ;	.line	341; TCPIP_Stack/UDP.c	if(s >= MAX_UDP_SOCKETS) return;
007034   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
007036   f001
007038   6a02     clrf	0x2, 0              	CLRF	r0x02
00703a   0e00     movlw	0                  	MOVLW	0x00
00703c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00703e   e102     bnz	0x7044               	BNZ	_00158_DS_
007040   0e0a     movlw	0xa                	MOVLW	0x0a
007042   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00158_DS_:
007044   e223     bc	0x708c                	BC	_00155_DS_
                                           ; ;multiply lit val:0x0e by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	342; TCPIP_Stack/UDP.c	UDPSocketInfo[s].localPort = INVALID_UDP_PORT;
007046   5000     movf	0, 0, 0             	MOVF	r0x00, W
007048   0d0e     mullw	0xe                	MULLW	0x0e
00704a   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00704c   f000
00704e   6a01     clrf	0x1, 0              	CLRF	r0x01
007050   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
007052   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
007054   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
007056   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
007058   5000     movf	0, 0, 0             	MOVF	r0x00, W
00705a   0f0c     addlw	0xc                	ADDLW	0x0c
00705c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00705e   0e00     movlw	0                  	MOVLW	0x00
007060   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
007062   6e03     movwf	0x3, 0             	MOVWF	r0x03
007064   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
007066   ffe9
007068   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00706a   ffea
00706c   0e00     movlw	0                  	MOVLW	0x00
00706e   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
007070   0e00     movlw	0                  	MOVLW	0x00
007072   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	343; TCPIP_Stack/UDP.c	UDPSocketInfo[s].remoteNode.IPAddr.Val = 0x00000000;
007074   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
007076   ffe9
007078   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00707a   ffea
00707c   0e00     movlw	0                  	MOVLW	0x00
00707e   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
007080   0e00     movlw	0                  	MOVLW	0x00
007082   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
007084   0e00     movlw	0                  	MOVLW	0x00
007086   6eee     movwf	0xee, 0            	MOVWF	POSTINC0
007088   0e00     movlw	0                  	MOVLW	0x00
00708a   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           _00155_DS_:
00708c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00708e   f003
007090   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007092   f002
007094   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007096   f001
007098   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00709a   f000
00709c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00709e   ffd9
0070a0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPOpen	code
                                           _UDPOpen:
                                           ;	.line	258; TCPIP_Stack/UDP.c	UDP_SOCKET UDPOpen(UDP_PORT this_localPort,
003072   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003074   ffe5
003076   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003078   ffd9
00307a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00307c   ffe5
00307e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003080   ffe5
003082   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003084   ffe5
003086   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003088   ffe5
00308a   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00308c   ffe5
00308e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003090   ffe5
003092   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003094   ffe5
003096   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003098   ffe5
00309a   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00309c   ffe5
00309e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0030a0   ffe5
0030a2   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0030a4   ffe5
0030a6   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0030a8   ffe5
0030aa   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0030ac   ffe5
0030ae   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
0030b0   ffe5
0030b2   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0030b4   ffe5
0030b6   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0030b8   ffe5
0030ba   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0030bc   ffe5
0030be   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0030c0   ffe5
0030c2   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0030c4   ffe5
0030c6   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0030c8   ffe5
0030ca   0e02     movlw	0x2                	MOVLW	0x02
0030cc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0030ce   f000
0030d0   0e03     movlw	0x3                	MOVLW	0x03
0030d2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0030d4   f001
0030d6   0e04     movlw	0x4                	MOVLW	0x04
0030d8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0030da   f002
0030dc   0e05     movlw	0x5                	MOVLW	0x05
0030de   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0030e0   f003
0030e2   0e06     movlw	0x6                	MOVLW	0x06
0030e4   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0030e6   f004
0030e8   0e07     movlw	0x7                	MOVLW	0x07
0030ea   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0030ec   f005
0030ee   0e08     movlw	0x8                	MOVLW	0x08
0030f0   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0030f2   f006
                                           ;	.line	269; TCPIP_Stack/UDP.c	p = UDPSocketInfo; //pointer to the table of UDP sockets
0030f4   0e00     movlw	0                  	MOVLW	HIGH(_UDPSocketInfo)
0030f6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0030f8   0e60     movlw	0x60               	MOVLW	LOW(_UDPSocketInfo)
0030fa   6e07     movwf	0x7, 0             	MOVWF	r0x07
0030fc   0e80     movlw	0x80               	MOVLW	0x80
0030fe   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
003100   6a0a     clrf	0xa, 0              	CLRF	r0x0a
003102   c007     movff	0x7, 0xb           	MOVFF	r0x07, r0x0b
003104   f00b
003106   c008     movff	0x8, 0xc           	MOVFF	r0x08, r0x0c
003108   f00c
00310a   c009     movff	0x9, 0xd           	MOVFF	r0x09, r0x0d
00310c   f00d
00310e   6a0e     clrf	0xe, 0              	CLRF	r0x0e
                                           _00134_DS_:
003110   c00e     movff	0xe, 0xf           	MOVFF	r0x0e, r0x0f
003112   f00f
003114   6a10     clrf	0x10, 0             	CLRF	r0x10
003116   0e00     movlw	0                  	MOVLW	0x00
003118   5c10     subwf	0x10, 0, 0         	SUBWF	r0x10, W
00311a   e102     bnz	0x3120               	BNZ	_00146_DS_
00311c   0e0a     movlw	0xa                	MOVLW	0x0a
00311e   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
                                           _00146_DS_:
003120   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003122   d0ac     bra	0x327c               	BRA	_00137_DS_
                                           ;	.line	272; TCPIP_Stack/UDP.c	if(p->localPort == INVALID_UDP_PORT)
003124   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003126   0f0c     addlw	0xc                	ADDLW	0x0c
003128   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00312a   0e00     movlw	0                  	MOVLW	0x00
00312c   200c     addwfc	0xc, 0, 0         	ADDWFC	r0x0c, W
00312e   6e10     movwf	0x10, 0            	MOVWF	r0x10
003130   0e00     movlw	0                  	MOVLW	0x00
003132   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
003134   6e11     movwf	0x11, 0            	MOVWF	r0x11
003136   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
003138   ffe9
00313a   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
00313c   fff3
00313e   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
003140   ecee     call	0x7ddc, 0           	CALL	__gptrget2
003142   f03e
003144   6e12     movwf	0x12, 0            	MOVWF	r0x12
003146   cff3     movff	0xff3, 0x13        	MOVFF	PRODL, r0x13
003148   f013
00314a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00314c   1013     iorwf	0x13, 0, 0         	IORWF	r0x13, W
00314e   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
003150   d085     bra	0x325c               	BRA	_00133_DS_
                                           ;	.line	274; TCPIP_Stack/UDP.c	p->localPort = this_localPort;	
003152   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003154   ffe5
003156   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
003158   fff4
00315a   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
00315c   ffe9
00315e   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
003160   fff3
003162   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
003164   ec30     call	0x8060, 0           	CALL	__gptrput2
003166   f040
                                           ;	.line	276; TCPIP_Stack/UDP.c	if(this_localPort == 0x0000u) //select any free port
003168   5000     movf	0, 0, 0             	MOVF	r0x00, W
00316a   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
00316c   e132     bnz	0x31d2               	BNZ	_00128_DS_
                                           ;	.line	278; TCPIP_Stack/UDP.c	if(NextPort > LOCAL_UDP_PORT_END_NUMBER || 
00316e   0e20     movlw	0x20               	MOVLW	0x20
003170   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
003172   5d77     subwf	0x77, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
003174   e103     bnz	0x317c               	BNZ	_00147_DS_
003176   0e01     movlw	0x1                	MOVLW	0x01
003178   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
00317a   5d76     subwf	0x76, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00147_DS_:
00317c   e208     bc	0x318e                	BC	_00124_DS_
                                           ;	.line	279; TCPIP_Stack/UDP.c	NextPort < LOCAL_UDP_PORT_START_NUMBER)
00317e   0e10     movlw	0x10               	MOVLW	0x10
003180   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
003182   5d77     subwf	0x77, 0, 0x1       	SUBWF	(_UDPOpen_NextPort_1_1 + 1), W, B
003184   e103     bnz	0x318c               	BNZ	_00148_DS_
003186   0e00     movlw	0                  	MOVLW	0x00
003188   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
00318a   5d76     subwf	0x76, 0, 0x1       	SUBWF	_UDPOpen_NextPort_1_1, W, B
                                           _00148_DS_:
00318c   e205     bc	0x3198                	BC	_00125_DS_
                                           _00124_DS_:
00318e   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
                                           ;	.line	280; TCPIP_Stack/UDP.c	NextPort = LOCAL_UDP_PORT_START_NUMBER;
003190   6b76     clrf	0x76, 0x1           	CLRF	_UDPOpen_NextPort_1_1, B
003192   0e10     movlw	0x10               	MOVLW	0x10
003194   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
003196   6f77     movwf	0x77, 0x1          	MOVWF	(_UDPOpen_NextPort_1_1 + 1), B
                                           _00125_DS_:
                                           ;	.line	282; TCPIP_Stack/UDP.c	p->localPort    = NextPort++;
003198   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00319a   0f0c     addlw	0xc                	ADDLW	0x0c
00319c   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00319e   0e00     movlw	0                  	MOVLW	0x00
0031a0   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
0031a2   6e10     movwf	0x10, 0            	MOVWF	r0x10
0031a4   0e00     movlw	0                  	MOVLW	0x00
0031a6   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0031a8   6e11     movwf	0x11, 0            	MOVWF	r0x11
0031aa   ca76     movff	0xa76, 0x12        	MOVFF	_UDPOpen_NextPort_1_1, r0x12
0031ac   f012
0031ae   ca77     movff	0xa77, 0x13        	MOVFF	(_UDPOpen_NextPort_1_1 + 1), r0x13
0031b0   f013
0031b2   010a     movlb	0xa                	BANKSEL	_UDPOpen_NextPort_1_1
0031b4   2b76     incf	0x76, 0x1, 0x1      	INCF	_UDPOpen_NextPort_1_1, F, B
0031b6   e302     bnc	0x31bc               	BNC	_30298_DS_
0031b8   010a     movlb	0xa                	BANKSEL	(_UDPOpen_NextPort_1_1 + 1)
0031ba   2b77     incf	0x77, 0x1, 0x1      	INCF	(_UDPOpen_NextPort_1_1 + 1), F, B
                                           _30298_DS_:
0031bc   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0031be   ffe5
0031c0   c013     movff	0x13, 0xff4        	MOVFF	r0x13, PRODH
0031c2   fff4
0031c4   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
0031c6   ffe9
0031c8   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
0031ca   fff3
0031cc   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0031ce   ec30     call	0x8060, 0           	CALL	__gptrput2
0031d0   f040
                                           _00128_DS_:
                                           ;	.line	286; TCPIP_Stack/UDP.c	if(this_remoteNode)
0031d2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031d4   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0031d6   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
0031d8   e015     bz	0x3204                	BZ	_00130_DS_
                                           ;	.line	289; TCPIP_Stack/UDP.c	sizeof(p->remoteNode));
0031da   0e00     movlw	0                  	MOVLW	0x00
0031dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031de   0e0a     movlw	0xa                	MOVLW	0x0a
0031e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031e2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0031e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031e6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0031e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ee   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0031f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031f2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0031f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031f6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0031f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031fa   ec1d     call	0x5e3a, 0           	CALL	_memcpy
0031fc   f02f
0031fe   0e08     movlw	0x8                	MOVLW	0x08
003200   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003202   d014     bra	0x322c               	BRA	_00131_DS_
                                           _00130_DS_:
                                           ;	.line	294; TCPIP_Stack/UDP.c	memset((void*)&(p->remoteNode), 0xFF, sizeof(p->remoteNode));
003204   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
003206   f00f
003208   c008     movff	0x8, 0x10          	MOVFF	r0x08, r0x10
00320a   f010
00320c   c009     movff	0x9, 0x11          	MOVFF	r0x09, r0x11
00320e   f011
003210   0e00     movlw	0                  	MOVLW	0x00
003212   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003214   0e0a     movlw	0xa                	MOVLW	0x0a
003216   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003218   0eff     movlw	0xff               	MOVLW	0xff
00321a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00321c   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00321e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003220   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
003222   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003224   ec38     call	0x6670, 0           	CALL	_memset
003226   f033
003228   0e05     movlw	0x5                	MOVLW	0x05
00322a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           _00131_DS_:
                                           ;	.line	297; TCPIP_Stack/UDP.c	p->remotePort = this_remotePort;
00322c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00322e   0f0a     addlw	0xa                	ADDLW	0x0a
003230   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
003232   0e00     movlw	0                  	MOVLW	0x00
003234   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
003236   6e10     movwf	0x10, 0            	MOVWF	r0x10
003238   0e00     movlw	0                  	MOVLW	0x00
00323a   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
00323c   6e11     movwf	0x11, 0            	MOVWF	r0x11
00323e   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003240   ffe5
003242   c006     movff	0x6, 0xff4         	MOVFF	r0x06, PRODH
003244   fff4
003246   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
003248   ffe9
00324a   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
00324c   fff3
00324e   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
003250   ec30     call	0x8060, 0           	CALL	__gptrput2
003252   f040
                                           ;	.line	302; TCPIP_Stack/UDP.c	activeUDPSocket = s;
003254   c00a     movff	0xa, 0xa97         	MOVFF	r0x0a, _activeUDPSocket
003256   fa97
                                           ;	.line	303; TCPIP_Stack/UDP.c	return s;
003258   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00325a   d011     bra	0x327e               	BRA	_00138_DS_
                                           _00133_DS_:
                                           ;	.line	305; TCPIP_Stack/UDP.c	p++;
00325c   0e0e     movlw	0xe                	MOVLW	0x0e
00325e   260b     addwf	0xb, 0x1, 0        	ADDWF	r0x0b, F
003260   0e00     movlw	0                  	MOVLW	0x00
003262   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
003264   0e00     movlw	0                  	MOVLW	0x00
003266   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
003268   c00b     movff	0xb, 0x7           	MOVFF	r0x0b, r0x07
00326a   f007
00326c   c00c     movff	0xc, 0x8           	MOVFF	r0x0c, r0x08
00326e   f008
003270   c00d     movff	0xd, 0x9           	MOVFF	r0x0d, r0x09
003272   f009
                                           ;	.line	270; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
003274   2a0e     incf	0xe, 0x1, 0         	INCF	r0x0e, F
003276   c00e     movff	0xe, 0xa           	MOVFF	r0x0e, r0x0a
003278   f00a
00327a   d74a     bra	0x3110               	BRA	_00134_DS_
                                           _00137_DS_:
                                           ;	.line	308; TCPIP_Stack/UDP.c	return (UDP_SOCKET)INVALID_UDP_SOCKET;
00327c   68e8     setf	0xe8, 0             	SETF	WREG
                                           _00138_DS_:
00327e   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
003280   f013
003282   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
003284   f012
003286   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
003288   f011
00328a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00328c   f010
00328e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003290   f00f
003292   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003294   f00e
003296   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003298   f00d
00329a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00329c   f00c
00329e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0032a0   f00b
0032a2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0032a4   f00a
0032a6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0032a8   f009
0032aa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0032ac   f008
0032ae   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0032b0   f007
0032b2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0032b4   f006
0032b6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0032b8   f005
0032ba   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0032bc   f004
0032be   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0032c0   f003
0032c2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0032c4   f002
0032c6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0032c8   f001
0032ca   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0032cc   f000
0032ce   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0032d0   ffd9
0032d2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPTask	code
                                           _UDPTask:
                                           ;	.line	215; TCPIP_Stack/UDP.c	void UDPTask(void)
00808c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00808e   ffe5
008090   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
008092   ffd9
                                           ;	.line	217; TCPIP_Stack/UDP.c	LastPutSocket = INVALID_UDP_SOCKET;
008094   0eff     movlw	0xff               	MOVLW	0xff
008096   0108     movlb	0x8                	BANKSEL	_LastPutSocket
008098   6f66     movwf	0x66, 0x1          	MOVWF	_LastPutSocket, B
00809a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00809c   ffd9
00809e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_UDP__UDPInit	code
                                           _UDPInit:
                                           ;	.line	177; TCPIP_Stack/UDP.c	void UDPInit(void)
007a9e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
007aa0   ffe5
007aa2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
007aa4   ffd9
007aa6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
007aa8   ffe5
007aaa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
007aac   ffe5
007aae   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
007ab0   ffe5
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
007ab2   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00105_DS_:
007ab4   c000     movff	0, 0x1             	MOVFF	r0x00, r0x01
007ab6   f001
007ab8   6a02     clrf	0x2, 0              	CLRF	r0x02
007aba   0e00     movlw	0                  	MOVLW	0x00
007abc   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
007abe   e102     bnz	0x7ac4               	BNZ	_00114_DS_
007ac0   0e0a     movlw	0xa                	MOVLW	0x0a
007ac2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
                                           _00114_DS_:
007ac4   e207     bc	0x7ad4                	BC	_00108_DS_
                                           ;	.line	184; TCPIP_Stack/UDP.c	UDPClose(s);
007ac6   5000     movf	0, 0, 0             	MOVF	r0x00, W
007ac8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
007aca   ec0b     call	0x7016, 0           	CALL	_UDPClose
007acc   f038
007ace   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
                                           ;	.line	182; TCPIP_Stack/UDP.c	for ( s = 0; s < MAX_UDP_SOCKETS; s++ )
007ad0   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
007ad2   d7f0     bra	0x7ab4               	BRA	_00105_DS_
                                           _00108_DS_:
007ad4   010a     movlb	0xa                	BANKSEL	_Flags
                                           ;	.line	186; TCPIP_Stack/UDP.c	Flags.bWasDiscarded = 1;
007ad6   8396     bsf	0x96, 0x1, 0x1       	BSF	_Flags, 1, B
007ad8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
007ada   f002
007adc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
007ade   f001
007ae0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
007ae2   f000
007ae4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
007ae6   ffd9
007ae8   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 4642 (0x1222) bytes ( 3.54%)
                                           ;           	 2321 (0x0911) words
                                           ; udata size:	  198 (0x00c6) bytes ( 5.16%)
                                           ; access size:	   28 (0x001c) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.4 #5595 (Nov 15 2017) (UNIX)
                                           ; This file was generated Sun Dec 10 18:45:16 2017
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f97j60
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _strlcpy
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern _EBSTCONbits
                                           	extern _MISTATbits
                                           	extern _EFLOCONbits
                                           	extern _MACON1bits
                                           	extern _MACON2bits
                                           	extern _MACON3bits
                                           	extern _MACON4bits
                                           	extern _MACLCON1bits
                                           	extern _MACLCON2bits
                                           	extern _MICONbits
                                           	extern _MICMDbits
                                           	extern _EWOLIEbits
                                           	extern _EWOLIRbits
                                           	extern _ERXFCONbits
                                           	extern _EIEbits
                                           	extern _ESTATbits
                                           	extern _ECON2bits
                                           	extern _EIRbits
                                           	extern _EDATAbits
                                           	extern _SSP2CON2bits
                                           	extern _SSP2CON1bits
                                           	extern _SSP2STATbits
                                           	extern _ECCP2DELbits
                                           	extern _ECCP2ASbits
                                           	extern _ECCP3DELbits
                                           	extern _ECCP3ASbits
                                           	extern _RCSTA2bits
                                           	extern _TXSTA2bits
                                           	extern _CCP5CONbits
                                           	extern _CCP4CONbits
                                           	extern _T4CONbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCON2bits
                                           	extern _BAUDCTL2bits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCON1bits
                                           	extern _BAUDCTLbits
                                           	extern _BAUDCTL1bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _PORTFbits
                                           	extern _PORTGbits
                                           	extern _PORTHbits
                                           	extern _PORTJbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _LATFbits
                                           	extern _LATGbits
                                           	extern _LATHbits
                                           	extern _LATJbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _DDRFbits
                                           	extern _TRISFbits
                                           	extern _DDRGbits
                                           	extern _TRISGbits
                                           	extern _DDRHbits
                                           	extern _TRISHbits
                                           	extern _DDRJbits
                                           	extern _TRISJbits
                                           	extern _OSCTUNEbits
                                           	extern _MEMCONbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _PIE3bits
                                           	extern _PIR3bits
                                           	extern _IPR3bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _RCSTA1bits
                                           	extern _TXSTAbits
                                           	extern _TXSTA1bits
                                           	extern _PSPCONbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _CCP3CONbits
                                           	extern _ECCP3CONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSP1CON2bits
                                           	extern _SSPCON2bits
                                           	extern _SSP1CON1bits
                                           	extern _SSPCON1bits
                                           	extern _SSP1STATbits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _ECON1bits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _AN0String
                                           	extern _AppConfig
                                           	extern _activeUDPSocket
                                           	extern _UDPSocketInfo
                                           	extern _UDPTxCount
                                           	extern _UDPRxCount
                                           	extern _LCDText
                                           	extern _MAADR5
                                           	extern _MAADR6
                                           	extern _MAADR3
                                           	extern _MAADR4
                                           	extern _MAADR1
                                           	extern _MAADR2
                                           	extern _EBSTSD
                                           	extern _EBSTCON
                                           	extern _EBSTCS
                                           	extern _EBSTCSL
                                           	extern _EBSTCSH
                                           	extern _MISTAT
                                           	extern _EFLOCON
                                           	extern _EPAUS
                                           	extern _EPAUSL
                                           	extern _EPAUSH
                                           	extern _MACON1
                                           	extern _MACON2
                                           	extern _MACON3
                                           	extern _MACON4
                                           	extern _MABBIPG
                                           	extern _MAIPG
                                           	extern _MAIPGL
                                           	extern _MAIPGH
                                           	extern _MACLCON1
                                           	extern _MACLCON2
                                           	extern _MAMXFL
                                           	extern _MAMXFLL
                                           	extern _MAMXFLH
                                           	extern _MICON
                                           	extern _MICMD
                                           	extern _MIREGADR
                                           	extern _MIWR
                                           	extern _MIWRL
                                           	extern _MIWRH
                                           	extern _MIRD
                                           	extern _MIRDL
                                           	extern _MIRDH
                                           	extern _EHT0
                                           	extern _EHT1
                                           	extern _EHT2
                                           	extern _EHT3
                                           	extern _EHT4
                                           	extern _EHT5
                                           	extern _EHT6
                                           	extern _EHT7
                                           	extern _EPMM0
                                           	extern _EPMM1
                                           	extern _EPMM2
                                           	extern _EPMM3
                                           	extern _EPMM4
                                           	extern _EPMM5
                                           	extern _EPMM6
                                           	extern _EPMM7
                                           	extern _EPMCS
                                           	extern _EPMCSL
                                           	extern _EPMCSH
                                           	extern _EPMO
                                           	extern _EPMOL
                                           	extern _EPMOH
                                           	extern _EWOLIE
                                           	extern _EWOLIR
                                           	extern _ERXFCON
                                           	extern _EPKTCNT
                                           	extern _EWRPT
                                           	extern _EWRPTL
                                           	extern _EWRPTH
                                           	extern _ETXST
                                           	extern _ETXSTL
                                           	extern _ETXSTH
                                           	extern _ETXND
                                           	extern _ETXNDL
                                           	extern _ETXNDH
                                           	extern _ERXST
                                           	extern _ERXSTL
                                           	extern _ERXSTH
                                           	extern _ERXND
                                           	extern _ERXNDL
                                           	extern _ERXNDH
                                           	extern _ERXRDPT
                                           	extern _ERXRDPTL
                                           	extern _ERXRDPTH
                                           	extern _ERXWRPT
                                           	extern _ERXWRPTL
                                           	extern _ERXWRPTH
                                           	extern _EDMAST
                                           	extern _EDMASTL
                                           	extern _EDMASTH
                                           	extern _EDMAND
                                           	extern _EDMANDL
                                           	extern _EDMANDH
                                           	extern _EDMADST
                                           	extern _EDMADSTL
                                           	extern _EDMADSTH
                                           	extern _EDMACS
                                           	extern _EDMACSL
                                           	extern _EDMACSH
                                           	extern _EIE
                                           	extern _ESTAT
                                           	extern _ECON2
                                           	extern _EIR
                                           	extern _EDATA
                                           	extern _SSP2CON2
                                           	extern _SSP2CON1
                                           	extern _SSP2STAT
                                           	extern _SSP2ADD
                                           	extern _SSP2BUF
                                           	extern _ECCP2DEL
                                           	extern _ECCP2AS
                                           	extern _ECCP3DEL
                                           	extern _ECCP3AS
                                           	extern _RCSTA2
                                           	extern _TXSTA2
                                           	extern _TXREG2
                                           	extern _RCREG2
                                           	extern _SPBRG2
                                           	extern _CCP5CON
                                           	extern _CCPR5
                                           	extern _CCPR5L
                                           	extern _CCPR5H
                                           	extern _CCP4CON
                                           	extern _CCPR4
                                           	extern _CCPR4L
                                           	extern _CCPR4H
                                           	extern _T4CON
                                           	extern _PR4
                                           	extern _TMR4
                                           	extern _ECCP1DEL
                                           	extern _ERDPT
                                           	extern _ERDPTL
                                           	extern _ERDPTH
                                           	extern _BAUDCON2
                                           	extern _BAUDCTL2
                                           	extern _SPBRGH2
                                           	extern _BAUDCON
                                           	extern _BAUDCON1
                                           	extern _BAUDCTL
                                           	extern _BAUDCTL1
                                           	extern _SPBRGH
                                           	extern _SPBRGH1
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _PORTF
                                           	extern _PORTG
                                           	extern _PORTH
                                           	extern _PORTJ
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _LATF
                                           	extern _LATG
                                           	extern _LATH
                                           	extern _LATJ
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _DDRF
                                           	extern _TRISF
                                           	extern _DDRG
                                           	extern _TRISG
                                           	extern _DDRH
                                           	extern _TRISH
                                           	extern _DDRJ
                                           	extern _TRISJ
                                           	extern _OSCTUNE
                                           	extern _MEMCON
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _PIE3
                                           	extern _PIR3
                                           	extern _IPR3
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _RCSTA
                                           	extern _RCSTA1
                                           	extern _TXSTA
                                           	extern _TXSTA1
                                           	extern _TXREG
                                           	extern _TXREG1
                                           	extern _RCREG
                                           	extern _RCREG1
                                           	extern _SPBRG
                                           	extern _SPBRG1
                                           	extern _PSPCON
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _CCP3CON
                                           	extern _ECCP3CON
                                           	extern _CCPR3
                                           	extern _CCPR3L
                                           	extern _CCPR3H
                                           	extern _CCP2CON
                                           	extern _ECCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _ECCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSP1CON2
                                           	extern _SSPCON2
                                           	extern _SSP1CON1
                                           	extern _SSPCON1
                                           	extern _SSP1STAT
                                           	extern _SSPSTAT
                                           	extern _SSP1ADD
                                           	extern _SSPADD
                                           	extern _SSP1BUF
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _ECON1
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_strlcpy__strlcpy	code
                                           _strlcpy:
                                           ;	.line	43; TCPIP_Stack/strlcpy.c	strlcpy(char *dst, const char *src, size_t siz)
003d66   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003d68   ffe5
003d6a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003d6c   ffd9
003d6e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003d70   ffe5
003d72   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003d74   ffe5
003d76   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003d78   ffe5
003d7a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003d7c   ffe5
003d7e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003d80   ffe5
003d82   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003d84   ffe5
003d86   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003d88   ffe5
003d8a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003d8c   ffe5
003d8e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003d90   ffe5
003d92   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003d94   ffe5
003d96   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003d98   ffe5
003d9a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003d9c   ffe5
003d9e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003da0   ffe5
003da2   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003da4   ffe5
003da6   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003da8   ffe5
003daa   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
003dac   ffe5
003dae   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
003db0   ffe5
003db2   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
003db4   ffe5
003db6   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
003db8   ffe5
003dba   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
003dbc   ffe5
003dbe   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
003dc0   ffe5
003dc2   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
003dc4   ffe5
003dc6   0e02     movlw	0x2                	MOVLW	0x02
003dc8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003dca   f000
003dcc   0e03     movlw	0x3                	MOVLW	0x03
003dce   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003dd0   f001
003dd2   0e04     movlw	0x4                	MOVLW	0x04
003dd4   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003dd6   f002
003dd8   0e05     movlw	0x5                	MOVLW	0x05
003dda   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003ddc   f003
003dde   0e06     movlw	0x6                	MOVLW	0x06
003de0   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
003de2   f004
003de4   0e07     movlw	0x7                	MOVLW	0x07
003de6   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
003de8   f005
003dea   0e08     movlw	0x8                	MOVLW	0x08
003dec   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
003dee   f006
003df0   0e09     movlw	0x9                	MOVLW	0x09
003df2   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
003df4   f007
                                           ;	.line	45; TCPIP_Stack/strlcpy.c	char       *d = dst;
003df6   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
003df8   f008
003dfa   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
003dfc   f009
003dfe   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
003e00   f00a
                                           ;	.line	46; TCPIP_Stack/strlcpy.c	const char *s = src;
003e02   c003     movff	0x3, 0xb           	MOVFF	r0x03, r0x0b
003e04   f00b
003e06   c004     movff	0x4, 0xc           	MOVFF	r0x04, r0x0c
003e08   f00c
003e0a   c005     movff	0x5, 0xd           	MOVFF	r0x05, r0x0d
003e0c   f00d
                                           ;	.line	47; TCPIP_Stack/strlcpy.c	size_t      n = siz;
003e0e   c006     movff	0x6, 0xe           	MOVFF	r0x06, r0x0e
003e10   f00e
003e12   c007     movff	0x7, 0xf           	MOVFF	r0x07, r0x0f
003e14   f00f
                                           ;	.line	50; TCPIP_Stack/strlcpy.c	if (n != 0)
003e16   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003e18   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003e1a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003e1c   d03e     bra	0x3e9a               	BRA	_00111_DS_
                                           ;	.line	52; TCPIP_Stack/strlcpy.c	while (--n != 0)
003e1e   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
003e20   f010
003e22   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
003e24   f011
003e26   c005     movff	0x5, 0x12          	MOVFF	r0x05, r0x12
003e28   f012
003e2a   c006     movff	0x6, 0x13          	MOVFF	r0x06, r0x13
003e2c   f013
003e2e   c007     movff	0x7, 0x14          	MOVFF	r0x07, r0x14
003e30   f014
                                           _00107_DS_:
003e32   0eff     movlw	0xff               	MOVLW	0xff
003e34   2613     addwf	0x13, 0x1, 0       	ADDWF	r0x13, F
003e36   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003e38   0614     decf	0x14, 0x1, 0        	DECF	r0x14, F
003e3a   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
003e3c   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
003e3e   e01d     bz	0x3e7a                	BZ	_00126_DS_
                                           ;	.line	54; TCPIP_Stack/strlcpy.c	if ((*d++ = *s++) == '\0')
003e40   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
003e42   ffe9
003e44   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
003e46   fff3
003e48   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
003e4a   ec8d     call	0x7f1a, 0           	CALL	__gptrget1
003e4c   f03f
003e4e   6e15     movwf	0x15, 0            	MOVWF	r0x15
003e50   2a10     incf	0x10, 0x1, 0        	INCF	r0x10, F
003e52   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003e54   2a11     incf	0x11, 0x1, 0        	INCF	r0x11, F
003e56   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003e58   2a12     incf	0x12, 0x1, 0        	INCF	r0x12, F
003e5a   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
003e5c   ffe5
003e5e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003e60   ffe9
003e62   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003e64   fff3
003e66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003e68   ec50     call	0x80a0, 0           	CALL	__gptrput1
003e6a   f040
003e6c   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003e6e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003e70   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003e72   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003e74   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
003e76   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
003e78   e1dc     bnz	0x3e32               	BNZ	_00107_DS_
                                           _00126_DS_:
                                           ;	.line	55; TCPIP_Stack/strlcpy.c	break;
003e7a   c010     movff	0x10, 0xb          	MOVFF	r0x10, r0x0b
003e7c   f00b
003e7e   c011     movff	0x11, 0xc          	MOVFF	r0x11, r0x0c
003e80   f00c
003e82   c012     movff	0x12, 0xd          	MOVFF	r0x12, r0x0d
003e84   f00d
003e86   c000     movff	0, 0x8             	MOVFF	r0x00, r0x08
003e88   f008
003e8a   c001     movff	0x1, 0x9           	MOVFF	r0x01, r0x09
003e8c   f009
003e8e   c002     movff	0x2, 0xa           	MOVFF	r0x02, r0x0a
003e90   f00a
003e92   c013     movff	0x13, 0xe          	MOVFF	r0x13, r0x0e
003e94   f00e
003e96   c014     movff	0x14, 0xf          	MOVFF	r0x14, r0x0f
003e98   f00f
                                           _00111_DS_:
                                           ;	.line	60; TCPIP_Stack/strlcpy.c	if (n == 0)
003e9a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
003e9c   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
003e9e   e127     bnz	0x3eee               	BNZ	_00118_DS_
                                           ;	.line	62; TCPIP_Stack/strlcpy.c	if (siz != 0)
003ea0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003ea2   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
003ea4   e009     bz	0x3eb8                	BZ	_00125_DS_
                                           ;	.line	63; TCPIP_Stack/strlcpy.c	*d = '\0';          /* NUL-terminate dst */
003ea6   0e00     movlw	0                  	MOVLW	0x00
003ea8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003eaa   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
003eac   ffe9
003eae   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
003eb0   fff3
003eb2   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003eb4   ec50     call	0x80a0, 0           	CALL	__gptrput1
003eb6   f040
                                           _00125_DS_:
                                           ;	.line	64; TCPIP_Stack/strlcpy.c	while (*s++)
003eb8   c00b     movff	0xb, 0             	MOVFF	r0x0b, r0x00
003eba   f000
003ebc   c00c     movff	0xc, 0x1           	MOVFF	r0x0c, r0x01
003ebe   f001
003ec0   c00d     movff	0xd, 0x2           	MOVFF	r0x0d, r0x02
003ec2   f002
                                           _00114_DS_:
003ec4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003ec6   ffe9
003ec8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003eca   fff3
003ecc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003ece   ec8d     call	0x7f1a, 0           	CALL	__gptrget1
003ed0   f03f
003ed2   6e06     movwf	0x6, 0             	MOVWF	r0x06
003ed4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003ed6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ed8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003eda   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003edc   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
003ede   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003ee0   e1f1     bnz	0x3ec4               	BNZ	_00114_DS_
003ee2   c000     movff	0, 0xb             	MOVFF	r0x00, r0x0b
003ee4   f00b
003ee6   c001     movff	0x1, 0xc           	MOVFF	r0x01, r0x0c
003ee8   f00c
003eea   c002     movff	0x2, 0xd           	MOVFF	r0x02, r0x0d
003eec   f00d
                                           _00118_DS_:
                                           ;	.line	68; TCPIP_Stack/strlcpy.c	return (s - src - 1);       /* count does not include NUL */
003eee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003ef0   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
003ef2   6e03     movwf	0x3, 0             	MOVWF	r0x03
003ef4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003ef6   580c     subwfb	0xc, 0, 0         	SUBWFB	r0x0c, W
003ef8   6e04     movwf	0x4, 0             	MOVWF	r0x04
003efa   0eff     movlw	0xff               	MOVLW	0xff
003efc   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
003efe   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003f00   0604     decf	0x4, 0x1, 0         	DECF	r0x04, F
003f02   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003f04   fff3
003f06   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003f08   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
003f0a   f015
003f0c   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
003f0e   f014
003f10   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
003f12   f013
003f14   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
003f16   f012
003f18   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
003f1a   f011
003f1c   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
003f1e   f010
003f20   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003f22   f00f
003f24   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003f26   f00e
003f28   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003f2a   f00d
003f2c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003f2e   f00c
003f30   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003f32   f00b
003f34   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003f36   f00a
003f38   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003f3a   f009
003f3c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003f3e   f008
003f40   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003f42   f007
003f44   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003f46   f006
003f48   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003f4a   f005
003f4c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003f4e   f004
003f50   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003f52   f003
003f54   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003f56   f002
003f58   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003f5a   f001
003f5c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003f5e   f000
003f60   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003f62   ffd9
003f64   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  512 (0x0200) bytes ( 0.39%)
                                           ;           	  256 (0x0100) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
